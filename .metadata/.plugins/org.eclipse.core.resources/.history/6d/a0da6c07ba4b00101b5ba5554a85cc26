#include "main.h"
#include "cmsis_os.h"
#include <stdio.h>

#define ADC_READINGS 100
#define HISTORY_SIZE 10

// Variáveis globais
uint16_t bufferADC[ADC_READINGS];
float mediaADC;
float historico[HISTORY_SIZE];
int histIndex = 0;

// Handles dos semáforos
osSemaphoreId_t semStartHandle;
osSemaphoreId_t semCalcHandle;
osSemaphoreId_t semSaveHandle;
osSemaphoreId_t semSendHandle;

// Handle UART (definido no CubeMX ou manualmente)
extern UART_HandleTypeDef huart2;

// Prototipos das tarefas
void TaskADC(void *argument);
void TaskCalc(void *argument);
void TaskSave(void *argument);
void TaskSend(void *argument);

// Função para enviar string pela UART3
void UART_SendString(char *str) {
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}

// Callback da interrupção externa (botão PC13)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
    if (GPIO_Pin == GPIO_PIN_13) {
        // Libera o semáforo que inicia a cadeia de tarefas
        osSemaphoreRelease(semStartHandle);
    }
}

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USART2_UART_Init();
    MX_ADC1_Init();
    // ... outras iniciais

    // Criação dos semáforos binários
    semStartHandle = osSemaphoreNew(1, 0, NULL);
    semCalcHandle = osSemaphoreNew(1, 0, NULL);
    semSaveHandle = osSemaphoreNew(1, 0, NULL);
    semSendHandle = osSemaphoreNew(1, 0, NULL);

    // Criação das tarefas
    osThreadNew(TaskADC, NULL, NULL);
    osThreadNew(TaskCalc, NULL, NULL);
    osThreadNew(TaskSave, NULL, NULL);
    osThreadNew(TaskSend, NULL, NULL);

    // Iniciar scheduler
    osKernelStart();

    while (1) {
    }
}

// Implementação das tarefas

void TaskADC(void *argument) {
    for (;;) {
        // Aguarda o sinal de start
        osSemaphoreAcquire(semStartHandle, osWaitForever);

        // Simula ou faz leitura ADC 100 vezes
        for (int i = 0; i < ADC_READINGS; i++) {
            // Simulação: valor aleatório entre 0 e 4095
            bufferADC[i] = rand() % 4096;

            // Para leitura real, use HAL_ADC_Start / Poll / GetValue
            // HAL_ADC_Start(&hadc1);
            // HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
            // bufferADC[i] = HAL_ADC_GetValue(&hadc1);

            osDelay(10); // Simula tempo de aquisição
        }

        // Libera próxima tarefa (cálculo)
        osSemaphoreRelease(semCalcHandle);
    }
}

void TaskCalc(void *argument) {
    for (;;) {
        // Aguarda sinal de cálculo
        osSemaphoreAcquire(semCalcHandle, osWaitForever);

        uint32_t soma = 0;
        for (int i = 0; i < ADC_READINGS; i++) {
            soma += bufferADC[i];
        }
        mediaADC = (float)soma / ADC_READINGS;

        // Libera próxima tarefa (armazenamento)
        osSemaphoreRelease(semSaveHandle);
    }
}

void TaskSave(void *argument) {
    for (;;) {
        // Aguarda sinal de salvar
        osSemaphoreAcquire(semSaveHandle, osWaitForever);

        // Salva média no histórico circular
        historico[histIndex] = mediaADC;
        histIndex = (histIndex + 1) % HISTORY_SIZE;

        // Libera próxima tarefa (envio UART)
        osSemaphoreRelease(semSendHandle);
    }
}

void TaskSend(void *argument) {
    char buffer[50];
    for (;;) {
        // Aguarda sinal de enviar
        osSemaphoreAcquire(semSendHandle, osWaitForever);

        snprintf(buffer, sizeof(buffer), "Média enviada: %.2f\r\n", mediaADC);
        UART_SendString(buffer);
    }
}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartTaskADC */
/**
  * @brief  Function implementing the TaskStartADC thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskADC */
void StartTaskADC(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_StartTaskCalc */
/**
* @brief Function implementing the TaskCalc thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCalc */
void StartTaskCalc(void *argument)
{
  /* USER CODE BEGIN StartTaskCalc */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END StartTaskCalc */
}

/* USER CODE BEGIN Header_StartSend */
/**
* @brief Function implementing the TaskSend thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSend */
void StartSend(void *argument)
{
  /* USER CODE BEGIN StartSend */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END StartSend */
}

/* USER CODE BEGIN Header_StartTaskSave */
/**
* @brief Function implementing the TaskSave thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSave */
void StartTaskSave(void *argument)
{
  /* USER CODE BEGIN StartTaskSave */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END StartTaskSave */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
  {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
