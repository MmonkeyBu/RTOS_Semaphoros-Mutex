/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body - Exercício 5 Corrigido
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include <string.h>
#include <stdio.h>

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
UART_HandleTypeDef huart2;

/* Definitions for TaskADC */
osThreadId_t TaskADCHandle;
const osThreadAttr_t TaskADC_attributes = {
  .name = "TaskADC",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for TaskCalc */
osThreadId_t TaskCalcHandle;
const osThreadAttr_t TaskCalc_attributes = {
  .name = "TaskCalc",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for TaskSend */
osThreadId_t TaskSendHandle;
const osThreadAttr_t TaskSend_attributes = {
  .name = "TaskSend",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for semCalcHandle - Sinaliza que ADC terminou */
osSemaphoreId_t semCalcHandleHandle;
const osSemaphoreAttr_t semCalcHandle_attributes = {
  .name = "semCalcHandle"
};
/* Definitions for semSendHandle - Sinaliza que Calc terminou */
osSemaphoreId_t semSendHandleHandle;
const osSemaphoreAttr_t semSendHandle_attributes = {
  .name = "semSendHandle"
};

/* USER CODE BEGIN PV */
uint32_t adc_samples[100];           // Buffer para 100 amostras ADC
float media_calculada = 0.0;         // Média calculada
volatile uint8_t processo_ativo = 0; // Flag para controle do processo
volatile uint8_t ciclo_atual = 0;    // Contador de ciclos (0-9)
volatile uint8_t botao_pressionado = 0; // Flag de botão
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);
void StartTaskADC(void *argument);
void StartTaskCalc(void *argument);
void StartTaskSend(void *argument);

/* USER CODE BEGIN PFP */
void StartProcess(void);
void UART_Send_String(char* str);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* CORREÇÃO: Criar semáforos binários com 0 tokens iniciais */
  semCalcHandleHandle = osSemaphoreNew(1, 0, &semCalcHandle_attributes);
  semSendHandleHandle = osSemaphoreNew(1, 0, &semSendHandle_attributes);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  TaskADCHandle = osThreadNew(StartTaskADC, NULL, &TaskADC_attributes);
  TaskCalcHandle = osThreadNew(StartTaskCalc, NULL, &TaskCalc_attributes);
  TaskSendHandle = osThreadNew(StartTaskSend, NULL, &TaskSend_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin : PC13 (Blue Button) */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // CORREÇÃO: FALLING para detectar pressão
  GPIO_InitStruct.Pull = GPIO_PULLUP;          // CORREÇÃO: Pull-up interno
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
/**
  * @brief  Envia string via UART de forma simplificada
  * @param  str: String a ser enviada
  * @retval None
  */
void UART_Send_String(char* str)
{
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}

/**
  * @brief  Inicia o processo de coleta e processamento
  * @param  None
  * @retval None
  */
void StartProcess(void)
{
    if (!processo_ativo) {
        UART_Send_String("\n=== INICIANDO PROCESSO ===\n");
        processo_ativo = 1;
        ciclo_atual = 0;
        // Inicia o primeiro ciclo liberando a TaskADC
        osSemaphoreRelease(semCalcHandleHandle);
    }
}

/**
  * @brief EXTI line detection callback.
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    if (GPIO_Pin == GPIO_PIN_13) {
        botao_pressionado = 1; // Seta flag para tratamento na main thread
    }
}
/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartTaskADC */
/**
  * @brief  Function implementing the TaskADC thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskADC */
void StartTaskADC(void *argument)
{
  /* USER CODE BEGIN 5 */
  UART_Send_String("TaskADC: Iniciada e aguardando...\n");

  /* Infinite loop */
  for(;;)
  {
    // Aguarda sinal para iniciar coleta (do botão ou da TaskSend)
    if (osSemaphoreAcquire(semCalcHandleHandle, osWaitForever) == osOK) {

      if (processo_ativo) {
        char msg[100];
        sprintf(msg, "TaskADC: Coletando 100 amostras - Ciclo %d/10\n", ciclo_atual + 1);
        UART_Send_String(msg);

        // Coleta 100 amostras ADC
        for(int i = 0; i < 100; i++) {
          HAL_ADC_Start(&hadc1);
          if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
            adc_samples[i] = HAL_ADC_GetValue(&hadc1);
          } else {
            adc_samples[i] = 0; // Valor padrão em caso de erro
          }
          HAL_ADC_Stop(&hadc1);
          osDelay(5); // Pequeno delay entre amostras
        }

        UART_Send_String("TaskADC: 100 amostras coletadas! Liberando semCalcHandle\n");

        // Libera semáforo para TaskCalc processar
        osSemaphoreRelease(semCalcHandleHandle);
      }
    }
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_StartTaskCalc */
/**
* @brief Function implementing the TaskCalc thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCalc */
void StartTaskCalc(void *argument)
{
  /* USER CODE BEGIN StartTaskCalc */
  UART_Send_String("TaskCalc: Iniciada e aguardando...\n");

  /* Infinite loop */
  for(;;)
  {
    // Aguarda sinal da TaskADC
    if (osSemaphoreAcquire(semCalcHandleHandle, osWaitForever) == osOK) {

      if (processo_ativo) {
        UART_Send_String("TaskCalc: Calculando média das 100 amostras...\n");

        // Calcula média das amostras
        uint32_t soma = 0;
        for(int i = 0; i < 100; i++) {
          soma += adc_samples[i];
        }
        media_calculada = (float)soma / 100.0f;

        char msg[100];
        sprintf(msg, "TaskCalc: Média = %.2f (Raw: %lu). Liberando semSendHandle\n",
                media_calculada, (unsigned long)soma);
        UART_Send_String(msg);

        // Libera semáforo para TaskSend enviar resultado
        osSemaphoreRelease(semSendHandleHandle);
      }
    }
  }
  /* USER CODE END StartTaskCalc */
}

/* USER CODE BEGIN Header_StartTaskSend */
/**
* @brief Function implementing the TaskSend thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSend */
void StartTaskSend(void *argument)
{
  /* USER CODE BEGIN StartTaskSend */
  UART_Send_String("TaskSend: Iniciada e aguardando...\n");
  UART_Send_String("Processo concluído. Aguardando botão...\n\n");

  /* Infinite loop */
  for(;;)
  {
    // Verifica se botão foi pressionado
    if (botao_pressionado && !processo_ativo) {
      botao_pressionado = 0; // Limpa flag
      StartProcess();
    }

    // Aguarda sinal da TaskCalc
    if (osSemaphoreAcquire(semSendHandleHandle, 100) == osOK) {

      if (processo_ativo) {
        // Envia resultado via UART
        char resultado[150];
        sprintf(resultado, ">>> RESULTADO %d/10: Média ADC = %.2f <<<\n",
                ciclo_atual + 1, media_calculada);
        UART_Send_String(resultado);

        ciclo_atual++;

        // Verifica se completou 10 ciclos
        if (ciclo_atual >= 10) {
          UART_Send_String("\n=== PROCESSO CONCLUÍDO ===\n");
          UART_Send_String("Processo concluído. Aguardando botão...\n\n");

          // Finaliza processo
          processo_ativo = 0;
          ciclo_atual = 0;
        } else {
          // Continua próximo ciclo - libera TaskADC
          char msg[50];
          sprintf(msg, "Iniciando próximo ciclo (%d/10)...\n\n", ciclo_atual + 1);
          UART_Send_String(msg);

          osSemaphoreRelease(semCalcHandleHandle);
        }
      }
    }

    osDelay(10); // Pequeno delay para não sobrecarregar
  }
  /* USER CODE END StartTaskSend */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
  {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
