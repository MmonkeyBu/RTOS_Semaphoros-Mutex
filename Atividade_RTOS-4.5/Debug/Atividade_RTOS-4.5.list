
Atividade_RTOS-4.5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a284  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  0800a458  0800a458  0000b458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aae4  0800aae4  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aae4  0800aae4  0000bae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaec  0800aaec  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaec  0800aaec  0000baec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aaf0  0800aaf0  0000baf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800aaf4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004de0  200001d8  0800accc  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004fb8  0800accc  0000cfb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a353  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003882  00000000  00000000  0002655b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  00029de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000112a  00000000  00000000  0002b3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004789  00000000  00000000  0002c522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fb1  00000000  00000000  00030cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9ef3  00000000  00000000  00049c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133b4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e7c  00000000  00000000  00133b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0013aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a43c 	.word	0x0800a43c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800a43c 	.word	0x0800a43c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8000f18:	f000 fd8a 	bl	8001a30 <HAL_Init>
  SystemClock_Config();
 8000f1c:	f000 f9f4 	bl	8001308 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f20:	f000 face 	bl	80014c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f24:	f000 fa50 	bl	80013c8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f28:	f000 faa0 	bl	800146c <MX_USART2_UART_Init>

  /* Init scheduler */
  osKernelInitialize();
 8000f2c:	f003 f8e0 	bl	80040f0 <osKernelInitialize>

  /* Create the semaphores(s) */
  /* CORREÇÃO: Criar todos os semáforos necessários */
  semStartADCHandle = osSemaphoreNew(1, 0, &semStartADC_attributes);  // Inicia com 0
 8000f30:	4a19      	ldr	r2, [pc, #100]	@ (8000f98 <main+0x84>)
 8000f32:	2100      	movs	r1, #0
 8000f34:	2001      	movs	r0, #1
 8000f36:	f003 f9d2 	bl	80042de <osSemaphoreNew>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a17      	ldr	r2, [pc, #92]	@ (8000f9c <main+0x88>)
 8000f3e:	6013      	str	r3, [r2, #0]
  semCalcHandleHandle = osSemaphoreNew(1, 0, &semCalcHandle_attributes); // Inicia com 0
 8000f40:	4a17      	ldr	r2, [pc, #92]	@ (8000fa0 <main+0x8c>)
 8000f42:	2100      	movs	r1, #0
 8000f44:	2001      	movs	r0, #1
 8000f46:	f003 f9ca 	bl	80042de <osSemaphoreNew>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a15      	ldr	r2, [pc, #84]	@ (8000fa4 <main+0x90>)
 8000f4e:	6013      	str	r3, [r2, #0]
  semSendHandleHandle = osSemaphoreNew(1, 0, &semSendHandle_attributes); // Inicia com 0
 8000f50:	4a15      	ldr	r2, [pc, #84]	@ (8000fa8 <main+0x94>)
 8000f52:	2100      	movs	r1, #0
 8000f54:	2001      	movs	r0, #1
 8000f56:	f003 f9c2 	bl	80042de <osSemaphoreNew>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a13      	ldr	r2, [pc, #76]	@ (8000fac <main+0x98>)
 8000f5e:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  TaskADCHandle = osThreadNew(StartTaskADC, NULL, &TaskADC_attributes);
 8000f60:	4a13      	ldr	r2, [pc, #76]	@ (8000fb0 <main+0x9c>)
 8000f62:	2100      	movs	r1, #0
 8000f64:	4813      	ldr	r0, [pc, #76]	@ (8000fb4 <main+0xa0>)
 8000f66:	f003 f90d 	bl	8004184 <osThreadNew>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a12      	ldr	r2, [pc, #72]	@ (8000fb8 <main+0xa4>)
 8000f6e:	6013      	str	r3, [r2, #0]
  TaskCalcHandle = osThreadNew(StartTaskCalc, NULL, &TaskCalc_attributes);
 8000f70:	4a12      	ldr	r2, [pc, #72]	@ (8000fbc <main+0xa8>)
 8000f72:	2100      	movs	r1, #0
 8000f74:	4812      	ldr	r0, [pc, #72]	@ (8000fc0 <main+0xac>)
 8000f76:	f003 f905 	bl	8004184 <osThreadNew>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a11      	ldr	r2, [pc, #68]	@ (8000fc4 <main+0xb0>)
 8000f7e:	6013      	str	r3, [r2, #0]
  TaskSendHandle = osThreadNew(StartTaskSend, NULL, &TaskSend_attributes);
 8000f80:	4a11      	ldr	r2, [pc, #68]	@ (8000fc8 <main+0xb4>)
 8000f82:	2100      	movs	r1, #0
 8000f84:	4811      	ldr	r0, [pc, #68]	@ (8000fcc <main+0xb8>)
 8000f86:	f003 f8fd 	bl	8004184 <osThreadNew>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a10      	ldr	r2, [pc, #64]	@ (8000fd0 <main+0xbc>)
 8000f8e:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8000f90:	f003 f8d2 	bl	8004138 <osKernelStart>

  /* Infinite loop */
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <main+0x80>
 8000f98:	0800a724 	.word	0x0800a724
 8000f9c:	20000290 	.word	0x20000290
 8000fa0:	0800a734 	.word	0x0800a734
 8000fa4:	20000294 	.word	0x20000294
 8000fa8:	0800a744 	.word	0x0800a744
 8000fac:	20000298 	.word	0x20000298
 8000fb0:	0800a6b8 	.word	0x0800a6b8
 8000fb4:	08001069 	.word	0x08001069
 8000fb8:	20000284 	.word	0x20000284
 8000fbc:	0800a6dc 	.word	0x0800a6dc
 8000fc0:	08001139 	.word	0x08001139
 8000fc4:	20000288 	.word	0x20000288
 8000fc8:	0800a700 	.word	0x0800a700
 8000fcc:	080011fd 	.word	0x080011fd
 8000fd0:	2000028c 	.word	0x2000028c

08000fd4 <UART_Send_String>:
  * @brief  Envia string via UART de forma simplificada
  * @param  str: String a ser enviada
  * @retval None
  */
void UART_Send_String(char* str)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff f967 	bl	80002b0 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4803      	ldr	r0, [pc, #12]	@ (8000ffc <UART_Send_String+0x28>)
 8000fee:	f002 fc7f 	bl	80038f0 <HAL_UART_Transmit>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000023c 	.word	0x2000023c

08001000 <StartProcess>:
  * @brief  Inicia o processo de coleta e processamento
  * @param  None
  * @retval None
  */
void StartProcess(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    if (!processo_ativo) {
 8001004:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <StartProcess+0x30>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10d      	bne.n	800102a <StartProcess+0x2a>
        UART_Send_String("\n=== INICIANDO PROCESSO ===\n");
 800100e:	4809      	ldr	r0, [pc, #36]	@ (8001034 <StartProcess+0x34>)
 8001010:	f7ff ffe0 	bl	8000fd4 <UART_Send_String>
        processo_ativo = 1;
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <StartProcess+0x30>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
        ciclo_atual = 0;
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <StartProcess+0x38>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
        //Libera semáforo para iniciar TaskADC
        osSemaphoreRelease(semStartADCHandle);
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <StartProcess+0x3c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f003 fa35 	bl	8004494 <osSemaphoreRelease>
    }
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000430 	.word	0x20000430
 8001034:	0800a4a4 	.word	0x0800a4a4
 8001038:	20000431 	.word	0x20000431
 800103c:	20000290 	.word	0x20000290

08001040 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callback.
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) {
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001050:	d102      	bne.n	8001058 <HAL_GPIO_EXTI_Callback+0x18>
        botao_pressionado = 1; // Seta flag para tratamento na TaskSend
 8001052:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <HAL_GPIO_EXTI_Callback+0x24>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
    }
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	20000432 	.word	0x20000432

08001068 <StartTaskADC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskADC */
void StartTaskADC(void *argument)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b09c      	sub	sp, #112	@ 0x70
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  UART_Send_String("TaskADC: Iniciada e aguardando...\n");
 8001070:	4828      	ldr	r0, [pc, #160]	@ (8001114 <StartTaskADC+0xac>)
 8001072:	f7ff ffaf 	bl	8000fd4 <UART_Send_String>

  /* Infinite loop */
  for(;;)
  {
    // CORREÇÃO: Aguarda semáforo específico para iniciar coleta
    if (osSemaphoreAcquire(semStartADCHandle, osWaitForever) == osOK) {
 8001076:	4b28      	ldr	r3, [pc, #160]	@ (8001118 <StartTaskADC+0xb0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f04f 31ff 	mov.w	r1, #4294967295
 800107e:	4618      	mov	r0, r3
 8001080:	f003 f9b6 	bl	80043f0 <osSemaphoreAcquire>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f5      	bne.n	8001076 <StartTaskADC+0xe>

      if (processo_ativo) {
 800108a:	4b24      	ldr	r3, [pc, #144]	@ (800111c <StartTaskADC+0xb4>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0f0      	beq.n	8001076 <StartTaskADC+0xe>
        char msg[100];
        sprintf(msg, "TaskADC: Coletando 100 amostras - Ciclo %d/10\n", ciclo_atual + 1);
 8001094:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <StartTaskADC+0xb8>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	4920      	ldr	r1, [pc, #128]	@ (8001124 <StartTaskADC+0xbc>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f007 f838 	bl	8008118 <siprintf>
        UART_Send_String(msg);
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff91 	bl	8000fd4 <UART_Send_String>

        // Coleta 100 amostras ADC
        for(int i = 0; i < 100; i++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80010b6:	e020      	b.n	80010fa <StartTaskADC+0x92>
          HAL_ADC_Start(&hadc1);
 80010b8:	481b      	ldr	r0, [pc, #108]	@ (8001128 <StartTaskADC+0xc0>)
 80010ba:	f000 fd3f 	bl	8001b3c <HAL_ADC_Start>
          if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 80010be:	2164      	movs	r1, #100	@ 0x64
 80010c0:	4819      	ldr	r0, [pc, #100]	@ (8001128 <StartTaskADC+0xc0>)
 80010c2:	f000 fe40 	bl	8001d46 <HAL_ADC_PollForConversion>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d108      	bne.n	80010de <StartTaskADC+0x76>
            adc_samples[i] = HAL_ADC_GetValue(&hadc1);
 80010cc:	4816      	ldr	r0, [pc, #88]	@ (8001128 <StartTaskADC+0xc0>)
 80010ce:	f000 fec5 	bl	8001e5c <HAL_ADC_GetValue>
 80010d2:	4602      	mov	r2, r0
 80010d4:	4915      	ldr	r1, [pc, #84]	@ (800112c <StartTaskADC+0xc4>)
 80010d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80010dc:	e004      	b.n	80010e8 <StartTaskADC+0x80>
          } else {
            adc_samples[i] = 0; // Valor padrão em caso de erro
 80010de:	4a13      	ldr	r2, [pc, #76]	@ (800112c <StartTaskADC+0xc4>)
 80010e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010e2:	2100      	movs	r1, #0
 80010e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          }
          HAL_ADC_Stop(&hadc1);
 80010e8:	480f      	ldr	r0, [pc, #60]	@ (8001128 <StartTaskADC+0xc0>)
 80010ea:	f000 fdf9 	bl	8001ce0 <HAL_ADC_Stop>
          osDelay(5); // Pequeno delay entre amostras
 80010ee:	2005      	movs	r0, #5
 80010f0:	f003 f8da 	bl	80042a8 <osDelay>
        for(int i = 0; i < 100; i++) {
 80010f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010f6:	3301      	adds	r3, #1
 80010f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80010fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010fc:	2b63      	cmp	r3, #99	@ 0x63
 80010fe:	dddb      	ble.n	80010b8 <StartTaskADC+0x50>
        }

        UART_Send_String("TaskADC: 100 amostras coletadas! Liberando TaskCalc\n");
 8001100:	480b      	ldr	r0, [pc, #44]	@ (8001130 <StartTaskADC+0xc8>)
 8001102:	f7ff ff67 	bl	8000fd4 <UART_Send_String>

        // Libera semáforo para TaskCalc processar
        osSemaphoreRelease(semCalcHandleHandle);
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <StartTaskADC+0xcc>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f003 f9c2 	bl	8004494 <osSemaphoreRelease>
    if (osSemaphoreAcquire(semStartADCHandle, osWaitForever) == osOK) {
 8001110:	e7b1      	b.n	8001076 <StartTaskADC+0xe>
 8001112:	bf00      	nop
 8001114:	0800a4c4 	.word	0x0800a4c4
 8001118:	20000290 	.word	0x20000290
 800111c:	20000430 	.word	0x20000430
 8001120:	20000431 	.word	0x20000431
 8001124:	0800a4e8 	.word	0x0800a4e8
 8001128:	200001f4 	.word	0x200001f4
 800112c:	2000029c 	.word	0x2000029c
 8001130:	0800a518 	.word	0x0800a518
 8001134:	20000294 	.word	0x20000294

08001138 <StartTaskCalc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCalc */
void StartTaskCalc(void *argument)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0a0      	sub	sp, #128	@ 0x80
 800113c:	af02      	add	r7, sp, #8
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskCalc */
  UART_Send_String("TaskCalc: Iniciada e aguardando...\n");
 8001140:	4825      	ldr	r0, [pc, #148]	@ (80011d8 <StartTaskCalc+0xa0>)
 8001142:	f7ff ff47 	bl	8000fd4 <UART_Send_String>

  /* Infinite loop */
  for(;;)
  {
    //Aguarda sinal  da TaskADC
    if (osSemaphoreAcquire(semCalcHandleHandle, osWaitForever) == osOK) {
 8001146:	4b25      	ldr	r3, [pc, #148]	@ (80011dc <StartTaskCalc+0xa4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f04f 31ff 	mov.w	r1, #4294967295
 800114e:	4618      	mov	r0, r3
 8001150:	f003 f94e 	bl	80043f0 <osSemaphoreAcquire>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f5      	bne.n	8001146 <StartTaskCalc+0xe>

      if (processo_ativo) {
 800115a:	4b21      	ldr	r3, [pc, #132]	@ (80011e0 <StartTaskCalc+0xa8>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f0      	beq.n	8001146 <StartTaskCalc+0xe>
        UART_Send_String("TaskCalc: Calculando media das 100 amostras...\n");
 8001164:	481f      	ldr	r0, [pc, #124]	@ (80011e4 <StartTaskCalc+0xac>)
 8001166:	f7ff ff35 	bl	8000fd4 <UART_Send_String>

        // Calcula a media
        uint32_t soma = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	677b      	str	r3, [r7, #116]	@ 0x74
        for(int i = 0; i < 100; i++) {
 800116e:	2300      	movs	r3, #0
 8001170:	673b      	str	r3, [r7, #112]	@ 0x70
 8001172:	e009      	b.n	8001188 <StartTaskCalc+0x50>
          soma += adc_samples[i];
 8001174:	4a1c      	ldr	r2, [pc, #112]	@ (80011e8 <StartTaskCalc+0xb0>)
 8001176:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800117e:	4413      	add	r3, r2
 8001180:	677b      	str	r3, [r7, #116]	@ 0x74
        for(int i = 0; i < 100; i++) {
 8001182:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001184:	3301      	adds	r3, #1
 8001186:	673b      	str	r3, [r7, #112]	@ 0x70
 8001188:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800118a:	2b63      	cmp	r3, #99	@ 0x63
 800118c:	ddf2      	ble.n	8001174 <StartTaskCalc+0x3c>
        }
        media_calculada = (float)soma / 100.0f;
 800118e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001198:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80011ec <StartTaskCalc+0xb4>
 800119c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a0:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <StartTaskCalc+0xb8>)
 80011a2:	edc3 7a00 	vstr	s15, [r3]

        char msg[100];
        sprintf(msg, "TaskCalc: Media = %.2f (Raw: %lu). Liberando TaskSend\n",
 80011a6:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <StartTaskCalc+0xb8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9ec 	bl	8000588 <__aeabi_f2d>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	f107 000c 	add.w	r0, r7, #12
 80011b8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80011ba:	9100      	str	r1, [sp, #0]
 80011bc:	490d      	ldr	r1, [pc, #52]	@ (80011f4 <StartTaskCalc+0xbc>)
 80011be:	f006 ffab 	bl	8008118 <siprintf>
                media_calculada, (unsigned long)soma);
        UART_Send_String(msg);
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff04 	bl	8000fd4 <UART_Send_String>

        // Liberando semaforo
        osSemaphoreRelease(semSendHandleHandle);
 80011cc:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <StartTaskCalc+0xc0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 f95f 	bl	8004494 <osSemaphoreRelease>
    if (osSemaphoreAcquire(semCalcHandleHandle, osWaitForever) == osOK) {
 80011d6:	e7b6      	b.n	8001146 <StartTaskCalc+0xe>
 80011d8:	0800a550 	.word	0x0800a550
 80011dc:	20000294 	.word	0x20000294
 80011e0:	20000430 	.word	0x20000430
 80011e4:	0800a574 	.word	0x0800a574
 80011e8:	2000029c 	.word	0x2000029c
 80011ec:	42c80000 	.word	0x42c80000
 80011f0:	2000042c 	.word	0x2000042c
 80011f4:	0800a5a4 	.word	0x0800a5a4
 80011f8:	20000298 	.word	0x20000298

080011fc <StartTaskSend>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSend */
void StartTaskSend(void *argument)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b0b9      	sub	sp, #228	@ 0xe4
 8001200:	af02      	add	r7, sp, #8
 8001202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSend */
  UART_Send_String("TaskSend: Iniciada e aguardando...\n");
 8001204:	4835      	ldr	r0, [pc, #212]	@ (80012dc <StartTaskSend+0xe0>)
 8001206:	f7ff fee5 	bl	8000fd4 <UART_Send_String>
  UART_Send_String("Processo concluido. Aguardando botao...\n\n");
 800120a:	4835      	ldr	r0, [pc, #212]	@ (80012e0 <StartTaskSend+0xe4>)
 800120c:	f7ff fee2 	bl	8000fd4 <UART_Send_String>

  /* Infinite loop */
  for(;;)
  {
    // CORREÇÃO: Verifica botão apenas quando processo não está ativo
    if (botao_pressionado && !processo_ativo) {
 8001210:	4b34      	ldr	r3, [pc, #208]	@ (80012e4 <StartTaskSend+0xe8>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d009      	beq.n	800122e <StartTaskSend+0x32>
 800121a:	4b33      	ldr	r3, [pc, #204]	@ (80012e8 <StartTaskSend+0xec>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d104      	bne.n	800122e <StartTaskSend+0x32>
      botao_pressionado = 0; // Limpa flag
 8001224:	4b2f      	ldr	r3, [pc, #188]	@ (80012e4 <StartTaskSend+0xe8>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
      StartProcess();
 800122a:	f7ff fee9 	bl	8001000 <StartProcess>
    }

    // Aguarda sinal da TaskCalc
    if (osSemaphoreAcquire(semSendHandleHandle, 100) == osOK) {
 800122e:	4b2f      	ldr	r3, [pc, #188]	@ (80012ec <StartTaskSend+0xf0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2164      	movs	r1, #100	@ 0x64
 8001234:	4618      	mov	r0, r3
 8001236:	f003 f8db 	bl	80043f0 <osSemaphoreAcquire>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d149      	bne.n	80012d4 <StartTaskSend+0xd8>

      if (processo_ativo) {
 8001240:	4b29      	ldr	r3, [pc, #164]	@ (80012e8 <StartTaskSend+0xec>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d044      	beq.n	80012d4 <StartTaskSend+0xd8>
        // Envia resultado via UART
        char resultado[150];
        sprintf(resultado, ">>> RESULTADO %d/10: media ADC = %.2f <<<\n",
 800124a:	4b29      	ldr	r3, [pc, #164]	@ (80012f0 <StartTaskSend+0xf4>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	1c5c      	adds	r4, r3, #1
 8001252:	4b28      	ldr	r3, [pc, #160]	@ (80012f4 <StartTaskSend+0xf8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f996 	bl	8000588 <__aeabi_f2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001264:	e9cd 2300 	strd	r2, r3, [sp]
 8001268:	4622      	mov	r2, r4
 800126a:	4923      	ldr	r1, [pc, #140]	@ (80012f8 <StartTaskSend+0xfc>)
 800126c:	f006 ff54 	bl	8008118 <siprintf>
                ciclo_atual + 1, media_calculada);
        UART_Send_String(resultado);
 8001270:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fead 	bl	8000fd4 <UART_Send_String>

        ciclo_atual++;
 800127a:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <StartTaskSend+0xf4>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	3301      	adds	r3, #1
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <StartTaskSend+0xf4>)
 8001286:	701a      	strb	r2, [r3, #0]

        // Verifica se completou 10 ciclos
        if (ciclo_atual >= 10) {
 8001288:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <StartTaskSend+0xf4>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b09      	cmp	r3, #9
 8001290:	d90c      	bls.n	80012ac <StartTaskSend+0xb0>
          UART_Send_String("\n=== PROCESSO CONCLUIDO ===\n");
 8001292:	481a      	ldr	r0, [pc, #104]	@ (80012fc <StartTaskSend+0x100>)
 8001294:	f7ff fe9e 	bl	8000fd4 <UART_Send_String>
          UART_Send_String("Processo concluido. Aguardando botao...\n\n");
 8001298:	4811      	ldr	r0, [pc, #68]	@ (80012e0 <StartTaskSend+0xe4>)
 800129a:	f7ff fe9b 	bl	8000fd4 <UART_Send_String>

          // Finaliza processo
          processo_ativo = 0;
 800129e:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <StartTaskSend+0xec>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
          ciclo_atual = 0;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <StartTaskSend+0xf4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	e013      	b.n	80012d4 <StartTaskSend+0xd8>
        } else {
          // CORREÇÃO: Continua próximo ciclo - libera TaskADC corretamente
          char msg[50];
          sprintf(msg, "Iniciando proximo ciclo (%d/10)...\n\n", ciclo_atual + 1);
 80012ac:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <StartTaskSend+0xf4>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4911      	ldr	r1, [pc, #68]	@ (8001300 <StartTaskSend+0x104>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f006 ff2c 	bl	8008118 <siprintf>
          UART_Send_String(msg);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fe85 	bl	8000fd4 <UART_Send_String>

          // Libera TaskADC para próximo ciclo
          osSemaphoreRelease(semStartADCHandle);
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <StartTaskSend+0x108>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 f8e0 	bl	8004494 <osSemaphoreRelease>
        }
      }
    }

    osDelay(10); // Pequeno delay para não sobrecarregar
 80012d4:	200a      	movs	r0, #10
 80012d6:	f002 ffe7 	bl	80042a8 <osDelay>
    if (botao_pressionado && !processo_ativo) {
 80012da:	e799      	b.n	8001210 <StartTaskSend+0x14>
 80012dc:	0800a5dc 	.word	0x0800a5dc
 80012e0:	0800a600 	.word	0x0800a600
 80012e4:	20000432 	.word	0x20000432
 80012e8:	20000430 	.word	0x20000430
 80012ec:	20000298 	.word	0x20000298
 80012f0:	20000431 	.word	0x20000431
 80012f4:	2000042c 	.word	0x2000042c
 80012f8:	0800a62c 	.word	0x0800a62c
 80012fc:	0800a658 	.word	0x0800a658
 8001300:	0800a678 	.word	0x0800a678
 8001304:	20000290 	.word	0x20000290

08001308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b094      	sub	sp, #80	@ 0x50
 800130c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	2234      	movs	r2, #52	@ 0x34
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f006 ff63 	bl	80081e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	4b23      	ldr	r3, [pc, #140]	@ (80013c0 <SystemClock_Config+0xb8>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	4a22      	ldr	r2, [pc, #136]	@ (80013c0 <SystemClock_Config+0xb8>)
 8001336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800133a:	6413      	str	r3, [r2, #64]	@ 0x40
 800133c:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <SystemClock_Config+0xb8>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001348:	2300      	movs	r3, #0
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <SystemClock_Config+0xbc>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001354:	4a1b      	ldr	r2, [pc, #108]	@ (80013c4 <SystemClock_Config+0xbc>)
 8001356:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <SystemClock_Config+0xbc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001368:	2302      	movs	r3, #2
 800136a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800136c:	2301      	movs	r3, #1
 800136e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001370:	2310      	movs	r3, #16
 8001372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001374:	2300      	movs	r3, #0
 8001376:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4618      	mov	r0, r3
 800137e:	f001 fd2d 	bl	8002ddc <HAL_RCC_OscConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001388:	f000 f8f2 	bl	8001570 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138c:	230f      	movs	r3, #15
 800138e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 fa22 	bl	80027f0 <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013b2:	f000 f8dd 	bl	8001570 <Error_Handler>
  }
}
 80013b6:	bf00      	nop
 80013b8:	3750      	adds	r7, #80	@ 0x50
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40007000 	.word	0x40007000

080013c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80013ce:	463b      	mov	r3, r7
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 80013da:	4b21      	ldr	r3, [pc, #132]	@ (8001460 <MX_ADC1_Init+0x98>)
 80013dc:	4a21      	ldr	r2, [pc, #132]	@ (8001464 <MX_ADC1_Init+0x9c>)
 80013de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <MX_ADC1_Init+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001460 <MX_ADC1_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001460 <MX_ADC1_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <MX_ADC1_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013f8:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <MX_ADC1_Init+0x98>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001400:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <MX_ADC1_Init+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001406:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <MX_ADC1_Init+0x98>)
 8001408:	4a17      	ldr	r2, [pc, #92]	@ (8001468 <MX_ADC1_Init+0xa0>)
 800140a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800140c:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <MX_ADC1_Init+0x98>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001412:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <MX_ADC1_Init+0x98>)
 8001414:	2201      	movs	r2, #1
 8001416:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001418:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <MX_ADC1_Init+0x98>)
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001420:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <MX_ADC1_Init+0x98>)
 8001422:	2201      	movs	r2, #1
 8001424:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001426:	480e      	ldr	r0, [pc, #56]	@ (8001460 <MX_ADC1_Init+0x98>)
 8001428:	f000 fb44 	bl	8001ab4 <HAL_ADC_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001432:	f000 f89d 	bl	8001570 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_0;
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800143e:	2301      	movs	r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001442:	463b      	mov	r3, r7
 8001444:	4619      	mov	r1, r3
 8001446:	4806      	ldr	r0, [pc, #24]	@ (8001460 <MX_ADC1_Init+0x98>)
 8001448:	f000 fd16 	bl	8001e78 <HAL_ADC_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001452:	f000 f88d 	bl	8001570 <Error_Handler>
  }
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200001f4 	.word	0x200001f4
 8001464:	40012000 	.word	0x40012000
 8001468:	0f000001 	.word	0x0f000001

0800146c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001470:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001472:	4a12      	ldr	r2, [pc, #72]	@ (80014bc <MX_USART2_UART_Init+0x50>)
 8001474:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001478:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800147c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <MX_USART2_UART_Init+0x4c>)
 80014a4:	f002 f9d4 	bl	8003850 <HAL_UART_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ae:	f000 f85f 	bl	8001570 <Error_Handler>
  }
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000023c 	.word	0x2000023c
 80014bc:	40004400 	.word	0x40004400

080014c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <MX_GPIO_Init+0x84>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a19      	ldr	r2, [pc, #100]	@ (8001544 <MX_GPIO_Init+0x84>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <MX_GPIO_Init+0x84>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <MX_GPIO_Init+0x84>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <MX_GPIO_Init+0x84>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	@ 0x30
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <MX_GPIO_Init+0x84>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 (Blue Button) */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800150e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001514:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001518:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151a:	2301      	movs	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	4619      	mov	r1, r3
 8001524:	4808      	ldr	r0, [pc, #32]	@ (8001548 <MX_GPIO_Init+0x88>)
 8001526:	f000 ffb7 	bl	8002498 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2105      	movs	r1, #5
 800152e:	2028      	movs	r0, #40	@ 0x28
 8001530:	f000 ff88 	bl	8002444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001534:	2028      	movs	r0, #40	@ 0x28
 8001536:	f000 ffa1 	bl	800247c <HAL_NVIC_EnableIRQ>
}
 800153a:	bf00      	nop
 800153c:	3720      	adds	r7, #32
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	40020800 	.word	0x40020800

0800154c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a04      	ldr	r2, [pc, #16]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d101      	bne.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800155e:	f000 fa89 	bl	8001a74 <HAL_IncTick>
  }
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40010000 	.word	0x40010000

08001570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
}
 8001576:	bf00      	nop
  __disable_irq();
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <Error_Handler+0x8>

0800157c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <HAL_MspInit+0x54>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158a:	4a11      	ldr	r2, [pc, #68]	@ (80015d0 <HAL_MspInit+0x54>)
 800158c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001590:	6453      	str	r3, [r2, #68]	@ 0x44
 8001592:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <HAL_MspInit+0x54>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <HAL_MspInit+0x54>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	4a0a      	ldr	r2, [pc, #40]	@ (80015d0 <HAL_MspInit+0x54>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <HAL_MspInit+0x54>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	210f      	movs	r1, #15
 80015be:	f06f 0001 	mvn.w	r0, #1
 80015c2:	f000 ff3f 	bl	8002444 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a17      	ldr	r2, [pc, #92]	@ (8001650 <HAL_ADC_MspInit+0x7c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d127      	bne.n	8001646 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <HAL_ADC_MspInit+0x80>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	4a15      	ldr	r2, [pc, #84]	@ (8001654 <HAL_ADC_MspInit+0x80>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001604:	6453      	str	r3, [r2, #68]	@ 0x44
 8001606:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <HAL_ADC_MspInit+0x80>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <HAL_ADC_MspInit+0x80>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a0e      	ldr	r2, [pc, #56]	@ (8001654 <HAL_ADC_MspInit+0x80>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <HAL_ADC_MspInit+0x80>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800162e:	2301      	movs	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001632:	2303      	movs	r3, #3
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	@ (8001658 <HAL_ADC_MspInit+0x84>)
 8001642:	f000 ff29 	bl	8002498 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	@ 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40012000 	.word	0x40012000
 8001654:	40023800 	.word	0x40023800
 8001658:	40020000 	.word	0x40020000

0800165c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	@ 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a19      	ldr	r2, [pc, #100]	@ (80016e0 <HAL_UART_MspInit+0x84>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d12b      	bne.n	80016d6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b18      	ldr	r3, [pc, #96]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	4a17      	ldr	r2, [pc, #92]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 8001688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800168c:	6413      	str	r3, [r2, #64]	@ 0x40
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a10      	ldr	r2, [pc, #64]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <HAL_UART_MspInit+0x88>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016b6:	230c      	movs	r3, #12
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016c6:	2307      	movs	r3, #7
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <HAL_UART_MspInit+0x8c>)
 80016d2:	f000 fee1 	bl	8002498 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	@ 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40004400 	.word	0x40004400
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020000 	.word	0x40020000

080016ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08c      	sub	sp, #48	@ 0x30
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	4b2e      	ldr	r3, [pc, #184]	@ (80017bc <HAL_InitTick+0xd0>)
 8001702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001704:	4a2d      	ldr	r2, [pc, #180]	@ (80017bc <HAL_InitTick+0xd0>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6453      	str	r3, [r2, #68]	@ 0x44
 800170c:	4b2b      	ldr	r3, [pc, #172]	@ (80017bc <HAL_InitTick+0xd0>)
 800170e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001718:	f107 020c 	add.w	r2, r7, #12
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f001 f97e 	bl	8002a24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001728:	f001 f968 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 800172c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800172e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001730:	4a23      	ldr	r2, [pc, #140]	@ (80017c0 <HAL_InitTick+0xd4>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	0c9b      	lsrs	r3, r3, #18
 8001738:	3b01      	subs	r3, #1
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800173c:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <HAL_InitTick+0xd8>)
 800173e:	4a22      	ldr	r2, [pc, #136]	@ (80017c8 <HAL_InitTick+0xdc>)
 8001740:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001742:	4b20      	ldr	r3, [pc, #128]	@ (80017c4 <HAL_InitTick+0xd8>)
 8001744:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001748:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800174a:	4a1e      	ldr	r2, [pc, #120]	@ (80017c4 <HAL_InitTick+0xd8>)
 800174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001750:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <HAL_InitTick+0xd8>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001756:	4b1b      	ldr	r3, [pc, #108]	@ (80017c4 <HAL_InitTick+0xd8>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175c:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <HAL_InitTick+0xd8>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001762:	4818      	ldr	r0, [pc, #96]	@ (80017c4 <HAL_InitTick+0xd8>)
 8001764:	f001 fdd8 	bl	8003318 <HAL_TIM_Base_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800176e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001772:	2b00      	cmp	r3, #0
 8001774:	d11b      	bne.n	80017ae <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001776:	4813      	ldr	r0, [pc, #76]	@ (80017c4 <HAL_InitTick+0xd8>)
 8001778:	f001 fe28 	bl	80033cc <HAL_TIM_Base_Start_IT>
 800177c:	4603      	mov	r3, r0
 800177e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001782:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001786:	2b00      	cmp	r3, #0
 8001788:	d111      	bne.n	80017ae <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800178a:	2019      	movs	r0, #25
 800178c:	f000 fe76 	bl	800247c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b0f      	cmp	r3, #15
 8001794:	d808      	bhi.n	80017a8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001796:	2200      	movs	r2, #0
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	2019      	movs	r0, #25
 800179c:	f000 fe52 	bl	8002444 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017a0:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <HAL_InitTick+0xe0>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e002      	b.n	80017ae <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80017ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3730      	adds	r7, #48	@ 0x30
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	431bde83 	.word	0x431bde83
 80017c4:	20000434 	.word	0x20000434
 80017c8:	40010000 	.word	0x40010000
 80017cc:	20000004 	.word	0x20000004

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <NMI_Handler+0x4>

080017d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <MemManage_Handler+0x4>

080017e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800180e:	f001 fe4d 	bl	80034ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000434 	.word	0x20000434

0800181c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001820:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001824:	f000 ffcc 	bl	80027c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return 1;
 8001830:	2301      	movs	r3, #1
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_kill>:

int _kill(int pid, int sig)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001846:	f006 fd7d 	bl	8008344 <__errno>
 800184a:	4603      	mov	r3, r0
 800184c:	2216      	movs	r2, #22
 800184e:	601a      	str	r2, [r3, #0]
  return -1;
 8001850:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_exit>:

void _exit (int status)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ffe7 	bl	800183c <_kill>
  while (1) {}    /* Make sure we hang here */
 800186e:	bf00      	nop
 8001870:	e7fd      	b.n	800186e <_exit+0x12>

08001872 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	e00a      	b.n	800189a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001884:	f3af 8000 	nop.w
 8001888:	4601      	mov	r1, r0
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	60ba      	str	r2, [r7, #8]
 8001890:	b2ca      	uxtb	r2, r1
 8001892:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3301      	adds	r3, #1
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	429a      	cmp	r2, r3
 80018a0:	dbf0      	blt.n	8001884 <_read+0x12>
  }

  return len;
 80018a2:	687b      	ldr	r3, [r7, #4]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e009      	b.n	80018d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	60ba      	str	r2, [r7, #8]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dbf1      	blt.n	80018be <_write+0x12>
  }
  return len;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_close>:

int _close(int file)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800190c:	605a      	str	r2, [r3, #4]
  return 0;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_isatty>:

int _isatty(int file)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001924:	2301      	movs	r3, #1
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001932:	b480      	push	{r7}
 8001934:	b085      	sub	sp, #20
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001954:	4a14      	ldr	r2, [pc, #80]	@ (80019a8 <_sbrk+0x5c>)
 8001956:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <_sbrk+0x60>)
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001960:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <_sbrk+0x64>)
 800196a:	4a12      	ldr	r2, [pc, #72]	@ (80019b4 <_sbrk+0x68>)
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196e:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	429a      	cmp	r2, r3
 800197a:	d207      	bcs.n	800198c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800197c:	f006 fce2 	bl	8008344 <__errno>
 8001980:	4603      	mov	r3, r0
 8001982:	220c      	movs	r2, #12
 8001984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	e009      	b.n	80019a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001992:	4b07      	ldr	r3, [pc, #28]	@ (80019b0 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	4a05      	ldr	r2, [pc, #20]	@ (80019b0 <_sbrk+0x64>)
 800199c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20020000 	.word	0x20020000
 80019ac:	00000400 	.word	0x00000400
 80019b0:	2000047c 	.word	0x2000047c
 80019b4:	20004fb8 	.word	0x20004fb8

080019b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <SystemInit+0x20>)
 80019be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c2:	4a05      	ldr	r2, [pc, #20]	@ (80019d8 <SystemInit+0x20>)
 80019c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019e0:	f7ff ffea 	bl	80019b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e4:	480c      	ldr	r0, [pc, #48]	@ (8001a18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019e6:	490d      	ldr	r1, [pc, #52]	@ (8001a1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ec:	e002      	b.n	80019f4 <LoopCopyDataInit>

080019ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f2:	3304      	adds	r3, #4

080019f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f8:	d3f9      	bcc.n	80019ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001a24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001a28 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a00:	e001      	b.n	8001a06 <LoopFillZerobss>

08001a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a04:	3204      	adds	r2, #4

08001a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a08:	d3fb      	bcc.n	8001a02 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a0a:	f006 fca1 	bl	8008350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0e:	f7ff fa81 	bl	8000f14 <main>
  bx  lr    
 8001a12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a1c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001a20:	0800aaf4 	.word	0x0800aaf4
  ldr r2, =_sbss
 8001a24:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001a28:	20004fb8 	.word	0x20004fb8

08001a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC_IRQHandler>
	...

08001a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a34:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0d      	ldr	r2, [pc, #52]	@ (8001a70 <HAL_Init+0x40>)
 8001a3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <HAL_Init+0x40>)
 8001a46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a4c:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <HAL_Init+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a07      	ldr	r2, [pc, #28]	@ (8001a70 <HAL_Init+0x40>)
 8001a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f000 fce8 	bl	800242e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5e:	200f      	movs	r0, #15
 8001a60:	f7ff fe44 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a64:	f7ff fd8a 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023c00 	.word	0x40023c00

08001a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_IncTick+0x20>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_IncTick+0x24>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a04      	ldr	r2, [pc, #16]	@ (8001a98 <HAL_IncTick+0x24>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000480 	.word	0x20000480

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000480 	.word	0x20000480

08001ab4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e033      	b.n	8001b32 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fd7e 	bl	80015d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d118      	bne.n	8001b24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001afa:	f023 0302 	bic.w	r3, r3, #2
 8001afe:	f043 0202 	orr.w	r2, r3, #2
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fae8 	bl	80020dc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	f023 0303 	bic.w	r3, r3, #3
 8001b1a:	f043 0201 	orr.w	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b22:	e001      	b.n	8001b28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_ADC_Start+0x1a>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e0b2      	b.n	8001cbc <HAL_ADC_Start+0x180>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d018      	beq.n	8001b9e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b7c:	4b52      	ldr	r3, [pc, #328]	@ (8001cc8 <HAL_ADC_Start+0x18c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a52      	ldr	r2, [pc, #328]	@ (8001ccc <HAL_ADC_Start+0x190>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	0c9a      	lsrs	r2, r3, #18
 8001b88:	4613      	mov	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b90:	e002      	b.n	8001b98 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f9      	bne.n	8001b92 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d17a      	bne.n	8001ca2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d007      	beq.n	8001bde <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bd6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bea:	d106      	bne.n	8001bfa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf0:	f023 0206 	bic.w	r2, r3, #6
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	645a      	str	r2, [r3, #68]	@ 0x44
 8001bf8:	e002      	b.n	8001c00 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c08:	4b31      	ldr	r3, [pc, #196]	@ (8001cd0 <HAL_ADC_Start+0x194>)
 8001c0a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001c14:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d12a      	bne.n	8001c78 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a2b      	ldr	r2, [pc, #172]	@ (8001cd4 <HAL_ADC_Start+0x198>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d015      	beq.n	8001c58 <HAL_ADC_Start+0x11c>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a29      	ldr	r2, [pc, #164]	@ (8001cd8 <HAL_ADC_Start+0x19c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d105      	bne.n	8001c42 <HAL_ADC_Start+0x106>
 8001c36:	4b26      	ldr	r3, [pc, #152]	@ (8001cd0 <HAL_ADC_Start+0x194>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00a      	beq.n	8001c58 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a25      	ldr	r2, [pc, #148]	@ (8001cdc <HAL_ADC_Start+0x1a0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d136      	bne.n	8001cba <HAL_ADC_Start+0x17e>
 8001c4c:	4b20      	ldr	r3, [pc, #128]	@ (8001cd0 <HAL_ADC_Start+0x194>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d130      	bne.n	8001cba <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d129      	bne.n	8001cba <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	e020      	b.n	8001cba <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a15      	ldr	r2, [pc, #84]	@ (8001cd4 <HAL_ADC_Start+0x198>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d11b      	bne.n	8001cba <HAL_ADC_Start+0x17e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d114      	bne.n	8001cba <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	e00b      	b.n	8001cba <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f043 0210 	orr.w	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	431bde83 	.word	0x431bde83
 8001cd0:	40012300 	.word	0x40012300
 8001cd4:	40012000 	.word	0x40012000
 8001cd8:	40012100 	.word	0x40012100
 8001cdc:	40012200 	.word	0x40012200

08001ce0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADC_Stop+0x16>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e021      	b.n	8001d3a <HAL_ADC_Stop+0x5a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0201 	bic.w	r2, r2, #1
 8001d0c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d20:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	f043 0201 	orr.w	r2, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d62:	d113      	bne.n	8001d8c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d72:	d10b      	bne.n	8001d8c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	f043 0220 	orr.w	r2, r3, #32
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e063      	b.n	8001e54 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d8c:	f7ff fe86 	bl	8001a9c <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d92:	e021      	b.n	8001dd8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9a:	d01d      	beq.n	8001dd8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <HAL_ADC_PollForConversion+0x6c>
 8001da2:	f7ff fe7b 	bl	8001a9c <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d212      	bcs.n	8001dd8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d00b      	beq.n	8001dd8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	f043 0204 	orr.w	r2, r3, #4
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e03d      	b.n	8001e54 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d1d6      	bne.n	8001d94 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f06f 0212 	mvn.w	r2, #18
 8001dee:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d123      	bne.n	8001e52 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d11f      	bne.n	8001e52 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e18:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d006      	beq.n	8001e2e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d111      	bne.n	8001e52 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d105      	bne.n	8001e52 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1c>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e113      	b.n	80020bc <HAL_ADC_ConfigChannel+0x244>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b09      	cmp	r3, #9
 8001ea2:	d925      	bls.n	8001ef0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68d9      	ldr	r1, [r3, #12]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3b1e      	subs	r3, #30
 8001eba:	2207      	movs	r2, #7
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43da      	mvns	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68d9      	ldr	r1, [r3, #12]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	4603      	mov	r3, r0
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4403      	add	r3, r0
 8001ee2:	3b1e      	subs	r3, #30
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	e022      	b.n	8001f36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6919      	ldr	r1, [r3, #16]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	4613      	mov	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4413      	add	r3, r2
 8001f04:	2207      	movs	r2, #7
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	400a      	ands	r2, r1
 8001f12:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6919      	ldr	r1, [r3, #16]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	4618      	mov	r0, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4403      	add	r3, r0
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d824      	bhi.n	8001f88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3b05      	subs	r3, #5
 8001f50:	221f      	movs	r2, #31
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	3b05      	subs	r3, #5
 8001f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f86:	e04c      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b0c      	cmp	r3, #12
 8001f8e:	d824      	bhi.n	8001fda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3b23      	subs	r3, #35	@ 0x23
 8001fa2:	221f      	movs	r2, #31
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43da      	mvns	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	400a      	ands	r2, r1
 8001fb0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	3b23      	subs	r3, #35	@ 0x23
 8001fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fd8:	e023      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	3b41      	subs	r3, #65	@ 0x41
 8001fec:	221f      	movs	r2, #31
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	4618      	mov	r0, r3
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	3b41      	subs	r3, #65	@ 0x41
 8002016:	fa00 f203 	lsl.w	r2, r0, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002022:	4b29      	ldr	r3, [pc, #164]	@ (80020c8 <HAL_ADC_ConfigChannel+0x250>)
 8002024:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a28      	ldr	r2, [pc, #160]	@ (80020cc <HAL_ADC_ConfigChannel+0x254>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d10f      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x1d8>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b12      	cmp	r3, #18
 8002036:	d10b      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1d      	ldr	r2, [pc, #116]	@ (80020cc <HAL_ADC_ConfigChannel+0x254>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d12b      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x23a>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1c      	ldr	r2, [pc, #112]	@ (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d003      	beq.n	800206c <HAL_ADC_ConfigChannel+0x1f4>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b11      	cmp	r3, #17
 800206a:	d122      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a11      	ldr	r2, [pc, #68]	@ (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d111      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800208e:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <HAL_ADC_ConfigChannel+0x25c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a11      	ldr	r2, [pc, #68]	@ (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 8002094:	fba2 2303 	umull	r2, r3, r2, r3
 8002098:	0c9a      	lsrs	r2, r3, #18
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020a4:	e002      	b.n	80020ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f9      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40012300 	.word	0x40012300
 80020cc:	40012000 	.word	0x40012000
 80020d0:	10000012 	.word	0x10000012
 80020d4:	20000000 	.word	0x20000000
 80020d8:	431bde83 	.word	0x431bde83

080020dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020e4:	4b79      	ldr	r3, [pc, #484]	@ (80022cc <ADC_Init+0x1f0>)
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002110:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6859      	ldr	r1, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	021a      	lsls	r2, r3, #8
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002134:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002156:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6899      	ldr	r1, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216e:	4a58      	ldr	r2, [pc, #352]	@ (80022d0 <ADC_Init+0x1f4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d022      	beq.n	80021ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002182:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6899      	ldr	r1, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6899      	ldr	r1, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	e00f      	b.n	80021da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0202 	bic.w	r2, r2, #2
 80021e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6899      	ldr	r1, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	7e1b      	ldrb	r3, [r3, #24]
 80021f4:	005a      	lsls	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01b      	beq.n	8002240 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002216:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002226:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6859      	ldr	r1, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002232:	3b01      	subs	r3, #1
 8002234:	035a      	lsls	r2, r3, #13
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	e007      	b.n	8002250 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800224e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800225e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	3b01      	subs	r3, #1
 800226c:	051a      	lsls	r2, r3, #20
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002284:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6899      	ldr	r1, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002292:	025a      	lsls	r2, r3, #9
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6899      	ldr	r1, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	029a      	lsls	r2, r3, #10
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	609a      	str	r2, [r3, #8]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40012300 	.word	0x40012300
 80022d0:	0f000001 	.word	0x0f000001

080022d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002318 <__NVIC_SetPriorityGrouping+0x44>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022f0:	4013      	ands	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002306:	4a04      	ldr	r2, [pc, #16]	@ (8002318 <__NVIC_SetPriorityGrouping+0x44>)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	60d3      	str	r3, [r2, #12]
}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002320:	4b04      	ldr	r3, [pc, #16]	@ (8002334 <__NVIC_GetPriorityGrouping+0x18>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 0307 	and.w	r3, r3, #7
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	2b00      	cmp	r3, #0
 8002348:	db0b      	blt.n	8002362 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	f003 021f 	and.w	r2, r3, #31
 8002350:	4907      	ldr	r1, [pc, #28]	@ (8002370 <__NVIC_EnableIRQ+0x38>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2001      	movs	r0, #1
 800235a:	fa00 f202 	lsl.w	r2, r0, r2
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000e100 	.word	0xe000e100

08002374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002384:	2b00      	cmp	r3, #0
 8002386:	db0a      	blt.n	800239e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	b2da      	uxtb	r2, r3
 800238c:	490c      	ldr	r1, [pc, #48]	@ (80023c0 <__NVIC_SetPriority+0x4c>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	0112      	lsls	r2, r2, #4
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	440b      	add	r3, r1
 8002398:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800239c:	e00a      	b.n	80023b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4908      	ldr	r1, [pc, #32]	@ (80023c4 <__NVIC_SetPriority+0x50>)
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	3b04      	subs	r3, #4
 80023ac:	0112      	lsls	r2, r2, #4
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	440b      	add	r3, r1
 80023b2:	761a      	strb	r2, [r3, #24]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000e100 	.word	0xe000e100
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	@ 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f1c3 0307 	rsb	r3, r3, #7
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	bf28      	it	cs
 80023e6:	2304      	movcs	r3, #4
 80023e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3304      	adds	r3, #4
 80023ee:	2b06      	cmp	r3, #6
 80023f0:	d902      	bls.n	80023f8 <NVIC_EncodePriority+0x30>
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3b03      	subs	r3, #3
 80023f6:	e000      	b.n	80023fa <NVIC_EncodePriority+0x32>
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43da      	mvns	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	401a      	ands	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002410:	f04f 31ff 	mov.w	r1, #4294967295
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fa01 f303 	lsl.w	r3, r1, r3
 800241a:	43d9      	mvns	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	4313      	orrs	r3, r2
         );
}
 8002422:	4618      	mov	r0, r3
 8002424:	3724      	adds	r7, #36	@ 0x24
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ff4c 	bl	80022d4 <__NVIC_SetPriorityGrouping>
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002456:	f7ff ff61 	bl	800231c <__NVIC_GetPriorityGrouping>
 800245a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	6978      	ldr	r0, [r7, #20]
 8002462:	f7ff ffb1 	bl	80023c8 <NVIC_EncodePriority>
 8002466:	4602      	mov	r2, r0
 8002468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246c:	4611      	mov	r1, r2
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff80 	bl	8002374 <__NVIC_SetPriority>
}
 8002474:	bf00      	nop
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff ff54 	bl	8002338 <__NVIC_EnableIRQ>
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	@ 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	e165      	b.n	8002780 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024b4:	2201      	movs	r2, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	f040 8154 	bne.w	800277a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d005      	beq.n	80024ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d130      	bne.n	800254c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	2203      	movs	r2, #3
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002520:	2201      	movs	r2, #1
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 0201 	and.w	r2, r3, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b03      	cmp	r3, #3
 8002556:	d017      	beq.n	8002588 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d123      	bne.n	80025dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	08da      	lsrs	r2, r3, #3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3208      	adds	r2, #8
 800259c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	220f      	movs	r2, #15
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	08da      	lsrs	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3208      	adds	r2, #8
 80025d6:	69b9      	ldr	r1, [r7, #24]
 80025d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0203 	and.w	r2, r3, #3
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80ae 	beq.w	800277a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	4b5d      	ldr	r3, [pc, #372]	@ (8002798 <HAL_GPIO_Init+0x300>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002626:	4a5c      	ldr	r2, [pc, #368]	@ (8002798 <HAL_GPIO_Init+0x300>)
 8002628:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800262c:	6453      	str	r3, [r2, #68]	@ 0x44
 800262e:	4b5a      	ldr	r3, [pc, #360]	@ (8002798 <HAL_GPIO_Init+0x300>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800263a:	4a58      	ldr	r2, [pc, #352]	@ (800279c <HAL_GPIO_Init+0x304>)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	3302      	adds	r3, #2
 8002642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	220f      	movs	r2, #15
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4f      	ldr	r2, [pc, #316]	@ (80027a0 <HAL_GPIO_Init+0x308>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d025      	beq.n	80026b2 <HAL_GPIO_Init+0x21a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4e      	ldr	r2, [pc, #312]	@ (80027a4 <HAL_GPIO_Init+0x30c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01f      	beq.n	80026ae <HAL_GPIO_Init+0x216>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4d      	ldr	r2, [pc, #308]	@ (80027a8 <HAL_GPIO_Init+0x310>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d019      	beq.n	80026aa <HAL_GPIO_Init+0x212>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4c      	ldr	r2, [pc, #304]	@ (80027ac <HAL_GPIO_Init+0x314>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d013      	beq.n	80026a6 <HAL_GPIO_Init+0x20e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4b      	ldr	r2, [pc, #300]	@ (80027b0 <HAL_GPIO_Init+0x318>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00d      	beq.n	80026a2 <HAL_GPIO_Init+0x20a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4a      	ldr	r2, [pc, #296]	@ (80027b4 <HAL_GPIO_Init+0x31c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d007      	beq.n	800269e <HAL_GPIO_Init+0x206>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a49      	ldr	r2, [pc, #292]	@ (80027b8 <HAL_GPIO_Init+0x320>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d101      	bne.n	800269a <HAL_GPIO_Init+0x202>
 8002696:	2306      	movs	r3, #6
 8002698:	e00c      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 800269a:	2307      	movs	r3, #7
 800269c:	e00a      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 800269e:	2305      	movs	r3, #5
 80026a0:	e008      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 80026a2:	2304      	movs	r3, #4
 80026a4:	e006      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 80026a6:	2303      	movs	r3, #3
 80026a8:	e004      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e002      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 80026b2:	2300      	movs	r3, #0
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	f002 0203 	and.w	r2, r2, #3
 80026ba:	0092      	lsls	r2, r2, #2
 80026bc:	4093      	lsls	r3, r2
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c4:	4935      	ldr	r1, [pc, #212]	@ (800279c <HAL_GPIO_Init+0x304>)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	089b      	lsrs	r3, r3, #2
 80026ca:	3302      	adds	r3, #2
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026d2:	4b3a      	ldr	r3, [pc, #232]	@ (80027bc <HAL_GPIO_Init+0x324>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026f6:	4a31      	ldr	r2, [pc, #196]	@ (80027bc <HAL_GPIO_Init+0x324>)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026fc:	4b2f      	ldr	r3, [pc, #188]	@ (80027bc <HAL_GPIO_Init+0x324>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002720:	4a26      	ldr	r2, [pc, #152]	@ (80027bc <HAL_GPIO_Init+0x324>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002726:	4b25      	ldr	r3, [pc, #148]	@ (80027bc <HAL_GPIO_Init+0x324>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800274a:	4a1c      	ldr	r2, [pc, #112]	@ (80027bc <HAL_GPIO_Init+0x324>)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002750:	4b1a      	ldr	r3, [pc, #104]	@ (80027bc <HAL_GPIO_Init+0x324>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002774:	4a11      	ldr	r2, [pc, #68]	@ (80027bc <HAL_GPIO_Init+0x324>)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3301      	adds	r3, #1
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	2b0f      	cmp	r3, #15
 8002784:	f67f ae96 	bls.w	80024b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	3724      	adds	r7, #36	@ 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800
 800279c:	40013800 	.word	0x40013800
 80027a0:	40020000 	.word	0x40020000
 80027a4:	40020400 	.word	0x40020400
 80027a8:	40020800 	.word	0x40020800
 80027ac:	40020c00 	.word	0x40020c00
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40021400 	.word	0x40021400
 80027b8:	40021800 	.word	0x40021800
 80027bc:	40013c00 	.word	0x40013c00

080027c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027ca:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d006      	beq.n	80027e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027d6:	4a05      	ldr	r2, [pc, #20]	@ (80027ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fc2e 	bl	8001040 <HAL_GPIO_EXTI_Callback>
  }
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40013c00 	.word	0x40013c00

080027f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0cc      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002804:	4b68      	ldr	r3, [pc, #416]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d90c      	bls.n	800282c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b65      	ldr	r3, [pc, #404]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b63      	ldr	r3, [pc, #396]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0b8      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002844:	4b59      	ldr	r3, [pc, #356]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a58      	ldr	r2, [pc, #352]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800284e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800285c:	4b53      	ldr	r3, [pc, #332]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a52      	ldr	r2, [pc, #328]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002868:	4b50      	ldr	r3, [pc, #320]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	494d      	ldr	r1, [pc, #308]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d044      	beq.n	8002910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b47      	ldr	r3, [pc, #284]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d119      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e07f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d003      	beq.n	80028ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d107      	bne.n	80028be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ae:	4b3f      	ldr	r3, [pc, #252]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e06f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028be:	4b3b      	ldr	r3, [pc, #236]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e067      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ce:	4b37      	ldr	r3, [pc, #220]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f023 0203 	bic.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4934      	ldr	r1, [pc, #208]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e0:	f7ff f8dc 	bl	8001a9c <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e8:	f7ff f8d8 	bl	8001a9c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e04f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	4b2b      	ldr	r3, [pc, #172]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 020c 	and.w	r2, r3, #12
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	429a      	cmp	r2, r3
 800290e:	d1eb      	bne.n	80028e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002910:	4b25      	ldr	r3, [pc, #148]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d20c      	bcs.n	8002938 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b22      	ldr	r3, [pc, #136]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b20      	ldr	r3, [pc, #128]	@ (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e032      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002944:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4916      	ldr	r1, [pc, #88]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002962:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	490e      	ldr	r1, [pc, #56]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002976:	f000 f887 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 800297a:	4602      	mov	r2, r0
 800297c:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	490a      	ldr	r1, [pc, #40]	@ (80029b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	5ccb      	ldrb	r3, [r1, r3]
 800298a:	fa22 f303 	lsr.w	r3, r2, r3
 800298e:	4a09      	ldr	r2, [pc, #36]	@ (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002992:	4b09      	ldr	r3, [pc, #36]	@ (80029b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fea8 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023c00 	.word	0x40023c00
 80029ac:	40023800 	.word	0x40023800
 80029b0:	0800a754 	.word	0x0800a754
 80029b4:	20000000 	.word	0x20000000
 80029b8:	20000004 	.word	0x20000004

080029bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c0:	4b03      	ldr	r3, [pc, #12]	@ (80029d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000000 	.word	0x20000000

080029d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029d8:	f7ff fff0 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 80029dc:	4602      	mov	r2, r0
 80029de:	4b05      	ldr	r3, [pc, #20]	@ (80029f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	0a9b      	lsrs	r3, r3, #10
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	4903      	ldr	r1, [pc, #12]	@ (80029f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ea:	5ccb      	ldrb	r3, [r1, r3]
 80029ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40023800 	.word	0x40023800
 80029f8:	0800a764 	.word	0x0800a764

080029fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a00:	f7ff ffdc 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b05      	ldr	r3, [pc, #20]	@ (8002a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	0b5b      	lsrs	r3, r3, #13
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	4903      	ldr	r1, [pc, #12]	@ (8002a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a12:	5ccb      	ldrb	r3, [r1, r3]
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	0800a764 	.word	0x0800a764

08002a24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	220f      	movs	r2, #15
 8002a32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a34:	4b12      	ldr	r3, [pc, #72]	@ (8002a80 <HAL_RCC_GetClockConfig+0x5c>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0203 	and.w	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a40:	4b0f      	ldr	r3, [pc, #60]	@ (8002a80 <HAL_RCC_GetClockConfig+0x5c>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <HAL_RCC_GetClockConfig+0x5c>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a58:	4b09      	ldr	r3, [pc, #36]	@ (8002a80 <HAL_RCC_GetClockConfig+0x5c>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	08db      	lsrs	r3, r3, #3
 8002a5e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a66:	4b07      	ldr	r3, [pc, #28]	@ (8002a84 <HAL_RCC_GetClockConfig+0x60>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 020f 	and.w	r2, r3, #15
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	601a      	str	r2, [r3, #0]
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40023c00 	.word	0x40023c00

08002a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a8c:	b0a6      	sub	sp, #152	@ 0x98
 8002a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aae:	4bc8      	ldr	r3, [pc, #800]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b0c      	cmp	r3, #12
 8002ab8:	f200 817e 	bhi.w	8002db8 <HAL_RCC_GetSysClockFreq+0x330>
 8002abc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac2:	bf00      	nop
 8002ac4:	08002af9 	.word	0x08002af9
 8002ac8:	08002db9 	.word	0x08002db9
 8002acc:	08002db9 	.word	0x08002db9
 8002ad0:	08002db9 	.word	0x08002db9
 8002ad4:	08002b01 	.word	0x08002b01
 8002ad8:	08002db9 	.word	0x08002db9
 8002adc:	08002db9 	.word	0x08002db9
 8002ae0:	08002db9 	.word	0x08002db9
 8002ae4:	08002b09 	.word	0x08002b09
 8002ae8:	08002db9 	.word	0x08002db9
 8002aec:	08002db9 	.word	0x08002db9
 8002af0:	08002db9 	.word	0x08002db9
 8002af4:	08002c73 	.word	0x08002c73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af8:	4bb6      	ldr	r3, [pc, #728]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002afa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002afe:	e15f      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b00:	4bb5      	ldr	r3, [pc, #724]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002b06:	e15b      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b08:	4bb1      	ldr	r3, [pc, #708]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b14:	4bae      	ldr	r3, [pc, #696]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d031      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b20:	4bab      	ldr	r3, [pc, #684]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	2200      	movs	r2, #0
 8002b28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b32:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b34:	2300      	movs	r3, #0
 8002b36:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b38:	4ba7      	ldr	r3, [pc, #668]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b3a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002b3e:	462a      	mov	r2, r5
 8002b40:	fb03 f202 	mul.w	r2, r3, r2
 8002b44:	2300      	movs	r3, #0
 8002b46:	4621      	mov	r1, r4
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	4aa2      	ldr	r2, [pc, #648]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b50:	4621      	mov	r1, r4
 8002b52:	fba1 1202 	umull	r1, r2, r1, r2
 8002b56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b58:	460a      	mov	r2, r1
 8002b5a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002b5c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002b5e:	4413      	add	r3, r2
 8002b60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b66:	2200      	movs	r2, #0
 8002b68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b6a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b70:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002b74:	f7fe f838 	bl	8000be8 <__aeabi_uldivmod>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b82:	e064      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b84:	4b92      	ldr	r3, [pc, #584]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b8e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002b90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b98:	2300      	movs	r3, #0
 8002b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b9c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002ba0:	4622      	mov	r2, r4
 8002ba2:	462b      	mov	r3, r5
 8002ba4:	f04f 0000 	mov.w	r0, #0
 8002ba8:	f04f 0100 	mov.w	r1, #0
 8002bac:	0159      	lsls	r1, r3, #5
 8002bae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb2:	0150      	lsls	r0, r2, #5
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4621      	mov	r1, r4
 8002bba:	1a51      	subs	r1, r2, r1
 8002bbc:	6139      	str	r1, [r7, #16]
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	eb63 0301 	sbc.w	r3, r3, r1
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bd2:	4659      	mov	r1, fp
 8002bd4:	018b      	lsls	r3, r1, #6
 8002bd6:	4651      	mov	r1, sl
 8002bd8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bdc:	4651      	mov	r1, sl
 8002bde:	018a      	lsls	r2, r1, #6
 8002be0:	4651      	mov	r1, sl
 8002be2:	ebb2 0801 	subs.w	r8, r2, r1
 8002be6:	4659      	mov	r1, fp
 8002be8:	eb63 0901 	sbc.w	r9, r3, r1
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bf8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bfc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c00:	4690      	mov	r8, r2
 8002c02:	4699      	mov	r9, r3
 8002c04:	4623      	mov	r3, r4
 8002c06:	eb18 0303 	adds.w	r3, r8, r3
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	462b      	mov	r3, r5
 8002c0e:	eb49 0303 	adc.w	r3, r9, r3
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c20:	4629      	mov	r1, r5
 8002c22:	028b      	lsls	r3, r1, #10
 8002c24:	4621      	mov	r1, r4
 8002c26:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	028a      	lsls	r2, r1, #10
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c36:	2200      	movs	r2, #0
 8002c38:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002c3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c40:	f7fd ffd2 	bl	8000be8 <__aeabi_uldivmod>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c4e:	4b60      	ldr	r3, [pc, #384]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	0c1b      	lsrs	r3, r3, #16
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002c60:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002c70:	e0a6      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c72:	4b57      	ldr	r3, [pc, #348]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c7e:	4b54      	ldr	r3, [pc, #336]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d02a      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8a:	4b51      	ldr	r3, [pc, #324]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	099b      	lsrs	r3, r3, #6
 8002c90:	2200      	movs	r2, #0
 8002c92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4b4e      	ldr	r3, [pc, #312]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ca0:	fb03 f201 	mul.w	r2, r3, r1
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	fb00 f303 	mul.w	r3, r0, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	4a4a      	ldr	r2, [pc, #296]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002cae:	fba0 1202 	umull	r1, r2, r0, r2
 8002cb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002cb4:	460a      	mov	r2, r1
 8002cb6:	673a      	str	r2, [r7, #112]	@ 0x70
 8002cb8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002cba:	4413      	add	r3, r2
 8002cbc:	677b      	str	r3, [r7, #116]	@ 0x74
 8002cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cc6:	637a      	str	r2, [r7, #52]	@ 0x34
 8002cc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002ccc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002cd0:	f7fd ff8a 	bl	8000be8 <__aeabi_uldivmod>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4613      	mov	r3, r2
 8002cda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002cde:	e05b      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	099b      	lsrs	r3, r3, #6
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf2:	623b      	str	r3, [r7, #32]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cfc:	4642      	mov	r2, r8
 8002cfe:	464b      	mov	r3, r9
 8002d00:	f04f 0000 	mov.w	r0, #0
 8002d04:	f04f 0100 	mov.w	r1, #0
 8002d08:	0159      	lsls	r1, r3, #5
 8002d0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d0e:	0150      	lsls	r0, r2, #5
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4641      	mov	r1, r8
 8002d16:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d1a:	4649      	mov	r1, r9
 8002d1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d34:	ebb2 040a 	subs.w	r4, r2, sl
 8002d38:	eb63 050b 	sbc.w	r5, r3, fp
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	00eb      	lsls	r3, r5, #3
 8002d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d4a:	00e2      	lsls	r2, r4, #3
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	461d      	mov	r5, r3
 8002d50:	4643      	mov	r3, r8
 8002d52:	18e3      	adds	r3, r4, r3
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	464b      	mov	r3, r9
 8002d58:	eb45 0303 	adc.w	r3, r5, r3
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	028b      	lsls	r3, r1, #10
 8002d6e:	4621      	mov	r1, r4
 8002d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d74:	4621      	mov	r1, r4
 8002d76:	028a      	lsls	r2, r1, #10
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d80:	2200      	movs	r2, #0
 8002d82:	61bb      	str	r3, [r7, #24]
 8002d84:	61fa      	str	r2, [r7, #28]
 8002d86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d8a:	f7fd ff2d 	bl	8000be8 <__aeabi_uldivmod>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4613      	mov	r3, r2
 8002d94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d98:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	0f1b      	lsrs	r3, r3, #28
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002da6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002daa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002db6:	e003      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002db8:	4b06      	ldr	r3, [pc, #24]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002dba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002dbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3798      	adds	r7, #152	@ 0x98
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	00f42400 	.word	0x00f42400
 8002dd8:	017d7840 	.word	0x017d7840

08002ddc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e28d      	b.n	800330a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8083 	beq.w	8002f02 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002dfc:	4b94      	ldr	r3, [pc, #592]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d019      	beq.n	8002e3c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e08:	4b91      	ldr	r3, [pc, #580]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d106      	bne.n	8002e22 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e14:	4b8e      	ldr	r3, [pc, #568]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e20:	d00c      	beq.n	8002e3c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e22:	4b8b      	ldr	r3, [pc, #556]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e2a:	2b0c      	cmp	r3, #12
 8002e2c:	d112      	bne.n	8002e54 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e2e:	4b88      	ldr	r3, [pc, #544]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e3a:	d10b      	bne.n	8002e54 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3c:	4b84      	ldr	r3, [pc, #528]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d05b      	beq.n	8002f00 <HAL_RCC_OscConfig+0x124>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d157      	bne.n	8002f00 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e25a      	b.n	800330a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e5c:	d106      	bne.n	8002e6c <HAL_RCC_OscConfig+0x90>
 8002e5e:	4b7c      	ldr	r3, [pc, #496]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a7b      	ldr	r2, [pc, #492]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e01d      	b.n	8002ea8 <HAL_RCC_OscConfig+0xcc>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0xb4>
 8002e76:	4b76      	ldr	r3, [pc, #472]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a75      	ldr	r2, [pc, #468]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002e7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	4b73      	ldr	r3, [pc, #460]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a72      	ldr	r2, [pc, #456]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e00b      	b.n	8002ea8 <HAL_RCC_OscConfig+0xcc>
 8002e90:	4b6f      	ldr	r3, [pc, #444]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a6e      	ldr	r2, [pc, #440]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002e96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	4b6c      	ldr	r3, [pc, #432]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a6b      	ldr	r2, [pc, #428]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002ea2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d013      	beq.n	8002ed8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fdf4 	bl	8001a9c <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7fe fdf0 	bl	8001a9c <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	@ 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e21f      	b.n	800330a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	4b61      	ldr	r3, [pc, #388]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0xdc>
 8002ed6:	e014      	b.n	8002f02 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fde0 	bl	8001a9c <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7fe fddc 	bl	8001a9c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	@ 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e20b      	b.n	800330a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	4b57      	ldr	r3, [pc, #348]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x104>
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d06f      	beq.n	8002fee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f0e:	4b50      	ldr	r3, [pc, #320]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d017      	beq.n	8002f4a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f1a:	4b4d      	ldr	r3, [pc, #308]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d105      	bne.n	8002f32 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f26:	4b4a      	ldr	r3, [pc, #296]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f32:	4b47      	ldr	r3, [pc, #284]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	d11c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3e:	4b44      	ldr	r3, [pc, #272]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d116      	bne.n	8002f78 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4a:	4b41      	ldr	r3, [pc, #260]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_RCC_OscConfig+0x186>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d001      	beq.n	8002f62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e1d3      	b.n	800330a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f62:	4b3b      	ldr	r3, [pc, #236]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4937      	ldr	r1, [pc, #220]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f76:	e03a      	b.n	8002fee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d020      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f80:	4b34      	ldr	r3, [pc, #208]	@ (8003054 <HAL_RCC_OscConfig+0x278>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f86:	f7fe fd89 	bl	8001a9c <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8e:	f7fe fd85 	bl	8001a9c <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e1b4      	b.n	800330a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fac:	4b28      	ldr	r3, [pc, #160]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4925      	ldr	r1, [pc, #148]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]
 8002fc0:	e015      	b.n	8002fee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc2:	4b24      	ldr	r3, [pc, #144]	@ (8003054 <HAL_RCC_OscConfig+0x278>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fd68 	bl	8001a9c <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd0:	f7fe fd64 	bl	8001a9c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e193      	b.n	800330a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d036      	beq.n	8003068 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d016      	beq.n	8003030 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003002:	4b15      	ldr	r3, [pc, #84]	@ (8003058 <HAL_RCC_OscConfig+0x27c>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7fe fd48 	bl	8001a9c <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003010:	f7fe fd44 	bl	8001a9c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e173      	b.n	800330a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <HAL_RCC_OscConfig+0x274>)
 8003024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x234>
 800302e:	e01b      	b.n	8003068 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003030:	4b09      	ldr	r3, [pc, #36]	@ (8003058 <HAL_RCC_OscConfig+0x27c>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003036:	f7fe fd31 	bl	8001a9c <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303c:	e00e      	b.n	800305c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800303e:	f7fe fd2d 	bl	8001a9c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d907      	bls.n	800305c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e15c      	b.n	800330a <HAL_RCC_OscConfig+0x52e>
 8003050:	40023800 	.word	0x40023800
 8003054:	42470000 	.word	0x42470000
 8003058:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800305c:	4b8a      	ldr	r3, [pc, #552]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 800305e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1ea      	bne.n	800303e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8097 	beq.w	80031a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003076:	2300      	movs	r3, #0
 8003078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307a:	4b83      	ldr	r3, [pc, #524]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10f      	bne.n	80030a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	4b7f      	ldr	r3, [pc, #508]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	4a7e      	ldr	r2, [pc, #504]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 8003090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003094:	6413      	str	r3, [r2, #64]	@ 0x40
 8003096:	4b7c      	ldr	r3, [pc, #496]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	4b79      	ldr	r3, [pc, #484]	@ (800328c <HAL_RCC_OscConfig+0x4b0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d118      	bne.n	80030e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b2:	4b76      	ldr	r3, [pc, #472]	@ (800328c <HAL_RCC_OscConfig+0x4b0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a75      	ldr	r2, [pc, #468]	@ (800328c <HAL_RCC_OscConfig+0x4b0>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030be:	f7fe fced 	bl	8001a9c <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c6:	f7fe fce9 	bl	8001a9c <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e118      	b.n	800330a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	4b6c      	ldr	r3, [pc, #432]	@ (800328c <HAL_RCC_OscConfig+0x4b0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d106      	bne.n	80030fa <HAL_RCC_OscConfig+0x31e>
 80030ec:	4b66      	ldr	r3, [pc, #408]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f0:	4a65      	ldr	r2, [pc, #404]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f8:	e01c      	b.n	8003134 <HAL_RCC_OscConfig+0x358>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b05      	cmp	r3, #5
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x340>
 8003102:	4b61      	ldr	r3, [pc, #388]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003106:	4a60      	ldr	r2, [pc, #384]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	6713      	str	r3, [r2, #112]	@ 0x70
 800310e:	4b5e      	ldr	r3, [pc, #376]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003112:	4a5d      	ldr	r2, [pc, #372]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	6713      	str	r3, [r2, #112]	@ 0x70
 800311a:	e00b      	b.n	8003134 <HAL_RCC_OscConfig+0x358>
 800311c:	4b5a      	ldr	r3, [pc, #360]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003120:	4a59      	ldr	r2, [pc, #356]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 8003122:	f023 0301 	bic.w	r3, r3, #1
 8003126:	6713      	str	r3, [r2, #112]	@ 0x70
 8003128:	4b57      	ldr	r3, [pc, #348]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312c:	4a56      	ldr	r2, [pc, #344]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 800312e:	f023 0304 	bic.w	r3, r3, #4
 8003132:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d015      	beq.n	8003168 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7fe fcae 	bl	8001a9c <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003142:	e00a      	b.n	800315a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003144:	f7fe fcaa 	bl	8001a9c <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e0d7      	b.n	800330a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315a:	4b4b      	ldr	r3, [pc, #300]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0ee      	beq.n	8003144 <HAL_RCC_OscConfig+0x368>
 8003166:	e014      	b.n	8003192 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003168:	f7fe fc98 	bl	8001a9c <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316e:	e00a      	b.n	8003186 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003170:	f7fe fc94 	bl	8001a9c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e0c1      	b.n	800330a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003186:	4b40      	ldr	r3, [pc, #256]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1ee      	bne.n	8003170 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003192:	7dfb      	ldrb	r3, [r7, #23]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d105      	bne.n	80031a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003198:	4b3b      	ldr	r3, [pc, #236]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	4a3a      	ldr	r2, [pc, #232]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 800319e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80ad 	beq.w	8003308 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ae:	4b36      	ldr	r3, [pc, #216]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d060      	beq.n	800327c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d145      	bne.n	800324e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c2:	4b33      	ldr	r3, [pc, #204]	@ (8003290 <HAL_RCC_OscConfig+0x4b4>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe fc68 	bl	8001a9c <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fe fc64 	bl	8001a9c <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e093      	b.n	800330a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	4b29      	ldr	r3, [pc, #164]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69da      	ldr	r2, [r3, #28]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	019b      	lsls	r3, r3, #6
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	3b01      	subs	r3, #1
 8003208:	041b      	lsls	r3, r3, #16
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003210:	061b      	lsls	r3, r3, #24
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003218:	071b      	lsls	r3, r3, #28
 800321a:	491b      	ldr	r1, [pc, #108]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003220:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <HAL_RCC_OscConfig+0x4b4>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003226:	f7fe fc39 	bl	8001a9c <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322e:	f7fe fc35 	bl	8001a9c <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e064      	b.n	800330a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003240:	4b11      	ldr	r3, [pc, #68]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x452>
 800324c:	e05c      	b.n	8003308 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324e:	4b10      	ldr	r3, [pc, #64]	@ (8003290 <HAL_RCC_OscConfig+0x4b4>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe fc22 	bl	8001a9c <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325c:	f7fe fc1e 	bl	8001a9c <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e04d      	b.n	800330a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326e:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <HAL_RCC_OscConfig+0x4ac>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x480>
 800327a:	e045      	b.n	8003308 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d107      	bne.n	8003294 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e040      	b.n	800330a <HAL_RCC_OscConfig+0x52e>
 8003288:	40023800 	.word	0x40023800
 800328c:	40007000 	.word	0x40007000
 8003290:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003294:	4b1f      	ldr	r3, [pc, #124]	@ (8003314 <HAL_RCC_OscConfig+0x538>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d030      	beq.n	8003304 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d129      	bne.n	8003304 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d122      	bne.n	8003304 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032c4:	4013      	ands	r3, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d119      	bne.n	8003304 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	3b01      	subs	r3, #1
 80032de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d10f      	bne.n	8003304 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800

08003318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e041      	b.n	80033ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f839 	bl	80033b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3304      	adds	r3, #4
 8003354:	4619      	mov	r1, r3
 8003356:	4610      	mov	r0, r2
 8003358:	f000 f9c0 	bl	80036dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d001      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e04e      	b.n	8003482 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a23      	ldr	r2, [pc, #140]	@ (8003490 <HAL_TIM_Base_Start_IT+0xc4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d022      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800340e:	d01d      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1f      	ldr	r2, [pc, #124]	@ (8003494 <HAL_TIM_Base_Start_IT+0xc8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d018      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1e      	ldr	r2, [pc, #120]	@ (8003498 <HAL_TIM_Base_Start_IT+0xcc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d013      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1c      	ldr	r2, [pc, #112]	@ (800349c <HAL_TIM_Base_Start_IT+0xd0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00e      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1b      	ldr	r2, [pc, #108]	@ (80034a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d009      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a19      	ldr	r2, [pc, #100]	@ (80034a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d004      	beq.n	800344c <HAL_TIM_Base_Start_IT+0x80>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a18      	ldr	r2, [pc, #96]	@ (80034a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d111      	bne.n	8003470 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b06      	cmp	r3, #6
 800345c:	d010      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f042 0201 	orr.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346e:	e007      	b.n	8003480 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0201 	orr.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40010000 	.word	0x40010000
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	40010400 	.word	0x40010400
 80034a4:	40014000 	.word	0x40014000
 80034a8:	40001800 	.word	0x40001800

080034ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d020      	beq.n	8003510 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01b      	beq.n	8003510 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0202 	mvn.w	r2, #2
 80034e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8d2 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f8c4 	bl	800368c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f8d5 	bl	80036b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d020      	beq.n	800355c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01b      	beq.n	800355c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0204 	mvn.w	r2, #4
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f8ac 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f89e 	bl	800368c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f8af 	bl	80036b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d020      	beq.n	80035a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01b      	beq.n	80035a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0208 	mvn.w	r2, #8
 8003578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2204      	movs	r2, #4
 800357e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f886 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 8003594:	e005      	b.n	80035a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f878 	bl	800368c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f889 	bl	80036b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0310 	and.w	r3, r3, #16
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d020      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01b      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0210 	mvn.w	r2, #16
 80035c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2208      	movs	r2, #8
 80035ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f860 	bl	80036a0 <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f852 	bl	800368c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f863 	bl	80036b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00c      	beq.n	8003618 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0201 	mvn.w	r2, #1
 8003610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd ff9a 	bl	800154c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00c      	beq.n	800363c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f900 	bl	800383c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00c      	beq.n	8003660 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f834 	bl	80036c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00c      	beq.n	8003684 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b00      	cmp	r3, #0
 8003672:	d007      	beq.n	8003684 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0220 	mvn.w	r2, #32
 800367c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8d2 	bl	8003828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a43      	ldr	r2, [pc, #268]	@ (80037fc <TIM_Base_SetConfig+0x120>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d013      	beq.n	800371c <TIM_Base_SetConfig+0x40>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036fa:	d00f      	beq.n	800371c <TIM_Base_SetConfig+0x40>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a40      	ldr	r2, [pc, #256]	@ (8003800 <TIM_Base_SetConfig+0x124>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00b      	beq.n	800371c <TIM_Base_SetConfig+0x40>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a3f      	ldr	r2, [pc, #252]	@ (8003804 <TIM_Base_SetConfig+0x128>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d007      	beq.n	800371c <TIM_Base_SetConfig+0x40>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a3e      	ldr	r2, [pc, #248]	@ (8003808 <TIM_Base_SetConfig+0x12c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d003      	beq.n	800371c <TIM_Base_SetConfig+0x40>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a3d      	ldr	r2, [pc, #244]	@ (800380c <TIM_Base_SetConfig+0x130>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d108      	bne.n	800372e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a32      	ldr	r2, [pc, #200]	@ (80037fc <TIM_Base_SetConfig+0x120>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d02b      	beq.n	800378e <TIM_Base_SetConfig+0xb2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800373c:	d027      	beq.n	800378e <TIM_Base_SetConfig+0xb2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a2f      	ldr	r2, [pc, #188]	@ (8003800 <TIM_Base_SetConfig+0x124>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d023      	beq.n	800378e <TIM_Base_SetConfig+0xb2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a2e      	ldr	r2, [pc, #184]	@ (8003804 <TIM_Base_SetConfig+0x128>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01f      	beq.n	800378e <TIM_Base_SetConfig+0xb2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a2d      	ldr	r2, [pc, #180]	@ (8003808 <TIM_Base_SetConfig+0x12c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d01b      	beq.n	800378e <TIM_Base_SetConfig+0xb2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a2c      	ldr	r2, [pc, #176]	@ (800380c <TIM_Base_SetConfig+0x130>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d017      	beq.n	800378e <TIM_Base_SetConfig+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a2b      	ldr	r2, [pc, #172]	@ (8003810 <TIM_Base_SetConfig+0x134>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d013      	beq.n	800378e <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a2a      	ldr	r2, [pc, #168]	@ (8003814 <TIM_Base_SetConfig+0x138>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00f      	beq.n	800378e <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a29      	ldr	r2, [pc, #164]	@ (8003818 <TIM_Base_SetConfig+0x13c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00b      	beq.n	800378e <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a28      	ldr	r2, [pc, #160]	@ (800381c <TIM_Base_SetConfig+0x140>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d007      	beq.n	800378e <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a27      	ldr	r2, [pc, #156]	@ (8003820 <TIM_Base_SetConfig+0x144>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d003      	beq.n	800378e <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a26      	ldr	r2, [pc, #152]	@ (8003824 <TIM_Base_SetConfig+0x148>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d108      	bne.n	80037a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a0e      	ldr	r2, [pc, #56]	@ (80037fc <TIM_Base_SetConfig+0x120>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d003      	beq.n	80037ce <TIM_Base_SetConfig+0xf2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a10      	ldr	r2, [pc, #64]	@ (800380c <TIM_Base_SetConfig+0x130>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d103      	bne.n	80037d6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f043 0204 	orr.w	r2, r3, #4
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	601a      	str	r2, [r3, #0]
}
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40010000 	.word	0x40010000
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800
 8003808:	40000c00 	.word	0x40000c00
 800380c:	40010400 	.word	0x40010400
 8003810:	40014000 	.word	0x40014000
 8003814:	40014400 	.word	0x40014400
 8003818:	40014800 	.word	0x40014800
 800381c:	40001800 	.word	0x40001800
 8003820:	40001c00 	.word	0x40001c00
 8003824:	40002000 	.word	0x40002000

08003828 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e042      	b.n	80038e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fd fef0 	bl	800165c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2224      	movs	r2, #36	@ 0x24
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f973 	bl	8003b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	@ 0x28
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b20      	cmp	r3, #32
 800390e:	d175      	bne.n	80039fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_UART_Transmit+0x2c>
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e06e      	b.n	80039fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2221      	movs	r2, #33	@ 0x21
 800392a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800392e:	f7fe f8b5 	bl	8001a9c <HAL_GetTick>
 8003932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	88fa      	ldrh	r2, [r7, #6]
 8003938:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	88fa      	ldrh	r2, [r7, #6]
 800393e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003948:	d108      	bne.n	800395c <HAL_UART_Transmit+0x6c>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	e003      	b.n	8003964 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003960:	2300      	movs	r3, #0
 8003962:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003964:	e02e      	b.n	80039c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	2180      	movs	r1, #128	@ 0x80
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f848 	bl	8003a06 <UART_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e03a      	b.n	80039fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800399c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	3302      	adds	r3, #2
 80039a2:	61bb      	str	r3, [r7, #24]
 80039a4:	e007      	b.n	80039b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	3301      	adds	r3, #1
 80039b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1cb      	bne.n	8003966 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2140      	movs	r1, #64	@ 0x40
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f814 	bl	8003a06 <UART_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e006      	b.n	80039fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
  }
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b086      	sub	sp, #24
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	4613      	mov	r3, r2
 8003a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a16:	e03b      	b.n	8003a90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d037      	beq.n	8003a90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a20:	f7fe f83c 	bl	8001a9c <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	6a3a      	ldr	r2, [r7, #32]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d302      	bcc.n	8003a36 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e03a      	b.n	8003ab0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d023      	beq.n	8003a90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b80      	cmp	r3, #128	@ 0x80
 8003a4c:	d020      	beq.n	8003a90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b40      	cmp	r3, #64	@ 0x40
 8003a52:	d01d      	beq.n	8003a90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d116      	bne.n	8003a90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f81d 	bl	8003ab8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2208      	movs	r2, #8
 8003a82:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e00f      	b.n	8003ab0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d0b4      	beq.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b095      	sub	sp, #84	@ 0x54
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	330c      	adds	r3, #12
 8003ac6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aca:	e853 3f00 	ldrex	r3, [r3]
 8003ace:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	330c      	adds	r3, #12
 8003ade:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ae0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ae6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ae8:	e841 2300 	strex	r3, r2, [r1]
 8003aec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e5      	bne.n	8003ac0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3314      	adds	r3, #20
 8003afa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	e853 3f00 	ldrex	r3, [r3]
 8003b02:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f023 0301 	bic.w	r3, r3, #1
 8003b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3314      	adds	r3, #20
 8003b12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b1c:	e841 2300 	strex	r3, r2, [r1]
 8003b20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e5      	bne.n	8003af4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d119      	bne.n	8003b64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	330c      	adds	r3, #12
 8003b36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f023 0310 	bic.w	r3, r3, #16
 8003b46:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b50:	61ba      	str	r2, [r7, #24]
 8003b52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b54:	6979      	ldr	r1, [r7, #20]
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	e841 2300 	strex	r3, r2, [r1]
 8003b5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e5      	bne.n	8003b30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b72:	bf00      	nop
 8003b74:	3754      	adds	r7, #84	@ 0x54
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b84:	b0c0      	sub	sp, #256	@ 0x100
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9c:	68d9      	ldr	r1, [r3, #12]
 8003b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	ea40 0301 	orr.w	r3, r0, r1
 8003ba8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003bd8:	f021 010c 	bic.w	r1, r1, #12
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003be6:	430b      	orrs	r3, r1
 8003be8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bfa:	6999      	ldr	r1, [r3, #24]
 8003bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	ea40 0301 	orr.w	r3, r0, r1
 8003c06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	4b8f      	ldr	r3, [pc, #572]	@ (8003e4c <UART_SetConfig+0x2cc>)
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d005      	beq.n	8003c20 <UART_SetConfig+0xa0>
 8003c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4b8d      	ldr	r3, [pc, #564]	@ (8003e50 <UART_SetConfig+0x2d0>)
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d104      	bne.n	8003c2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c20:	f7fe feec 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 8003c24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003c28:	e003      	b.n	8003c32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c2a:	f7fe fed3 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 8003c2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c3c:	f040 810c 	bne.w	8003e58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c44:	2200      	movs	r2, #0
 8003c46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c52:	4622      	mov	r2, r4
 8003c54:	462b      	mov	r3, r5
 8003c56:	1891      	adds	r1, r2, r2
 8003c58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c5a:	415b      	adcs	r3, r3
 8003c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c62:	4621      	mov	r1, r4
 8003c64:	eb12 0801 	adds.w	r8, r2, r1
 8003c68:	4629      	mov	r1, r5
 8003c6a:	eb43 0901 	adc.w	r9, r3, r1
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c82:	4690      	mov	r8, r2
 8003c84:	4699      	mov	r9, r3
 8003c86:	4623      	mov	r3, r4
 8003c88:	eb18 0303 	adds.w	r3, r8, r3
 8003c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c90:	462b      	mov	r3, r5
 8003c92:	eb49 0303 	adc.w	r3, r9, r3
 8003c96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ca6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003caa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003cae:	460b      	mov	r3, r1
 8003cb0:	18db      	adds	r3, r3, r3
 8003cb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	eb42 0303 	adc.w	r3, r2, r3
 8003cba:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003cc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003cc4:	f7fc ff90 	bl	8000be8 <__aeabi_uldivmod>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4b61      	ldr	r3, [pc, #388]	@ (8003e54 <UART_SetConfig+0x2d4>)
 8003cce:	fba3 2302 	umull	r2, r3, r3, r2
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	011c      	lsls	r4, r3, #4
 8003cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ce0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ce4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ce8:	4642      	mov	r2, r8
 8003cea:	464b      	mov	r3, r9
 8003cec:	1891      	adds	r1, r2, r2
 8003cee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003cf0:	415b      	adcs	r3, r3
 8003cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	eb12 0a01 	adds.w	sl, r2, r1
 8003cfe:	4649      	mov	r1, r9
 8003d00:	eb43 0b01 	adc.w	fp, r3, r1
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d18:	4692      	mov	sl, r2
 8003d1a:	469b      	mov	fp, r3
 8003d1c:	4643      	mov	r3, r8
 8003d1e:	eb1a 0303 	adds.w	r3, sl, r3
 8003d22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d26:	464b      	mov	r3, r9
 8003d28:	eb4b 0303 	adc.w	r3, fp, r3
 8003d2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d44:	460b      	mov	r3, r1
 8003d46:	18db      	adds	r3, r3, r3
 8003d48:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	eb42 0303 	adc.w	r3, r2, r3
 8003d50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d5a:	f7fc ff45 	bl	8000be8 <__aeabi_uldivmod>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4611      	mov	r1, r2
 8003d64:	4b3b      	ldr	r3, [pc, #236]	@ (8003e54 <UART_SetConfig+0x2d4>)
 8003d66:	fba3 2301 	umull	r2, r3, r3, r1
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	2264      	movs	r2, #100	@ 0x64
 8003d6e:	fb02 f303 	mul.w	r3, r2, r3
 8003d72:	1acb      	subs	r3, r1, r3
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d7a:	4b36      	ldr	r3, [pc, #216]	@ (8003e54 <UART_SetConfig+0x2d4>)
 8003d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d88:	441c      	add	r4, r3
 8003d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d9c:	4642      	mov	r2, r8
 8003d9e:	464b      	mov	r3, r9
 8003da0:	1891      	adds	r1, r2, r2
 8003da2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003da4:	415b      	adcs	r3, r3
 8003da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003da8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003dac:	4641      	mov	r1, r8
 8003dae:	1851      	adds	r1, r2, r1
 8003db0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003db2:	4649      	mov	r1, r9
 8003db4:	414b      	adcs	r3, r1
 8003db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003dc4:	4659      	mov	r1, fp
 8003dc6:	00cb      	lsls	r3, r1, #3
 8003dc8:	4651      	mov	r1, sl
 8003dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dce:	4651      	mov	r1, sl
 8003dd0:	00ca      	lsls	r2, r1, #3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	4642      	mov	r2, r8
 8003dda:	189b      	adds	r3, r3, r2
 8003ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003de0:	464b      	mov	r3, r9
 8003de2:	460a      	mov	r2, r1
 8003de4:	eb42 0303 	adc.w	r3, r2, r3
 8003de8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003df8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003dfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e00:	460b      	mov	r3, r1
 8003e02:	18db      	adds	r3, r3, r3
 8003e04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e06:	4613      	mov	r3, r2
 8003e08:	eb42 0303 	adc.w	r3, r2, r3
 8003e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003e16:	f7fc fee7 	bl	8000be8 <__aeabi_uldivmod>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e54 <UART_SetConfig+0x2d4>)
 8003e20:	fba3 1302 	umull	r1, r3, r3, r2
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	2164      	movs	r1, #100	@ 0x64
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	3332      	adds	r3, #50	@ 0x32
 8003e32:	4a08      	ldr	r2, [pc, #32]	@ (8003e54 <UART_SetConfig+0x2d4>)
 8003e34:	fba2 2303 	umull	r2, r3, r2, r3
 8003e38:	095b      	lsrs	r3, r3, #5
 8003e3a:	f003 0207 	and.w	r2, r3, #7
 8003e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4422      	add	r2, r4
 8003e46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e48:	e106      	b.n	8004058 <UART_SetConfig+0x4d8>
 8003e4a:	bf00      	nop
 8003e4c:	40011000 	.word	0x40011000
 8003e50:	40011400 	.word	0x40011400
 8003e54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e6a:	4642      	mov	r2, r8
 8003e6c:	464b      	mov	r3, r9
 8003e6e:	1891      	adds	r1, r2, r2
 8003e70:	6239      	str	r1, [r7, #32]
 8003e72:	415b      	adcs	r3, r3
 8003e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e7a:	4641      	mov	r1, r8
 8003e7c:	1854      	adds	r4, r2, r1
 8003e7e:	4649      	mov	r1, r9
 8003e80:	eb43 0501 	adc.w	r5, r3, r1
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	00eb      	lsls	r3, r5, #3
 8003e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e92:	00e2      	lsls	r2, r4, #3
 8003e94:	4614      	mov	r4, r2
 8003e96:	461d      	mov	r5, r3
 8003e98:	4643      	mov	r3, r8
 8003e9a:	18e3      	adds	r3, r4, r3
 8003e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ea0:	464b      	mov	r3, r9
 8003ea2:	eb45 0303 	adc.w	r3, r5, r3
 8003ea6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003eb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	008b      	lsls	r3, r1, #2
 8003eca:	4621      	mov	r1, r4
 8003ecc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	008a      	lsls	r2, r1, #2
 8003ed4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ed8:	f7fc fe86 	bl	8000be8 <__aeabi_uldivmod>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4b60      	ldr	r3, [pc, #384]	@ (8004064 <UART_SetConfig+0x4e4>)
 8003ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	011c      	lsls	r4, r3, #4
 8003eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ef4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ef8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003efc:	4642      	mov	r2, r8
 8003efe:	464b      	mov	r3, r9
 8003f00:	1891      	adds	r1, r2, r2
 8003f02:	61b9      	str	r1, [r7, #24]
 8003f04:	415b      	adcs	r3, r3
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f0c:	4641      	mov	r1, r8
 8003f0e:	1851      	adds	r1, r2, r1
 8003f10:	6139      	str	r1, [r7, #16]
 8003f12:	4649      	mov	r1, r9
 8003f14:	414b      	adcs	r3, r1
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f24:	4659      	mov	r1, fp
 8003f26:	00cb      	lsls	r3, r1, #3
 8003f28:	4651      	mov	r1, sl
 8003f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f2e:	4651      	mov	r1, sl
 8003f30:	00ca      	lsls	r2, r1, #3
 8003f32:	4610      	mov	r0, r2
 8003f34:	4619      	mov	r1, r3
 8003f36:	4603      	mov	r3, r0
 8003f38:	4642      	mov	r2, r8
 8003f3a:	189b      	adds	r3, r3, r2
 8003f3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f40:	464b      	mov	r3, r9
 8003f42:	460a      	mov	r2, r1
 8003f44:	eb42 0303 	adc.w	r3, r2, r3
 8003f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f64:	4649      	mov	r1, r9
 8003f66:	008b      	lsls	r3, r1, #2
 8003f68:	4641      	mov	r1, r8
 8003f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f6e:	4641      	mov	r1, r8
 8003f70:	008a      	lsls	r2, r1, #2
 8003f72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f76:	f7fc fe37 	bl	8000be8 <__aeabi_uldivmod>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4611      	mov	r1, r2
 8003f80:	4b38      	ldr	r3, [pc, #224]	@ (8004064 <UART_SetConfig+0x4e4>)
 8003f82:	fba3 2301 	umull	r2, r3, r3, r1
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	2264      	movs	r2, #100	@ 0x64
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	1acb      	subs	r3, r1, r3
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	3332      	adds	r3, #50	@ 0x32
 8003f94:	4a33      	ldr	r2, [pc, #204]	@ (8004064 <UART_SetConfig+0x4e4>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fa0:	441c      	add	r4, r3
 8003fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003faa:	677a      	str	r2, [r7, #116]	@ 0x74
 8003fac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	1891      	adds	r1, r2, r2
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	415b      	adcs	r3, r3
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fc0:	4641      	mov	r1, r8
 8003fc2:	1851      	adds	r1, r2, r1
 8003fc4:	6039      	str	r1, [r7, #0]
 8003fc6:	4649      	mov	r1, r9
 8003fc8:	414b      	adcs	r3, r1
 8003fca:	607b      	str	r3, [r7, #4]
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fd8:	4659      	mov	r1, fp
 8003fda:	00cb      	lsls	r3, r1, #3
 8003fdc:	4651      	mov	r1, sl
 8003fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	00ca      	lsls	r2, r1, #3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4603      	mov	r3, r0
 8003fec:	4642      	mov	r2, r8
 8003fee:	189b      	adds	r3, r3, r2
 8003ff0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ff2:	464b      	mov	r3, r9
 8003ff4:	460a      	mov	r2, r1
 8003ff6:	eb42 0303 	adc.w	r3, r2, r3
 8003ffa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	663b      	str	r3, [r7, #96]	@ 0x60
 8004006:	667a      	str	r2, [r7, #100]	@ 0x64
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004014:	4649      	mov	r1, r9
 8004016:	008b      	lsls	r3, r1, #2
 8004018:	4641      	mov	r1, r8
 800401a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800401e:	4641      	mov	r1, r8
 8004020:	008a      	lsls	r2, r1, #2
 8004022:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004026:	f7fc fddf 	bl	8000be8 <__aeabi_uldivmod>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4b0d      	ldr	r3, [pc, #52]	@ (8004064 <UART_SetConfig+0x4e4>)
 8004030:	fba3 1302 	umull	r1, r3, r3, r2
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	2164      	movs	r1, #100	@ 0x64
 8004038:	fb01 f303 	mul.w	r3, r1, r3
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	3332      	adds	r3, #50	@ 0x32
 8004042:	4a08      	ldr	r2, [pc, #32]	@ (8004064 <UART_SetConfig+0x4e4>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	f003 020f 	and.w	r2, r3, #15
 800404e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4422      	add	r2, r4
 8004056:	609a      	str	r2, [r3, #8]
}
 8004058:	bf00      	nop
 800405a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800405e:	46bd      	mov	sp, r7
 8004060:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004064:	51eb851f 	.word	0x51eb851f

08004068 <__NVIC_SetPriority>:
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	6039      	str	r1, [r7, #0]
 8004072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004078:	2b00      	cmp	r3, #0
 800407a:	db0a      	blt.n	8004092 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	b2da      	uxtb	r2, r3
 8004080:	490c      	ldr	r1, [pc, #48]	@ (80040b4 <__NVIC_SetPriority+0x4c>)
 8004082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004086:	0112      	lsls	r2, r2, #4
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	440b      	add	r3, r1
 800408c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004090:	e00a      	b.n	80040a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	4908      	ldr	r1, [pc, #32]	@ (80040b8 <__NVIC_SetPriority+0x50>)
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	3b04      	subs	r3, #4
 80040a0:	0112      	lsls	r2, r2, #4
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	440b      	add	r3, r1
 80040a6:	761a      	strb	r2, [r3, #24]
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	e000e100 	.word	0xe000e100
 80040b8:	e000ed00 	.word	0xe000ed00

080040bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80040c0:	4b05      	ldr	r3, [pc, #20]	@ (80040d8 <SysTick_Handler+0x1c>)
 80040c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80040c4:	f002 f996 	bl	80063f4 <xTaskGetSchedulerState>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d001      	beq.n	80040d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80040ce:	f003 f88b 	bl	80071e8 <xPortSysTickHandler>
  }
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	e000e010 	.word	0xe000e010

080040dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80040e0:	2100      	movs	r1, #0
 80040e2:	f06f 0004 	mvn.w	r0, #4
 80040e6:	f7ff ffbf 	bl	8004068 <__NVIC_SetPriority>
#endif
}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040f6:	f3ef 8305 	mrs	r3, IPSR
 80040fa:	603b      	str	r3, [r7, #0]
  return(result);
 80040fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004102:	f06f 0305 	mvn.w	r3, #5
 8004106:	607b      	str	r3, [r7, #4]
 8004108:	e00c      	b.n	8004124 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800410a:	4b0a      	ldr	r3, [pc, #40]	@ (8004134 <osKernelInitialize+0x44>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d105      	bne.n	800411e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004112:	4b08      	ldr	r3, [pc, #32]	@ (8004134 <osKernelInitialize+0x44>)
 8004114:	2201      	movs	r2, #1
 8004116:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004118:	2300      	movs	r3, #0
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	e002      	b.n	8004124 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800411e:	f04f 33ff 	mov.w	r3, #4294967295
 8004122:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004124:	687b      	ldr	r3, [r7, #4]
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	20000484 	.word	0x20000484

08004138 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800413e:	f3ef 8305 	mrs	r3, IPSR
 8004142:	603b      	str	r3, [r7, #0]
  return(result);
 8004144:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <osKernelStart+0x1a>
    stat = osErrorISR;
 800414a:	f06f 0305 	mvn.w	r3, #5
 800414e:	607b      	str	r3, [r7, #4]
 8004150:	e010      	b.n	8004174 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004152:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <osKernelStart+0x48>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d109      	bne.n	800416e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800415a:	f7ff ffbf 	bl	80040dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800415e:	4b08      	ldr	r3, [pc, #32]	@ (8004180 <osKernelStart+0x48>)
 8004160:	2202      	movs	r2, #2
 8004162:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004164:	f001 fce2 	bl	8005b2c <vTaskStartScheduler>
      stat = osOK;
 8004168:	2300      	movs	r3, #0
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	e002      	b.n	8004174 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800416e:	f04f 33ff 	mov.w	r3, #4294967295
 8004172:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004174:	687b      	ldr	r3, [r7, #4]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000484 	.word	0x20000484

08004184 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004184:	b580      	push	{r7, lr}
 8004186:	b08e      	sub	sp, #56	@ 0x38
 8004188:	af04      	add	r7, sp, #16
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004194:	f3ef 8305 	mrs	r3, IPSR
 8004198:	617b      	str	r3, [r7, #20]
  return(result);
 800419a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800419c:	2b00      	cmp	r3, #0
 800419e:	d17e      	bne.n	800429e <osThreadNew+0x11a>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d07b      	beq.n	800429e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80041a6:	2380      	movs	r3, #128	@ 0x80
 80041a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80041aa:	2318      	movs	r3, #24
 80041ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80041b2:	f04f 33ff 	mov.w	r3, #4294967295
 80041b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d045      	beq.n	800424a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <osThreadNew+0x48>
        name = attr->name;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <osThreadNew+0x6e>
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	2b38      	cmp	r3, #56	@ 0x38
 80041e4:	d805      	bhi.n	80041f2 <osThreadNew+0x6e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <osThreadNew+0x72>
        return (NULL);
 80041f2:	2300      	movs	r3, #0
 80041f4:	e054      	b.n	80042a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	089b      	lsrs	r3, r3, #2
 8004204:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00e      	beq.n	800422c <osThreadNew+0xa8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2ba7      	cmp	r3, #167	@ 0xa7
 8004214:	d90a      	bls.n	800422c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800421a:	2b00      	cmp	r3, #0
 800421c:	d006      	beq.n	800422c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <osThreadNew+0xa8>
        mem = 1;
 8004226:	2301      	movs	r3, #1
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	e010      	b.n	800424e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10c      	bne.n	800424e <osThreadNew+0xca>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d108      	bne.n	800424e <osThreadNew+0xca>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d104      	bne.n	800424e <osThreadNew+0xca>
          mem = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	61bb      	str	r3, [r7, #24]
 8004248:	e001      	b.n	800424e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d110      	bne.n	8004276 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800425c:	9202      	str	r2, [sp, #8]
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	6a3a      	ldr	r2, [r7, #32]
 8004268:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f001 fa6a 	bl	8005744 <xTaskCreateStatic>
 8004270:	4603      	mov	r3, r0
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	e013      	b.n	800429e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d110      	bne.n	800429e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	b29a      	uxth	r2, r3
 8004280:	f107 0310 	add.w	r3, r7, #16
 8004284:	9301      	str	r3, [sp, #4]
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f001 fab8 	bl	8005804 <xTaskCreate>
 8004294:	4603      	mov	r3, r0
 8004296:	2b01      	cmp	r3, #1
 8004298:	d001      	beq.n	800429e <osThreadNew+0x11a>
            hTask = NULL;
 800429a:	2300      	movs	r3, #0
 800429c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800429e:	693b      	ldr	r3, [r7, #16]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3728      	adds	r7, #40	@ 0x28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042b0:	f3ef 8305 	mrs	r3, IPSR
 80042b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80042b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <osDelay+0x1c>
    stat = osErrorISR;
 80042bc:	f06f 0305 	mvn.w	r3, #5
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	e007      	b.n	80042d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f001 fbf6 	bl	8005ac0 <vTaskDelay>
    }
  }

  return (stat);
 80042d4:	68fb      	ldr	r3, [r7, #12]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80042de:	b580      	push	{r7, lr}
 80042e0:	b08a      	sub	sp, #40	@ 0x28
 80042e2:	af02      	add	r7, sp, #8
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042ee:	f3ef 8305 	mrs	r3, IPSR
 80042f2:	613b      	str	r3, [r7, #16]
  return(result);
 80042f4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d175      	bne.n	80043e6 <osSemaphoreNew+0x108>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d072      	beq.n	80043e6 <osSemaphoreNew+0x108>
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	429a      	cmp	r2, r3
 8004306:	d86e      	bhi.n	80043e6 <osSemaphoreNew+0x108>
    mem = -1;
 8004308:	f04f 33ff 	mov.w	r3, #4294967295
 800430c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d015      	beq.n	8004340 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d006      	beq.n	800432a <osSemaphoreNew+0x4c>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	2b4f      	cmp	r3, #79	@ 0x4f
 8004322:	d902      	bls.n	800432a <osSemaphoreNew+0x4c>
        mem = 1;
 8004324:	2301      	movs	r3, #1
 8004326:	61bb      	str	r3, [r7, #24]
 8004328:	e00c      	b.n	8004344 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d108      	bne.n	8004344 <osSemaphoreNew+0x66>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d104      	bne.n	8004344 <osSemaphoreNew+0x66>
          mem = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	e001      	b.n	8004344 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434a:	d04c      	beq.n	80043e6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d128      	bne.n	80043a4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d10a      	bne.n	800436e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2203      	movs	r2, #3
 800435e:	9200      	str	r2, [sp, #0]
 8004360:	2200      	movs	r2, #0
 8004362:	2100      	movs	r1, #0
 8004364:	2001      	movs	r0, #1
 8004366:	f000 fa2b 	bl	80047c0 <xQueueGenericCreateStatic>
 800436a:	61f8      	str	r0, [r7, #28]
 800436c:	e005      	b.n	800437a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800436e:	2203      	movs	r2, #3
 8004370:	2100      	movs	r1, #0
 8004372:	2001      	movs	r0, #1
 8004374:	f000 faa1 	bl	80048ba <xQueueGenericCreate>
 8004378:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d022      	beq.n	80043c6 <osSemaphoreNew+0xe8>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01f      	beq.n	80043c6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004386:	2300      	movs	r3, #0
 8004388:	2200      	movs	r2, #0
 800438a:	2100      	movs	r1, #0
 800438c:	69f8      	ldr	r0, [r7, #28]
 800438e:	f000 fb61 	bl	8004a54 <xQueueGenericSend>
 8004392:	4603      	mov	r3, r0
 8004394:	2b01      	cmp	r3, #1
 8004396:	d016      	beq.n	80043c6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004398:	69f8      	ldr	r0, [r7, #28]
 800439a:	f000 ffff 	bl	800539c <vQueueDelete>
            hSemaphore = NULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	e010      	b.n	80043c6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d108      	bne.n	80043bc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	461a      	mov	r2, r3
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 fadf 	bl	8004976 <xQueueCreateCountingSemaphoreStatic>
 80043b8:	61f8      	str	r0, [r7, #28]
 80043ba:	e004      	b.n	80043c6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 fb12 	bl	80049e8 <xQueueCreateCountingSemaphore>
 80043c4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00c      	beq.n	80043e6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <osSemaphoreNew+0xfc>
          name = attr->name;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	e001      	b.n	80043de <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80043de:	6979      	ldr	r1, [r7, #20]
 80043e0:	69f8      	ldr	r0, [r7, #28]
 80043e2:	f001 f927 	bl	8005634 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80043e6:	69fb      	ldr	r3, [r7, #28]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3720      	adds	r7, #32
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d103      	bne.n	8004410 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004408:	f06f 0303 	mvn.w	r3, #3
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	e039      	b.n	8004484 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004410:	f3ef 8305 	mrs	r3, IPSR
 8004414:	60fb      	str	r3, [r7, #12]
  return(result);
 8004416:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004418:	2b00      	cmp	r3, #0
 800441a:	d022      	beq.n	8004462 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004422:	f06f 0303 	mvn.w	r3, #3
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	e02c      	b.n	8004484 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800442a:	2300      	movs	r3, #0
 800442c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800442e:	f107 0308 	add.w	r3, r7, #8
 8004432:	461a      	mov	r2, r3
 8004434:	2100      	movs	r1, #0
 8004436:	6938      	ldr	r0, [r7, #16]
 8004438:	f000 ff2e 	bl	8005298 <xQueueReceiveFromISR>
 800443c:	4603      	mov	r3, r0
 800443e:	2b01      	cmp	r3, #1
 8004440:	d003      	beq.n	800444a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004442:	f06f 0302 	mvn.w	r3, #2
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	e01c      	b.n	8004484 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d019      	beq.n	8004484 <osSemaphoreAcquire+0x94>
 8004450:	4b0f      	ldr	r3, [pc, #60]	@ (8004490 <osSemaphoreAcquire+0xa0>)
 8004452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	e010      	b.n	8004484 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004462:	6839      	ldr	r1, [r7, #0]
 8004464:	6938      	ldr	r0, [r7, #16]
 8004466:	f000 fe07 	bl	8005078 <xQueueSemaphoreTake>
 800446a:	4603      	mov	r3, r0
 800446c:	2b01      	cmp	r3, #1
 800446e:	d009      	beq.n	8004484 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004476:	f06f 0301 	mvn.w	r3, #1
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e002      	b.n	8004484 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800447e:	f06f 0302 	mvn.w	r3, #2
 8004482:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004484:	697b      	ldr	r3, [r7, #20]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	e000ed04 	.word	0xe000ed04

08004494 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d103      	bne.n	80044b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80044aa:	f06f 0303 	mvn.w	r3, #3
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	e02c      	b.n	800450c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044b2:	f3ef 8305 	mrs	r3, IPSR
 80044b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80044b8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01a      	beq.n	80044f4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80044be:	2300      	movs	r3, #0
 80044c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80044c2:	f107 0308 	add.w	r3, r7, #8
 80044c6:	4619      	mov	r1, r3
 80044c8:	6938      	ldr	r0, [r7, #16]
 80044ca:	f000 fc63 	bl	8004d94 <xQueueGiveFromISR>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d003      	beq.n	80044dc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80044d4:	f06f 0302 	mvn.w	r3, #2
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	e017      	b.n	800450c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d014      	beq.n	800450c <osSemaphoreRelease+0x78>
 80044e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <osSemaphoreRelease+0x84>)
 80044e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	e00b      	b.n	800450c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80044f4:	2300      	movs	r3, #0
 80044f6:	2200      	movs	r2, #0
 80044f8:	2100      	movs	r1, #0
 80044fa:	6938      	ldr	r0, [r7, #16]
 80044fc:	f000 faaa 	bl	8004a54 <xQueueGenericSend>
 8004500:	4603      	mov	r3, r0
 8004502:	2b01      	cmp	r3, #1
 8004504:	d002      	beq.n	800450c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004506:	f06f 0302 	mvn.w	r3, #2
 800450a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800450c:	697b      	ldr	r3, [r7, #20]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	e000ed04 	.word	0xe000ed04

0800451c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4a07      	ldr	r2, [pc, #28]	@ (8004548 <vApplicationGetIdleTaskMemory+0x2c>)
 800452c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4a06      	ldr	r2, [pc, #24]	@ (800454c <vApplicationGetIdleTaskMemory+0x30>)
 8004532:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2280      	movs	r2, #128	@ 0x80
 8004538:	601a      	str	r2, [r3, #0]
}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	20000488 	.word	0x20000488
 800454c:	20000530 	.word	0x20000530

08004550 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a07      	ldr	r2, [pc, #28]	@ (800457c <vApplicationGetTimerTaskMemory+0x2c>)
 8004560:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4a06      	ldr	r2, [pc, #24]	@ (8004580 <vApplicationGetTimerTaskMemory+0x30>)
 8004566:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800456e:	601a      	str	r2, [r3, #0]
}
 8004570:	bf00      	nop
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	20000730 	.word	0x20000730
 8004580:	200007d8 	.word	0x200007d8

08004584 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f103 0208 	add.w	r2, r3, #8
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f04f 32ff 	mov.w	r2, #4294967295
 800459c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f103 0208 	add.w	r2, r3, #8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f103 0208 	add.w	r2, r3, #8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045de:	b480      	push	{r7}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	601a      	str	r2, [r3, #0]
}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004626:	b480      	push	{r7}
 8004628:	b085      	sub	sp, #20
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463c:	d103      	bne.n	8004646 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e00c      	b.n	8004660 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3308      	adds	r3, #8
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	e002      	b.n	8004654 <vListInsert+0x2e>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	429a      	cmp	r2, r3
 800465e:	d2f6      	bcs.n	800464e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	601a      	str	r2, [r3, #0]
}
 800468c:	bf00      	nop
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6892      	ldr	r2, [r2, #8]
 80046ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6852      	ldr	r2, [r2, #4]
 80046b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d103      	bne.n	80046cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	1e5a      	subs	r2, r3, #1
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10b      	bne.n	8004718 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004712:	bf00      	nop
 8004714:	bf00      	nop
 8004716:	e7fd      	b.n	8004714 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004718:	f002 fcd6 	bl	80070c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004724:	68f9      	ldr	r1, [r7, #12]
 8004726:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	441a      	add	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004748:	3b01      	subs	r3, #1
 800474a:	68f9      	ldr	r1, [r7, #12]
 800474c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800474e:	fb01 f303 	mul.w	r3, r1, r3
 8004752:	441a      	add	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	22ff      	movs	r2, #255	@ 0xff
 800475c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	22ff      	movs	r2, #255	@ 0xff
 8004764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d114      	bne.n	8004798 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d01a      	beq.n	80047ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3310      	adds	r3, #16
 800477a:	4618      	mov	r0, r3
 800477c:	f001 fc74 	bl	8006068 <xTaskRemoveFromEventList>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d012      	beq.n	80047ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004786:	4b0d      	ldr	r3, [pc, #52]	@ (80047bc <xQueueGenericReset+0xd0>)
 8004788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	e009      	b.n	80047ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3310      	adds	r3, #16
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff fef1 	bl	8004584 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3324      	adds	r3, #36	@ 0x24
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff feec 	bl	8004584 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80047ac:	f002 fcbe 	bl	800712c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80047b0:	2301      	movs	r3, #1
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	e000ed04 	.word	0xe000ed04

080047c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08e      	sub	sp, #56	@ 0x38
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10b      	bne.n	80047ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80047e6:	bf00      	nop
 80047e8:	bf00      	nop
 80047ea:	e7fd      	b.n	80047e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10b      	bne.n	800480a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop
 8004808:	e7fd      	b.n	8004806 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <xQueueGenericCreateStatic+0x56>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <xQueueGenericCreateStatic+0x5a>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <xQueueGenericCreateStatic+0x5c>
 800481a:	2300      	movs	r3, #0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10b      	bne.n	8004838 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	623b      	str	r3, [r7, #32]
}
 8004832:	bf00      	nop
 8004834:	bf00      	nop
 8004836:	e7fd      	b.n	8004834 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d102      	bne.n	8004844 <xQueueGenericCreateStatic+0x84>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <xQueueGenericCreateStatic+0x88>
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <xQueueGenericCreateStatic+0x8a>
 8004848:	2300      	movs	r3, #0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10b      	bne.n	8004866 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	61fb      	str	r3, [r7, #28]
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	e7fd      	b.n	8004862 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004866:	2350      	movs	r3, #80	@ 0x50
 8004868:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b50      	cmp	r3, #80	@ 0x50
 800486e:	d00b      	beq.n	8004888 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	61bb      	str	r3, [r7, #24]
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	e7fd      	b.n	8004884 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004888:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800488e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00d      	beq.n	80048b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800489c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80048a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	4613      	mov	r3, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f840 	bl	8004930 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3730      	adds	r7, #48	@ 0x30
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b08a      	sub	sp, #40	@ 0x28
 80048be:	af02      	add	r7, sp, #8
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	4613      	mov	r3, r2
 80048c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10b      	bne.n	80048e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	613b      	str	r3, [r7, #16]
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	e7fd      	b.n	80048e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	3350      	adds	r3, #80	@ 0x50
 80048f4:	4618      	mov	r0, r3
 80048f6:	f002 fd09 	bl	800730c <pvPortMalloc>
 80048fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d011      	beq.n	8004926 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	3350      	adds	r3, #80	@ 0x50
 800490a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004914:	79fa      	ldrb	r2, [r7, #7]
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	4613      	mov	r3, r2
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f805 	bl	8004930 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004926:	69bb      	ldr	r3, [r7, #24]
	}
 8004928:	4618      	mov	r0, r3
 800492a:	3720      	adds	r7, #32
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d103      	bne.n	800494c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e002      	b.n	8004952 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800495e:	2101      	movs	r1, #1
 8004960:	69b8      	ldr	r0, [r7, #24]
 8004962:	f7ff fec3 	bl	80046ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004976:	b580      	push	{r7, lr}
 8004978:	b08a      	sub	sp, #40	@ 0x28
 800497a:	af02      	add	r7, sp, #8
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	61bb      	str	r3, [r7, #24]
}
 800499a:	bf00      	nop
 800499c:	bf00      	nop
 800499e:	e7fd      	b.n	800499c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d90b      	bls.n	80049c0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	617b      	str	r3, [r7, #20]
}
 80049ba:	bf00      	nop
 80049bc:	bf00      	nop
 80049be:	e7fd      	b.n	80049bc <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80049c0:	2302      	movs	r3, #2
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	2100      	movs	r1, #0
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f7ff fef8 	bl	80047c0 <xQueueGenericCreateStatic>
 80049d0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80049de:	69fb      	ldr	r3, [r7, #28]
	}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3720      	adds	r7, #32
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10b      	bne.n	8004a10 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	613b      	str	r3, [r7, #16]
}
 8004a0a:	bf00      	nop
 8004a0c:	bf00      	nop
 8004a0e:	e7fd      	b.n	8004a0c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d90b      	bls.n	8004a30 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	60fb      	str	r3, [r7, #12]
}
 8004a2a:	bf00      	nop
 8004a2c:	bf00      	nop
 8004a2e:	e7fd      	b.n	8004a2c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004a30:	2202      	movs	r2, #2
 8004a32:	2100      	movs	r1, #0
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7ff ff40 	bl	80048ba <xQueueGenericCreate>
 8004a3a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004a48:	697b      	ldr	r3, [r7, #20]
	}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08e      	sub	sp, #56	@ 0x38
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a62:	2300      	movs	r3, #0
 8004a64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10b      	bne.n	8004a88 <xQueueGenericSend+0x34>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d103      	bne.n	8004a96 <xQueueGenericSend+0x42>
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <xQueueGenericSend+0x46>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <xQueueGenericSend+0x48>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <xQueueGenericSend+0x64>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ab2:	bf00      	nop
 8004ab4:	bf00      	nop
 8004ab6:	e7fd      	b.n	8004ab4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d103      	bne.n	8004ac6 <xQueueGenericSend+0x72>
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <xQueueGenericSend+0x76>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <xQueueGenericSend+0x78>
 8004aca:	2300      	movs	r3, #0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <xQueueGenericSend+0x94>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	623b      	str	r3, [r7, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	e7fd      	b.n	8004ae4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ae8:	f001 fc84 	bl	80063f4 <xTaskGetSchedulerState>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d102      	bne.n	8004af8 <xQueueGenericSend+0xa4>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <xQueueGenericSend+0xa8>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <xQueueGenericSend+0xaa>
 8004afc:	2300      	movs	r3, #0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10b      	bne.n	8004b1a <xQueueGenericSend+0xc6>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	61fb      	str	r3, [r7, #28]
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	e7fd      	b.n	8004b16 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b1a:	f002 fad5 	bl	80070c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d302      	bcc.n	8004b30 <xQueueGenericSend+0xdc>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d129      	bne.n	8004b84 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	68b9      	ldr	r1, [r7, #8]
 8004b34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b36:	f000 fc6d 	bl	8005414 <prvCopyDataToQueue>
 8004b3a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d010      	beq.n	8004b66 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b46:	3324      	adds	r3, #36	@ 0x24
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f001 fa8d 	bl	8006068 <xTaskRemoveFromEventList>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d013      	beq.n	8004b7c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b54:	4b3f      	ldr	r3, [pc, #252]	@ (8004c54 <xQueueGenericSend+0x200>)
 8004b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	e00a      	b.n	8004b7c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d007      	beq.n	8004b7c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b6c:	4b39      	ldr	r3, [pc, #228]	@ (8004c54 <xQueueGenericSend+0x200>)
 8004b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b7c:	f002 fad6 	bl	800712c <vPortExitCritical>
				return pdPASS;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e063      	b.n	8004c4c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d103      	bne.n	8004b92 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b8a:	f002 facf 	bl	800712c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e05c      	b.n	8004c4c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d106      	bne.n	8004ba6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b98:	f107 0314 	add.w	r3, r7, #20
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f001 fac7 	bl	8006130 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ba6:	f002 fac1 	bl	800712c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004baa:	f001 f82f 	bl	8005c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bae:	f002 fa8b 	bl	80070c8 <vPortEnterCritical>
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bb8:	b25b      	sxtb	r3, r3
 8004bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbe:	d103      	bne.n	8004bc8 <xQueueGenericSend+0x174>
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bce:	b25b      	sxtb	r3, r3
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d103      	bne.n	8004bde <xQueueGenericSend+0x18a>
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bde:	f002 faa5 	bl	800712c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004be2:	1d3a      	adds	r2, r7, #4
 8004be4:	f107 0314 	add.w	r3, r7, #20
 8004be8:	4611      	mov	r1, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f001 fab6 	bl	800615c <xTaskCheckForTimeOut>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d124      	bne.n	8004c40 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004bf6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bf8:	f000 fd04 	bl	8005604 <prvIsQueueFull>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d018      	beq.n	8004c34 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c04:	3310      	adds	r3, #16
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f001 f9da 	bl	8005fc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c12:	f000 fc8f 	bl	8005534 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c16:	f001 f807 	bl	8005c28 <xTaskResumeAll>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f47f af7c 	bne.w	8004b1a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004c22:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <xQueueGenericSend+0x200>)
 8004c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	e772      	b.n	8004b1a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c36:	f000 fc7d 	bl	8005534 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c3a:	f000 fff5 	bl	8005c28 <xTaskResumeAll>
 8004c3e:	e76c      	b.n	8004b1a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c42:	f000 fc77 	bl	8005534 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c46:	f000 ffef 	bl	8005c28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3738      	adds	r7, #56	@ 0x38
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	e000ed04 	.word	0xe000ed04

08004c58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b090      	sub	sp, #64	@ 0x40
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10b      	bne.n	8004c88 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d103      	bne.n	8004c96 <xQueueGenericSendFromISR+0x3e>
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <xQueueGenericSendFromISR+0x42>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <xQueueGenericSendFromISR+0x44>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
 8004cb6:	e7fd      	b.n	8004cb4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d103      	bne.n	8004cc6 <xQueueGenericSendFromISR+0x6e>
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <xQueueGenericSendFromISR+0x72>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <xQueueGenericSendFromISR+0x74>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10b      	bne.n	8004ce8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	623b      	str	r3, [r7, #32]
}
 8004ce2:	bf00      	nop
 8004ce4:	bf00      	nop
 8004ce6:	e7fd      	b.n	8004ce4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ce8:	f002 face 	bl	8007288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cec:	f3ef 8211 	mrs	r2, BASEPRI
 8004cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	61fa      	str	r2, [r7, #28]
 8004d02:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d04:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d06:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d302      	bcc.n	8004d1a <xQueueGenericSendFromISR+0xc2>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d12f      	bne.n	8004d7a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004d30:	f000 fb70 	bl	8005414 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d34:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3c:	d112      	bne.n	8004d64 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d016      	beq.n	8004d74 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d48:	3324      	adds	r3, #36	@ 0x24
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f001 f98c 	bl	8006068 <xTaskRemoveFromEventList>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00e      	beq.n	8004d74 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00b      	beq.n	8004d74 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	e007      	b.n	8004d74 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004d68:	3301      	adds	r3, #1
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	b25a      	sxtb	r2, r3
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004d74:	2301      	movs	r3, #1
 8004d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004d78:	e001      	b.n	8004d7e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d80:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3740      	adds	r7, #64	@ 0x40
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08e      	sub	sp, #56	@ 0x38
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10b      	bne.n	8004dc0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	623b      	str	r3, [r7, #32]
}
 8004dba:	bf00      	nop
 8004dbc:	bf00      	nop
 8004dbe:	e7fd      	b.n	8004dbc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00b      	beq.n	8004de0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	61fb      	str	r3, [r7, #28]
}
 8004dda:	bf00      	nop
 8004ddc:	bf00      	nop
 8004dde:	e7fd      	b.n	8004ddc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d103      	bne.n	8004df0 <xQueueGiveFromISR+0x5c>
 8004de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <xQueueGiveFromISR+0x60>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <xQueueGiveFromISR+0x62>
 8004df4:	2300      	movs	r3, #0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10b      	bne.n	8004e12 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	61bb      	str	r3, [r7, #24]
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	e7fd      	b.n	8004e0e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e12:	f002 fa39 	bl	8007288 <vPortValidateInterruptPriority>
	__asm volatile
 8004e16:	f3ef 8211 	mrs	r2, BASEPRI
 8004e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	617a      	str	r2, [r7, #20]
 8004e2c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004e2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e36:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d22b      	bcs.n	8004e9a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e52:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e54:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d112      	bne.n	8004e84 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d016      	beq.n	8004e94 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	3324      	adds	r3, #36	@ 0x24
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f001 f8fc 	bl	8006068 <xTaskRemoveFromEventList>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00e      	beq.n	8004e94 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00b      	beq.n	8004e94 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	e007      	b.n	8004e94 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e88:	3301      	adds	r3, #1
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	b25a      	sxtb	r2, r3
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004e94:	2301      	movs	r3, #1
 8004e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e98:	e001      	b.n	8004e9e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f383 8811 	msr	BASEPRI, r3
}
 8004ea8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3738      	adds	r7, #56	@ 0x38
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08c      	sub	sp, #48	@ 0x30
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10b      	bne.n	8004ee6 <xQueueReceive+0x32>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	623b      	str	r3, [r7, #32]
}
 8004ee0:	bf00      	nop
 8004ee2:	bf00      	nop
 8004ee4:	e7fd      	b.n	8004ee2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d103      	bne.n	8004ef4 <xQueueReceive+0x40>
 8004eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <xQueueReceive+0x44>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <xQueueReceive+0x46>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10b      	bne.n	8004f16 <xQueueReceive+0x62>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	61fb      	str	r3, [r7, #28]
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	e7fd      	b.n	8004f12 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f16:	f001 fa6d 	bl	80063f4 <xTaskGetSchedulerState>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d102      	bne.n	8004f26 <xQueueReceive+0x72>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <xQueueReceive+0x76>
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <xQueueReceive+0x78>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10b      	bne.n	8004f48 <xQueueReceive+0x94>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	61bb      	str	r3, [r7, #24]
}
 8004f42:	bf00      	nop
 8004f44:	bf00      	nop
 8004f46:	e7fd      	b.n	8004f44 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f48:	f002 f8be 	bl	80070c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01f      	beq.n	8004f98 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f5c:	f000 fac4 	bl	80054e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	1e5a      	subs	r2, r3, #1
 8004f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00f      	beq.n	8004f90 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f72:	3310      	adds	r3, #16
 8004f74:	4618      	mov	r0, r3
 8004f76:	f001 f877 	bl	8006068 <xTaskRemoveFromEventList>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f80:	4b3c      	ldr	r3, [pc, #240]	@ (8005074 <xQueueReceive+0x1c0>)
 8004f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f90:	f002 f8cc 	bl	800712c <vPortExitCritical>
				return pdPASS;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e069      	b.n	800506c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f9e:	f002 f8c5 	bl	800712c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e062      	b.n	800506c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d106      	bne.n	8004fba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fac:	f107 0310 	add.w	r3, r7, #16
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f001 f8bd 	bl	8006130 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fba:	f002 f8b7 	bl	800712c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fbe:	f000 fe25 	bl	8005c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fc2:	f002 f881 	bl	80070c8 <vPortEnterCritical>
 8004fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fcc:	b25b      	sxtb	r3, r3
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	d103      	bne.n	8004fdc <xQueueReceive+0x128>
 8004fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fe2:	b25b      	sxtb	r3, r3
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d103      	bne.n	8004ff2 <xQueueReceive+0x13e>
 8004fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ff2:	f002 f89b 	bl	800712c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ff6:	1d3a      	adds	r2, r7, #4
 8004ff8:	f107 0310 	add.w	r3, r7, #16
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	4618      	mov	r0, r3
 8005000:	f001 f8ac 	bl	800615c <xTaskCheckForTimeOut>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d123      	bne.n	8005052 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800500a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800500c:	f000 fae4 	bl	80055d8 <prvIsQueueEmpty>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d017      	beq.n	8005046 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005018:	3324      	adds	r3, #36	@ 0x24
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	4611      	mov	r1, r2
 800501e:	4618      	mov	r0, r3
 8005020:	f000 ffd0 	bl	8005fc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005024:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005026:	f000 fa85 	bl	8005534 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800502a:	f000 fdfd 	bl	8005c28 <xTaskResumeAll>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d189      	bne.n	8004f48 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005034:	4b0f      	ldr	r3, [pc, #60]	@ (8005074 <xQueueReceive+0x1c0>)
 8005036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	e780      	b.n	8004f48 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005048:	f000 fa74 	bl	8005534 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800504c:	f000 fdec 	bl	8005c28 <xTaskResumeAll>
 8005050:	e77a      	b.n	8004f48 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005054:	f000 fa6e 	bl	8005534 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005058:	f000 fde6 	bl	8005c28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800505c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800505e:	f000 fabb 	bl	80055d8 <prvIsQueueEmpty>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	f43f af6f 	beq.w	8004f48 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800506a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800506c:	4618      	mov	r0, r3
 800506e:	3730      	adds	r7, #48	@ 0x30
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	e000ed04 	.word	0xe000ed04

08005078 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08e      	sub	sp, #56	@ 0x38
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005082:	2300      	movs	r3, #0
 8005084:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800508a:	2300      	movs	r3, #0
 800508c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800508e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	623b      	str	r3, [r7, #32]
}
 80050a6:	bf00      	nop
 80050a8:	bf00      	nop
 80050aa:	e7fd      	b.n	80050a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80050ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00b      	beq.n	80050cc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	61fb      	str	r3, [r7, #28]
}
 80050c6:	bf00      	nop
 80050c8:	bf00      	nop
 80050ca:	e7fd      	b.n	80050c8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050cc:	f001 f992 	bl	80063f4 <xTaskGetSchedulerState>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d102      	bne.n	80050dc <xQueueSemaphoreTake+0x64>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <xQueueSemaphoreTake+0x68>
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <xQueueSemaphoreTake+0x6a>
 80050e0:	2300      	movs	r3, #0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10b      	bne.n	80050fe <xQueueSemaphoreTake+0x86>
	__asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	61bb      	str	r3, [r7, #24]
}
 80050f8:	bf00      	nop
 80050fa:	bf00      	nop
 80050fc:	e7fd      	b.n	80050fa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050fe:	f001 ffe3 	bl	80070c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005106:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510a:	2b00      	cmp	r3, #0
 800510c:	d024      	beq.n	8005158 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800510e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005110:	1e5a      	subs	r2, r3, #1
 8005112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005114:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d104      	bne.n	8005128 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800511e:	f001 fae3 	bl	80066e8 <pvTaskIncrementMutexHeldCount>
 8005122:	4602      	mov	r2, r0
 8005124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005126:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00f      	beq.n	8005150 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005132:	3310      	adds	r3, #16
 8005134:	4618      	mov	r0, r3
 8005136:	f000 ff97 	bl	8006068 <xTaskRemoveFromEventList>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005140:	4b54      	ldr	r3, [pc, #336]	@ (8005294 <xQueueSemaphoreTake+0x21c>)
 8005142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005150:	f001 ffec 	bl	800712c <vPortExitCritical>
				return pdPASS;
 8005154:	2301      	movs	r3, #1
 8005156:	e098      	b.n	800528a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d112      	bne.n	8005184 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800515e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00b      	beq.n	800517c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	617b      	str	r3, [r7, #20]
}
 8005176:	bf00      	nop
 8005178:	bf00      	nop
 800517a:	e7fd      	b.n	8005178 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800517c:	f001 ffd6 	bl	800712c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005180:	2300      	movs	r3, #0
 8005182:	e082      	b.n	800528a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800518a:	f107 030c 	add.w	r3, r7, #12
 800518e:	4618      	mov	r0, r3
 8005190:	f000 ffce 	bl	8006130 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005194:	2301      	movs	r3, #1
 8005196:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005198:	f001 ffc8 	bl	800712c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800519c:	f000 fd36 	bl	8005c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051a0:	f001 ff92 	bl	80070c8 <vPortEnterCritical>
 80051a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051aa:	b25b      	sxtb	r3, r3
 80051ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b0:	d103      	bne.n	80051ba <xQueueSemaphoreTake+0x142>
 80051b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051c0:	b25b      	sxtb	r3, r3
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d103      	bne.n	80051d0 <xQueueSemaphoreTake+0x158>
 80051c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051d0:	f001 ffac 	bl	800712c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051d4:	463a      	mov	r2, r7
 80051d6:	f107 030c 	add.w	r3, r7, #12
 80051da:	4611      	mov	r1, r2
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 ffbd 	bl	800615c <xTaskCheckForTimeOut>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d132      	bne.n	800524e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80051ea:	f000 f9f5 	bl	80055d8 <prvIsQueueEmpty>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d026      	beq.n	8005242 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d109      	bne.n	8005210 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80051fc:	f001 ff64 	bl	80070c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	4618      	mov	r0, r3
 8005206:	f001 f913 	bl	8006430 <xTaskPriorityInherit>
 800520a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800520c:	f001 ff8e 	bl	800712c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005212:	3324      	adds	r3, #36	@ 0x24
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	4611      	mov	r1, r2
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fed3 	bl	8005fc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800521e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005220:	f000 f988 	bl	8005534 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005224:	f000 fd00 	bl	8005c28 <xTaskResumeAll>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	f47f af67 	bne.w	80050fe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005230:	4b18      	ldr	r3, [pc, #96]	@ (8005294 <xQueueSemaphoreTake+0x21c>)
 8005232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	e75d      	b.n	80050fe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005242:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005244:	f000 f976 	bl	8005534 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005248:	f000 fcee 	bl	8005c28 <xTaskResumeAll>
 800524c:	e757      	b.n	80050fe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800524e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005250:	f000 f970 	bl	8005534 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005254:	f000 fce8 	bl	8005c28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005258:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800525a:	f000 f9bd 	bl	80055d8 <prvIsQueueEmpty>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	f43f af4c 	beq.w	80050fe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00d      	beq.n	8005288 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800526c:	f001 ff2c 	bl	80070c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005270:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005272:	f000 f8b7 	bl	80053e4 <prvGetDisinheritPriorityAfterTimeout>
 8005276:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800527e:	4618      	mov	r0, r3
 8005280:	f001 f9ae 	bl	80065e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005284:	f001 ff52 	bl	800712c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005288:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800528a:	4618      	mov	r0, r3
 800528c:	3738      	adds	r7, #56	@ 0x38
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	e000ed04 	.word	0xe000ed04

08005298 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08e      	sub	sp, #56	@ 0x38
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80052a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10b      	bne.n	80052c6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	623b      	str	r3, [r7, #32]
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	e7fd      	b.n	80052c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d103      	bne.n	80052d4 <xQueueReceiveFromISR+0x3c>
 80052cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <xQueueReceiveFromISR+0x40>
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <xQueueReceiveFromISR+0x42>
 80052d8:	2300      	movs	r3, #0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10b      	bne.n	80052f6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	61fb      	str	r3, [r7, #28]
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	e7fd      	b.n	80052f2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052f6:	f001 ffc7 	bl	8007288 <vPortValidateInterruptPriority>
	__asm volatile
 80052fa:	f3ef 8211 	mrs	r2, BASEPRI
 80052fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	61ba      	str	r2, [r7, #24]
 8005310:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005312:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005314:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800531c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531e:	2b00      	cmp	r3, #0
 8005320:	d02f      	beq.n	8005382 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005324:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800532c:	68b9      	ldr	r1, [r7, #8]
 800532e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005330:	f000 f8da 	bl	80054e8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005336:	1e5a      	subs	r2, r3, #1
 8005338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800533c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d112      	bne.n	800536c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d016      	beq.n	800537c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800534e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005350:	3310      	adds	r3, #16
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fe88 	bl	8006068 <xTaskRemoveFromEventList>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00e      	beq.n	800537c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00b      	beq.n	800537c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e007      	b.n	800537c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800536c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005370:	3301      	adds	r3, #1
 8005372:	b2db      	uxtb	r3, r3
 8005374:	b25a      	sxtb	r2, r3
 8005376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800537c:	2301      	movs	r3, #1
 800537e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005380:	e001      	b.n	8005386 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005382:	2300      	movs	r3, #0
 8005384:	637b      	str	r3, [r7, #52]	@ 0x34
 8005386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005388:	613b      	str	r3, [r7, #16]
	__asm volatile
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f383 8811 	msr	BASEPRI, r3
}
 8005390:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005394:	4618      	mov	r0, r3
 8005396:	3738      	adds	r7, #56	@ 0x38
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <vQueueDelete+0x2a>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	60bb      	str	r3, [r7, #8]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 f95e 	bl	8005688 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d102      	bne.n	80053dc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f002 f866 	bl	80074a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80053dc:	bf00      	nop
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d006      	beq.n	8005402 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	e001      	b.n	8005406 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005406:	68fb      	ldr	r3, [r7, #12]
	}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005428:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10d      	bne.n	800544e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d14d      	bne.n	80054d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	4618      	mov	r0, r3
 8005440:	f001 f85e 	bl	8006500 <xTaskPriorityDisinherit>
 8005444:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	609a      	str	r2, [r3, #8]
 800544c:	e043      	b.n	80054d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d119      	bne.n	8005488 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6858      	ldr	r0, [r3, #4]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545c:	461a      	mov	r2, r3
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	f002 ff9d 	bl	800839e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546c:	441a      	add	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	429a      	cmp	r2, r3
 800547c:	d32b      	bcc.n	80054d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	605a      	str	r2, [r3, #4]
 8005486:	e026      	b.n	80054d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	68d8      	ldr	r0, [r3, #12]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005490:	461a      	mov	r2, r3
 8005492:	68b9      	ldr	r1, [r7, #8]
 8005494:	f002 ff83 	bl	800839e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a0:	425b      	negs	r3, r3
 80054a2:	441a      	add	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d207      	bcs.n	80054c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054bc:	425b      	negs	r3, r3
 80054be:	441a      	add	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d105      	bne.n	80054d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80054de:	697b      	ldr	r3, [r7, #20]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d018      	beq.n	800552c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005502:	441a      	add	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	429a      	cmp	r2, r3
 8005512:	d303      	bcc.n	800551c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68d9      	ldr	r1, [r3, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005524:	461a      	mov	r2, r3
 8005526:	6838      	ldr	r0, [r7, #0]
 8005528:	f002 ff39 	bl	800839e <memcpy>
	}
}
 800552c:	bf00      	nop
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800553c:	f001 fdc4 	bl	80070c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005546:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005548:	e011      	b.n	800556e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554e:	2b00      	cmp	r3, #0
 8005550:	d012      	beq.n	8005578 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3324      	adds	r3, #36	@ 0x24
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fd86 	bl	8006068 <xTaskRemoveFromEventList>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005562:	f000 fe5f 	bl	8006224 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	3b01      	subs	r3, #1
 800556a:	b2db      	uxtb	r3, r3
 800556c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800556e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005572:	2b00      	cmp	r3, #0
 8005574:	dce9      	bgt.n	800554a <prvUnlockQueue+0x16>
 8005576:	e000      	b.n	800557a <prvUnlockQueue+0x46>
					break;
 8005578:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	22ff      	movs	r2, #255	@ 0xff
 800557e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005582:	f001 fdd3 	bl	800712c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005586:	f001 fd9f 	bl	80070c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005590:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005592:	e011      	b.n	80055b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d012      	beq.n	80055c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3310      	adds	r3, #16
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fd61 	bl	8006068 <xTaskRemoveFromEventList>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055ac:	f000 fe3a 	bl	8006224 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055b0:	7bbb      	ldrb	r3, [r7, #14]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	dce9      	bgt.n	8005594 <prvUnlockQueue+0x60>
 80055c0:	e000      	b.n	80055c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	22ff      	movs	r2, #255	@ 0xff
 80055c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80055cc:	f001 fdae 	bl	800712c <vPortExitCritical>
}
 80055d0:	bf00      	nop
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055e0:	f001 fd72 	bl	80070c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d102      	bne.n	80055f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055ec:	2301      	movs	r3, #1
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	e001      	b.n	80055f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055f6:	f001 fd99 	bl	800712c <vPortExitCritical>

	return xReturn;
 80055fa:	68fb      	ldr	r3, [r7, #12]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800560c:	f001 fd5c 	bl	80070c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005618:	429a      	cmp	r2, r3
 800561a:	d102      	bne.n	8005622 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800561c:	2301      	movs	r3, #1
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	e001      	b.n	8005626 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005626:	f001 fd81 	bl	800712c <vPortExitCritical>

	return xReturn;
 800562a:	68fb      	ldr	r3, [r7, #12]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	e014      	b.n	800566e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005644:	4a0f      	ldr	r2, [pc, #60]	@ (8005684 <vQueueAddToRegistry+0x50>)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10b      	bne.n	8005668 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005650:	490c      	ldr	r1, [pc, #48]	@ (8005684 <vQueueAddToRegistry+0x50>)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800565a:	4a0a      	ldr	r2, [pc, #40]	@ (8005684 <vQueueAddToRegistry+0x50>)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	4413      	add	r3, r2
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005666:	e006      	b.n	8005676 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3301      	adds	r3, #1
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b07      	cmp	r3, #7
 8005672:	d9e7      	bls.n	8005644 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005674:	bf00      	nop
 8005676:	bf00      	nop
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	20000bd8 	.word	0x20000bd8

08005688 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005690:	2300      	movs	r3, #0
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	e016      	b.n	80056c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005696:	4a10      	ldr	r2, [pc, #64]	@ (80056d8 <vQueueUnregisterQueue+0x50>)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	4413      	add	r3, r2
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d10b      	bne.n	80056be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80056a6:	4a0c      	ldr	r2, [pc, #48]	@ (80056d8 <vQueueUnregisterQueue+0x50>)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2100      	movs	r1, #0
 80056ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80056b0:	4a09      	ldr	r2, [pc, #36]	@ (80056d8 <vQueueUnregisterQueue+0x50>)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	4413      	add	r3, r2
 80056b8:	2200      	movs	r2, #0
 80056ba:	605a      	str	r2, [r3, #4]
				break;
 80056bc:	e006      	b.n	80056cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3301      	adds	r3, #1
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b07      	cmp	r3, #7
 80056c8:	d9e5      	bls.n	8005696 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80056ca:	bf00      	nop
 80056cc:	bf00      	nop
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	20000bd8 	.word	0x20000bd8

080056dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056ec:	f001 fcec 	bl	80070c8 <vPortEnterCritical>
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056f6:	b25b      	sxtb	r3, r3
 80056f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fc:	d103      	bne.n	8005706 <vQueueWaitForMessageRestricted+0x2a>
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800570c:	b25b      	sxtb	r3, r3
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005712:	d103      	bne.n	800571c <vQueueWaitForMessageRestricted+0x40>
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800571c:	f001 fd06 	bl	800712c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005724:	2b00      	cmp	r3, #0
 8005726:	d106      	bne.n	8005736 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	3324      	adds	r3, #36	@ 0x24
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fc6d 	bl	8006010 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005736:	6978      	ldr	r0, [r7, #20]
 8005738:	f7ff fefc 	bl	8005534 <prvUnlockQueue>
	}
 800573c:	bf00      	nop
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08e      	sub	sp, #56	@ 0x38
 8005748:	af04      	add	r7, sp, #16
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10b      	bne.n	8005770 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	623b      	str	r3, [r7, #32]
}
 800576a:	bf00      	nop
 800576c:	bf00      	nop
 800576e:	e7fd      	b.n	800576c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10b      	bne.n	800578e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	61fb      	str	r3, [r7, #28]
}
 8005788:	bf00      	nop
 800578a:	bf00      	nop
 800578c:	e7fd      	b.n	800578a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800578e:	23a8      	movs	r3, #168	@ 0xa8
 8005790:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2ba8      	cmp	r3, #168	@ 0xa8
 8005796:	d00b      	beq.n	80057b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	61bb      	str	r3, [r7, #24]
}
 80057aa:	bf00      	nop
 80057ac:	bf00      	nop
 80057ae:	e7fd      	b.n	80057ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01e      	beq.n	80057f6 <xTaskCreateStatic+0xb2>
 80057b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d01b      	beq.n	80057f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057d0:	2300      	movs	r3, #0
 80057d2:	9303      	str	r3, [sp, #12]
 80057d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d6:	9302      	str	r3, [sp, #8]
 80057d8:	f107 0314 	add.w	r3, r7, #20
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f851 	bl	8005890 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057f0:	f000 f8f6 	bl	80059e0 <prvAddNewTaskToReadyList>
 80057f4:	e001      	b.n	80057fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057fa:	697b      	ldr	r3, [r7, #20]
	}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3728      	adds	r7, #40	@ 0x28
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08c      	sub	sp, #48	@ 0x30
 8005808:	af04      	add	r7, sp, #16
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	603b      	str	r3, [r7, #0]
 8005810:	4613      	mov	r3, r2
 8005812:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005814:	88fb      	ldrh	r3, [r7, #6]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4618      	mov	r0, r3
 800581a:	f001 fd77 	bl	800730c <pvPortMalloc>
 800581e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00e      	beq.n	8005844 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005826:	20a8      	movs	r0, #168	@ 0xa8
 8005828:	f001 fd70 	bl	800730c <pvPortMalloc>
 800582c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	631a      	str	r2, [r3, #48]	@ 0x30
 800583a:	e005      	b.n	8005848 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800583c:	6978      	ldr	r0, [r7, #20]
 800583e:	f001 fe33 	bl	80074a8 <vPortFree>
 8005842:	e001      	b.n	8005848 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005844:	2300      	movs	r3, #0
 8005846:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d017      	beq.n	800587e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005856:	88fa      	ldrh	r2, [r7, #6]
 8005858:	2300      	movs	r3, #0
 800585a:	9303      	str	r3, [sp, #12]
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	9302      	str	r3, [sp, #8]
 8005860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005862:	9301      	str	r3, [sp, #4]
 8005864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f80f 	bl	8005890 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005872:	69f8      	ldr	r0, [r7, #28]
 8005874:	f000 f8b4 	bl	80059e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005878:	2301      	movs	r3, #1
 800587a:	61bb      	str	r3, [r7, #24]
 800587c:	e002      	b.n	8005884 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800587e:	f04f 33ff 	mov.w	r3, #4294967295
 8005882:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005884:	69bb      	ldr	r3, [r7, #24]
	}
 8005886:	4618      	mov	r0, r3
 8005888:	3720      	adds	r7, #32
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800589e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	461a      	mov	r2, r3
 80058a8:	21a5      	movs	r1, #165	@ 0xa5
 80058aa:	f002 fc9a 	bl	80081e2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058b8:	3b01      	subs	r3, #1
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f023 0307 	bic.w	r3, r3, #7
 80058c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00b      	beq.n	80058ea <prvInitialiseNewTask+0x5a>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	617b      	str	r3, [r7, #20]
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop
 80058e8:	e7fd      	b.n	80058e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01f      	beq.n	8005930 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058f0:	2300      	movs	r3, #0
 80058f2:	61fb      	str	r3, [r7, #28]
 80058f4:	e012      	b.n	800591c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	4413      	add	r3, r2
 80058fc:	7819      	ldrb	r1, [r3, #0]
 80058fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	4413      	add	r3, r2
 8005904:	3334      	adds	r3, #52	@ 0x34
 8005906:	460a      	mov	r2, r1
 8005908:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	4413      	add	r3, r2
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d006      	beq.n	8005924 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	3301      	adds	r3, #1
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	2b0f      	cmp	r3, #15
 8005920:	d9e9      	bls.n	80058f6 <prvInitialiseNewTask+0x66>
 8005922:	e000      	b.n	8005926 <prvInitialiseNewTask+0x96>
			{
				break;
 8005924:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800592e:	e003      	b.n	8005938 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593a:	2b37      	cmp	r3, #55	@ 0x37
 800593c:	d901      	bls.n	8005942 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800593e:	2337      	movs	r3, #55	@ 0x37
 8005940:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005944:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005946:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800594c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800594e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005950:	2200      	movs	r2, #0
 8005952:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	3304      	adds	r3, #4
 8005958:	4618      	mov	r0, r3
 800595a:	f7fe fe33 	bl	80045c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005960:	3318      	adds	r3, #24
 8005962:	4618      	mov	r0, r3
 8005964:	f7fe fe2e 	bl	80045c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800596c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800596e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005970:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005976:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800597c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	2200      	movs	r2, #0
 8005982:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005988:	2200      	movs	r2, #0
 800598a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	3354      	adds	r3, #84	@ 0x54
 8005992:	224c      	movs	r2, #76	@ 0x4c
 8005994:	2100      	movs	r1, #0
 8005996:	4618      	mov	r0, r3
 8005998:	f002 fc23 	bl	80081e2 <memset>
 800599c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599e:	4a0d      	ldr	r2, [pc, #52]	@ (80059d4 <prvInitialiseNewTask+0x144>)
 80059a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	4a0c      	ldr	r2, [pc, #48]	@ (80059d8 <prvInitialiseNewTask+0x148>)
 80059a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80059a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059aa:	4a0c      	ldr	r2, [pc, #48]	@ (80059dc <prvInitialiseNewTask+0x14c>)
 80059ac:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	68f9      	ldr	r1, [r7, #12]
 80059b2:	69b8      	ldr	r0, [r7, #24]
 80059b4:	f001 fa5a 	bl	8006e6c <pxPortInitialiseStack>
 80059b8:	4602      	mov	r2, r0
 80059ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059ca:	bf00      	nop
 80059cc:	3720      	adds	r7, #32
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20004e6c 	.word	0x20004e6c
 80059d8:	20004ed4 	.word	0x20004ed4
 80059dc:	20004f3c 	.word	0x20004f3c

080059e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059e8:	f001 fb6e 	bl	80070c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059ec:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa4 <prvAddNewTaskToReadyList+0xc4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3301      	adds	r3, #1
 80059f2:	4a2c      	ldr	r2, [pc, #176]	@ (8005aa4 <prvAddNewTaskToReadyList+0xc4>)
 80059f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059f6:	4b2c      	ldr	r3, [pc, #176]	@ (8005aa8 <prvAddNewTaskToReadyList+0xc8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059fe:	4a2a      	ldr	r2, [pc, #168]	@ (8005aa8 <prvAddNewTaskToReadyList+0xc8>)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a04:	4b27      	ldr	r3, [pc, #156]	@ (8005aa4 <prvAddNewTaskToReadyList+0xc4>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d110      	bne.n	8005a2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a0c:	f000 fc2e 	bl	800626c <prvInitialiseTaskLists>
 8005a10:	e00d      	b.n	8005a2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a12:	4b26      	ldr	r3, [pc, #152]	@ (8005aac <prvAddNewTaskToReadyList+0xcc>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d109      	bne.n	8005a2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a1a:	4b23      	ldr	r3, [pc, #140]	@ (8005aa8 <prvAddNewTaskToReadyList+0xc8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d802      	bhi.n	8005a2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a28:	4a1f      	ldr	r2, [pc, #124]	@ (8005aa8 <prvAddNewTaskToReadyList+0xc8>)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a2e:	4b20      	ldr	r3, [pc, #128]	@ (8005ab0 <prvAddNewTaskToReadyList+0xd0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3301      	adds	r3, #1
 8005a34:	4a1e      	ldr	r2, [pc, #120]	@ (8005ab0 <prvAddNewTaskToReadyList+0xd0>)
 8005a36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a38:	4b1d      	ldr	r3, [pc, #116]	@ (8005ab0 <prvAddNewTaskToReadyList+0xd0>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a44:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab4 <prvAddNewTaskToReadyList+0xd4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d903      	bls.n	8005a54 <prvAddNewTaskToReadyList+0x74>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a50:	4a18      	ldr	r2, [pc, #96]	@ (8005ab4 <prvAddNewTaskToReadyList+0xd4>)
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4a15      	ldr	r2, [pc, #84]	@ (8005ab8 <prvAddNewTaskToReadyList+0xd8>)
 8005a62:	441a      	add	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3304      	adds	r3, #4
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	f7fe fdb7 	bl	80045de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a70:	f001 fb5c 	bl	800712c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a74:	4b0d      	ldr	r3, [pc, #52]	@ (8005aac <prvAddNewTaskToReadyList+0xcc>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00e      	beq.n	8005a9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa8 <prvAddNewTaskToReadyList+0xc8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d207      	bcs.n	8005a9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005abc <prvAddNewTaskToReadyList+0xdc>)
 8005a8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	200010ec 	.word	0x200010ec
 8005aa8:	20000c18 	.word	0x20000c18
 8005aac:	200010f8 	.word	0x200010f8
 8005ab0:	20001108 	.word	0x20001108
 8005ab4:	200010f4 	.word	0x200010f4
 8005ab8:	20000c1c 	.word	0x20000c1c
 8005abc:	e000ed04 	.word	0xe000ed04

08005ac0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d018      	beq.n	8005b04 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ad2:	4b14      	ldr	r3, [pc, #80]	@ (8005b24 <vTaskDelay+0x64>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00b      	beq.n	8005af2 <vTaskDelay+0x32>
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	60bb      	str	r3, [r7, #8]
}
 8005aec:	bf00      	nop
 8005aee:	bf00      	nop
 8005af0:	e7fd      	b.n	8005aee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005af2:	f000 f88b 	bl	8005c0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005af6:	2100      	movs	r1, #0
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fe09 	bl	8006710 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005afe:	f000 f893 	bl	8005c28 <xTaskResumeAll>
 8005b02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d107      	bne.n	8005b1a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005b0a:	4b07      	ldr	r3, [pc, #28]	@ (8005b28 <vTaskDelay+0x68>)
 8005b0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b1a:	bf00      	nop
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20001114 	.word	0x20001114
 8005b28:	e000ed04 	.word	0xe000ed04

08005b2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08a      	sub	sp, #40	@ 0x28
 8005b30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b3a:	463a      	mov	r2, r7
 8005b3c:	1d39      	adds	r1, r7, #4
 8005b3e:	f107 0308 	add.w	r3, r7, #8
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe fcea 	bl	800451c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b48:	6839      	ldr	r1, [r7, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	9202      	str	r2, [sp, #8]
 8005b50:	9301      	str	r3, [sp, #4]
 8005b52:	2300      	movs	r3, #0
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	2300      	movs	r3, #0
 8005b58:	460a      	mov	r2, r1
 8005b5a:	4924      	ldr	r1, [pc, #144]	@ (8005bec <vTaskStartScheduler+0xc0>)
 8005b5c:	4824      	ldr	r0, [pc, #144]	@ (8005bf0 <vTaskStartScheduler+0xc4>)
 8005b5e:	f7ff fdf1 	bl	8005744 <xTaskCreateStatic>
 8005b62:	4603      	mov	r3, r0
 8005b64:	4a23      	ldr	r2, [pc, #140]	@ (8005bf4 <vTaskStartScheduler+0xc8>)
 8005b66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b68:	4b22      	ldr	r3, [pc, #136]	@ (8005bf4 <vTaskStartScheduler+0xc8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b70:	2301      	movs	r3, #1
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	e001      	b.n	8005b7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d102      	bne.n	8005b86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b80:	f000 fe1a 	bl	80067b8 <xTimerCreateTimerTask>
 8005b84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d11b      	bne.n	8005bc4 <vTaskStartScheduler+0x98>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	613b      	str	r3, [r7, #16]
}
 8005b9e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ba0:	4b15      	ldr	r3, [pc, #84]	@ (8005bf8 <vTaskStartScheduler+0xcc>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3354      	adds	r3, #84	@ 0x54
 8005ba6:	4a15      	ldr	r2, [pc, #84]	@ (8005bfc <vTaskStartScheduler+0xd0>)
 8005ba8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005baa:	4b15      	ldr	r3, [pc, #84]	@ (8005c00 <vTaskStartScheduler+0xd4>)
 8005bac:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bb2:	4b14      	ldr	r3, [pc, #80]	@ (8005c04 <vTaskStartScheduler+0xd8>)
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bb8:	4b13      	ldr	r3, [pc, #76]	@ (8005c08 <vTaskStartScheduler+0xdc>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bbe:	f001 f9df 	bl	8006f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bc2:	e00f      	b.n	8005be4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bca:	d10b      	bne.n	8005be4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	60fb      	str	r3, [r7, #12]
}
 8005bde:	bf00      	nop
 8005be0:	bf00      	nop
 8005be2:	e7fd      	b.n	8005be0 <vTaskStartScheduler+0xb4>
}
 8005be4:	bf00      	nop
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	0800a6a0 	.word	0x0800a6a0
 8005bf0:	0800623d 	.word	0x0800623d
 8005bf4:	20001110 	.word	0x20001110
 8005bf8:	20000c18 	.word	0x20000c18
 8005bfc:	2000001c 	.word	0x2000001c
 8005c00:	2000110c 	.word	0x2000110c
 8005c04:	200010f8 	.word	0x200010f8
 8005c08:	200010f0 	.word	0x200010f0

08005c0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c10:	4b04      	ldr	r3, [pc, #16]	@ (8005c24 <vTaskSuspendAll+0x18>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3301      	adds	r3, #1
 8005c16:	4a03      	ldr	r2, [pc, #12]	@ (8005c24 <vTaskSuspendAll+0x18>)
 8005c18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c1a:	bf00      	nop
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	20001114 	.word	0x20001114

08005c28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c36:	4b42      	ldr	r3, [pc, #264]	@ (8005d40 <xTaskResumeAll+0x118>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10b      	bne.n	8005c56 <xTaskResumeAll+0x2e>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	603b      	str	r3, [r7, #0]
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	e7fd      	b.n	8005c52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c56:	f001 fa37 	bl	80070c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c5a:	4b39      	ldr	r3, [pc, #228]	@ (8005d40 <xTaskResumeAll+0x118>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	4a37      	ldr	r2, [pc, #220]	@ (8005d40 <xTaskResumeAll+0x118>)
 8005c62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c64:	4b36      	ldr	r3, [pc, #216]	@ (8005d40 <xTaskResumeAll+0x118>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d162      	bne.n	8005d32 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c6c:	4b35      	ldr	r3, [pc, #212]	@ (8005d44 <xTaskResumeAll+0x11c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d05e      	beq.n	8005d32 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c74:	e02f      	b.n	8005cd6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c76:	4b34      	ldr	r3, [pc, #208]	@ (8005d48 <xTaskResumeAll+0x120>)
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3318      	adds	r3, #24
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fe fd08 	bl	8004698 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fe fd03 	bl	8004698 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c96:	4b2d      	ldr	r3, [pc, #180]	@ (8005d4c <xTaskResumeAll+0x124>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d903      	bls.n	8005ca6 <xTaskResumeAll+0x7e>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8005d4c <xTaskResumeAll+0x124>)
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4a27      	ldr	r2, [pc, #156]	@ (8005d50 <xTaskResumeAll+0x128>)
 8005cb4:	441a      	add	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	f7fe fc8e 	bl	80045de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc6:	4b23      	ldr	r3, [pc, #140]	@ (8005d54 <xTaskResumeAll+0x12c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d302      	bcc.n	8005cd6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005cd0:	4b21      	ldr	r3, [pc, #132]	@ (8005d58 <xTaskResumeAll+0x130>)
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8005d48 <xTaskResumeAll+0x120>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1cb      	bne.n	8005c76 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ce4:	f000 fb66 	bl	80063b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d5c <xTaskResumeAll+0x134>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d010      	beq.n	8005d16 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cf4:	f000 f846 	bl	8005d84 <xTaskIncrementTick>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005cfe:	4b16      	ldr	r3, [pc, #88]	@ (8005d58 <xTaskResumeAll+0x130>)
 8005d00:	2201      	movs	r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1f1      	bne.n	8005cf4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005d10:	4b12      	ldr	r3, [pc, #72]	@ (8005d5c <xTaskResumeAll+0x134>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d16:	4b10      	ldr	r3, [pc, #64]	@ (8005d58 <xTaskResumeAll+0x130>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d009      	beq.n	8005d32 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d22:	4b0f      	ldr	r3, [pc, #60]	@ (8005d60 <xTaskResumeAll+0x138>)
 8005d24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d32:	f001 f9fb 	bl	800712c <vPortExitCritical>

	return xAlreadyYielded;
 8005d36:	68bb      	ldr	r3, [r7, #8]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	20001114 	.word	0x20001114
 8005d44:	200010ec 	.word	0x200010ec
 8005d48:	200010ac 	.word	0x200010ac
 8005d4c:	200010f4 	.word	0x200010f4
 8005d50:	20000c1c 	.word	0x20000c1c
 8005d54:	20000c18 	.word	0x20000c18
 8005d58:	20001100 	.word	0x20001100
 8005d5c:	200010fc 	.word	0x200010fc
 8005d60:	e000ed04 	.word	0xe000ed04

08005d64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d6a:	4b05      	ldr	r3, [pc, #20]	@ (8005d80 <xTaskGetTickCount+0x1c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d70:	687b      	ldr	r3, [r7, #4]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	200010f0 	.word	0x200010f0

08005d84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d8e:	4b4f      	ldr	r3, [pc, #316]	@ (8005ecc <xTaskIncrementTick+0x148>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f040 8090 	bne.w	8005eb8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d98:	4b4d      	ldr	r3, [pc, #308]	@ (8005ed0 <xTaskIncrementTick+0x14c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005da0:	4a4b      	ldr	r2, [pc, #300]	@ (8005ed0 <xTaskIncrementTick+0x14c>)
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d121      	bne.n	8005df0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dac:	4b49      	ldr	r3, [pc, #292]	@ (8005ed4 <xTaskIncrementTick+0x150>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00b      	beq.n	8005dce <xTaskIncrementTick+0x4a>
	__asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	603b      	str	r3, [r7, #0]
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	e7fd      	b.n	8005dca <xTaskIncrementTick+0x46>
 8005dce:	4b41      	ldr	r3, [pc, #260]	@ (8005ed4 <xTaskIncrementTick+0x150>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	4b40      	ldr	r3, [pc, #256]	@ (8005ed8 <xTaskIncrementTick+0x154>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a3e      	ldr	r2, [pc, #248]	@ (8005ed4 <xTaskIncrementTick+0x150>)
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	4a3e      	ldr	r2, [pc, #248]	@ (8005ed8 <xTaskIncrementTick+0x154>)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	4b3e      	ldr	r3, [pc, #248]	@ (8005edc <xTaskIncrementTick+0x158>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3301      	adds	r3, #1
 8005de8:	4a3c      	ldr	r2, [pc, #240]	@ (8005edc <xTaskIncrementTick+0x158>)
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	f000 fae2 	bl	80063b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005df0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ee0 <xTaskIncrementTick+0x15c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d349      	bcc.n	8005e8e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dfa:	4b36      	ldr	r3, [pc, #216]	@ (8005ed4 <xTaskIncrementTick+0x150>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d104      	bne.n	8005e0e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e04:	4b36      	ldr	r3, [pc, #216]	@ (8005ee0 <xTaskIncrementTick+0x15c>)
 8005e06:	f04f 32ff 	mov.w	r2, #4294967295
 8005e0a:	601a      	str	r2, [r3, #0]
					break;
 8005e0c:	e03f      	b.n	8005e8e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e0e:	4b31      	ldr	r3, [pc, #196]	@ (8005ed4 <xTaskIncrementTick+0x150>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d203      	bcs.n	8005e2e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e26:	4a2e      	ldr	r2, [pc, #184]	@ (8005ee0 <xTaskIncrementTick+0x15c>)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e2c:	e02f      	b.n	8005e8e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	3304      	adds	r3, #4
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fe fc30 	bl	8004698 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d004      	beq.n	8005e4a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	3318      	adds	r3, #24
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fe fc27 	bl	8004698 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e4e:	4b25      	ldr	r3, [pc, #148]	@ (8005ee4 <xTaskIncrementTick+0x160>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d903      	bls.n	8005e5e <xTaskIncrementTick+0xda>
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5a:	4a22      	ldr	r2, [pc, #136]	@ (8005ee4 <xTaskIncrementTick+0x160>)
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ee8 <xTaskIncrementTick+0x164>)
 8005e6c:	441a      	add	r2, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	3304      	adds	r3, #4
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f7fe fbb2 	bl	80045de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005eec <xTaskIncrementTick+0x168>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d3b8      	bcc.n	8005dfa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e8c:	e7b5      	b.n	8005dfa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e8e:	4b17      	ldr	r3, [pc, #92]	@ (8005eec <xTaskIncrementTick+0x168>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e94:	4914      	ldr	r1, [pc, #80]	@ (8005ee8 <xTaskIncrementTick+0x164>)
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d901      	bls.n	8005eaa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005eaa:	4b11      	ldr	r3, [pc, #68]	@ (8005ef0 <xTaskIncrementTick+0x16c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d007      	beq.n	8005ec2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	e004      	b.n	8005ec2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef4 <xTaskIncrementTick+0x170>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8005ef4 <xTaskIncrementTick+0x170>)
 8005ec0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005ec2:	697b      	ldr	r3, [r7, #20]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20001114 	.word	0x20001114
 8005ed0:	200010f0 	.word	0x200010f0
 8005ed4:	200010a4 	.word	0x200010a4
 8005ed8:	200010a8 	.word	0x200010a8
 8005edc:	20001104 	.word	0x20001104
 8005ee0:	2000110c 	.word	0x2000110c
 8005ee4:	200010f4 	.word	0x200010f4
 8005ee8:	20000c1c 	.word	0x20000c1c
 8005eec:	20000c18 	.word	0x20000c18
 8005ef0:	20001100 	.word	0x20001100
 8005ef4:	200010fc 	.word	0x200010fc

08005ef8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005efe:	4b2b      	ldr	r3, [pc, #172]	@ (8005fac <vTaskSwitchContext+0xb4>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f06:	4b2a      	ldr	r3, [pc, #168]	@ (8005fb0 <vTaskSwitchContext+0xb8>)
 8005f08:	2201      	movs	r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f0c:	e047      	b.n	8005f9e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005f0e:	4b28      	ldr	r3, [pc, #160]	@ (8005fb0 <vTaskSwitchContext+0xb8>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f14:	4b27      	ldr	r3, [pc, #156]	@ (8005fb4 <vTaskSwitchContext+0xbc>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	e011      	b.n	8005f40 <vTaskSwitchContext+0x48>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10b      	bne.n	8005f3a <vTaskSwitchContext+0x42>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	607b      	str	r3, [r7, #4]
}
 8005f34:	bf00      	nop
 8005f36:	bf00      	nop
 8005f38:	e7fd      	b.n	8005f36 <vTaskSwitchContext+0x3e>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	491d      	ldr	r1, [pc, #116]	@ (8005fb8 <vTaskSwitchContext+0xc0>)
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4613      	mov	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d0e3      	beq.n	8005f1c <vTaskSwitchContext+0x24>
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4a16      	ldr	r2, [pc, #88]	@ (8005fb8 <vTaskSwitchContext+0xc0>)
 8005f60:	4413      	add	r3, r2
 8005f62:	60bb      	str	r3, [r7, #8]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	605a      	str	r2, [r3, #4]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	3308      	adds	r3, #8
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d104      	bne.n	8005f84 <vTaskSwitchContext+0x8c>
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	605a      	str	r2, [r3, #4]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8005fbc <vTaskSwitchContext+0xc4>)
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	4a09      	ldr	r2, [pc, #36]	@ (8005fb4 <vTaskSwitchContext+0xbc>)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f94:	4b09      	ldr	r3, [pc, #36]	@ (8005fbc <vTaskSwitchContext+0xc4>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3354      	adds	r3, #84	@ 0x54
 8005f9a:	4a09      	ldr	r2, [pc, #36]	@ (8005fc0 <vTaskSwitchContext+0xc8>)
 8005f9c:	6013      	str	r3, [r2, #0]
}
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	20001114 	.word	0x20001114
 8005fb0:	20001100 	.word	0x20001100
 8005fb4:	200010f4 	.word	0x200010f4
 8005fb8:	20000c1c 	.word	0x20000c1c
 8005fbc:	20000c18 	.word	0x20000c18
 8005fc0:	2000001c 	.word	0x2000001c

08005fc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10b      	bne.n	8005fec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	60fb      	str	r3, [r7, #12]
}
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	e7fd      	b.n	8005fe8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fec:	4b07      	ldr	r3, [pc, #28]	@ (800600c <vTaskPlaceOnEventList+0x48>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3318      	adds	r3, #24
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7fe fb16 	bl	8004626 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	6838      	ldr	r0, [r7, #0]
 8005ffe:	f000 fb87 	bl	8006710 <prvAddCurrentTaskToDelayedList>
}
 8006002:	bf00      	nop
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000c18 	.word	0x20000c18

08006010 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10b      	bne.n	800603a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	617b      	str	r3, [r7, #20]
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop
 8006038:	e7fd      	b.n	8006036 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800603a:	4b0a      	ldr	r3, [pc, #40]	@ (8006064 <vTaskPlaceOnEventListRestricted+0x54>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3318      	adds	r3, #24
 8006040:	4619      	mov	r1, r3
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7fe facb 	bl	80045de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800604e:	f04f 33ff 	mov.w	r3, #4294967295
 8006052:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006054:	6879      	ldr	r1, [r7, #4]
 8006056:	68b8      	ldr	r0, [r7, #8]
 8006058:	f000 fb5a 	bl	8006710 <prvAddCurrentTaskToDelayedList>
	}
 800605c:	bf00      	nop
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	20000c18 	.word	0x20000c18

08006068 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10b      	bne.n	8006096 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800607e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	60fb      	str	r3, [r7, #12]
}
 8006090:	bf00      	nop
 8006092:	bf00      	nop
 8006094:	e7fd      	b.n	8006092 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	3318      	adds	r3, #24
 800609a:	4618      	mov	r0, r3
 800609c:	f7fe fafc 	bl	8004698 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006118 <xTaskRemoveFromEventList+0xb0>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d11d      	bne.n	80060e4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	3304      	adds	r3, #4
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fe faf3 	bl	8004698 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b6:	4b19      	ldr	r3, [pc, #100]	@ (800611c <xTaskRemoveFromEventList+0xb4>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d903      	bls.n	80060c6 <xTaskRemoveFromEventList+0x5e>
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c2:	4a16      	ldr	r2, [pc, #88]	@ (800611c <xTaskRemoveFromEventList+0xb4>)
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ca:	4613      	mov	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4a13      	ldr	r2, [pc, #76]	@ (8006120 <xTaskRemoveFromEventList+0xb8>)
 80060d4:	441a      	add	r2, r3
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	3304      	adds	r3, #4
 80060da:	4619      	mov	r1, r3
 80060dc:	4610      	mov	r0, r2
 80060de:	f7fe fa7e 	bl	80045de <vListInsertEnd>
 80060e2:	e005      	b.n	80060f0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	3318      	adds	r3, #24
 80060e8:	4619      	mov	r1, r3
 80060ea:	480e      	ldr	r0, [pc, #56]	@ (8006124 <xTaskRemoveFromEventList+0xbc>)
 80060ec:	f7fe fa77 	bl	80045de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006128 <xTaskRemoveFromEventList+0xc0>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d905      	bls.n	800610a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060fe:	2301      	movs	r3, #1
 8006100:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006102:	4b0a      	ldr	r3, [pc, #40]	@ (800612c <xTaskRemoveFromEventList+0xc4>)
 8006104:	2201      	movs	r2, #1
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	e001      	b.n	800610e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800610e:	697b      	ldr	r3, [r7, #20]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	20001114 	.word	0x20001114
 800611c:	200010f4 	.word	0x200010f4
 8006120:	20000c1c 	.word	0x20000c1c
 8006124:	200010ac 	.word	0x200010ac
 8006128:	20000c18 	.word	0x20000c18
 800612c:	20001100 	.word	0x20001100

08006130 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006138:	4b06      	ldr	r3, [pc, #24]	@ (8006154 <vTaskInternalSetTimeOutState+0x24>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006140:	4b05      	ldr	r3, [pc, #20]	@ (8006158 <vTaskInternalSetTimeOutState+0x28>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	605a      	str	r2, [r3, #4]
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	20001104 	.word	0x20001104
 8006158:	200010f0 	.word	0x200010f0

0800615c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b088      	sub	sp, #32
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10b      	bne.n	8006184 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	613b      	str	r3, [r7, #16]
}
 800617e:	bf00      	nop
 8006180:	bf00      	nop
 8006182:	e7fd      	b.n	8006180 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10b      	bne.n	80061a2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	60fb      	str	r3, [r7, #12]
}
 800619c:	bf00      	nop
 800619e:	bf00      	nop
 80061a0:	e7fd      	b.n	800619e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80061a2:	f000 ff91 	bl	80070c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061a6:	4b1d      	ldr	r3, [pc, #116]	@ (800621c <xTaskCheckForTimeOut+0xc0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	d102      	bne.n	80061c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	e023      	b.n	800620e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4b15      	ldr	r3, [pc, #84]	@ (8006220 <xTaskCheckForTimeOut+0xc4>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d007      	beq.n	80061e2 <xTaskCheckForTimeOut+0x86>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d302      	bcc.n	80061e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061dc:	2301      	movs	r3, #1
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	e015      	b.n	800620e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d20b      	bcs.n	8006204 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	1ad2      	subs	r2, r2, r3
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff ff99 	bl	8006130 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061fe:	2300      	movs	r3, #0
 8006200:	61fb      	str	r3, [r7, #28]
 8006202:	e004      	b.n	800620e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800620a:	2301      	movs	r3, #1
 800620c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800620e:	f000 ff8d 	bl	800712c <vPortExitCritical>

	return xReturn;
 8006212:	69fb      	ldr	r3, [r7, #28]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3720      	adds	r7, #32
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	200010f0 	.word	0x200010f0
 8006220:	20001104 	.word	0x20001104

08006224 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006228:	4b03      	ldr	r3, [pc, #12]	@ (8006238 <vTaskMissedYield+0x14>)
 800622a:	2201      	movs	r2, #1
 800622c:	601a      	str	r2, [r3, #0]
}
 800622e:	bf00      	nop
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	20001100 	.word	0x20001100

0800623c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006244:	f000 f852 	bl	80062ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006248:	4b06      	ldr	r3, [pc, #24]	@ (8006264 <prvIdleTask+0x28>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d9f9      	bls.n	8006244 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006250:	4b05      	ldr	r3, [pc, #20]	@ (8006268 <prvIdleTask+0x2c>)
 8006252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006260:	e7f0      	b.n	8006244 <prvIdleTask+0x8>
 8006262:	bf00      	nop
 8006264:	20000c1c 	.word	0x20000c1c
 8006268:	e000ed04 	.word	0xe000ed04

0800626c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006272:	2300      	movs	r3, #0
 8006274:	607b      	str	r3, [r7, #4]
 8006276:	e00c      	b.n	8006292 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4a12      	ldr	r2, [pc, #72]	@ (80062cc <prvInitialiseTaskLists+0x60>)
 8006284:	4413      	add	r3, r2
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe f97c 	bl	8004584 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3301      	adds	r3, #1
 8006290:	607b      	str	r3, [r7, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b37      	cmp	r3, #55	@ 0x37
 8006296:	d9ef      	bls.n	8006278 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006298:	480d      	ldr	r0, [pc, #52]	@ (80062d0 <prvInitialiseTaskLists+0x64>)
 800629a:	f7fe f973 	bl	8004584 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800629e:	480d      	ldr	r0, [pc, #52]	@ (80062d4 <prvInitialiseTaskLists+0x68>)
 80062a0:	f7fe f970 	bl	8004584 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062a4:	480c      	ldr	r0, [pc, #48]	@ (80062d8 <prvInitialiseTaskLists+0x6c>)
 80062a6:	f7fe f96d 	bl	8004584 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062aa:	480c      	ldr	r0, [pc, #48]	@ (80062dc <prvInitialiseTaskLists+0x70>)
 80062ac:	f7fe f96a 	bl	8004584 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062b0:	480b      	ldr	r0, [pc, #44]	@ (80062e0 <prvInitialiseTaskLists+0x74>)
 80062b2:	f7fe f967 	bl	8004584 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062b6:	4b0b      	ldr	r3, [pc, #44]	@ (80062e4 <prvInitialiseTaskLists+0x78>)
 80062b8:	4a05      	ldr	r2, [pc, #20]	@ (80062d0 <prvInitialiseTaskLists+0x64>)
 80062ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062bc:	4b0a      	ldr	r3, [pc, #40]	@ (80062e8 <prvInitialiseTaskLists+0x7c>)
 80062be:	4a05      	ldr	r2, [pc, #20]	@ (80062d4 <prvInitialiseTaskLists+0x68>)
 80062c0:	601a      	str	r2, [r3, #0]
}
 80062c2:	bf00      	nop
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000c1c 	.word	0x20000c1c
 80062d0:	2000107c 	.word	0x2000107c
 80062d4:	20001090 	.word	0x20001090
 80062d8:	200010ac 	.word	0x200010ac
 80062dc:	200010c0 	.word	0x200010c0
 80062e0:	200010d8 	.word	0x200010d8
 80062e4:	200010a4 	.word	0x200010a4
 80062e8:	200010a8 	.word	0x200010a8

080062ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062f2:	e019      	b.n	8006328 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062f4:	f000 fee8 	bl	80070c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f8:	4b10      	ldr	r3, [pc, #64]	@ (800633c <prvCheckTasksWaitingTermination+0x50>)
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3304      	adds	r3, #4
 8006304:	4618      	mov	r0, r3
 8006306:	f7fe f9c7 	bl	8004698 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800630a:	4b0d      	ldr	r3, [pc, #52]	@ (8006340 <prvCheckTasksWaitingTermination+0x54>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3b01      	subs	r3, #1
 8006310:	4a0b      	ldr	r2, [pc, #44]	@ (8006340 <prvCheckTasksWaitingTermination+0x54>)
 8006312:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006314:	4b0b      	ldr	r3, [pc, #44]	@ (8006344 <prvCheckTasksWaitingTermination+0x58>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3b01      	subs	r3, #1
 800631a:	4a0a      	ldr	r2, [pc, #40]	@ (8006344 <prvCheckTasksWaitingTermination+0x58>)
 800631c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800631e:	f000 ff05 	bl	800712c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f810 	bl	8006348 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006328:	4b06      	ldr	r3, [pc, #24]	@ (8006344 <prvCheckTasksWaitingTermination+0x58>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e1      	bne.n	80062f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006330:	bf00      	nop
 8006332:	bf00      	nop
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	200010c0 	.word	0x200010c0
 8006340:	200010ec 	.word	0x200010ec
 8006344:	200010d4 	.word	0x200010d4

08006348 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3354      	adds	r3, #84	@ 0x54
 8006354:	4618      	mov	r0, r3
 8006356:	f001 ff61 	bl	800821c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006360:	2b00      	cmp	r3, #0
 8006362:	d108      	bne.n	8006376 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006368:	4618      	mov	r0, r3
 800636a:	f001 f89d 	bl	80074a8 <vPortFree>
				vPortFree( pxTCB );
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 f89a 	bl	80074a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006374:	e019      	b.n	80063aa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800637c:	2b01      	cmp	r3, #1
 800637e:	d103      	bne.n	8006388 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f001 f891 	bl	80074a8 <vPortFree>
	}
 8006386:	e010      	b.n	80063aa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800638e:	2b02      	cmp	r3, #2
 8006390:	d00b      	beq.n	80063aa <prvDeleteTCB+0x62>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	60fb      	str	r3, [r7, #12]
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	e7fd      	b.n	80063a6 <prvDeleteTCB+0x5e>
	}
 80063aa:	bf00      	nop
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ba:	4b0c      	ldr	r3, [pc, #48]	@ (80063ec <prvResetNextTaskUnblockTime+0x38>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d104      	bne.n	80063ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063c4:	4b0a      	ldr	r3, [pc, #40]	@ (80063f0 <prvResetNextTaskUnblockTime+0x3c>)
 80063c6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063cc:	e008      	b.n	80063e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ce:	4b07      	ldr	r3, [pc, #28]	@ (80063ec <prvResetNextTaskUnblockTime+0x38>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	4a04      	ldr	r2, [pc, #16]	@ (80063f0 <prvResetNextTaskUnblockTime+0x3c>)
 80063de:	6013      	str	r3, [r2, #0]
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	200010a4 	.word	0x200010a4
 80063f0:	2000110c 	.word	0x2000110c

080063f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006428 <xTaskGetSchedulerState+0x34>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d102      	bne.n	8006408 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006402:	2301      	movs	r3, #1
 8006404:	607b      	str	r3, [r7, #4]
 8006406:	e008      	b.n	800641a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006408:	4b08      	ldr	r3, [pc, #32]	@ (800642c <xTaskGetSchedulerState+0x38>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d102      	bne.n	8006416 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006410:	2302      	movs	r3, #2
 8006412:	607b      	str	r3, [r7, #4]
 8006414:	e001      	b.n	800641a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006416:	2300      	movs	r3, #0
 8006418:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800641a:	687b      	ldr	r3, [r7, #4]
	}
 800641c:	4618      	mov	r0, r3
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	200010f8 	.word	0x200010f8
 800642c:	20001114 	.word	0x20001114

08006430 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800643c:	2300      	movs	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d051      	beq.n	80064ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800644a:	4b2a      	ldr	r3, [pc, #168]	@ (80064f4 <xTaskPriorityInherit+0xc4>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006450:	429a      	cmp	r2, r3
 8006452:	d241      	bcs.n	80064d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	2b00      	cmp	r3, #0
 800645a:	db06      	blt.n	800646a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800645c:	4b25      	ldr	r3, [pc, #148]	@ (80064f4 <xTaskPriorityInherit+0xc4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006462:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	6959      	ldr	r1, [r3, #20]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4a1f      	ldr	r2, [pc, #124]	@ (80064f8 <xTaskPriorityInherit+0xc8>)
 800647c:	4413      	add	r3, r2
 800647e:	4299      	cmp	r1, r3
 8006480:	d122      	bne.n	80064c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	3304      	adds	r3, #4
 8006486:	4618      	mov	r0, r3
 8006488:	f7fe f906 	bl	8004698 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800648c:	4b19      	ldr	r3, [pc, #100]	@ (80064f4 <xTaskPriorityInherit+0xc4>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800649a:	4b18      	ldr	r3, [pc, #96]	@ (80064fc <xTaskPriorityInherit+0xcc>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d903      	bls.n	80064aa <xTaskPriorityInherit+0x7a>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a6:	4a15      	ldr	r2, [pc, #84]	@ (80064fc <xTaskPriorityInherit+0xcc>)
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4a10      	ldr	r2, [pc, #64]	@ (80064f8 <xTaskPriorityInherit+0xc8>)
 80064b8:	441a      	add	r2, r3
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	3304      	adds	r3, #4
 80064be:	4619      	mov	r1, r3
 80064c0:	4610      	mov	r0, r2
 80064c2:	f7fe f88c 	bl	80045de <vListInsertEnd>
 80064c6:	e004      	b.n	80064d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80064c8:	4b0a      	ldr	r3, [pc, #40]	@ (80064f4 <xTaskPriorityInherit+0xc4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80064d2:	2301      	movs	r3, #1
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	e008      	b.n	80064ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064dc:	4b05      	ldr	r3, [pc, #20]	@ (80064f4 <xTaskPriorityInherit+0xc4>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d201      	bcs.n	80064ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80064e6:	2301      	movs	r3, #1
 80064e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064ea:	68fb      	ldr	r3, [r7, #12]
	}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000c18 	.word	0x20000c18
 80064f8:	20000c1c 	.word	0x20000c1c
 80064fc:	200010f4 	.word	0x200010f4

08006500 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d058      	beq.n	80065c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006516:	4b2f      	ldr	r3, [pc, #188]	@ (80065d4 <xTaskPriorityDisinherit+0xd4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	429a      	cmp	r2, r3
 800651e:	d00b      	beq.n	8006538 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	60fb      	str	r3, [r7, #12]
}
 8006532:	bf00      	nop
 8006534:	bf00      	nop
 8006536:	e7fd      	b.n	8006534 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10b      	bne.n	8006558 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	60bb      	str	r3, [r7, #8]
}
 8006552:	bf00      	nop
 8006554:	bf00      	nop
 8006556:	e7fd      	b.n	8006554 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800655c:	1e5a      	subs	r2, r3, #1
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800656a:	429a      	cmp	r2, r3
 800656c:	d02c      	beq.n	80065c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006572:	2b00      	cmp	r3, #0
 8006574:	d128      	bne.n	80065c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	3304      	adds	r3, #4
 800657a:	4618      	mov	r0, r3
 800657c:	f7fe f88c 	bl	8004698 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006598:	4b0f      	ldr	r3, [pc, #60]	@ (80065d8 <xTaskPriorityDisinherit+0xd8>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	429a      	cmp	r2, r3
 800659e:	d903      	bls.n	80065a8 <xTaskPriorityDisinherit+0xa8>
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a4:	4a0c      	ldr	r2, [pc, #48]	@ (80065d8 <xTaskPriorityDisinherit+0xd8>)
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ac:	4613      	mov	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4a09      	ldr	r2, [pc, #36]	@ (80065dc <xTaskPriorityDisinherit+0xdc>)
 80065b6:	441a      	add	r2, r3
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	3304      	adds	r3, #4
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f7fe f80d 	bl	80045de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065c4:	2301      	movs	r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065c8:	697b      	ldr	r3, [r7, #20]
	}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20000c18 	.word	0x20000c18
 80065d8:	200010f4 	.word	0x200010f4
 80065dc:	20000c1c 	.word	0x20000c1c

080065e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b088      	sub	sp, #32
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80065ee:	2301      	movs	r3, #1
 80065f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d06c      	beq.n	80066d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10b      	bne.n	8006618 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	60fb      	str	r3, [r7, #12]
}
 8006612:	bf00      	nop
 8006614:	bf00      	nop
 8006616:	e7fd      	b.n	8006614 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	d902      	bls.n	8006628 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	61fb      	str	r3, [r7, #28]
 8006626:	e002      	b.n	800662e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800662c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006632:	69fa      	ldr	r2, [r7, #28]
 8006634:	429a      	cmp	r2, r3
 8006636:	d04c      	beq.n	80066d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	429a      	cmp	r2, r3
 8006640:	d147      	bne.n	80066d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006642:	4b26      	ldr	r3, [pc, #152]	@ (80066dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	429a      	cmp	r2, r3
 800664a:	d10b      	bne.n	8006664 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	60bb      	str	r3, [r7, #8]
}
 800665e:	bf00      	nop
 8006660:	bf00      	nop
 8006662:	e7fd      	b.n	8006660 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006668:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	69fa      	ldr	r2, [r7, #28]
 800666e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	2b00      	cmp	r3, #0
 8006676:	db04      	blt.n	8006682 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	6959      	ldr	r1, [r3, #20]
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4a13      	ldr	r2, [pc, #76]	@ (80066e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006692:	4413      	add	r3, r2
 8006694:	4299      	cmp	r1, r3
 8006696:	d11c      	bne.n	80066d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	3304      	adds	r3, #4
 800669c:	4618      	mov	r0, r3
 800669e:	f7fd fffb 	bl	8004698 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a6:	4b0f      	ldr	r3, [pc, #60]	@ (80066e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d903      	bls.n	80066b6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b2:	4a0c      	ldr	r2, [pc, #48]	@ (80066e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4a07      	ldr	r2, [pc, #28]	@ (80066e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80066c4:	441a      	add	r2, r3
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	3304      	adds	r3, #4
 80066ca:	4619      	mov	r1, r3
 80066cc:	4610      	mov	r0, r2
 80066ce:	f7fd ff86 	bl	80045de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066d2:	bf00      	nop
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20000c18 	.word	0x20000c18
 80066e0:	20000c1c 	.word	0x20000c1c
 80066e4:	200010f4 	.word	0x200010f4

080066e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80066ec:	4b07      	ldr	r3, [pc, #28]	@ (800670c <pvTaskIncrementMutexHeldCount+0x24>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d004      	beq.n	80066fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80066f4:	4b05      	ldr	r3, [pc, #20]	@ (800670c <pvTaskIncrementMutexHeldCount+0x24>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066fa:	3201      	adds	r2, #1
 80066fc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80066fe:	4b03      	ldr	r3, [pc, #12]	@ (800670c <pvTaskIncrementMutexHeldCount+0x24>)
 8006700:	681b      	ldr	r3, [r3, #0]
	}
 8006702:	4618      	mov	r0, r3
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	20000c18 	.word	0x20000c18

08006710 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800671a:	4b21      	ldr	r3, [pc, #132]	@ (80067a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006720:	4b20      	ldr	r3, [pc, #128]	@ (80067a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3304      	adds	r3, #4
 8006726:	4618      	mov	r0, r3
 8006728:	f7fd ffb6 	bl	8004698 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006732:	d10a      	bne.n	800674a <prvAddCurrentTaskToDelayedList+0x3a>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d007      	beq.n	800674a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800673a:	4b1a      	ldr	r3, [pc, #104]	@ (80067a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3304      	adds	r3, #4
 8006740:	4619      	mov	r1, r3
 8006742:	4819      	ldr	r0, [pc, #100]	@ (80067a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006744:	f7fd ff4b 	bl	80045de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006748:	e026      	b.n	8006798 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4413      	add	r3, r2
 8006750:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006752:	4b14      	ldr	r3, [pc, #80]	@ (80067a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	429a      	cmp	r2, r3
 8006760:	d209      	bcs.n	8006776 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006762:	4b12      	ldr	r3, [pc, #72]	@ (80067ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	4b0f      	ldr	r3, [pc, #60]	@ (80067a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3304      	adds	r3, #4
 800676c:	4619      	mov	r1, r3
 800676e:	4610      	mov	r0, r2
 8006770:	f7fd ff59 	bl	8004626 <vListInsert>
}
 8006774:	e010      	b.n	8006798 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006776:	4b0e      	ldr	r3, [pc, #56]	@ (80067b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	4b0a      	ldr	r3, [pc, #40]	@ (80067a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3304      	adds	r3, #4
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f7fd ff4f 	bl	8004626 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006788:	4b0a      	ldr	r3, [pc, #40]	@ (80067b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	429a      	cmp	r2, r3
 8006790:	d202      	bcs.n	8006798 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006792:	4a08      	ldr	r2, [pc, #32]	@ (80067b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	6013      	str	r3, [r2, #0]
}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	200010f0 	.word	0x200010f0
 80067a4:	20000c18 	.word	0x20000c18
 80067a8:	200010d8 	.word	0x200010d8
 80067ac:	200010a8 	.word	0x200010a8
 80067b0:	200010a4 	.word	0x200010a4
 80067b4:	2000110c 	.word	0x2000110c

080067b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08a      	sub	sp, #40	@ 0x28
 80067bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80067c2:	f000 fb13 	bl	8006dec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80067c6:	4b1d      	ldr	r3, [pc, #116]	@ (800683c <xTimerCreateTimerTask+0x84>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d021      	beq.n	8006812 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80067d2:	2300      	movs	r3, #0
 80067d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80067d6:	1d3a      	adds	r2, r7, #4
 80067d8:	f107 0108 	add.w	r1, r7, #8
 80067dc:	f107 030c 	add.w	r3, r7, #12
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fd feb5 	bl	8004550 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	9202      	str	r2, [sp, #8]
 80067ee:	9301      	str	r3, [sp, #4]
 80067f0:	2302      	movs	r3, #2
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	2300      	movs	r3, #0
 80067f6:	460a      	mov	r2, r1
 80067f8:	4911      	ldr	r1, [pc, #68]	@ (8006840 <xTimerCreateTimerTask+0x88>)
 80067fa:	4812      	ldr	r0, [pc, #72]	@ (8006844 <xTimerCreateTimerTask+0x8c>)
 80067fc:	f7fe ffa2 	bl	8005744 <xTaskCreateStatic>
 8006800:	4603      	mov	r3, r0
 8006802:	4a11      	ldr	r2, [pc, #68]	@ (8006848 <xTimerCreateTimerTask+0x90>)
 8006804:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006806:	4b10      	ldr	r3, [pc, #64]	@ (8006848 <xTimerCreateTimerTask+0x90>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800680e:	2301      	movs	r3, #1
 8006810:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10b      	bne.n	8006830 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	613b      	str	r3, [r7, #16]
}
 800682a:	bf00      	nop
 800682c:	bf00      	nop
 800682e:	e7fd      	b.n	800682c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006830:	697b      	ldr	r3, [r7, #20]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20001148 	.word	0x20001148
 8006840:	0800a6a8 	.word	0x0800a6a8
 8006844:	08006985 	.word	0x08006985
 8006848:	2000114c 	.word	0x2000114c

0800684c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08a      	sub	sp, #40	@ 0x28
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800685a:	2300      	movs	r3, #0
 800685c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10b      	bne.n	800687c <xTimerGenericCommand+0x30>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	623b      	str	r3, [r7, #32]
}
 8006876:	bf00      	nop
 8006878:	bf00      	nop
 800687a:	e7fd      	b.n	8006878 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800687c:	4b19      	ldr	r3, [pc, #100]	@ (80068e4 <xTimerGenericCommand+0x98>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d02a      	beq.n	80068da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2b05      	cmp	r3, #5
 8006894:	dc18      	bgt.n	80068c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006896:	f7ff fdad 	bl	80063f4 <xTaskGetSchedulerState>
 800689a:	4603      	mov	r3, r0
 800689c:	2b02      	cmp	r3, #2
 800689e:	d109      	bne.n	80068b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068a0:	4b10      	ldr	r3, [pc, #64]	@ (80068e4 <xTimerGenericCommand+0x98>)
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	f107 0110 	add.w	r1, r7, #16
 80068a8:	2300      	movs	r3, #0
 80068aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068ac:	f7fe f8d2 	bl	8004a54 <xQueueGenericSend>
 80068b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80068b2:	e012      	b.n	80068da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068b4:	4b0b      	ldr	r3, [pc, #44]	@ (80068e4 <xTimerGenericCommand+0x98>)
 80068b6:	6818      	ldr	r0, [r3, #0]
 80068b8:	f107 0110 	add.w	r1, r7, #16
 80068bc:	2300      	movs	r3, #0
 80068be:	2200      	movs	r2, #0
 80068c0:	f7fe f8c8 	bl	8004a54 <xQueueGenericSend>
 80068c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80068c6:	e008      	b.n	80068da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068c8:	4b06      	ldr	r3, [pc, #24]	@ (80068e4 <xTimerGenericCommand+0x98>)
 80068ca:	6818      	ldr	r0, [r3, #0]
 80068cc:	f107 0110 	add.w	r1, r7, #16
 80068d0:	2300      	movs	r3, #0
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	f7fe f9c0 	bl	8004c58 <xQueueGenericSendFromISR>
 80068d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80068da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3728      	adds	r7, #40	@ 0x28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20001148 	.word	0x20001148

080068e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068f2:	4b23      	ldr	r3, [pc, #140]	@ (8006980 <prvProcessExpiredTimer+0x98>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	3304      	adds	r3, #4
 8006900:	4618      	mov	r0, r3
 8006902:	f7fd fec9 	bl	8004698 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b00      	cmp	r3, #0
 8006912:	d023      	beq.n	800695c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	699a      	ldr	r2, [r3, #24]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	18d1      	adds	r1, r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	6978      	ldr	r0, [r7, #20]
 8006922:	f000 f8d5 	bl	8006ad0 <prvInsertTimerInActiveList>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d020      	beq.n	800696e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800692c:	2300      	movs	r3, #0
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2300      	movs	r3, #0
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	2100      	movs	r1, #0
 8006936:	6978      	ldr	r0, [r7, #20]
 8006938:	f7ff ff88 	bl	800684c <xTimerGenericCommand>
 800693c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d114      	bne.n	800696e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	60fb      	str	r3, [r7, #12]
}
 8006956:	bf00      	nop
 8006958:	bf00      	nop
 800695a:	e7fd      	b.n	8006958 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006962:	f023 0301 	bic.w	r3, r3, #1
 8006966:	b2da      	uxtb	r2, r3
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	6978      	ldr	r0, [r7, #20]
 8006974:	4798      	blx	r3
}
 8006976:	bf00      	nop
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20001140 	.word	0x20001140

08006984 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800698c:	f107 0308 	add.w	r3, r7, #8
 8006990:	4618      	mov	r0, r3
 8006992:	f000 f859 	bl	8006a48 <prvGetNextExpireTime>
 8006996:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4619      	mov	r1, r3
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 f805 	bl	80069ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069a2:	f000 f8d7 	bl	8006b54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069a6:	bf00      	nop
 80069a8:	e7f0      	b.n	800698c <prvTimerTask+0x8>
	...

080069ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069b6:	f7ff f929 	bl	8005c0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069ba:	f107 0308 	add.w	r3, r7, #8
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 f866 	bl	8006a90 <prvSampleTimeNow>
 80069c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d130      	bne.n	8006a2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10a      	bne.n	80069e8 <prvProcessTimerOrBlockTask+0x3c>
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d806      	bhi.n	80069e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80069da:	f7ff f925 	bl	8005c28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80069de:	68f9      	ldr	r1, [r7, #12]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff ff81 	bl	80068e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80069e6:	e024      	b.n	8006a32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d008      	beq.n	8006a00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80069ee:	4b13      	ldr	r3, [pc, #76]	@ (8006a3c <prvProcessTimerOrBlockTask+0x90>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <prvProcessTimerOrBlockTask+0x50>
 80069f8:	2301      	movs	r3, #1
 80069fa:	e000      	b.n	80069fe <prvProcessTimerOrBlockTask+0x52>
 80069fc:	2300      	movs	r3, #0
 80069fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a00:	4b0f      	ldr	r3, [pc, #60]	@ (8006a40 <prvProcessTimerOrBlockTask+0x94>)
 8006a02:	6818      	ldr	r0, [r3, #0]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	f7fe fe65 	bl	80056dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a12:	f7ff f909 	bl	8005c28 <xTaskResumeAll>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10a      	bne.n	8006a32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a1c:	4b09      	ldr	r3, [pc, #36]	@ (8006a44 <prvProcessTimerOrBlockTask+0x98>)
 8006a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	f3bf 8f6f 	isb	sy
}
 8006a2c:	e001      	b.n	8006a32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a2e:	f7ff f8fb 	bl	8005c28 <xTaskResumeAll>
}
 8006a32:	bf00      	nop
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20001144 	.word	0x20001144
 8006a40:	20001148 	.word	0x20001148
 8006a44:	e000ed04 	.word	0xe000ed04

08006a48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a50:	4b0e      	ldr	r3, [pc, #56]	@ (8006a8c <prvGetNextExpireTime+0x44>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <prvGetNextExpireTime+0x16>
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	e000      	b.n	8006a60 <prvGetNextExpireTime+0x18>
 8006a5e:	2200      	movs	r2, #0
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d105      	bne.n	8006a78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a6c:	4b07      	ldr	r3, [pc, #28]	@ (8006a8c <prvGetNextExpireTime+0x44>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	e001      	b.n	8006a7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	20001140 	.word	0x20001140

08006a90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a98:	f7ff f964 	bl	8005d64 <xTaskGetTickCount>
 8006a9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8006acc <prvSampleTimeNow+0x3c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d205      	bcs.n	8006ab4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006aa8:	f000 f93a 	bl	8006d20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	e002      	b.n	8006aba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006aba:	4a04      	ldr	r2, [pc, #16]	@ (8006acc <prvSampleTimeNow+0x3c>)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20001150 	.word	0x20001150

08006ad0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d812      	bhi.n	8006b1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	1ad2      	subs	r2, r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d302      	bcc.n	8006b0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b04:	2301      	movs	r3, #1
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	e01b      	b.n	8006b42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b0a:	4b10      	ldr	r3, [pc, #64]	@ (8006b4c <prvInsertTimerInActiveList+0x7c>)
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	3304      	adds	r3, #4
 8006b12:	4619      	mov	r1, r3
 8006b14:	4610      	mov	r0, r2
 8006b16:	f7fd fd86 	bl	8004626 <vListInsert>
 8006b1a:	e012      	b.n	8006b42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d206      	bcs.n	8006b32 <prvInsertTimerInActiveList+0x62>
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d302      	bcc.n	8006b32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	e007      	b.n	8006b42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b32:	4b07      	ldr	r3, [pc, #28]	@ (8006b50 <prvInsertTimerInActiveList+0x80>)
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	f7fd fd72 	bl	8004626 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b42:	697b      	ldr	r3, [r7, #20]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	20001144 	.word	0x20001144
 8006b50:	20001140 	.word	0x20001140

08006b54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b08e      	sub	sp, #56	@ 0x38
 8006b58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b5a:	e0ce      	b.n	8006cfa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	da19      	bge.n	8006b96 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b62:	1d3b      	adds	r3, r7, #4
 8006b64:	3304      	adds	r3, #4
 8006b66:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10b      	bne.n	8006b86 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	61fb      	str	r3, [r7, #28]
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	e7fd      	b.n	8006b82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b8c:	6850      	ldr	r0, [r2, #4]
 8006b8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b90:	6892      	ldr	r2, [r2, #8]
 8006b92:	4611      	mov	r1, r2
 8006b94:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f2c0 80ae 	blt.w	8006cfa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d004      	beq.n	8006bb4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bac:	3304      	adds	r3, #4
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fd fd72 	bl	8004698 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bb4:	463b      	mov	r3, r7
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff ff6a 	bl	8006a90 <prvSampleTimeNow>
 8006bbc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b09      	cmp	r3, #9
 8006bc2:	f200 8097 	bhi.w	8006cf4 <prvProcessReceivedCommands+0x1a0>
 8006bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bcc <prvProcessReceivedCommands+0x78>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006bf5 	.word	0x08006bf5
 8006bd0:	08006bf5 	.word	0x08006bf5
 8006bd4:	08006bf5 	.word	0x08006bf5
 8006bd8:	08006c6b 	.word	0x08006c6b
 8006bdc:	08006c7f 	.word	0x08006c7f
 8006be0:	08006ccb 	.word	0x08006ccb
 8006be4:	08006bf5 	.word	0x08006bf5
 8006be8:	08006bf5 	.word	0x08006bf5
 8006bec:	08006c6b 	.word	0x08006c6b
 8006bf0:	08006c7f 	.word	0x08006c7f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bfa:	f043 0301 	orr.w	r3, r3, #1
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	18d1      	adds	r1, r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c14:	f7ff ff5c 	bl	8006ad0 <prvInsertTimerInActiveList>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d06c      	beq.n	8006cf8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d061      	beq.n	8006cf8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	441a      	add	r2, r3
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	2300      	movs	r3, #0
 8006c42:	2100      	movs	r1, #0
 8006c44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c46:	f7ff fe01 	bl	800684c <xTimerGenericCommand>
 8006c4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d152      	bne.n	8006cf8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	61bb      	str	r3, [r7, #24]
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop
 8006c68:	e7fd      	b.n	8006c66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c70:	f023 0301 	bic.w	r3, r3, #1
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006c7c:	e03d      	b.n	8006cfa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c84:	f043 0301 	orr.w	r3, r3, #1
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10b      	bne.n	8006cb6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	617b      	str	r3, [r7, #20]
}
 8006cb0:	bf00      	nop
 8006cb2:	bf00      	nop
 8006cb4:	e7fd      	b.n	8006cb2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbc:	18d1      	adds	r1, r2, r3
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cc4:	f7ff ff04 	bl	8006ad0 <prvInsertTimerInActiveList>
					break;
 8006cc8:	e017      	b.n	8006cfa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d103      	bne.n	8006ce0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006cd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cda:	f000 fbe5 	bl	80074a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006cde:	e00c      	b.n	8006cfa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ce6:	f023 0301 	bic.w	r3, r3, #1
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006cf2:	e002      	b.n	8006cfa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006cf4:	bf00      	nop
 8006cf6:	e000      	b.n	8006cfa <prvProcessReceivedCommands+0x1a6>
					break;
 8006cf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cfa:	4b08      	ldr	r3, [pc, #32]	@ (8006d1c <prvProcessReceivedCommands+0x1c8>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	1d39      	adds	r1, r7, #4
 8006d00:	2200      	movs	r2, #0
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe f8d6 	bl	8004eb4 <xQueueReceive>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f47f af26 	bne.w	8006b5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d10:	bf00      	nop
 8006d12:	bf00      	nop
 8006d14:	3730      	adds	r7, #48	@ 0x30
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20001148 	.word	0x20001148

08006d20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d26:	e049      	b.n	8006dbc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d28:	4b2e      	ldr	r3, [pc, #184]	@ (8006de4 <prvSwitchTimerLists+0xc4>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d32:	4b2c      	ldr	r3, [pc, #176]	@ (8006de4 <prvSwitchTimerLists+0xc4>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3304      	adds	r3, #4
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fd fca9 	bl	8004698 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d02f      	beq.n	8006dbc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	4413      	add	r3, r2
 8006d64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d90e      	bls.n	8006d8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006de4 <prvSwitchTimerLists+0xc4>)
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3304      	adds	r3, #4
 8006d82:	4619      	mov	r1, r3
 8006d84:	4610      	mov	r0, r2
 8006d86:	f7fd fc4e 	bl	8004626 <vListInsert>
 8006d8a:	e017      	b.n	8006dbc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	2300      	movs	r3, #0
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	2100      	movs	r1, #0
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f7ff fd58 	bl	800684c <xTimerGenericCommand>
 8006d9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10b      	bne.n	8006dbc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	603b      	str	r3, [r7, #0]
}
 8006db6:	bf00      	nop
 8006db8:	bf00      	nop
 8006dba:	e7fd      	b.n	8006db8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dbc:	4b09      	ldr	r3, [pc, #36]	@ (8006de4 <prvSwitchTimerLists+0xc4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1b0      	bne.n	8006d28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006dc6:	4b07      	ldr	r3, [pc, #28]	@ (8006de4 <prvSwitchTimerLists+0xc4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006dcc:	4b06      	ldr	r3, [pc, #24]	@ (8006de8 <prvSwitchTimerLists+0xc8>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a04      	ldr	r2, [pc, #16]	@ (8006de4 <prvSwitchTimerLists+0xc4>)
 8006dd2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006dd4:	4a04      	ldr	r2, [pc, #16]	@ (8006de8 <prvSwitchTimerLists+0xc8>)
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	6013      	str	r3, [r2, #0]
}
 8006dda:	bf00      	nop
 8006ddc:	3718      	adds	r7, #24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20001140 	.word	0x20001140
 8006de8:	20001144 	.word	0x20001144

08006dec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006df2:	f000 f969 	bl	80070c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006df6:	4b15      	ldr	r3, [pc, #84]	@ (8006e4c <prvCheckForValidListAndQueue+0x60>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d120      	bne.n	8006e40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006dfe:	4814      	ldr	r0, [pc, #80]	@ (8006e50 <prvCheckForValidListAndQueue+0x64>)
 8006e00:	f7fd fbc0 	bl	8004584 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e04:	4813      	ldr	r0, [pc, #76]	@ (8006e54 <prvCheckForValidListAndQueue+0x68>)
 8006e06:	f7fd fbbd 	bl	8004584 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e0a:	4b13      	ldr	r3, [pc, #76]	@ (8006e58 <prvCheckForValidListAndQueue+0x6c>)
 8006e0c:	4a10      	ldr	r2, [pc, #64]	@ (8006e50 <prvCheckForValidListAndQueue+0x64>)
 8006e0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e10:	4b12      	ldr	r3, [pc, #72]	@ (8006e5c <prvCheckForValidListAndQueue+0x70>)
 8006e12:	4a10      	ldr	r2, [pc, #64]	@ (8006e54 <prvCheckForValidListAndQueue+0x68>)
 8006e14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e16:	2300      	movs	r3, #0
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	4b11      	ldr	r3, [pc, #68]	@ (8006e60 <prvCheckForValidListAndQueue+0x74>)
 8006e1c:	4a11      	ldr	r2, [pc, #68]	@ (8006e64 <prvCheckForValidListAndQueue+0x78>)
 8006e1e:	2110      	movs	r1, #16
 8006e20:	200a      	movs	r0, #10
 8006e22:	f7fd fccd 	bl	80047c0 <xQueueGenericCreateStatic>
 8006e26:	4603      	mov	r3, r0
 8006e28:	4a08      	ldr	r2, [pc, #32]	@ (8006e4c <prvCheckForValidListAndQueue+0x60>)
 8006e2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e2c:	4b07      	ldr	r3, [pc, #28]	@ (8006e4c <prvCheckForValidListAndQueue+0x60>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e34:	4b05      	ldr	r3, [pc, #20]	@ (8006e4c <prvCheckForValidListAndQueue+0x60>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	490b      	ldr	r1, [pc, #44]	@ (8006e68 <prvCheckForValidListAndQueue+0x7c>)
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe fbfa 	bl	8005634 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e40:	f000 f974 	bl	800712c <vPortExitCritical>
}
 8006e44:	bf00      	nop
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20001148 	.word	0x20001148
 8006e50:	20001118 	.word	0x20001118
 8006e54:	2000112c 	.word	0x2000112c
 8006e58:	20001140 	.word	0x20001140
 8006e5c:	20001144 	.word	0x20001144
 8006e60:	200011f4 	.word	0x200011f4
 8006e64:	20001154 	.word	0x20001154
 8006e68:	0800a6b0 	.word	0x0800a6b0

08006e6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3b04      	subs	r3, #4
 8006e7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006e84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	3b04      	subs	r3, #4
 8006e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f023 0201 	bic.w	r2, r3, #1
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3b04      	subs	r3, #4
 8006e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e9c:	4a0c      	ldr	r2, [pc, #48]	@ (8006ed0 <pxPortInitialiseStack+0x64>)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3b14      	subs	r3, #20
 8006ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3b04      	subs	r3, #4
 8006eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f06f 0202 	mvn.w	r2, #2
 8006eba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3b20      	subs	r3, #32
 8006ec0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	08006ed5 	.word	0x08006ed5

08006ed4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ede:	4b13      	ldr	r3, [pc, #76]	@ (8006f2c <prvTaskExitError+0x58>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee6:	d00b      	beq.n	8006f00 <prvTaskExitError+0x2c>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	60fb      	str	r3, [r7, #12]
}
 8006efa:	bf00      	nop
 8006efc:	bf00      	nop
 8006efe:	e7fd      	b.n	8006efc <prvTaskExitError+0x28>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	60bb      	str	r3, [r7, #8]
}
 8006f12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f14:	bf00      	nop
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0fc      	beq.n	8006f16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	2000000c 	.word	0x2000000c

08006f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f30:	4b07      	ldr	r3, [pc, #28]	@ (8006f50 <pxCurrentTCBConst2>)
 8006f32:	6819      	ldr	r1, [r3, #0]
 8006f34:	6808      	ldr	r0, [r1, #0]
 8006f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3a:	f380 8809 	msr	PSP, r0
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f04f 0000 	mov.w	r0, #0
 8006f46:	f380 8811 	msr	BASEPRI, r0
 8006f4a:	4770      	bx	lr
 8006f4c:	f3af 8000 	nop.w

08006f50 <pxCurrentTCBConst2>:
 8006f50:	20000c18 	.word	0x20000c18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f54:	bf00      	nop
 8006f56:	bf00      	nop

08006f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f58:	4808      	ldr	r0, [pc, #32]	@ (8006f7c <prvPortStartFirstTask+0x24>)
 8006f5a:	6800      	ldr	r0, [r0, #0]
 8006f5c:	6800      	ldr	r0, [r0, #0]
 8006f5e:	f380 8808 	msr	MSP, r0
 8006f62:	f04f 0000 	mov.w	r0, #0
 8006f66:	f380 8814 	msr	CONTROL, r0
 8006f6a:	b662      	cpsie	i
 8006f6c:	b661      	cpsie	f
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	df00      	svc	0
 8006f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f7a:	bf00      	nop
 8006f7c:	e000ed08 	.word	0xe000ed08

08006f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f86:	4b47      	ldr	r3, [pc, #284]	@ (80070a4 <xPortStartScheduler+0x124>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a47      	ldr	r2, [pc, #284]	@ (80070a8 <xPortStartScheduler+0x128>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d10b      	bne.n	8006fa8 <xPortStartScheduler+0x28>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	60fb      	str	r3, [r7, #12]
}
 8006fa2:	bf00      	nop
 8006fa4:	bf00      	nop
 8006fa6:	e7fd      	b.n	8006fa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80070a4 <xPortStartScheduler+0x124>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a3f      	ldr	r2, [pc, #252]	@ (80070ac <xPortStartScheduler+0x12c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d10b      	bne.n	8006fca <xPortStartScheduler+0x4a>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	613b      	str	r3, [r7, #16]
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop
 8006fc8:	e7fd      	b.n	8006fc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fca:	4b39      	ldr	r3, [pc, #228]	@ (80070b0 <xPortStartScheduler+0x130>)
 8006fcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	22ff      	movs	r2, #255	@ 0xff
 8006fda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	4b31      	ldr	r3, [pc, #196]	@ (80070b4 <xPortStartScheduler+0x134>)
 8006ff0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ff2:	4b31      	ldr	r3, [pc, #196]	@ (80070b8 <xPortStartScheduler+0x138>)
 8006ff4:	2207      	movs	r2, #7
 8006ff6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ff8:	e009      	b.n	800700e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80070b8 <xPortStartScheduler+0x138>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3b01      	subs	r3, #1
 8007000:	4a2d      	ldr	r2, [pc, #180]	@ (80070b8 <xPortStartScheduler+0x138>)
 8007002:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	b2db      	uxtb	r3, r3
 800700c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800700e:	78fb      	ldrb	r3, [r7, #3]
 8007010:	b2db      	uxtb	r3, r3
 8007012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007016:	2b80      	cmp	r3, #128	@ 0x80
 8007018:	d0ef      	beq.n	8006ffa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800701a:	4b27      	ldr	r3, [pc, #156]	@ (80070b8 <xPortStartScheduler+0x138>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f1c3 0307 	rsb	r3, r3, #7
 8007022:	2b04      	cmp	r3, #4
 8007024:	d00b      	beq.n	800703e <xPortStartScheduler+0xbe>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	60bb      	str	r3, [r7, #8]
}
 8007038:	bf00      	nop
 800703a:	bf00      	nop
 800703c:	e7fd      	b.n	800703a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800703e:	4b1e      	ldr	r3, [pc, #120]	@ (80070b8 <xPortStartScheduler+0x138>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	4a1c      	ldr	r2, [pc, #112]	@ (80070b8 <xPortStartScheduler+0x138>)
 8007046:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007048:	4b1b      	ldr	r3, [pc, #108]	@ (80070b8 <xPortStartScheduler+0x138>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007050:	4a19      	ldr	r2, [pc, #100]	@ (80070b8 <xPortStartScheduler+0x138>)
 8007052:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	b2da      	uxtb	r2, r3
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800705c:	4b17      	ldr	r3, [pc, #92]	@ (80070bc <xPortStartScheduler+0x13c>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a16      	ldr	r2, [pc, #88]	@ (80070bc <xPortStartScheduler+0x13c>)
 8007062:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007066:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007068:	4b14      	ldr	r3, [pc, #80]	@ (80070bc <xPortStartScheduler+0x13c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a13      	ldr	r2, [pc, #76]	@ (80070bc <xPortStartScheduler+0x13c>)
 800706e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007072:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007074:	f000 f8da 	bl	800722c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007078:	4b11      	ldr	r3, [pc, #68]	@ (80070c0 <xPortStartScheduler+0x140>)
 800707a:	2200      	movs	r2, #0
 800707c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800707e:	f000 f8f9 	bl	8007274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007082:	4b10      	ldr	r3, [pc, #64]	@ (80070c4 <xPortStartScheduler+0x144>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a0f      	ldr	r2, [pc, #60]	@ (80070c4 <xPortStartScheduler+0x144>)
 8007088:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800708c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800708e:	f7ff ff63 	bl	8006f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007092:	f7fe ff31 	bl	8005ef8 <vTaskSwitchContext>
	prvTaskExitError();
 8007096:	f7ff ff1d 	bl	8006ed4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	e000ed00 	.word	0xe000ed00
 80070a8:	410fc271 	.word	0x410fc271
 80070ac:	410fc270 	.word	0x410fc270
 80070b0:	e000e400 	.word	0xe000e400
 80070b4:	20001244 	.word	0x20001244
 80070b8:	20001248 	.word	0x20001248
 80070bc:	e000ed20 	.word	0xe000ed20
 80070c0:	2000000c 	.word	0x2000000c
 80070c4:	e000ef34 	.word	0xe000ef34

080070c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	607b      	str	r3, [r7, #4]
}
 80070e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070e2:	4b10      	ldr	r3, [pc, #64]	@ (8007124 <vPortEnterCritical+0x5c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3301      	adds	r3, #1
 80070e8:	4a0e      	ldr	r2, [pc, #56]	@ (8007124 <vPortEnterCritical+0x5c>)
 80070ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007124 <vPortEnterCritical+0x5c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d110      	bne.n	8007116 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007128 <vPortEnterCritical+0x60>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00b      	beq.n	8007116 <vPortEnterCritical+0x4e>
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	603b      	str	r3, [r7, #0]
}
 8007110:	bf00      	nop
 8007112:	bf00      	nop
 8007114:	e7fd      	b.n	8007112 <vPortEnterCritical+0x4a>
	}
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	2000000c 	.word	0x2000000c
 8007128:	e000ed04 	.word	0xe000ed04

0800712c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007132:	4b12      	ldr	r3, [pc, #72]	@ (800717c <vPortExitCritical+0x50>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10b      	bne.n	8007152 <vPortExitCritical+0x26>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	607b      	str	r3, [r7, #4]
}
 800714c:	bf00      	nop
 800714e:	bf00      	nop
 8007150:	e7fd      	b.n	800714e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007152:	4b0a      	ldr	r3, [pc, #40]	@ (800717c <vPortExitCritical+0x50>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3b01      	subs	r3, #1
 8007158:	4a08      	ldr	r2, [pc, #32]	@ (800717c <vPortExitCritical+0x50>)
 800715a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800715c:	4b07      	ldr	r3, [pc, #28]	@ (800717c <vPortExitCritical+0x50>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d105      	bne.n	8007170 <vPortExitCritical+0x44>
 8007164:	2300      	movs	r3, #0
 8007166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	f383 8811 	msr	BASEPRI, r3
}
 800716e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	2000000c 	.word	0x2000000c

08007180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007180:	f3ef 8009 	mrs	r0, PSP
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	4b15      	ldr	r3, [pc, #84]	@ (80071e0 <pxCurrentTCBConst>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	f01e 0f10 	tst.w	lr, #16
 8007190:	bf08      	it	eq
 8007192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719a:	6010      	str	r0, [r2, #0]
 800719c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80071a4:	f380 8811 	msr	BASEPRI, r0
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f7fe fea2 	bl	8005ef8 <vTaskSwitchContext>
 80071b4:	f04f 0000 	mov.w	r0, #0
 80071b8:	f380 8811 	msr	BASEPRI, r0
 80071bc:	bc09      	pop	{r0, r3}
 80071be:	6819      	ldr	r1, [r3, #0]
 80071c0:	6808      	ldr	r0, [r1, #0]
 80071c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c6:	f01e 0f10 	tst.w	lr, #16
 80071ca:	bf08      	it	eq
 80071cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071d0:	f380 8809 	msr	PSP, r0
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	f3af 8000 	nop.w

080071e0 <pxCurrentTCBConst>:
 80071e0:	20000c18 	.word	0x20000c18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop

080071e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
	__asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	607b      	str	r3, [r7, #4]
}
 8007200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007202:	f7fe fdbf 	bl	8005d84 <xTaskIncrementTick>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800720c:	4b06      	ldr	r3, [pc, #24]	@ (8007228 <xPortSysTickHandler+0x40>)
 800720e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	2300      	movs	r3, #0
 8007216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	f383 8811 	msr	BASEPRI, r3
}
 800721e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007220:	bf00      	nop
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	e000ed04 	.word	0xe000ed04

0800722c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007230:	4b0b      	ldr	r3, [pc, #44]	@ (8007260 <vPortSetupTimerInterrupt+0x34>)
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007236:	4b0b      	ldr	r3, [pc, #44]	@ (8007264 <vPortSetupTimerInterrupt+0x38>)
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800723c:	4b0a      	ldr	r3, [pc, #40]	@ (8007268 <vPortSetupTimerInterrupt+0x3c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a0a      	ldr	r2, [pc, #40]	@ (800726c <vPortSetupTimerInterrupt+0x40>)
 8007242:	fba2 2303 	umull	r2, r3, r2, r3
 8007246:	099b      	lsrs	r3, r3, #6
 8007248:	4a09      	ldr	r2, [pc, #36]	@ (8007270 <vPortSetupTimerInterrupt+0x44>)
 800724a:	3b01      	subs	r3, #1
 800724c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800724e:	4b04      	ldr	r3, [pc, #16]	@ (8007260 <vPortSetupTimerInterrupt+0x34>)
 8007250:	2207      	movs	r2, #7
 8007252:	601a      	str	r2, [r3, #0]
}
 8007254:	bf00      	nop
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	e000e010 	.word	0xe000e010
 8007264:	e000e018 	.word	0xe000e018
 8007268:	20000000 	.word	0x20000000
 800726c:	10624dd3 	.word	0x10624dd3
 8007270:	e000e014 	.word	0xe000e014

08007274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007274:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007284 <vPortEnableVFP+0x10>
 8007278:	6801      	ldr	r1, [r0, #0]
 800727a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800727e:	6001      	str	r1, [r0, #0]
 8007280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007282:	bf00      	nop
 8007284:	e000ed88 	.word	0xe000ed88

08007288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800728e:	f3ef 8305 	mrs	r3, IPSR
 8007292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b0f      	cmp	r3, #15
 8007298:	d915      	bls.n	80072c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800729a:	4a18      	ldr	r2, [pc, #96]	@ (80072fc <vPortValidateInterruptPriority+0x74>)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4413      	add	r3, r2
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072a4:	4b16      	ldr	r3, [pc, #88]	@ (8007300 <vPortValidateInterruptPriority+0x78>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	7afa      	ldrb	r2, [r7, #11]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d20b      	bcs.n	80072c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	607b      	str	r3, [r7, #4]
}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	e7fd      	b.n	80072c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80072c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007304 <vPortValidateInterruptPriority+0x7c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007308 <vPortValidateInterruptPriority+0x80>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d90b      	bls.n	80072ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	603b      	str	r3, [r7, #0]
}
 80072e8:	bf00      	nop
 80072ea:	bf00      	nop
 80072ec:	e7fd      	b.n	80072ea <vPortValidateInterruptPriority+0x62>
	}
 80072ee:	bf00      	nop
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	e000e3f0 	.word	0xe000e3f0
 8007300:	20001244 	.word	0x20001244
 8007304:	e000ed0c 	.word	0xe000ed0c
 8007308:	20001248 	.word	0x20001248

0800730c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08a      	sub	sp, #40	@ 0x28
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007314:	2300      	movs	r3, #0
 8007316:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007318:	f7fe fc78 	bl	8005c0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800731c:	4b5c      	ldr	r3, [pc, #368]	@ (8007490 <pvPortMalloc+0x184>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007324:	f000 f924 	bl	8007570 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007328:	4b5a      	ldr	r3, [pc, #360]	@ (8007494 <pvPortMalloc+0x188>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4013      	ands	r3, r2
 8007330:	2b00      	cmp	r3, #0
 8007332:	f040 8095 	bne.w	8007460 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01e      	beq.n	800737a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800733c:	2208      	movs	r2, #8
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4413      	add	r3, r2
 8007342:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f003 0307 	and.w	r3, r3, #7
 800734a:	2b00      	cmp	r3, #0
 800734c:	d015      	beq.n	800737a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f023 0307 	bic.w	r3, r3, #7
 8007354:	3308      	adds	r3, #8
 8007356:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f003 0307 	and.w	r3, r3, #7
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00b      	beq.n	800737a <pvPortMalloc+0x6e>
	__asm volatile
 8007362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	617b      	str	r3, [r7, #20]
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop
 8007378:	e7fd      	b.n	8007376 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d06f      	beq.n	8007460 <pvPortMalloc+0x154>
 8007380:	4b45      	ldr	r3, [pc, #276]	@ (8007498 <pvPortMalloc+0x18c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	429a      	cmp	r2, r3
 8007388:	d86a      	bhi.n	8007460 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800738a:	4b44      	ldr	r3, [pc, #272]	@ (800749c <pvPortMalloc+0x190>)
 800738c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800738e:	4b43      	ldr	r3, [pc, #268]	@ (800749c <pvPortMalloc+0x190>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007394:	e004      	b.n	80073a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007398:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800739a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d903      	bls.n	80073b2 <pvPortMalloc+0xa6>
 80073aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1f1      	bne.n	8007396 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073b2:	4b37      	ldr	r3, [pc, #220]	@ (8007490 <pvPortMalloc+0x184>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d051      	beq.n	8007460 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2208      	movs	r2, #8
 80073c2:	4413      	add	r3, r2
 80073c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	1ad2      	subs	r2, r2, r3
 80073d6:	2308      	movs	r3, #8
 80073d8:	005b      	lsls	r3, r3, #1
 80073da:	429a      	cmp	r2, r3
 80073dc:	d920      	bls.n	8007420 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4413      	add	r3, r2
 80073e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	f003 0307 	and.w	r3, r3, #7
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00b      	beq.n	8007408 <pvPortMalloc+0xfc>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	613b      	str	r3, [r7, #16]
}
 8007402:	bf00      	nop
 8007404:	bf00      	nop
 8007406:	e7fd      	b.n	8007404 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	1ad2      	subs	r2, r2, r3
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800741a:	69b8      	ldr	r0, [r7, #24]
 800741c:	f000 f90a 	bl	8007634 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007420:	4b1d      	ldr	r3, [pc, #116]	@ (8007498 <pvPortMalloc+0x18c>)
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	4a1b      	ldr	r2, [pc, #108]	@ (8007498 <pvPortMalloc+0x18c>)
 800742c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800742e:	4b1a      	ldr	r3, [pc, #104]	@ (8007498 <pvPortMalloc+0x18c>)
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	4b1b      	ldr	r3, [pc, #108]	@ (80074a0 <pvPortMalloc+0x194>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d203      	bcs.n	8007442 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800743a:	4b17      	ldr	r3, [pc, #92]	@ (8007498 <pvPortMalloc+0x18c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a18      	ldr	r2, [pc, #96]	@ (80074a0 <pvPortMalloc+0x194>)
 8007440:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	4b13      	ldr	r3, [pc, #76]	@ (8007494 <pvPortMalloc+0x188>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	431a      	orrs	r2, r3
 800744c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007456:	4b13      	ldr	r3, [pc, #76]	@ (80074a4 <pvPortMalloc+0x198>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3301      	adds	r3, #1
 800745c:	4a11      	ldr	r2, [pc, #68]	@ (80074a4 <pvPortMalloc+0x198>)
 800745e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007460:	f7fe fbe2 	bl	8005c28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	f003 0307 	and.w	r3, r3, #7
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00b      	beq.n	8007486 <pvPortMalloc+0x17a>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	60fb      	str	r3, [r7, #12]
}
 8007480:	bf00      	nop
 8007482:	bf00      	nop
 8007484:	e7fd      	b.n	8007482 <pvPortMalloc+0x176>
	return pvReturn;
 8007486:	69fb      	ldr	r3, [r7, #28]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3728      	adds	r7, #40	@ 0x28
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	20004e54 	.word	0x20004e54
 8007494:	20004e68 	.word	0x20004e68
 8007498:	20004e58 	.word	0x20004e58
 800749c:	20004e4c 	.word	0x20004e4c
 80074a0:	20004e5c 	.word	0x20004e5c
 80074a4:	20004e60 	.word	0x20004e60

080074a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d04f      	beq.n	800755a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074ba:	2308      	movs	r3, #8
 80074bc:	425b      	negs	r3, r3
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	4413      	add	r3, r2
 80074c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	4b25      	ldr	r3, [pc, #148]	@ (8007564 <vPortFree+0xbc>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4013      	ands	r3, r2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10b      	bne.n	80074ee <vPortFree+0x46>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	60fb      	str	r3, [r7, #12]
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop
 80074ec:	e7fd      	b.n	80074ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00b      	beq.n	800750e <vPortFree+0x66>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	60bb      	str	r3, [r7, #8]
}
 8007508:	bf00      	nop
 800750a:	bf00      	nop
 800750c:	e7fd      	b.n	800750a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	4b14      	ldr	r3, [pc, #80]	@ (8007564 <vPortFree+0xbc>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4013      	ands	r3, r2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01e      	beq.n	800755a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d11a      	bne.n	800755a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	4b0e      	ldr	r3, [pc, #56]	@ (8007564 <vPortFree+0xbc>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	43db      	mvns	r3, r3
 800752e:	401a      	ands	r2, r3
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007534:	f7fe fb6a 	bl	8005c0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	4b0a      	ldr	r3, [pc, #40]	@ (8007568 <vPortFree+0xc0>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4413      	add	r3, r2
 8007542:	4a09      	ldr	r2, [pc, #36]	@ (8007568 <vPortFree+0xc0>)
 8007544:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007546:	6938      	ldr	r0, [r7, #16]
 8007548:	f000 f874 	bl	8007634 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800754c:	4b07      	ldr	r3, [pc, #28]	@ (800756c <vPortFree+0xc4>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3301      	adds	r3, #1
 8007552:	4a06      	ldr	r2, [pc, #24]	@ (800756c <vPortFree+0xc4>)
 8007554:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007556:	f7fe fb67 	bl	8005c28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800755a:	bf00      	nop
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20004e68 	.word	0x20004e68
 8007568:	20004e58 	.word	0x20004e58
 800756c:	20004e64 	.word	0x20004e64

08007570 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007576:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800757a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800757c:	4b27      	ldr	r3, [pc, #156]	@ (800761c <prvHeapInit+0xac>)
 800757e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f003 0307 	and.w	r3, r3, #7
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00c      	beq.n	80075a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3307      	adds	r3, #7
 800758e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 0307 	bic.w	r3, r3, #7
 8007596:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	4a1f      	ldr	r2, [pc, #124]	@ (800761c <prvHeapInit+0xac>)
 80075a0:	4413      	add	r3, r2
 80075a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007620 <prvHeapInit+0xb0>)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075ae:	4b1c      	ldr	r3, [pc, #112]	@ (8007620 <prvHeapInit+0xb0>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	4413      	add	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075bc:	2208      	movs	r2, #8
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	1a9b      	subs	r3, r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0307 	bic.w	r3, r3, #7
 80075ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4a15      	ldr	r2, [pc, #84]	@ (8007624 <prvHeapInit+0xb4>)
 80075d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80075d2:	4b14      	ldr	r3, [pc, #80]	@ (8007624 <prvHeapInit+0xb4>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2200      	movs	r2, #0
 80075d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075da:	4b12      	ldr	r3, [pc, #72]	@ (8007624 <prvHeapInit+0xb4>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2200      	movs	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	1ad2      	subs	r2, r2, r3
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007624 <prvHeapInit+0xb4>)
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007628 <prvHeapInit+0xb8>)
 80075fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	4a09      	ldr	r2, [pc, #36]	@ (800762c <prvHeapInit+0xbc>)
 8007606:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007608:	4b09      	ldr	r3, [pc, #36]	@ (8007630 <prvHeapInit+0xc0>)
 800760a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800760e:	601a      	str	r2, [r3, #0]
}
 8007610:	bf00      	nop
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	2000124c 	.word	0x2000124c
 8007620:	20004e4c 	.word	0x20004e4c
 8007624:	20004e54 	.word	0x20004e54
 8007628:	20004e5c 	.word	0x20004e5c
 800762c:	20004e58 	.word	0x20004e58
 8007630:	20004e68 	.word	0x20004e68

08007634 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800763c:	4b28      	ldr	r3, [pc, #160]	@ (80076e0 <prvInsertBlockIntoFreeList+0xac>)
 800763e:	60fb      	str	r3, [r7, #12]
 8007640:	e002      	b.n	8007648 <prvInsertBlockIntoFreeList+0x14>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	60fb      	str	r3, [r7, #12]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	429a      	cmp	r2, r3
 8007650:	d8f7      	bhi.n	8007642 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	4413      	add	r3, r2
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	429a      	cmp	r2, r3
 8007662:	d108      	bne.n	8007676 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	441a      	add	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	441a      	add	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	429a      	cmp	r2, r3
 8007688:	d118      	bne.n	80076bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	4b15      	ldr	r3, [pc, #84]	@ (80076e4 <prvInsertBlockIntoFreeList+0xb0>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	429a      	cmp	r2, r3
 8007694:	d00d      	beq.n	80076b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	441a      	add	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	e008      	b.n	80076c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076b2:	4b0c      	ldr	r3, [pc, #48]	@ (80076e4 <prvInsertBlockIntoFreeList+0xb0>)
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	e003      	b.n	80076c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d002      	beq.n	80076d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076d2:	bf00      	nop
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	20004e4c 	.word	0x20004e4c
 80076e4:	20004e54 	.word	0x20004e54

080076e8 <__cvt>:
 80076e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076ec:	ec57 6b10 	vmov	r6, r7, d0
 80076f0:	2f00      	cmp	r7, #0
 80076f2:	460c      	mov	r4, r1
 80076f4:	4619      	mov	r1, r3
 80076f6:	463b      	mov	r3, r7
 80076f8:	bfbb      	ittet	lt
 80076fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80076fe:	461f      	movlt	r7, r3
 8007700:	2300      	movge	r3, #0
 8007702:	232d      	movlt	r3, #45	@ 0x2d
 8007704:	700b      	strb	r3, [r1, #0]
 8007706:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007708:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800770c:	4691      	mov	r9, r2
 800770e:	f023 0820 	bic.w	r8, r3, #32
 8007712:	bfbc      	itt	lt
 8007714:	4632      	movlt	r2, r6
 8007716:	4616      	movlt	r6, r2
 8007718:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800771c:	d005      	beq.n	800772a <__cvt+0x42>
 800771e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007722:	d100      	bne.n	8007726 <__cvt+0x3e>
 8007724:	3401      	adds	r4, #1
 8007726:	2102      	movs	r1, #2
 8007728:	e000      	b.n	800772c <__cvt+0x44>
 800772a:	2103      	movs	r1, #3
 800772c:	ab03      	add	r3, sp, #12
 800772e:	9301      	str	r3, [sp, #4]
 8007730:	ab02      	add	r3, sp, #8
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	ec47 6b10 	vmov	d0, r6, r7
 8007738:	4653      	mov	r3, sl
 800773a:	4622      	mov	r2, r4
 800773c:	f000 fec8 	bl	80084d0 <_dtoa_r>
 8007740:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007744:	4605      	mov	r5, r0
 8007746:	d119      	bne.n	800777c <__cvt+0x94>
 8007748:	f019 0f01 	tst.w	r9, #1
 800774c:	d00e      	beq.n	800776c <__cvt+0x84>
 800774e:	eb00 0904 	add.w	r9, r0, r4
 8007752:	2200      	movs	r2, #0
 8007754:	2300      	movs	r3, #0
 8007756:	4630      	mov	r0, r6
 8007758:	4639      	mov	r1, r7
 800775a:	f7f9 f9d5 	bl	8000b08 <__aeabi_dcmpeq>
 800775e:	b108      	cbz	r0, 8007764 <__cvt+0x7c>
 8007760:	f8cd 900c 	str.w	r9, [sp, #12]
 8007764:	2230      	movs	r2, #48	@ 0x30
 8007766:	9b03      	ldr	r3, [sp, #12]
 8007768:	454b      	cmp	r3, r9
 800776a:	d31e      	bcc.n	80077aa <__cvt+0xc2>
 800776c:	9b03      	ldr	r3, [sp, #12]
 800776e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007770:	1b5b      	subs	r3, r3, r5
 8007772:	4628      	mov	r0, r5
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	b004      	add	sp, #16
 8007778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800777c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007780:	eb00 0904 	add.w	r9, r0, r4
 8007784:	d1e5      	bne.n	8007752 <__cvt+0x6a>
 8007786:	7803      	ldrb	r3, [r0, #0]
 8007788:	2b30      	cmp	r3, #48	@ 0x30
 800778a:	d10a      	bne.n	80077a2 <__cvt+0xba>
 800778c:	2200      	movs	r2, #0
 800778e:	2300      	movs	r3, #0
 8007790:	4630      	mov	r0, r6
 8007792:	4639      	mov	r1, r7
 8007794:	f7f9 f9b8 	bl	8000b08 <__aeabi_dcmpeq>
 8007798:	b918      	cbnz	r0, 80077a2 <__cvt+0xba>
 800779a:	f1c4 0401 	rsb	r4, r4, #1
 800779e:	f8ca 4000 	str.w	r4, [sl]
 80077a2:	f8da 3000 	ldr.w	r3, [sl]
 80077a6:	4499      	add	r9, r3
 80077a8:	e7d3      	b.n	8007752 <__cvt+0x6a>
 80077aa:	1c59      	adds	r1, r3, #1
 80077ac:	9103      	str	r1, [sp, #12]
 80077ae:	701a      	strb	r2, [r3, #0]
 80077b0:	e7d9      	b.n	8007766 <__cvt+0x7e>

080077b2 <__exponent>:
 80077b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077b4:	2900      	cmp	r1, #0
 80077b6:	bfba      	itte	lt
 80077b8:	4249      	neglt	r1, r1
 80077ba:	232d      	movlt	r3, #45	@ 0x2d
 80077bc:	232b      	movge	r3, #43	@ 0x2b
 80077be:	2909      	cmp	r1, #9
 80077c0:	7002      	strb	r2, [r0, #0]
 80077c2:	7043      	strb	r3, [r0, #1]
 80077c4:	dd29      	ble.n	800781a <__exponent+0x68>
 80077c6:	f10d 0307 	add.w	r3, sp, #7
 80077ca:	461d      	mov	r5, r3
 80077cc:	270a      	movs	r7, #10
 80077ce:	461a      	mov	r2, r3
 80077d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80077d4:	fb07 1416 	mls	r4, r7, r6, r1
 80077d8:	3430      	adds	r4, #48	@ 0x30
 80077da:	f802 4c01 	strb.w	r4, [r2, #-1]
 80077de:	460c      	mov	r4, r1
 80077e0:	2c63      	cmp	r4, #99	@ 0x63
 80077e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80077e6:	4631      	mov	r1, r6
 80077e8:	dcf1      	bgt.n	80077ce <__exponent+0x1c>
 80077ea:	3130      	adds	r1, #48	@ 0x30
 80077ec:	1e94      	subs	r4, r2, #2
 80077ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077f2:	1c41      	adds	r1, r0, #1
 80077f4:	4623      	mov	r3, r4
 80077f6:	42ab      	cmp	r3, r5
 80077f8:	d30a      	bcc.n	8007810 <__exponent+0x5e>
 80077fa:	f10d 0309 	add.w	r3, sp, #9
 80077fe:	1a9b      	subs	r3, r3, r2
 8007800:	42ac      	cmp	r4, r5
 8007802:	bf88      	it	hi
 8007804:	2300      	movhi	r3, #0
 8007806:	3302      	adds	r3, #2
 8007808:	4403      	add	r3, r0
 800780a:	1a18      	subs	r0, r3, r0
 800780c:	b003      	add	sp, #12
 800780e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007810:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007814:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007818:	e7ed      	b.n	80077f6 <__exponent+0x44>
 800781a:	2330      	movs	r3, #48	@ 0x30
 800781c:	3130      	adds	r1, #48	@ 0x30
 800781e:	7083      	strb	r3, [r0, #2]
 8007820:	70c1      	strb	r1, [r0, #3]
 8007822:	1d03      	adds	r3, r0, #4
 8007824:	e7f1      	b.n	800780a <__exponent+0x58>
	...

08007828 <_printf_float>:
 8007828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	b08d      	sub	sp, #52	@ 0x34
 800782e:	460c      	mov	r4, r1
 8007830:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007834:	4616      	mov	r6, r2
 8007836:	461f      	mov	r7, r3
 8007838:	4605      	mov	r5, r0
 800783a:	f000 fcdb 	bl	80081f4 <_localeconv_r>
 800783e:	6803      	ldr	r3, [r0, #0]
 8007840:	9304      	str	r3, [sp, #16]
 8007842:	4618      	mov	r0, r3
 8007844:	f7f8 fd34 	bl	80002b0 <strlen>
 8007848:	2300      	movs	r3, #0
 800784a:	930a      	str	r3, [sp, #40]	@ 0x28
 800784c:	f8d8 3000 	ldr.w	r3, [r8]
 8007850:	9005      	str	r0, [sp, #20]
 8007852:	3307      	adds	r3, #7
 8007854:	f023 0307 	bic.w	r3, r3, #7
 8007858:	f103 0208 	add.w	r2, r3, #8
 800785c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007860:	f8d4 b000 	ldr.w	fp, [r4]
 8007864:	f8c8 2000 	str.w	r2, [r8]
 8007868:	e9d3 8900 	ldrd	r8, r9, [r3]
 800786c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007870:	9307      	str	r3, [sp, #28]
 8007872:	f8cd 8018 	str.w	r8, [sp, #24]
 8007876:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800787a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800787e:	4b9c      	ldr	r3, [pc, #624]	@ (8007af0 <_printf_float+0x2c8>)
 8007880:	f04f 32ff 	mov.w	r2, #4294967295
 8007884:	f7f9 f972 	bl	8000b6c <__aeabi_dcmpun>
 8007888:	bb70      	cbnz	r0, 80078e8 <_printf_float+0xc0>
 800788a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800788e:	4b98      	ldr	r3, [pc, #608]	@ (8007af0 <_printf_float+0x2c8>)
 8007890:	f04f 32ff 	mov.w	r2, #4294967295
 8007894:	f7f9 f94c 	bl	8000b30 <__aeabi_dcmple>
 8007898:	bb30      	cbnz	r0, 80078e8 <_printf_float+0xc0>
 800789a:	2200      	movs	r2, #0
 800789c:	2300      	movs	r3, #0
 800789e:	4640      	mov	r0, r8
 80078a0:	4649      	mov	r1, r9
 80078a2:	f7f9 f93b 	bl	8000b1c <__aeabi_dcmplt>
 80078a6:	b110      	cbz	r0, 80078ae <_printf_float+0x86>
 80078a8:	232d      	movs	r3, #45	@ 0x2d
 80078aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078ae:	4a91      	ldr	r2, [pc, #580]	@ (8007af4 <_printf_float+0x2cc>)
 80078b0:	4b91      	ldr	r3, [pc, #580]	@ (8007af8 <_printf_float+0x2d0>)
 80078b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80078b6:	bf8c      	ite	hi
 80078b8:	4690      	movhi	r8, r2
 80078ba:	4698      	movls	r8, r3
 80078bc:	2303      	movs	r3, #3
 80078be:	6123      	str	r3, [r4, #16]
 80078c0:	f02b 0304 	bic.w	r3, fp, #4
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	f04f 0900 	mov.w	r9, #0
 80078ca:	9700      	str	r7, [sp, #0]
 80078cc:	4633      	mov	r3, r6
 80078ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80078d0:	4621      	mov	r1, r4
 80078d2:	4628      	mov	r0, r5
 80078d4:	f000 f9d2 	bl	8007c7c <_printf_common>
 80078d8:	3001      	adds	r0, #1
 80078da:	f040 808d 	bne.w	80079f8 <_printf_float+0x1d0>
 80078de:	f04f 30ff 	mov.w	r0, #4294967295
 80078e2:	b00d      	add	sp, #52	@ 0x34
 80078e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e8:	4642      	mov	r2, r8
 80078ea:	464b      	mov	r3, r9
 80078ec:	4640      	mov	r0, r8
 80078ee:	4649      	mov	r1, r9
 80078f0:	f7f9 f93c 	bl	8000b6c <__aeabi_dcmpun>
 80078f4:	b140      	cbz	r0, 8007908 <_printf_float+0xe0>
 80078f6:	464b      	mov	r3, r9
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	bfbc      	itt	lt
 80078fc:	232d      	movlt	r3, #45	@ 0x2d
 80078fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007902:	4a7e      	ldr	r2, [pc, #504]	@ (8007afc <_printf_float+0x2d4>)
 8007904:	4b7e      	ldr	r3, [pc, #504]	@ (8007b00 <_printf_float+0x2d8>)
 8007906:	e7d4      	b.n	80078b2 <_printf_float+0x8a>
 8007908:	6863      	ldr	r3, [r4, #4]
 800790a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800790e:	9206      	str	r2, [sp, #24]
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	d13b      	bne.n	800798c <_printf_float+0x164>
 8007914:	2306      	movs	r3, #6
 8007916:	6063      	str	r3, [r4, #4]
 8007918:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800791c:	2300      	movs	r3, #0
 800791e:	6022      	str	r2, [r4, #0]
 8007920:	9303      	str	r3, [sp, #12]
 8007922:	ab0a      	add	r3, sp, #40	@ 0x28
 8007924:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007928:	ab09      	add	r3, sp, #36	@ 0x24
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	6861      	ldr	r1, [r4, #4]
 800792e:	ec49 8b10 	vmov	d0, r8, r9
 8007932:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007936:	4628      	mov	r0, r5
 8007938:	f7ff fed6 	bl	80076e8 <__cvt>
 800793c:	9b06      	ldr	r3, [sp, #24]
 800793e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007940:	2b47      	cmp	r3, #71	@ 0x47
 8007942:	4680      	mov	r8, r0
 8007944:	d129      	bne.n	800799a <_printf_float+0x172>
 8007946:	1cc8      	adds	r0, r1, #3
 8007948:	db02      	blt.n	8007950 <_printf_float+0x128>
 800794a:	6863      	ldr	r3, [r4, #4]
 800794c:	4299      	cmp	r1, r3
 800794e:	dd41      	ble.n	80079d4 <_printf_float+0x1ac>
 8007950:	f1aa 0a02 	sub.w	sl, sl, #2
 8007954:	fa5f fa8a 	uxtb.w	sl, sl
 8007958:	3901      	subs	r1, #1
 800795a:	4652      	mov	r2, sl
 800795c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007960:	9109      	str	r1, [sp, #36]	@ 0x24
 8007962:	f7ff ff26 	bl	80077b2 <__exponent>
 8007966:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007968:	1813      	adds	r3, r2, r0
 800796a:	2a01      	cmp	r2, #1
 800796c:	4681      	mov	r9, r0
 800796e:	6123      	str	r3, [r4, #16]
 8007970:	dc02      	bgt.n	8007978 <_printf_float+0x150>
 8007972:	6822      	ldr	r2, [r4, #0]
 8007974:	07d2      	lsls	r2, r2, #31
 8007976:	d501      	bpl.n	800797c <_printf_float+0x154>
 8007978:	3301      	adds	r3, #1
 800797a:	6123      	str	r3, [r4, #16]
 800797c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007980:	2b00      	cmp	r3, #0
 8007982:	d0a2      	beq.n	80078ca <_printf_float+0xa2>
 8007984:	232d      	movs	r3, #45	@ 0x2d
 8007986:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800798a:	e79e      	b.n	80078ca <_printf_float+0xa2>
 800798c:	9a06      	ldr	r2, [sp, #24]
 800798e:	2a47      	cmp	r2, #71	@ 0x47
 8007990:	d1c2      	bne.n	8007918 <_printf_float+0xf0>
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1c0      	bne.n	8007918 <_printf_float+0xf0>
 8007996:	2301      	movs	r3, #1
 8007998:	e7bd      	b.n	8007916 <_printf_float+0xee>
 800799a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800799e:	d9db      	bls.n	8007958 <_printf_float+0x130>
 80079a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80079a4:	d118      	bne.n	80079d8 <_printf_float+0x1b0>
 80079a6:	2900      	cmp	r1, #0
 80079a8:	6863      	ldr	r3, [r4, #4]
 80079aa:	dd0b      	ble.n	80079c4 <_printf_float+0x19c>
 80079ac:	6121      	str	r1, [r4, #16]
 80079ae:	b913      	cbnz	r3, 80079b6 <_printf_float+0x18e>
 80079b0:	6822      	ldr	r2, [r4, #0]
 80079b2:	07d0      	lsls	r0, r2, #31
 80079b4:	d502      	bpl.n	80079bc <_printf_float+0x194>
 80079b6:	3301      	adds	r3, #1
 80079b8:	440b      	add	r3, r1
 80079ba:	6123      	str	r3, [r4, #16]
 80079bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80079be:	f04f 0900 	mov.w	r9, #0
 80079c2:	e7db      	b.n	800797c <_printf_float+0x154>
 80079c4:	b913      	cbnz	r3, 80079cc <_printf_float+0x1a4>
 80079c6:	6822      	ldr	r2, [r4, #0]
 80079c8:	07d2      	lsls	r2, r2, #31
 80079ca:	d501      	bpl.n	80079d0 <_printf_float+0x1a8>
 80079cc:	3302      	adds	r3, #2
 80079ce:	e7f4      	b.n	80079ba <_printf_float+0x192>
 80079d0:	2301      	movs	r3, #1
 80079d2:	e7f2      	b.n	80079ba <_printf_float+0x192>
 80079d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80079d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079da:	4299      	cmp	r1, r3
 80079dc:	db05      	blt.n	80079ea <_printf_float+0x1c2>
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	6121      	str	r1, [r4, #16]
 80079e2:	07d8      	lsls	r0, r3, #31
 80079e4:	d5ea      	bpl.n	80079bc <_printf_float+0x194>
 80079e6:	1c4b      	adds	r3, r1, #1
 80079e8:	e7e7      	b.n	80079ba <_printf_float+0x192>
 80079ea:	2900      	cmp	r1, #0
 80079ec:	bfd4      	ite	le
 80079ee:	f1c1 0202 	rsble	r2, r1, #2
 80079f2:	2201      	movgt	r2, #1
 80079f4:	4413      	add	r3, r2
 80079f6:	e7e0      	b.n	80079ba <_printf_float+0x192>
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	055a      	lsls	r2, r3, #21
 80079fc:	d407      	bmi.n	8007a0e <_printf_float+0x1e6>
 80079fe:	6923      	ldr	r3, [r4, #16]
 8007a00:	4642      	mov	r2, r8
 8007a02:	4631      	mov	r1, r6
 8007a04:	4628      	mov	r0, r5
 8007a06:	47b8      	blx	r7
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d12b      	bne.n	8007a64 <_printf_float+0x23c>
 8007a0c:	e767      	b.n	80078de <_printf_float+0xb6>
 8007a0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a12:	f240 80dd 	bls.w	8007bd0 <_printf_float+0x3a8>
 8007a16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f7f9 f873 	bl	8000b08 <__aeabi_dcmpeq>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	d033      	beq.n	8007a8e <_printf_float+0x266>
 8007a26:	4a37      	ldr	r2, [pc, #220]	@ (8007b04 <_printf_float+0x2dc>)
 8007a28:	2301      	movs	r3, #1
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	47b8      	blx	r7
 8007a30:	3001      	adds	r0, #1
 8007a32:	f43f af54 	beq.w	80078de <_printf_float+0xb6>
 8007a36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007a3a:	4543      	cmp	r3, r8
 8007a3c:	db02      	blt.n	8007a44 <_printf_float+0x21c>
 8007a3e:	6823      	ldr	r3, [r4, #0]
 8007a40:	07d8      	lsls	r0, r3, #31
 8007a42:	d50f      	bpl.n	8007a64 <_printf_float+0x23c>
 8007a44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a48:	4631      	mov	r1, r6
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	47b8      	blx	r7
 8007a4e:	3001      	adds	r0, #1
 8007a50:	f43f af45 	beq.w	80078de <_printf_float+0xb6>
 8007a54:	f04f 0900 	mov.w	r9, #0
 8007a58:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a5c:	f104 0a1a 	add.w	sl, r4, #26
 8007a60:	45c8      	cmp	r8, r9
 8007a62:	dc09      	bgt.n	8007a78 <_printf_float+0x250>
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	079b      	lsls	r3, r3, #30
 8007a68:	f100 8103 	bmi.w	8007c72 <_printf_float+0x44a>
 8007a6c:	68e0      	ldr	r0, [r4, #12]
 8007a6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a70:	4298      	cmp	r0, r3
 8007a72:	bfb8      	it	lt
 8007a74:	4618      	movlt	r0, r3
 8007a76:	e734      	b.n	80078e2 <_printf_float+0xba>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	4652      	mov	r2, sl
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	4628      	mov	r0, r5
 8007a80:	47b8      	blx	r7
 8007a82:	3001      	adds	r0, #1
 8007a84:	f43f af2b 	beq.w	80078de <_printf_float+0xb6>
 8007a88:	f109 0901 	add.w	r9, r9, #1
 8007a8c:	e7e8      	b.n	8007a60 <_printf_float+0x238>
 8007a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	dc39      	bgt.n	8007b08 <_printf_float+0x2e0>
 8007a94:	4a1b      	ldr	r2, [pc, #108]	@ (8007b04 <_printf_float+0x2dc>)
 8007a96:	2301      	movs	r3, #1
 8007a98:	4631      	mov	r1, r6
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	47b8      	blx	r7
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	f43f af1d 	beq.w	80078de <_printf_float+0xb6>
 8007aa4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007aa8:	ea59 0303 	orrs.w	r3, r9, r3
 8007aac:	d102      	bne.n	8007ab4 <_printf_float+0x28c>
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	07d9      	lsls	r1, r3, #31
 8007ab2:	d5d7      	bpl.n	8007a64 <_printf_float+0x23c>
 8007ab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b8      	blx	r7
 8007abe:	3001      	adds	r0, #1
 8007ac0:	f43f af0d 	beq.w	80078de <_printf_float+0xb6>
 8007ac4:	f04f 0a00 	mov.w	sl, #0
 8007ac8:	f104 0b1a 	add.w	fp, r4, #26
 8007acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ace:	425b      	negs	r3, r3
 8007ad0:	4553      	cmp	r3, sl
 8007ad2:	dc01      	bgt.n	8007ad8 <_printf_float+0x2b0>
 8007ad4:	464b      	mov	r3, r9
 8007ad6:	e793      	b.n	8007a00 <_printf_float+0x1d8>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	465a      	mov	r2, fp
 8007adc:	4631      	mov	r1, r6
 8007ade:	4628      	mov	r0, r5
 8007ae0:	47b8      	blx	r7
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	f43f aefb 	beq.w	80078de <_printf_float+0xb6>
 8007ae8:	f10a 0a01 	add.w	sl, sl, #1
 8007aec:	e7ee      	b.n	8007acc <_printf_float+0x2a4>
 8007aee:	bf00      	nop
 8007af0:	7fefffff 	.word	0x7fefffff
 8007af4:	0800a770 	.word	0x0800a770
 8007af8:	0800a76c 	.word	0x0800a76c
 8007afc:	0800a778 	.word	0x0800a778
 8007b00:	0800a774 	.word	0x0800a774
 8007b04:	0800a77c 	.word	0x0800a77c
 8007b08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b0e:	4553      	cmp	r3, sl
 8007b10:	bfa8      	it	ge
 8007b12:	4653      	movge	r3, sl
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	4699      	mov	r9, r3
 8007b18:	dc36      	bgt.n	8007b88 <_printf_float+0x360>
 8007b1a:	f04f 0b00 	mov.w	fp, #0
 8007b1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b22:	f104 021a 	add.w	r2, r4, #26
 8007b26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b28:	9306      	str	r3, [sp, #24]
 8007b2a:	eba3 0309 	sub.w	r3, r3, r9
 8007b2e:	455b      	cmp	r3, fp
 8007b30:	dc31      	bgt.n	8007b96 <_printf_float+0x36e>
 8007b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b34:	459a      	cmp	sl, r3
 8007b36:	dc3a      	bgt.n	8007bae <_printf_float+0x386>
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	07da      	lsls	r2, r3, #31
 8007b3c:	d437      	bmi.n	8007bae <_printf_float+0x386>
 8007b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b40:	ebaa 0903 	sub.w	r9, sl, r3
 8007b44:	9b06      	ldr	r3, [sp, #24]
 8007b46:	ebaa 0303 	sub.w	r3, sl, r3
 8007b4a:	4599      	cmp	r9, r3
 8007b4c:	bfa8      	it	ge
 8007b4e:	4699      	movge	r9, r3
 8007b50:	f1b9 0f00 	cmp.w	r9, #0
 8007b54:	dc33      	bgt.n	8007bbe <_printf_float+0x396>
 8007b56:	f04f 0800 	mov.w	r8, #0
 8007b5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b5e:	f104 0b1a 	add.w	fp, r4, #26
 8007b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b64:	ebaa 0303 	sub.w	r3, sl, r3
 8007b68:	eba3 0309 	sub.w	r3, r3, r9
 8007b6c:	4543      	cmp	r3, r8
 8007b6e:	f77f af79 	ble.w	8007a64 <_printf_float+0x23c>
 8007b72:	2301      	movs	r3, #1
 8007b74:	465a      	mov	r2, fp
 8007b76:	4631      	mov	r1, r6
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b8      	blx	r7
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	f43f aeae 	beq.w	80078de <_printf_float+0xb6>
 8007b82:	f108 0801 	add.w	r8, r8, #1
 8007b86:	e7ec      	b.n	8007b62 <_printf_float+0x33a>
 8007b88:	4642      	mov	r2, r8
 8007b8a:	4631      	mov	r1, r6
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	47b8      	blx	r7
 8007b90:	3001      	adds	r0, #1
 8007b92:	d1c2      	bne.n	8007b1a <_printf_float+0x2f2>
 8007b94:	e6a3      	b.n	80078de <_printf_float+0xb6>
 8007b96:	2301      	movs	r3, #1
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	9206      	str	r2, [sp, #24]
 8007b9e:	47b8      	blx	r7
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	f43f ae9c 	beq.w	80078de <_printf_float+0xb6>
 8007ba6:	9a06      	ldr	r2, [sp, #24]
 8007ba8:	f10b 0b01 	add.w	fp, fp, #1
 8007bac:	e7bb      	b.n	8007b26 <_printf_float+0x2fe>
 8007bae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	47b8      	blx	r7
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d1c0      	bne.n	8007b3e <_printf_float+0x316>
 8007bbc:	e68f      	b.n	80078de <_printf_float+0xb6>
 8007bbe:	9a06      	ldr	r2, [sp, #24]
 8007bc0:	464b      	mov	r3, r9
 8007bc2:	4442      	add	r2, r8
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	47b8      	blx	r7
 8007bca:	3001      	adds	r0, #1
 8007bcc:	d1c3      	bne.n	8007b56 <_printf_float+0x32e>
 8007bce:	e686      	b.n	80078de <_printf_float+0xb6>
 8007bd0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007bd4:	f1ba 0f01 	cmp.w	sl, #1
 8007bd8:	dc01      	bgt.n	8007bde <_printf_float+0x3b6>
 8007bda:	07db      	lsls	r3, r3, #31
 8007bdc:	d536      	bpl.n	8007c4c <_printf_float+0x424>
 8007bde:	2301      	movs	r3, #1
 8007be0:	4642      	mov	r2, r8
 8007be2:	4631      	mov	r1, r6
 8007be4:	4628      	mov	r0, r5
 8007be6:	47b8      	blx	r7
 8007be8:	3001      	adds	r0, #1
 8007bea:	f43f ae78 	beq.w	80078de <_printf_float+0xb6>
 8007bee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	47b8      	blx	r7
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	f43f ae70 	beq.w	80078de <_printf_float+0xb6>
 8007bfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c02:	2200      	movs	r2, #0
 8007c04:	2300      	movs	r3, #0
 8007c06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c0a:	f7f8 ff7d 	bl	8000b08 <__aeabi_dcmpeq>
 8007c0e:	b9c0      	cbnz	r0, 8007c42 <_printf_float+0x41a>
 8007c10:	4653      	mov	r3, sl
 8007c12:	f108 0201 	add.w	r2, r8, #1
 8007c16:	4631      	mov	r1, r6
 8007c18:	4628      	mov	r0, r5
 8007c1a:	47b8      	blx	r7
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	d10c      	bne.n	8007c3a <_printf_float+0x412>
 8007c20:	e65d      	b.n	80078de <_printf_float+0xb6>
 8007c22:	2301      	movs	r3, #1
 8007c24:	465a      	mov	r2, fp
 8007c26:	4631      	mov	r1, r6
 8007c28:	4628      	mov	r0, r5
 8007c2a:	47b8      	blx	r7
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	f43f ae56 	beq.w	80078de <_printf_float+0xb6>
 8007c32:	f108 0801 	add.w	r8, r8, #1
 8007c36:	45d0      	cmp	r8, sl
 8007c38:	dbf3      	blt.n	8007c22 <_printf_float+0x3fa>
 8007c3a:	464b      	mov	r3, r9
 8007c3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c40:	e6df      	b.n	8007a02 <_printf_float+0x1da>
 8007c42:	f04f 0800 	mov.w	r8, #0
 8007c46:	f104 0b1a 	add.w	fp, r4, #26
 8007c4a:	e7f4      	b.n	8007c36 <_printf_float+0x40e>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	4642      	mov	r2, r8
 8007c50:	e7e1      	b.n	8007c16 <_printf_float+0x3ee>
 8007c52:	2301      	movs	r3, #1
 8007c54:	464a      	mov	r2, r9
 8007c56:	4631      	mov	r1, r6
 8007c58:	4628      	mov	r0, r5
 8007c5a:	47b8      	blx	r7
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	f43f ae3e 	beq.w	80078de <_printf_float+0xb6>
 8007c62:	f108 0801 	add.w	r8, r8, #1
 8007c66:	68e3      	ldr	r3, [r4, #12]
 8007c68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c6a:	1a5b      	subs	r3, r3, r1
 8007c6c:	4543      	cmp	r3, r8
 8007c6e:	dcf0      	bgt.n	8007c52 <_printf_float+0x42a>
 8007c70:	e6fc      	b.n	8007a6c <_printf_float+0x244>
 8007c72:	f04f 0800 	mov.w	r8, #0
 8007c76:	f104 0919 	add.w	r9, r4, #25
 8007c7a:	e7f4      	b.n	8007c66 <_printf_float+0x43e>

08007c7c <_printf_common>:
 8007c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c80:	4616      	mov	r6, r2
 8007c82:	4698      	mov	r8, r3
 8007c84:	688a      	ldr	r2, [r1, #8]
 8007c86:	690b      	ldr	r3, [r1, #16]
 8007c88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	bfb8      	it	lt
 8007c90:	4613      	movlt	r3, r2
 8007c92:	6033      	str	r3, [r6, #0]
 8007c94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c98:	4607      	mov	r7, r0
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	b10a      	cbz	r2, 8007ca2 <_printf_common+0x26>
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	6033      	str	r3, [r6, #0]
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	0699      	lsls	r1, r3, #26
 8007ca6:	bf42      	ittt	mi
 8007ca8:	6833      	ldrmi	r3, [r6, #0]
 8007caa:	3302      	addmi	r3, #2
 8007cac:	6033      	strmi	r3, [r6, #0]
 8007cae:	6825      	ldr	r5, [r4, #0]
 8007cb0:	f015 0506 	ands.w	r5, r5, #6
 8007cb4:	d106      	bne.n	8007cc4 <_printf_common+0x48>
 8007cb6:	f104 0a19 	add.w	sl, r4, #25
 8007cba:	68e3      	ldr	r3, [r4, #12]
 8007cbc:	6832      	ldr	r2, [r6, #0]
 8007cbe:	1a9b      	subs	r3, r3, r2
 8007cc0:	42ab      	cmp	r3, r5
 8007cc2:	dc26      	bgt.n	8007d12 <_printf_common+0x96>
 8007cc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007cc8:	6822      	ldr	r2, [r4, #0]
 8007cca:	3b00      	subs	r3, #0
 8007ccc:	bf18      	it	ne
 8007cce:	2301      	movne	r3, #1
 8007cd0:	0692      	lsls	r2, r2, #26
 8007cd2:	d42b      	bmi.n	8007d2c <_printf_common+0xb0>
 8007cd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007cd8:	4641      	mov	r1, r8
 8007cda:	4638      	mov	r0, r7
 8007cdc:	47c8      	blx	r9
 8007cde:	3001      	adds	r0, #1
 8007ce0:	d01e      	beq.n	8007d20 <_printf_common+0xa4>
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	6922      	ldr	r2, [r4, #16]
 8007ce6:	f003 0306 	and.w	r3, r3, #6
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	bf02      	ittt	eq
 8007cee:	68e5      	ldreq	r5, [r4, #12]
 8007cf0:	6833      	ldreq	r3, [r6, #0]
 8007cf2:	1aed      	subeq	r5, r5, r3
 8007cf4:	68a3      	ldr	r3, [r4, #8]
 8007cf6:	bf0c      	ite	eq
 8007cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cfc:	2500      	movne	r5, #0
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	bfc4      	itt	gt
 8007d02:	1a9b      	subgt	r3, r3, r2
 8007d04:	18ed      	addgt	r5, r5, r3
 8007d06:	2600      	movs	r6, #0
 8007d08:	341a      	adds	r4, #26
 8007d0a:	42b5      	cmp	r5, r6
 8007d0c:	d11a      	bne.n	8007d44 <_printf_common+0xc8>
 8007d0e:	2000      	movs	r0, #0
 8007d10:	e008      	b.n	8007d24 <_printf_common+0xa8>
 8007d12:	2301      	movs	r3, #1
 8007d14:	4652      	mov	r2, sl
 8007d16:	4641      	mov	r1, r8
 8007d18:	4638      	mov	r0, r7
 8007d1a:	47c8      	blx	r9
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d103      	bne.n	8007d28 <_printf_common+0xac>
 8007d20:	f04f 30ff 	mov.w	r0, #4294967295
 8007d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d28:	3501      	adds	r5, #1
 8007d2a:	e7c6      	b.n	8007cba <_printf_common+0x3e>
 8007d2c:	18e1      	adds	r1, r4, r3
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	2030      	movs	r0, #48	@ 0x30
 8007d32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d36:	4422      	add	r2, r4
 8007d38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d40:	3302      	adds	r3, #2
 8007d42:	e7c7      	b.n	8007cd4 <_printf_common+0x58>
 8007d44:	2301      	movs	r3, #1
 8007d46:	4622      	mov	r2, r4
 8007d48:	4641      	mov	r1, r8
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	47c8      	blx	r9
 8007d4e:	3001      	adds	r0, #1
 8007d50:	d0e6      	beq.n	8007d20 <_printf_common+0xa4>
 8007d52:	3601      	adds	r6, #1
 8007d54:	e7d9      	b.n	8007d0a <_printf_common+0x8e>
	...

08007d58 <_printf_i>:
 8007d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d5c:	7e0f      	ldrb	r7, [r1, #24]
 8007d5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d60:	2f78      	cmp	r7, #120	@ 0x78
 8007d62:	4691      	mov	r9, r2
 8007d64:	4680      	mov	r8, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	469a      	mov	sl, r3
 8007d6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d6e:	d807      	bhi.n	8007d80 <_printf_i+0x28>
 8007d70:	2f62      	cmp	r7, #98	@ 0x62
 8007d72:	d80a      	bhi.n	8007d8a <_printf_i+0x32>
 8007d74:	2f00      	cmp	r7, #0
 8007d76:	f000 80d1 	beq.w	8007f1c <_printf_i+0x1c4>
 8007d7a:	2f58      	cmp	r7, #88	@ 0x58
 8007d7c:	f000 80b8 	beq.w	8007ef0 <_printf_i+0x198>
 8007d80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d88:	e03a      	b.n	8007e00 <_printf_i+0xa8>
 8007d8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d8e:	2b15      	cmp	r3, #21
 8007d90:	d8f6      	bhi.n	8007d80 <_printf_i+0x28>
 8007d92:	a101      	add	r1, pc, #4	@ (adr r1, 8007d98 <_printf_i+0x40>)
 8007d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d98:	08007df1 	.word	0x08007df1
 8007d9c:	08007e05 	.word	0x08007e05
 8007da0:	08007d81 	.word	0x08007d81
 8007da4:	08007d81 	.word	0x08007d81
 8007da8:	08007d81 	.word	0x08007d81
 8007dac:	08007d81 	.word	0x08007d81
 8007db0:	08007e05 	.word	0x08007e05
 8007db4:	08007d81 	.word	0x08007d81
 8007db8:	08007d81 	.word	0x08007d81
 8007dbc:	08007d81 	.word	0x08007d81
 8007dc0:	08007d81 	.word	0x08007d81
 8007dc4:	08007f03 	.word	0x08007f03
 8007dc8:	08007e2f 	.word	0x08007e2f
 8007dcc:	08007ebd 	.word	0x08007ebd
 8007dd0:	08007d81 	.word	0x08007d81
 8007dd4:	08007d81 	.word	0x08007d81
 8007dd8:	08007f25 	.word	0x08007f25
 8007ddc:	08007d81 	.word	0x08007d81
 8007de0:	08007e2f 	.word	0x08007e2f
 8007de4:	08007d81 	.word	0x08007d81
 8007de8:	08007d81 	.word	0x08007d81
 8007dec:	08007ec5 	.word	0x08007ec5
 8007df0:	6833      	ldr	r3, [r6, #0]
 8007df2:	1d1a      	adds	r2, r3, #4
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6032      	str	r2, [r6, #0]
 8007df8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e00:	2301      	movs	r3, #1
 8007e02:	e09c      	b.n	8007f3e <_printf_i+0x1e6>
 8007e04:	6833      	ldr	r3, [r6, #0]
 8007e06:	6820      	ldr	r0, [r4, #0]
 8007e08:	1d19      	adds	r1, r3, #4
 8007e0a:	6031      	str	r1, [r6, #0]
 8007e0c:	0606      	lsls	r6, r0, #24
 8007e0e:	d501      	bpl.n	8007e14 <_printf_i+0xbc>
 8007e10:	681d      	ldr	r5, [r3, #0]
 8007e12:	e003      	b.n	8007e1c <_printf_i+0xc4>
 8007e14:	0645      	lsls	r5, r0, #25
 8007e16:	d5fb      	bpl.n	8007e10 <_printf_i+0xb8>
 8007e18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e1c:	2d00      	cmp	r5, #0
 8007e1e:	da03      	bge.n	8007e28 <_printf_i+0xd0>
 8007e20:	232d      	movs	r3, #45	@ 0x2d
 8007e22:	426d      	negs	r5, r5
 8007e24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e28:	4858      	ldr	r0, [pc, #352]	@ (8007f8c <_printf_i+0x234>)
 8007e2a:	230a      	movs	r3, #10
 8007e2c:	e011      	b.n	8007e52 <_printf_i+0xfa>
 8007e2e:	6821      	ldr	r1, [r4, #0]
 8007e30:	6833      	ldr	r3, [r6, #0]
 8007e32:	0608      	lsls	r0, r1, #24
 8007e34:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e38:	d402      	bmi.n	8007e40 <_printf_i+0xe8>
 8007e3a:	0649      	lsls	r1, r1, #25
 8007e3c:	bf48      	it	mi
 8007e3e:	b2ad      	uxthmi	r5, r5
 8007e40:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e42:	4852      	ldr	r0, [pc, #328]	@ (8007f8c <_printf_i+0x234>)
 8007e44:	6033      	str	r3, [r6, #0]
 8007e46:	bf14      	ite	ne
 8007e48:	230a      	movne	r3, #10
 8007e4a:	2308      	moveq	r3, #8
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e52:	6866      	ldr	r6, [r4, #4]
 8007e54:	60a6      	str	r6, [r4, #8]
 8007e56:	2e00      	cmp	r6, #0
 8007e58:	db05      	blt.n	8007e66 <_printf_i+0x10e>
 8007e5a:	6821      	ldr	r1, [r4, #0]
 8007e5c:	432e      	orrs	r6, r5
 8007e5e:	f021 0104 	bic.w	r1, r1, #4
 8007e62:	6021      	str	r1, [r4, #0]
 8007e64:	d04b      	beq.n	8007efe <_printf_i+0x1a6>
 8007e66:	4616      	mov	r6, r2
 8007e68:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e6c:	fb03 5711 	mls	r7, r3, r1, r5
 8007e70:	5dc7      	ldrb	r7, [r0, r7]
 8007e72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e76:	462f      	mov	r7, r5
 8007e78:	42bb      	cmp	r3, r7
 8007e7a:	460d      	mov	r5, r1
 8007e7c:	d9f4      	bls.n	8007e68 <_printf_i+0x110>
 8007e7e:	2b08      	cmp	r3, #8
 8007e80:	d10b      	bne.n	8007e9a <_printf_i+0x142>
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	07df      	lsls	r7, r3, #31
 8007e86:	d508      	bpl.n	8007e9a <_printf_i+0x142>
 8007e88:	6923      	ldr	r3, [r4, #16]
 8007e8a:	6861      	ldr	r1, [r4, #4]
 8007e8c:	4299      	cmp	r1, r3
 8007e8e:	bfde      	ittt	le
 8007e90:	2330      	movle	r3, #48	@ 0x30
 8007e92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e9a:	1b92      	subs	r2, r2, r6
 8007e9c:	6122      	str	r2, [r4, #16]
 8007e9e:	f8cd a000 	str.w	sl, [sp]
 8007ea2:	464b      	mov	r3, r9
 8007ea4:	aa03      	add	r2, sp, #12
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4640      	mov	r0, r8
 8007eaa:	f7ff fee7 	bl	8007c7c <_printf_common>
 8007eae:	3001      	adds	r0, #1
 8007eb0:	d14a      	bne.n	8007f48 <_printf_i+0x1f0>
 8007eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb6:	b004      	add	sp, #16
 8007eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ebc:	6823      	ldr	r3, [r4, #0]
 8007ebe:	f043 0320 	orr.w	r3, r3, #32
 8007ec2:	6023      	str	r3, [r4, #0]
 8007ec4:	4832      	ldr	r0, [pc, #200]	@ (8007f90 <_printf_i+0x238>)
 8007ec6:	2778      	movs	r7, #120	@ 0x78
 8007ec8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	6831      	ldr	r1, [r6, #0]
 8007ed0:	061f      	lsls	r7, r3, #24
 8007ed2:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ed6:	d402      	bmi.n	8007ede <_printf_i+0x186>
 8007ed8:	065f      	lsls	r7, r3, #25
 8007eda:	bf48      	it	mi
 8007edc:	b2ad      	uxthmi	r5, r5
 8007ede:	6031      	str	r1, [r6, #0]
 8007ee0:	07d9      	lsls	r1, r3, #31
 8007ee2:	bf44      	itt	mi
 8007ee4:	f043 0320 	orrmi.w	r3, r3, #32
 8007ee8:	6023      	strmi	r3, [r4, #0]
 8007eea:	b11d      	cbz	r5, 8007ef4 <_printf_i+0x19c>
 8007eec:	2310      	movs	r3, #16
 8007eee:	e7ad      	b.n	8007e4c <_printf_i+0xf4>
 8007ef0:	4826      	ldr	r0, [pc, #152]	@ (8007f8c <_printf_i+0x234>)
 8007ef2:	e7e9      	b.n	8007ec8 <_printf_i+0x170>
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	f023 0320 	bic.w	r3, r3, #32
 8007efa:	6023      	str	r3, [r4, #0]
 8007efc:	e7f6      	b.n	8007eec <_printf_i+0x194>
 8007efe:	4616      	mov	r6, r2
 8007f00:	e7bd      	b.n	8007e7e <_printf_i+0x126>
 8007f02:	6833      	ldr	r3, [r6, #0]
 8007f04:	6825      	ldr	r5, [r4, #0]
 8007f06:	6961      	ldr	r1, [r4, #20]
 8007f08:	1d18      	adds	r0, r3, #4
 8007f0a:	6030      	str	r0, [r6, #0]
 8007f0c:	062e      	lsls	r6, r5, #24
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	d501      	bpl.n	8007f16 <_printf_i+0x1be>
 8007f12:	6019      	str	r1, [r3, #0]
 8007f14:	e002      	b.n	8007f1c <_printf_i+0x1c4>
 8007f16:	0668      	lsls	r0, r5, #25
 8007f18:	d5fb      	bpl.n	8007f12 <_printf_i+0x1ba>
 8007f1a:	8019      	strh	r1, [r3, #0]
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	6123      	str	r3, [r4, #16]
 8007f20:	4616      	mov	r6, r2
 8007f22:	e7bc      	b.n	8007e9e <_printf_i+0x146>
 8007f24:	6833      	ldr	r3, [r6, #0]
 8007f26:	1d1a      	adds	r2, r3, #4
 8007f28:	6032      	str	r2, [r6, #0]
 8007f2a:	681e      	ldr	r6, [r3, #0]
 8007f2c:	6862      	ldr	r2, [r4, #4]
 8007f2e:	2100      	movs	r1, #0
 8007f30:	4630      	mov	r0, r6
 8007f32:	f7f8 f96d 	bl	8000210 <memchr>
 8007f36:	b108      	cbz	r0, 8007f3c <_printf_i+0x1e4>
 8007f38:	1b80      	subs	r0, r0, r6
 8007f3a:	6060      	str	r0, [r4, #4]
 8007f3c:	6863      	ldr	r3, [r4, #4]
 8007f3e:	6123      	str	r3, [r4, #16]
 8007f40:	2300      	movs	r3, #0
 8007f42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f46:	e7aa      	b.n	8007e9e <_printf_i+0x146>
 8007f48:	6923      	ldr	r3, [r4, #16]
 8007f4a:	4632      	mov	r2, r6
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	4640      	mov	r0, r8
 8007f50:	47d0      	blx	sl
 8007f52:	3001      	adds	r0, #1
 8007f54:	d0ad      	beq.n	8007eb2 <_printf_i+0x15a>
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	079b      	lsls	r3, r3, #30
 8007f5a:	d413      	bmi.n	8007f84 <_printf_i+0x22c>
 8007f5c:	68e0      	ldr	r0, [r4, #12]
 8007f5e:	9b03      	ldr	r3, [sp, #12]
 8007f60:	4298      	cmp	r0, r3
 8007f62:	bfb8      	it	lt
 8007f64:	4618      	movlt	r0, r3
 8007f66:	e7a6      	b.n	8007eb6 <_printf_i+0x15e>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	4632      	mov	r2, r6
 8007f6c:	4649      	mov	r1, r9
 8007f6e:	4640      	mov	r0, r8
 8007f70:	47d0      	blx	sl
 8007f72:	3001      	adds	r0, #1
 8007f74:	d09d      	beq.n	8007eb2 <_printf_i+0x15a>
 8007f76:	3501      	adds	r5, #1
 8007f78:	68e3      	ldr	r3, [r4, #12]
 8007f7a:	9903      	ldr	r1, [sp, #12]
 8007f7c:	1a5b      	subs	r3, r3, r1
 8007f7e:	42ab      	cmp	r3, r5
 8007f80:	dcf2      	bgt.n	8007f68 <_printf_i+0x210>
 8007f82:	e7eb      	b.n	8007f5c <_printf_i+0x204>
 8007f84:	2500      	movs	r5, #0
 8007f86:	f104 0619 	add.w	r6, r4, #25
 8007f8a:	e7f5      	b.n	8007f78 <_printf_i+0x220>
 8007f8c:	0800a77e 	.word	0x0800a77e
 8007f90:	0800a78f 	.word	0x0800a78f

08007f94 <std>:
 8007f94:	2300      	movs	r3, #0
 8007f96:	b510      	push	{r4, lr}
 8007f98:	4604      	mov	r4, r0
 8007f9a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fa2:	6083      	str	r3, [r0, #8]
 8007fa4:	8181      	strh	r1, [r0, #12]
 8007fa6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fa8:	81c2      	strh	r2, [r0, #14]
 8007faa:	6183      	str	r3, [r0, #24]
 8007fac:	4619      	mov	r1, r3
 8007fae:	2208      	movs	r2, #8
 8007fb0:	305c      	adds	r0, #92	@ 0x5c
 8007fb2:	f000 f916 	bl	80081e2 <memset>
 8007fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007fec <std+0x58>)
 8007fb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007fba:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff0 <std+0x5c>)
 8007fbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff4 <std+0x60>)
 8007fc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff8 <std+0x64>)
 8007fc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ffc <std+0x68>)
 8007fc8:	6224      	str	r4, [r4, #32]
 8007fca:	429c      	cmp	r4, r3
 8007fcc:	d006      	beq.n	8007fdc <std+0x48>
 8007fce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fd2:	4294      	cmp	r4, r2
 8007fd4:	d002      	beq.n	8007fdc <std+0x48>
 8007fd6:	33d0      	adds	r3, #208	@ 0xd0
 8007fd8:	429c      	cmp	r4, r3
 8007fda:	d105      	bne.n	8007fe8 <std+0x54>
 8007fdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fe4:	f000 b9d8 	b.w	8008398 <__retarget_lock_init_recursive>
 8007fe8:	bd10      	pop	{r4, pc}
 8007fea:	bf00      	nop
 8007fec:	0800815d 	.word	0x0800815d
 8007ff0:	0800817f 	.word	0x0800817f
 8007ff4:	080081b7 	.word	0x080081b7
 8007ff8:	080081db 	.word	0x080081db
 8007ffc:	20004e6c 	.word	0x20004e6c

08008000 <stdio_exit_handler>:
 8008000:	4a02      	ldr	r2, [pc, #8]	@ (800800c <stdio_exit_handler+0xc>)
 8008002:	4903      	ldr	r1, [pc, #12]	@ (8008010 <stdio_exit_handler+0x10>)
 8008004:	4803      	ldr	r0, [pc, #12]	@ (8008014 <stdio_exit_handler+0x14>)
 8008006:	f000 b869 	b.w	80080dc <_fwalk_sglue>
 800800a:	bf00      	nop
 800800c:	20000010 	.word	0x20000010
 8008010:	08009d1d 	.word	0x08009d1d
 8008014:	20000020 	.word	0x20000020

08008018 <cleanup_stdio>:
 8008018:	6841      	ldr	r1, [r0, #4]
 800801a:	4b0c      	ldr	r3, [pc, #48]	@ (800804c <cleanup_stdio+0x34>)
 800801c:	4299      	cmp	r1, r3
 800801e:	b510      	push	{r4, lr}
 8008020:	4604      	mov	r4, r0
 8008022:	d001      	beq.n	8008028 <cleanup_stdio+0x10>
 8008024:	f001 fe7a 	bl	8009d1c <_fflush_r>
 8008028:	68a1      	ldr	r1, [r4, #8]
 800802a:	4b09      	ldr	r3, [pc, #36]	@ (8008050 <cleanup_stdio+0x38>)
 800802c:	4299      	cmp	r1, r3
 800802e:	d002      	beq.n	8008036 <cleanup_stdio+0x1e>
 8008030:	4620      	mov	r0, r4
 8008032:	f001 fe73 	bl	8009d1c <_fflush_r>
 8008036:	68e1      	ldr	r1, [r4, #12]
 8008038:	4b06      	ldr	r3, [pc, #24]	@ (8008054 <cleanup_stdio+0x3c>)
 800803a:	4299      	cmp	r1, r3
 800803c:	d004      	beq.n	8008048 <cleanup_stdio+0x30>
 800803e:	4620      	mov	r0, r4
 8008040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008044:	f001 be6a 	b.w	8009d1c <_fflush_r>
 8008048:	bd10      	pop	{r4, pc}
 800804a:	bf00      	nop
 800804c:	20004e6c 	.word	0x20004e6c
 8008050:	20004ed4 	.word	0x20004ed4
 8008054:	20004f3c 	.word	0x20004f3c

08008058 <global_stdio_init.part.0>:
 8008058:	b510      	push	{r4, lr}
 800805a:	4b0b      	ldr	r3, [pc, #44]	@ (8008088 <global_stdio_init.part.0+0x30>)
 800805c:	4c0b      	ldr	r4, [pc, #44]	@ (800808c <global_stdio_init.part.0+0x34>)
 800805e:	4a0c      	ldr	r2, [pc, #48]	@ (8008090 <global_stdio_init.part.0+0x38>)
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	4620      	mov	r0, r4
 8008064:	2200      	movs	r2, #0
 8008066:	2104      	movs	r1, #4
 8008068:	f7ff ff94 	bl	8007f94 <std>
 800806c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008070:	2201      	movs	r2, #1
 8008072:	2109      	movs	r1, #9
 8008074:	f7ff ff8e 	bl	8007f94 <std>
 8008078:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800807c:	2202      	movs	r2, #2
 800807e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008082:	2112      	movs	r1, #18
 8008084:	f7ff bf86 	b.w	8007f94 <std>
 8008088:	20004fa4 	.word	0x20004fa4
 800808c:	20004e6c 	.word	0x20004e6c
 8008090:	08008001 	.word	0x08008001

08008094 <__sfp_lock_acquire>:
 8008094:	4801      	ldr	r0, [pc, #4]	@ (800809c <__sfp_lock_acquire+0x8>)
 8008096:	f000 b980 	b.w	800839a <__retarget_lock_acquire_recursive>
 800809a:	bf00      	nop
 800809c:	20004fad 	.word	0x20004fad

080080a0 <__sfp_lock_release>:
 80080a0:	4801      	ldr	r0, [pc, #4]	@ (80080a8 <__sfp_lock_release+0x8>)
 80080a2:	f000 b97b 	b.w	800839c <__retarget_lock_release_recursive>
 80080a6:	bf00      	nop
 80080a8:	20004fad 	.word	0x20004fad

080080ac <__sinit>:
 80080ac:	b510      	push	{r4, lr}
 80080ae:	4604      	mov	r4, r0
 80080b0:	f7ff fff0 	bl	8008094 <__sfp_lock_acquire>
 80080b4:	6a23      	ldr	r3, [r4, #32]
 80080b6:	b11b      	cbz	r3, 80080c0 <__sinit+0x14>
 80080b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080bc:	f7ff bff0 	b.w	80080a0 <__sfp_lock_release>
 80080c0:	4b04      	ldr	r3, [pc, #16]	@ (80080d4 <__sinit+0x28>)
 80080c2:	6223      	str	r3, [r4, #32]
 80080c4:	4b04      	ldr	r3, [pc, #16]	@ (80080d8 <__sinit+0x2c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1f5      	bne.n	80080b8 <__sinit+0xc>
 80080cc:	f7ff ffc4 	bl	8008058 <global_stdio_init.part.0>
 80080d0:	e7f2      	b.n	80080b8 <__sinit+0xc>
 80080d2:	bf00      	nop
 80080d4:	08008019 	.word	0x08008019
 80080d8:	20004fa4 	.word	0x20004fa4

080080dc <_fwalk_sglue>:
 80080dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080e0:	4607      	mov	r7, r0
 80080e2:	4688      	mov	r8, r1
 80080e4:	4614      	mov	r4, r2
 80080e6:	2600      	movs	r6, #0
 80080e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080ec:	f1b9 0901 	subs.w	r9, r9, #1
 80080f0:	d505      	bpl.n	80080fe <_fwalk_sglue+0x22>
 80080f2:	6824      	ldr	r4, [r4, #0]
 80080f4:	2c00      	cmp	r4, #0
 80080f6:	d1f7      	bne.n	80080e8 <_fwalk_sglue+0xc>
 80080f8:	4630      	mov	r0, r6
 80080fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080fe:	89ab      	ldrh	r3, [r5, #12]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d907      	bls.n	8008114 <_fwalk_sglue+0x38>
 8008104:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008108:	3301      	adds	r3, #1
 800810a:	d003      	beq.n	8008114 <_fwalk_sglue+0x38>
 800810c:	4629      	mov	r1, r5
 800810e:	4638      	mov	r0, r7
 8008110:	47c0      	blx	r8
 8008112:	4306      	orrs	r6, r0
 8008114:	3568      	adds	r5, #104	@ 0x68
 8008116:	e7e9      	b.n	80080ec <_fwalk_sglue+0x10>

08008118 <siprintf>:
 8008118:	b40e      	push	{r1, r2, r3}
 800811a:	b510      	push	{r4, lr}
 800811c:	b09d      	sub	sp, #116	@ 0x74
 800811e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008120:	9002      	str	r0, [sp, #8]
 8008122:	9006      	str	r0, [sp, #24]
 8008124:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008128:	480a      	ldr	r0, [pc, #40]	@ (8008154 <siprintf+0x3c>)
 800812a:	9107      	str	r1, [sp, #28]
 800812c:	9104      	str	r1, [sp, #16]
 800812e:	490a      	ldr	r1, [pc, #40]	@ (8008158 <siprintf+0x40>)
 8008130:	f853 2b04 	ldr.w	r2, [r3], #4
 8008134:	9105      	str	r1, [sp, #20]
 8008136:	2400      	movs	r4, #0
 8008138:	a902      	add	r1, sp, #8
 800813a:	6800      	ldr	r0, [r0, #0]
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008140:	f001 fc6c 	bl	8009a1c <_svfiprintf_r>
 8008144:	9b02      	ldr	r3, [sp, #8]
 8008146:	701c      	strb	r4, [r3, #0]
 8008148:	b01d      	add	sp, #116	@ 0x74
 800814a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800814e:	b003      	add	sp, #12
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	2000001c 	.word	0x2000001c
 8008158:	ffff0208 	.word	0xffff0208

0800815c <__sread>:
 800815c:	b510      	push	{r4, lr}
 800815e:	460c      	mov	r4, r1
 8008160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008164:	f000 f8ca 	bl	80082fc <_read_r>
 8008168:	2800      	cmp	r0, #0
 800816a:	bfab      	itete	ge
 800816c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800816e:	89a3      	ldrhlt	r3, [r4, #12]
 8008170:	181b      	addge	r3, r3, r0
 8008172:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008176:	bfac      	ite	ge
 8008178:	6563      	strge	r3, [r4, #84]	@ 0x54
 800817a:	81a3      	strhlt	r3, [r4, #12]
 800817c:	bd10      	pop	{r4, pc}

0800817e <__swrite>:
 800817e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008182:	461f      	mov	r7, r3
 8008184:	898b      	ldrh	r3, [r1, #12]
 8008186:	05db      	lsls	r3, r3, #23
 8008188:	4605      	mov	r5, r0
 800818a:	460c      	mov	r4, r1
 800818c:	4616      	mov	r6, r2
 800818e:	d505      	bpl.n	800819c <__swrite+0x1e>
 8008190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008194:	2302      	movs	r3, #2
 8008196:	2200      	movs	r2, #0
 8008198:	f000 f89e 	bl	80082d8 <_lseek_r>
 800819c:	89a3      	ldrh	r3, [r4, #12]
 800819e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081a6:	81a3      	strh	r3, [r4, #12]
 80081a8:	4632      	mov	r2, r6
 80081aa:	463b      	mov	r3, r7
 80081ac:	4628      	mov	r0, r5
 80081ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081b2:	f000 b8b5 	b.w	8008320 <_write_r>

080081b6 <__sseek>:
 80081b6:	b510      	push	{r4, lr}
 80081b8:	460c      	mov	r4, r1
 80081ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081be:	f000 f88b 	bl	80082d8 <_lseek_r>
 80081c2:	1c43      	adds	r3, r0, #1
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	bf15      	itete	ne
 80081c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80081d2:	81a3      	strheq	r3, [r4, #12]
 80081d4:	bf18      	it	ne
 80081d6:	81a3      	strhne	r3, [r4, #12]
 80081d8:	bd10      	pop	{r4, pc}

080081da <__sclose>:
 80081da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081de:	f000 b80d 	b.w	80081fc <_close_r>

080081e2 <memset>:
 80081e2:	4402      	add	r2, r0
 80081e4:	4603      	mov	r3, r0
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d100      	bne.n	80081ec <memset+0xa>
 80081ea:	4770      	bx	lr
 80081ec:	f803 1b01 	strb.w	r1, [r3], #1
 80081f0:	e7f9      	b.n	80081e6 <memset+0x4>
	...

080081f4 <_localeconv_r>:
 80081f4:	4800      	ldr	r0, [pc, #0]	@ (80081f8 <_localeconv_r+0x4>)
 80081f6:	4770      	bx	lr
 80081f8:	2000015c 	.word	0x2000015c

080081fc <_close_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	4d06      	ldr	r5, [pc, #24]	@ (8008218 <_close_r+0x1c>)
 8008200:	2300      	movs	r3, #0
 8008202:	4604      	mov	r4, r0
 8008204:	4608      	mov	r0, r1
 8008206:	602b      	str	r3, [r5, #0]
 8008208:	f7f9 fb6c 	bl	80018e4 <_close>
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	d102      	bne.n	8008216 <_close_r+0x1a>
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	b103      	cbz	r3, 8008216 <_close_r+0x1a>
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	bd38      	pop	{r3, r4, r5, pc}
 8008218:	20004fa8 	.word	0x20004fa8

0800821c <_reclaim_reent>:
 800821c:	4b2d      	ldr	r3, [pc, #180]	@ (80082d4 <_reclaim_reent+0xb8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4283      	cmp	r3, r0
 8008222:	b570      	push	{r4, r5, r6, lr}
 8008224:	4604      	mov	r4, r0
 8008226:	d053      	beq.n	80082d0 <_reclaim_reent+0xb4>
 8008228:	69c3      	ldr	r3, [r0, #28]
 800822a:	b31b      	cbz	r3, 8008274 <_reclaim_reent+0x58>
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	b163      	cbz	r3, 800824a <_reclaim_reent+0x2e>
 8008230:	2500      	movs	r5, #0
 8008232:	69e3      	ldr	r3, [r4, #28]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	5959      	ldr	r1, [r3, r5]
 8008238:	b9b1      	cbnz	r1, 8008268 <_reclaim_reent+0x4c>
 800823a:	3504      	adds	r5, #4
 800823c:	2d80      	cmp	r5, #128	@ 0x80
 800823e:	d1f8      	bne.n	8008232 <_reclaim_reent+0x16>
 8008240:	69e3      	ldr	r3, [r4, #28]
 8008242:	4620      	mov	r0, r4
 8008244:	68d9      	ldr	r1, [r3, #12]
 8008246:	f000 ff13 	bl	8009070 <_free_r>
 800824a:	69e3      	ldr	r3, [r4, #28]
 800824c:	6819      	ldr	r1, [r3, #0]
 800824e:	b111      	cbz	r1, 8008256 <_reclaim_reent+0x3a>
 8008250:	4620      	mov	r0, r4
 8008252:	f000 ff0d 	bl	8009070 <_free_r>
 8008256:	69e3      	ldr	r3, [r4, #28]
 8008258:	689d      	ldr	r5, [r3, #8]
 800825a:	b15d      	cbz	r5, 8008274 <_reclaim_reent+0x58>
 800825c:	4629      	mov	r1, r5
 800825e:	4620      	mov	r0, r4
 8008260:	682d      	ldr	r5, [r5, #0]
 8008262:	f000 ff05 	bl	8009070 <_free_r>
 8008266:	e7f8      	b.n	800825a <_reclaim_reent+0x3e>
 8008268:	680e      	ldr	r6, [r1, #0]
 800826a:	4620      	mov	r0, r4
 800826c:	f000 ff00 	bl	8009070 <_free_r>
 8008270:	4631      	mov	r1, r6
 8008272:	e7e1      	b.n	8008238 <_reclaim_reent+0x1c>
 8008274:	6961      	ldr	r1, [r4, #20]
 8008276:	b111      	cbz	r1, 800827e <_reclaim_reent+0x62>
 8008278:	4620      	mov	r0, r4
 800827a:	f000 fef9 	bl	8009070 <_free_r>
 800827e:	69e1      	ldr	r1, [r4, #28]
 8008280:	b111      	cbz	r1, 8008288 <_reclaim_reent+0x6c>
 8008282:	4620      	mov	r0, r4
 8008284:	f000 fef4 	bl	8009070 <_free_r>
 8008288:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800828a:	b111      	cbz	r1, 8008292 <_reclaim_reent+0x76>
 800828c:	4620      	mov	r0, r4
 800828e:	f000 feef 	bl	8009070 <_free_r>
 8008292:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008294:	b111      	cbz	r1, 800829c <_reclaim_reent+0x80>
 8008296:	4620      	mov	r0, r4
 8008298:	f000 feea 	bl	8009070 <_free_r>
 800829c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800829e:	b111      	cbz	r1, 80082a6 <_reclaim_reent+0x8a>
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 fee5 	bl	8009070 <_free_r>
 80082a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80082a8:	b111      	cbz	r1, 80082b0 <_reclaim_reent+0x94>
 80082aa:	4620      	mov	r0, r4
 80082ac:	f000 fee0 	bl	8009070 <_free_r>
 80082b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80082b2:	b111      	cbz	r1, 80082ba <_reclaim_reent+0x9e>
 80082b4:	4620      	mov	r0, r4
 80082b6:	f000 fedb 	bl	8009070 <_free_r>
 80082ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80082bc:	b111      	cbz	r1, 80082c4 <_reclaim_reent+0xa8>
 80082be:	4620      	mov	r0, r4
 80082c0:	f000 fed6 	bl	8009070 <_free_r>
 80082c4:	6a23      	ldr	r3, [r4, #32]
 80082c6:	b11b      	cbz	r3, 80082d0 <_reclaim_reent+0xb4>
 80082c8:	4620      	mov	r0, r4
 80082ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80082ce:	4718      	bx	r3
 80082d0:	bd70      	pop	{r4, r5, r6, pc}
 80082d2:	bf00      	nop
 80082d4:	2000001c 	.word	0x2000001c

080082d8 <_lseek_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4d07      	ldr	r5, [pc, #28]	@ (80082f8 <_lseek_r+0x20>)
 80082dc:	4604      	mov	r4, r0
 80082de:	4608      	mov	r0, r1
 80082e0:	4611      	mov	r1, r2
 80082e2:	2200      	movs	r2, #0
 80082e4:	602a      	str	r2, [r5, #0]
 80082e6:	461a      	mov	r2, r3
 80082e8:	f7f9 fb23 	bl	8001932 <_lseek>
 80082ec:	1c43      	adds	r3, r0, #1
 80082ee:	d102      	bne.n	80082f6 <_lseek_r+0x1e>
 80082f0:	682b      	ldr	r3, [r5, #0]
 80082f2:	b103      	cbz	r3, 80082f6 <_lseek_r+0x1e>
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	bd38      	pop	{r3, r4, r5, pc}
 80082f8:	20004fa8 	.word	0x20004fa8

080082fc <_read_r>:
 80082fc:	b538      	push	{r3, r4, r5, lr}
 80082fe:	4d07      	ldr	r5, [pc, #28]	@ (800831c <_read_r+0x20>)
 8008300:	4604      	mov	r4, r0
 8008302:	4608      	mov	r0, r1
 8008304:	4611      	mov	r1, r2
 8008306:	2200      	movs	r2, #0
 8008308:	602a      	str	r2, [r5, #0]
 800830a:	461a      	mov	r2, r3
 800830c:	f7f9 fab1 	bl	8001872 <_read>
 8008310:	1c43      	adds	r3, r0, #1
 8008312:	d102      	bne.n	800831a <_read_r+0x1e>
 8008314:	682b      	ldr	r3, [r5, #0]
 8008316:	b103      	cbz	r3, 800831a <_read_r+0x1e>
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	bd38      	pop	{r3, r4, r5, pc}
 800831c:	20004fa8 	.word	0x20004fa8

08008320 <_write_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	4d07      	ldr	r5, [pc, #28]	@ (8008340 <_write_r+0x20>)
 8008324:	4604      	mov	r4, r0
 8008326:	4608      	mov	r0, r1
 8008328:	4611      	mov	r1, r2
 800832a:	2200      	movs	r2, #0
 800832c:	602a      	str	r2, [r5, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	f7f9 fabc 	bl	80018ac <_write>
 8008334:	1c43      	adds	r3, r0, #1
 8008336:	d102      	bne.n	800833e <_write_r+0x1e>
 8008338:	682b      	ldr	r3, [r5, #0]
 800833a:	b103      	cbz	r3, 800833e <_write_r+0x1e>
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	bd38      	pop	{r3, r4, r5, pc}
 8008340:	20004fa8 	.word	0x20004fa8

08008344 <__errno>:
 8008344:	4b01      	ldr	r3, [pc, #4]	@ (800834c <__errno+0x8>)
 8008346:	6818      	ldr	r0, [r3, #0]
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	2000001c 	.word	0x2000001c

08008350 <__libc_init_array>:
 8008350:	b570      	push	{r4, r5, r6, lr}
 8008352:	4d0d      	ldr	r5, [pc, #52]	@ (8008388 <__libc_init_array+0x38>)
 8008354:	4c0d      	ldr	r4, [pc, #52]	@ (800838c <__libc_init_array+0x3c>)
 8008356:	1b64      	subs	r4, r4, r5
 8008358:	10a4      	asrs	r4, r4, #2
 800835a:	2600      	movs	r6, #0
 800835c:	42a6      	cmp	r6, r4
 800835e:	d109      	bne.n	8008374 <__libc_init_array+0x24>
 8008360:	4d0b      	ldr	r5, [pc, #44]	@ (8008390 <__libc_init_array+0x40>)
 8008362:	4c0c      	ldr	r4, [pc, #48]	@ (8008394 <__libc_init_array+0x44>)
 8008364:	f002 f86a 	bl	800a43c <_init>
 8008368:	1b64      	subs	r4, r4, r5
 800836a:	10a4      	asrs	r4, r4, #2
 800836c:	2600      	movs	r6, #0
 800836e:	42a6      	cmp	r6, r4
 8008370:	d105      	bne.n	800837e <__libc_init_array+0x2e>
 8008372:	bd70      	pop	{r4, r5, r6, pc}
 8008374:	f855 3b04 	ldr.w	r3, [r5], #4
 8008378:	4798      	blx	r3
 800837a:	3601      	adds	r6, #1
 800837c:	e7ee      	b.n	800835c <__libc_init_array+0xc>
 800837e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008382:	4798      	blx	r3
 8008384:	3601      	adds	r6, #1
 8008386:	e7f2      	b.n	800836e <__libc_init_array+0x1e>
 8008388:	0800aaec 	.word	0x0800aaec
 800838c:	0800aaec 	.word	0x0800aaec
 8008390:	0800aaec 	.word	0x0800aaec
 8008394:	0800aaf0 	.word	0x0800aaf0

08008398 <__retarget_lock_init_recursive>:
 8008398:	4770      	bx	lr

0800839a <__retarget_lock_acquire_recursive>:
 800839a:	4770      	bx	lr

0800839c <__retarget_lock_release_recursive>:
 800839c:	4770      	bx	lr

0800839e <memcpy>:
 800839e:	440a      	add	r2, r1
 80083a0:	4291      	cmp	r1, r2
 80083a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80083a6:	d100      	bne.n	80083aa <memcpy+0xc>
 80083a8:	4770      	bx	lr
 80083aa:	b510      	push	{r4, lr}
 80083ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083b4:	4291      	cmp	r1, r2
 80083b6:	d1f9      	bne.n	80083ac <memcpy+0xe>
 80083b8:	bd10      	pop	{r4, pc}

080083ba <quorem>:
 80083ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083be:	6903      	ldr	r3, [r0, #16]
 80083c0:	690c      	ldr	r4, [r1, #16]
 80083c2:	42a3      	cmp	r3, r4
 80083c4:	4607      	mov	r7, r0
 80083c6:	db7e      	blt.n	80084c6 <quorem+0x10c>
 80083c8:	3c01      	subs	r4, #1
 80083ca:	f101 0814 	add.w	r8, r1, #20
 80083ce:	00a3      	lsls	r3, r4, #2
 80083d0:	f100 0514 	add.w	r5, r0, #20
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083da:	9301      	str	r3, [sp, #4]
 80083dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083e4:	3301      	adds	r3, #1
 80083e6:	429a      	cmp	r2, r3
 80083e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80083f0:	d32e      	bcc.n	8008450 <quorem+0x96>
 80083f2:	f04f 0a00 	mov.w	sl, #0
 80083f6:	46c4      	mov	ip, r8
 80083f8:	46ae      	mov	lr, r5
 80083fa:	46d3      	mov	fp, sl
 80083fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008400:	b298      	uxth	r0, r3
 8008402:	fb06 a000 	mla	r0, r6, r0, sl
 8008406:	0c02      	lsrs	r2, r0, #16
 8008408:	0c1b      	lsrs	r3, r3, #16
 800840a:	fb06 2303 	mla	r3, r6, r3, r2
 800840e:	f8de 2000 	ldr.w	r2, [lr]
 8008412:	b280      	uxth	r0, r0
 8008414:	b292      	uxth	r2, r2
 8008416:	1a12      	subs	r2, r2, r0
 8008418:	445a      	add	r2, fp
 800841a:	f8de 0000 	ldr.w	r0, [lr]
 800841e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008422:	b29b      	uxth	r3, r3
 8008424:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008428:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800842c:	b292      	uxth	r2, r2
 800842e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008432:	45e1      	cmp	r9, ip
 8008434:	f84e 2b04 	str.w	r2, [lr], #4
 8008438:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800843c:	d2de      	bcs.n	80083fc <quorem+0x42>
 800843e:	9b00      	ldr	r3, [sp, #0]
 8008440:	58eb      	ldr	r3, [r5, r3]
 8008442:	b92b      	cbnz	r3, 8008450 <quorem+0x96>
 8008444:	9b01      	ldr	r3, [sp, #4]
 8008446:	3b04      	subs	r3, #4
 8008448:	429d      	cmp	r5, r3
 800844a:	461a      	mov	r2, r3
 800844c:	d32f      	bcc.n	80084ae <quorem+0xf4>
 800844e:	613c      	str	r4, [r7, #16]
 8008450:	4638      	mov	r0, r7
 8008452:	f001 f97f 	bl	8009754 <__mcmp>
 8008456:	2800      	cmp	r0, #0
 8008458:	db25      	blt.n	80084a6 <quorem+0xec>
 800845a:	4629      	mov	r1, r5
 800845c:	2000      	movs	r0, #0
 800845e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008462:	f8d1 c000 	ldr.w	ip, [r1]
 8008466:	fa1f fe82 	uxth.w	lr, r2
 800846a:	fa1f f38c 	uxth.w	r3, ip
 800846e:	eba3 030e 	sub.w	r3, r3, lr
 8008472:	4403      	add	r3, r0
 8008474:	0c12      	lsrs	r2, r2, #16
 8008476:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800847a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800847e:	b29b      	uxth	r3, r3
 8008480:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008484:	45c1      	cmp	r9, r8
 8008486:	f841 3b04 	str.w	r3, [r1], #4
 800848a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800848e:	d2e6      	bcs.n	800845e <quorem+0xa4>
 8008490:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008494:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008498:	b922      	cbnz	r2, 80084a4 <quorem+0xea>
 800849a:	3b04      	subs	r3, #4
 800849c:	429d      	cmp	r5, r3
 800849e:	461a      	mov	r2, r3
 80084a0:	d30b      	bcc.n	80084ba <quorem+0x100>
 80084a2:	613c      	str	r4, [r7, #16]
 80084a4:	3601      	adds	r6, #1
 80084a6:	4630      	mov	r0, r6
 80084a8:	b003      	add	sp, #12
 80084aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ae:	6812      	ldr	r2, [r2, #0]
 80084b0:	3b04      	subs	r3, #4
 80084b2:	2a00      	cmp	r2, #0
 80084b4:	d1cb      	bne.n	800844e <quorem+0x94>
 80084b6:	3c01      	subs	r4, #1
 80084b8:	e7c6      	b.n	8008448 <quorem+0x8e>
 80084ba:	6812      	ldr	r2, [r2, #0]
 80084bc:	3b04      	subs	r3, #4
 80084be:	2a00      	cmp	r2, #0
 80084c0:	d1ef      	bne.n	80084a2 <quorem+0xe8>
 80084c2:	3c01      	subs	r4, #1
 80084c4:	e7ea      	b.n	800849c <quorem+0xe2>
 80084c6:	2000      	movs	r0, #0
 80084c8:	e7ee      	b.n	80084a8 <quorem+0xee>
 80084ca:	0000      	movs	r0, r0
 80084cc:	0000      	movs	r0, r0
	...

080084d0 <_dtoa_r>:
 80084d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d4:	69c7      	ldr	r7, [r0, #28]
 80084d6:	b097      	sub	sp, #92	@ 0x5c
 80084d8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80084dc:	ec55 4b10 	vmov	r4, r5, d0
 80084e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80084e2:	9107      	str	r1, [sp, #28]
 80084e4:	4681      	mov	r9, r0
 80084e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80084e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80084ea:	b97f      	cbnz	r7, 800850c <_dtoa_r+0x3c>
 80084ec:	2010      	movs	r0, #16
 80084ee:	f000 fe09 	bl	8009104 <malloc>
 80084f2:	4602      	mov	r2, r0
 80084f4:	f8c9 001c 	str.w	r0, [r9, #28]
 80084f8:	b920      	cbnz	r0, 8008504 <_dtoa_r+0x34>
 80084fa:	4ba9      	ldr	r3, [pc, #676]	@ (80087a0 <_dtoa_r+0x2d0>)
 80084fc:	21ef      	movs	r1, #239	@ 0xef
 80084fe:	48a9      	ldr	r0, [pc, #676]	@ (80087a4 <_dtoa_r+0x2d4>)
 8008500:	f001 fc5e 	bl	8009dc0 <__assert_func>
 8008504:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008508:	6007      	str	r7, [r0, #0]
 800850a:	60c7      	str	r7, [r0, #12]
 800850c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008510:	6819      	ldr	r1, [r3, #0]
 8008512:	b159      	cbz	r1, 800852c <_dtoa_r+0x5c>
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	604a      	str	r2, [r1, #4]
 8008518:	2301      	movs	r3, #1
 800851a:	4093      	lsls	r3, r2
 800851c:	608b      	str	r3, [r1, #8]
 800851e:	4648      	mov	r0, r9
 8008520:	f000 fee6 	bl	80092f0 <_Bfree>
 8008524:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008528:	2200      	movs	r2, #0
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	1e2b      	subs	r3, r5, #0
 800852e:	bfb9      	ittee	lt
 8008530:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008534:	9305      	strlt	r3, [sp, #20]
 8008536:	2300      	movge	r3, #0
 8008538:	6033      	strge	r3, [r6, #0]
 800853a:	9f05      	ldr	r7, [sp, #20]
 800853c:	4b9a      	ldr	r3, [pc, #616]	@ (80087a8 <_dtoa_r+0x2d8>)
 800853e:	bfbc      	itt	lt
 8008540:	2201      	movlt	r2, #1
 8008542:	6032      	strlt	r2, [r6, #0]
 8008544:	43bb      	bics	r3, r7
 8008546:	d112      	bne.n	800856e <_dtoa_r+0x9e>
 8008548:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800854a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800854e:	6013      	str	r3, [r2, #0]
 8008550:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008554:	4323      	orrs	r3, r4
 8008556:	f000 855a 	beq.w	800900e <_dtoa_r+0xb3e>
 800855a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800855c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80087bc <_dtoa_r+0x2ec>
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 855c 	beq.w	800901e <_dtoa_r+0xb4e>
 8008566:	f10a 0303 	add.w	r3, sl, #3
 800856a:	f000 bd56 	b.w	800901a <_dtoa_r+0xb4a>
 800856e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008572:	2200      	movs	r2, #0
 8008574:	ec51 0b17 	vmov	r0, r1, d7
 8008578:	2300      	movs	r3, #0
 800857a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800857e:	f7f8 fac3 	bl	8000b08 <__aeabi_dcmpeq>
 8008582:	4680      	mov	r8, r0
 8008584:	b158      	cbz	r0, 800859e <_dtoa_r+0xce>
 8008586:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008588:	2301      	movs	r3, #1
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800858e:	b113      	cbz	r3, 8008596 <_dtoa_r+0xc6>
 8008590:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008592:	4b86      	ldr	r3, [pc, #536]	@ (80087ac <_dtoa_r+0x2dc>)
 8008594:	6013      	str	r3, [r2, #0]
 8008596:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80087c0 <_dtoa_r+0x2f0>
 800859a:	f000 bd40 	b.w	800901e <_dtoa_r+0xb4e>
 800859e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80085a2:	aa14      	add	r2, sp, #80	@ 0x50
 80085a4:	a915      	add	r1, sp, #84	@ 0x54
 80085a6:	4648      	mov	r0, r9
 80085a8:	f001 f984 	bl	80098b4 <__d2b>
 80085ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80085b0:	9002      	str	r0, [sp, #8]
 80085b2:	2e00      	cmp	r6, #0
 80085b4:	d078      	beq.n	80086a8 <_dtoa_r+0x1d8>
 80085b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085b8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80085bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80085c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80085c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80085cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80085d0:	4619      	mov	r1, r3
 80085d2:	2200      	movs	r2, #0
 80085d4:	4b76      	ldr	r3, [pc, #472]	@ (80087b0 <_dtoa_r+0x2e0>)
 80085d6:	f7f7 fe77 	bl	80002c8 <__aeabi_dsub>
 80085da:	a36b      	add	r3, pc, #428	@ (adr r3, 8008788 <_dtoa_r+0x2b8>)
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	f7f8 f82a 	bl	8000638 <__aeabi_dmul>
 80085e4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008790 <_dtoa_r+0x2c0>)
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	f7f7 fe6f 	bl	80002cc <__adddf3>
 80085ee:	4604      	mov	r4, r0
 80085f0:	4630      	mov	r0, r6
 80085f2:	460d      	mov	r5, r1
 80085f4:	f7f7 ffb6 	bl	8000564 <__aeabi_i2d>
 80085f8:	a367      	add	r3, pc, #412	@ (adr r3, 8008798 <_dtoa_r+0x2c8>)
 80085fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fe:	f7f8 f81b 	bl	8000638 <__aeabi_dmul>
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	4620      	mov	r0, r4
 8008608:	4629      	mov	r1, r5
 800860a:	f7f7 fe5f 	bl	80002cc <__adddf3>
 800860e:	4604      	mov	r4, r0
 8008610:	460d      	mov	r5, r1
 8008612:	f7f8 fac1 	bl	8000b98 <__aeabi_d2iz>
 8008616:	2200      	movs	r2, #0
 8008618:	4607      	mov	r7, r0
 800861a:	2300      	movs	r3, #0
 800861c:	4620      	mov	r0, r4
 800861e:	4629      	mov	r1, r5
 8008620:	f7f8 fa7c 	bl	8000b1c <__aeabi_dcmplt>
 8008624:	b140      	cbz	r0, 8008638 <_dtoa_r+0x168>
 8008626:	4638      	mov	r0, r7
 8008628:	f7f7 ff9c 	bl	8000564 <__aeabi_i2d>
 800862c:	4622      	mov	r2, r4
 800862e:	462b      	mov	r3, r5
 8008630:	f7f8 fa6a 	bl	8000b08 <__aeabi_dcmpeq>
 8008634:	b900      	cbnz	r0, 8008638 <_dtoa_r+0x168>
 8008636:	3f01      	subs	r7, #1
 8008638:	2f16      	cmp	r7, #22
 800863a:	d852      	bhi.n	80086e2 <_dtoa_r+0x212>
 800863c:	4b5d      	ldr	r3, [pc, #372]	@ (80087b4 <_dtoa_r+0x2e4>)
 800863e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008646:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800864a:	f7f8 fa67 	bl	8000b1c <__aeabi_dcmplt>
 800864e:	2800      	cmp	r0, #0
 8008650:	d049      	beq.n	80086e6 <_dtoa_r+0x216>
 8008652:	3f01      	subs	r7, #1
 8008654:	2300      	movs	r3, #0
 8008656:	9310      	str	r3, [sp, #64]	@ 0x40
 8008658:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800865a:	1b9b      	subs	r3, r3, r6
 800865c:	1e5a      	subs	r2, r3, #1
 800865e:	bf45      	ittet	mi
 8008660:	f1c3 0301 	rsbmi	r3, r3, #1
 8008664:	9300      	strmi	r3, [sp, #0]
 8008666:	2300      	movpl	r3, #0
 8008668:	2300      	movmi	r3, #0
 800866a:	9206      	str	r2, [sp, #24]
 800866c:	bf54      	ite	pl
 800866e:	9300      	strpl	r3, [sp, #0]
 8008670:	9306      	strmi	r3, [sp, #24]
 8008672:	2f00      	cmp	r7, #0
 8008674:	db39      	blt.n	80086ea <_dtoa_r+0x21a>
 8008676:	9b06      	ldr	r3, [sp, #24]
 8008678:	970d      	str	r7, [sp, #52]	@ 0x34
 800867a:	443b      	add	r3, r7
 800867c:	9306      	str	r3, [sp, #24]
 800867e:	2300      	movs	r3, #0
 8008680:	9308      	str	r3, [sp, #32]
 8008682:	9b07      	ldr	r3, [sp, #28]
 8008684:	2b09      	cmp	r3, #9
 8008686:	d863      	bhi.n	8008750 <_dtoa_r+0x280>
 8008688:	2b05      	cmp	r3, #5
 800868a:	bfc4      	itt	gt
 800868c:	3b04      	subgt	r3, #4
 800868e:	9307      	strgt	r3, [sp, #28]
 8008690:	9b07      	ldr	r3, [sp, #28]
 8008692:	f1a3 0302 	sub.w	r3, r3, #2
 8008696:	bfcc      	ite	gt
 8008698:	2400      	movgt	r4, #0
 800869a:	2401      	movle	r4, #1
 800869c:	2b03      	cmp	r3, #3
 800869e:	d863      	bhi.n	8008768 <_dtoa_r+0x298>
 80086a0:	e8df f003 	tbb	[pc, r3]
 80086a4:	2b375452 	.word	0x2b375452
 80086a8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80086ac:	441e      	add	r6, r3
 80086ae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80086b2:	2b20      	cmp	r3, #32
 80086b4:	bfc1      	itttt	gt
 80086b6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80086ba:	409f      	lslgt	r7, r3
 80086bc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80086c0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80086c4:	bfd6      	itet	le
 80086c6:	f1c3 0320 	rsble	r3, r3, #32
 80086ca:	ea47 0003 	orrgt.w	r0, r7, r3
 80086ce:	fa04 f003 	lslle.w	r0, r4, r3
 80086d2:	f7f7 ff37 	bl	8000544 <__aeabi_ui2d>
 80086d6:	2201      	movs	r2, #1
 80086d8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80086dc:	3e01      	subs	r6, #1
 80086de:	9212      	str	r2, [sp, #72]	@ 0x48
 80086e0:	e776      	b.n	80085d0 <_dtoa_r+0x100>
 80086e2:	2301      	movs	r3, #1
 80086e4:	e7b7      	b.n	8008656 <_dtoa_r+0x186>
 80086e6:	9010      	str	r0, [sp, #64]	@ 0x40
 80086e8:	e7b6      	b.n	8008658 <_dtoa_r+0x188>
 80086ea:	9b00      	ldr	r3, [sp, #0]
 80086ec:	1bdb      	subs	r3, r3, r7
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	427b      	negs	r3, r7
 80086f2:	9308      	str	r3, [sp, #32]
 80086f4:	2300      	movs	r3, #0
 80086f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80086f8:	e7c3      	b.n	8008682 <_dtoa_r+0x1b2>
 80086fa:	2301      	movs	r3, #1
 80086fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80086fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008700:	eb07 0b03 	add.w	fp, r7, r3
 8008704:	f10b 0301 	add.w	r3, fp, #1
 8008708:	2b01      	cmp	r3, #1
 800870a:	9303      	str	r3, [sp, #12]
 800870c:	bfb8      	it	lt
 800870e:	2301      	movlt	r3, #1
 8008710:	e006      	b.n	8008720 <_dtoa_r+0x250>
 8008712:	2301      	movs	r3, #1
 8008714:	9309      	str	r3, [sp, #36]	@ 0x24
 8008716:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008718:	2b00      	cmp	r3, #0
 800871a:	dd28      	ble.n	800876e <_dtoa_r+0x29e>
 800871c:	469b      	mov	fp, r3
 800871e:	9303      	str	r3, [sp, #12]
 8008720:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008724:	2100      	movs	r1, #0
 8008726:	2204      	movs	r2, #4
 8008728:	f102 0514 	add.w	r5, r2, #20
 800872c:	429d      	cmp	r5, r3
 800872e:	d926      	bls.n	800877e <_dtoa_r+0x2ae>
 8008730:	6041      	str	r1, [r0, #4]
 8008732:	4648      	mov	r0, r9
 8008734:	f000 fd9c 	bl	8009270 <_Balloc>
 8008738:	4682      	mov	sl, r0
 800873a:	2800      	cmp	r0, #0
 800873c:	d142      	bne.n	80087c4 <_dtoa_r+0x2f4>
 800873e:	4b1e      	ldr	r3, [pc, #120]	@ (80087b8 <_dtoa_r+0x2e8>)
 8008740:	4602      	mov	r2, r0
 8008742:	f240 11af 	movw	r1, #431	@ 0x1af
 8008746:	e6da      	b.n	80084fe <_dtoa_r+0x2e>
 8008748:	2300      	movs	r3, #0
 800874a:	e7e3      	b.n	8008714 <_dtoa_r+0x244>
 800874c:	2300      	movs	r3, #0
 800874e:	e7d5      	b.n	80086fc <_dtoa_r+0x22c>
 8008750:	2401      	movs	r4, #1
 8008752:	2300      	movs	r3, #0
 8008754:	9307      	str	r3, [sp, #28]
 8008756:	9409      	str	r4, [sp, #36]	@ 0x24
 8008758:	f04f 3bff 	mov.w	fp, #4294967295
 800875c:	2200      	movs	r2, #0
 800875e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008762:	2312      	movs	r3, #18
 8008764:	920c      	str	r2, [sp, #48]	@ 0x30
 8008766:	e7db      	b.n	8008720 <_dtoa_r+0x250>
 8008768:	2301      	movs	r3, #1
 800876a:	9309      	str	r3, [sp, #36]	@ 0x24
 800876c:	e7f4      	b.n	8008758 <_dtoa_r+0x288>
 800876e:	f04f 0b01 	mov.w	fp, #1
 8008772:	f8cd b00c 	str.w	fp, [sp, #12]
 8008776:	465b      	mov	r3, fp
 8008778:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800877c:	e7d0      	b.n	8008720 <_dtoa_r+0x250>
 800877e:	3101      	adds	r1, #1
 8008780:	0052      	lsls	r2, r2, #1
 8008782:	e7d1      	b.n	8008728 <_dtoa_r+0x258>
 8008784:	f3af 8000 	nop.w
 8008788:	636f4361 	.word	0x636f4361
 800878c:	3fd287a7 	.word	0x3fd287a7
 8008790:	8b60c8b3 	.word	0x8b60c8b3
 8008794:	3fc68a28 	.word	0x3fc68a28
 8008798:	509f79fb 	.word	0x509f79fb
 800879c:	3fd34413 	.word	0x3fd34413
 80087a0:	0800a7ad 	.word	0x0800a7ad
 80087a4:	0800a7c4 	.word	0x0800a7c4
 80087a8:	7ff00000 	.word	0x7ff00000
 80087ac:	0800a77d 	.word	0x0800a77d
 80087b0:	3ff80000 	.word	0x3ff80000
 80087b4:	0800a918 	.word	0x0800a918
 80087b8:	0800a81c 	.word	0x0800a81c
 80087bc:	0800a7a9 	.word	0x0800a7a9
 80087c0:	0800a77c 	.word	0x0800a77c
 80087c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80087c8:	6018      	str	r0, [r3, #0]
 80087ca:	9b03      	ldr	r3, [sp, #12]
 80087cc:	2b0e      	cmp	r3, #14
 80087ce:	f200 80a1 	bhi.w	8008914 <_dtoa_r+0x444>
 80087d2:	2c00      	cmp	r4, #0
 80087d4:	f000 809e 	beq.w	8008914 <_dtoa_r+0x444>
 80087d8:	2f00      	cmp	r7, #0
 80087da:	dd33      	ble.n	8008844 <_dtoa_r+0x374>
 80087dc:	4b9c      	ldr	r3, [pc, #624]	@ (8008a50 <_dtoa_r+0x580>)
 80087de:	f007 020f 	and.w	r2, r7, #15
 80087e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087e6:	ed93 7b00 	vldr	d7, [r3]
 80087ea:	05f8      	lsls	r0, r7, #23
 80087ec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80087f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80087f4:	d516      	bpl.n	8008824 <_dtoa_r+0x354>
 80087f6:	4b97      	ldr	r3, [pc, #604]	@ (8008a54 <_dtoa_r+0x584>)
 80087f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80087fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008800:	f7f8 f844 	bl	800088c <__aeabi_ddiv>
 8008804:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008808:	f004 040f 	and.w	r4, r4, #15
 800880c:	2603      	movs	r6, #3
 800880e:	4d91      	ldr	r5, [pc, #580]	@ (8008a54 <_dtoa_r+0x584>)
 8008810:	b954      	cbnz	r4, 8008828 <_dtoa_r+0x358>
 8008812:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800881a:	f7f8 f837 	bl	800088c <__aeabi_ddiv>
 800881e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008822:	e028      	b.n	8008876 <_dtoa_r+0x3a6>
 8008824:	2602      	movs	r6, #2
 8008826:	e7f2      	b.n	800880e <_dtoa_r+0x33e>
 8008828:	07e1      	lsls	r1, r4, #31
 800882a:	d508      	bpl.n	800883e <_dtoa_r+0x36e>
 800882c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008830:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008834:	f7f7 ff00 	bl	8000638 <__aeabi_dmul>
 8008838:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800883c:	3601      	adds	r6, #1
 800883e:	1064      	asrs	r4, r4, #1
 8008840:	3508      	adds	r5, #8
 8008842:	e7e5      	b.n	8008810 <_dtoa_r+0x340>
 8008844:	f000 80af 	beq.w	80089a6 <_dtoa_r+0x4d6>
 8008848:	427c      	negs	r4, r7
 800884a:	4b81      	ldr	r3, [pc, #516]	@ (8008a50 <_dtoa_r+0x580>)
 800884c:	4d81      	ldr	r5, [pc, #516]	@ (8008a54 <_dtoa_r+0x584>)
 800884e:	f004 020f 	and.w	r2, r4, #15
 8008852:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800885e:	f7f7 feeb 	bl	8000638 <__aeabi_dmul>
 8008862:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008866:	1124      	asrs	r4, r4, #4
 8008868:	2300      	movs	r3, #0
 800886a:	2602      	movs	r6, #2
 800886c:	2c00      	cmp	r4, #0
 800886e:	f040 808f 	bne.w	8008990 <_dtoa_r+0x4c0>
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1d3      	bne.n	800881e <_dtoa_r+0x34e>
 8008876:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008878:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 8094 	beq.w	80089aa <_dtoa_r+0x4da>
 8008882:	4b75      	ldr	r3, [pc, #468]	@ (8008a58 <_dtoa_r+0x588>)
 8008884:	2200      	movs	r2, #0
 8008886:	4620      	mov	r0, r4
 8008888:	4629      	mov	r1, r5
 800888a:	f7f8 f947 	bl	8000b1c <__aeabi_dcmplt>
 800888e:	2800      	cmp	r0, #0
 8008890:	f000 808b 	beq.w	80089aa <_dtoa_r+0x4da>
 8008894:	9b03      	ldr	r3, [sp, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	f000 8087 	beq.w	80089aa <_dtoa_r+0x4da>
 800889c:	f1bb 0f00 	cmp.w	fp, #0
 80088a0:	dd34      	ble.n	800890c <_dtoa_r+0x43c>
 80088a2:	4620      	mov	r0, r4
 80088a4:	4b6d      	ldr	r3, [pc, #436]	@ (8008a5c <_dtoa_r+0x58c>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	4629      	mov	r1, r5
 80088aa:	f7f7 fec5 	bl	8000638 <__aeabi_dmul>
 80088ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088b2:	f107 38ff 	add.w	r8, r7, #4294967295
 80088b6:	3601      	adds	r6, #1
 80088b8:	465c      	mov	r4, fp
 80088ba:	4630      	mov	r0, r6
 80088bc:	f7f7 fe52 	bl	8000564 <__aeabi_i2d>
 80088c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088c4:	f7f7 feb8 	bl	8000638 <__aeabi_dmul>
 80088c8:	4b65      	ldr	r3, [pc, #404]	@ (8008a60 <_dtoa_r+0x590>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	f7f7 fcfe 	bl	80002cc <__adddf3>
 80088d0:	4605      	mov	r5, r0
 80088d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80088d6:	2c00      	cmp	r4, #0
 80088d8:	d16a      	bne.n	80089b0 <_dtoa_r+0x4e0>
 80088da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088de:	4b61      	ldr	r3, [pc, #388]	@ (8008a64 <_dtoa_r+0x594>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	f7f7 fcf1 	bl	80002c8 <__aeabi_dsub>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088ee:	462a      	mov	r2, r5
 80088f0:	4633      	mov	r3, r6
 80088f2:	f7f8 f931 	bl	8000b58 <__aeabi_dcmpgt>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	f040 8298 	bne.w	8008e2c <_dtoa_r+0x95c>
 80088fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008900:	462a      	mov	r2, r5
 8008902:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008906:	f7f8 f909 	bl	8000b1c <__aeabi_dcmplt>
 800890a:	bb38      	cbnz	r0, 800895c <_dtoa_r+0x48c>
 800890c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008910:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008914:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008916:	2b00      	cmp	r3, #0
 8008918:	f2c0 8157 	blt.w	8008bca <_dtoa_r+0x6fa>
 800891c:	2f0e      	cmp	r7, #14
 800891e:	f300 8154 	bgt.w	8008bca <_dtoa_r+0x6fa>
 8008922:	4b4b      	ldr	r3, [pc, #300]	@ (8008a50 <_dtoa_r+0x580>)
 8008924:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008928:	ed93 7b00 	vldr	d7, [r3]
 800892c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800892e:	2b00      	cmp	r3, #0
 8008930:	ed8d 7b00 	vstr	d7, [sp]
 8008934:	f280 80e5 	bge.w	8008b02 <_dtoa_r+0x632>
 8008938:	9b03      	ldr	r3, [sp, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	f300 80e1 	bgt.w	8008b02 <_dtoa_r+0x632>
 8008940:	d10c      	bne.n	800895c <_dtoa_r+0x48c>
 8008942:	4b48      	ldr	r3, [pc, #288]	@ (8008a64 <_dtoa_r+0x594>)
 8008944:	2200      	movs	r2, #0
 8008946:	ec51 0b17 	vmov	r0, r1, d7
 800894a:	f7f7 fe75 	bl	8000638 <__aeabi_dmul>
 800894e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008952:	f7f8 f8f7 	bl	8000b44 <__aeabi_dcmpge>
 8008956:	2800      	cmp	r0, #0
 8008958:	f000 8266 	beq.w	8008e28 <_dtoa_r+0x958>
 800895c:	2400      	movs	r4, #0
 800895e:	4625      	mov	r5, r4
 8008960:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008962:	4656      	mov	r6, sl
 8008964:	ea6f 0803 	mvn.w	r8, r3
 8008968:	2700      	movs	r7, #0
 800896a:	4621      	mov	r1, r4
 800896c:	4648      	mov	r0, r9
 800896e:	f000 fcbf 	bl	80092f0 <_Bfree>
 8008972:	2d00      	cmp	r5, #0
 8008974:	f000 80bd 	beq.w	8008af2 <_dtoa_r+0x622>
 8008978:	b12f      	cbz	r7, 8008986 <_dtoa_r+0x4b6>
 800897a:	42af      	cmp	r7, r5
 800897c:	d003      	beq.n	8008986 <_dtoa_r+0x4b6>
 800897e:	4639      	mov	r1, r7
 8008980:	4648      	mov	r0, r9
 8008982:	f000 fcb5 	bl	80092f0 <_Bfree>
 8008986:	4629      	mov	r1, r5
 8008988:	4648      	mov	r0, r9
 800898a:	f000 fcb1 	bl	80092f0 <_Bfree>
 800898e:	e0b0      	b.n	8008af2 <_dtoa_r+0x622>
 8008990:	07e2      	lsls	r2, r4, #31
 8008992:	d505      	bpl.n	80089a0 <_dtoa_r+0x4d0>
 8008994:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008998:	f7f7 fe4e 	bl	8000638 <__aeabi_dmul>
 800899c:	3601      	adds	r6, #1
 800899e:	2301      	movs	r3, #1
 80089a0:	1064      	asrs	r4, r4, #1
 80089a2:	3508      	adds	r5, #8
 80089a4:	e762      	b.n	800886c <_dtoa_r+0x39c>
 80089a6:	2602      	movs	r6, #2
 80089a8:	e765      	b.n	8008876 <_dtoa_r+0x3a6>
 80089aa:	9c03      	ldr	r4, [sp, #12]
 80089ac:	46b8      	mov	r8, r7
 80089ae:	e784      	b.n	80088ba <_dtoa_r+0x3ea>
 80089b0:	4b27      	ldr	r3, [pc, #156]	@ (8008a50 <_dtoa_r+0x580>)
 80089b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80089b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80089bc:	4454      	add	r4, sl
 80089be:	2900      	cmp	r1, #0
 80089c0:	d054      	beq.n	8008a6c <_dtoa_r+0x59c>
 80089c2:	4929      	ldr	r1, [pc, #164]	@ (8008a68 <_dtoa_r+0x598>)
 80089c4:	2000      	movs	r0, #0
 80089c6:	f7f7 ff61 	bl	800088c <__aeabi_ddiv>
 80089ca:	4633      	mov	r3, r6
 80089cc:	462a      	mov	r2, r5
 80089ce:	f7f7 fc7b 	bl	80002c8 <__aeabi_dsub>
 80089d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80089d6:	4656      	mov	r6, sl
 80089d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089dc:	f7f8 f8dc 	bl	8000b98 <__aeabi_d2iz>
 80089e0:	4605      	mov	r5, r0
 80089e2:	f7f7 fdbf 	bl	8000564 <__aeabi_i2d>
 80089e6:	4602      	mov	r2, r0
 80089e8:	460b      	mov	r3, r1
 80089ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089ee:	f7f7 fc6b 	bl	80002c8 <__aeabi_dsub>
 80089f2:	3530      	adds	r5, #48	@ 0x30
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089fc:	f806 5b01 	strb.w	r5, [r6], #1
 8008a00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008a04:	f7f8 f88a 	bl	8000b1c <__aeabi_dcmplt>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d172      	bne.n	8008af2 <_dtoa_r+0x622>
 8008a0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a10:	4911      	ldr	r1, [pc, #68]	@ (8008a58 <_dtoa_r+0x588>)
 8008a12:	2000      	movs	r0, #0
 8008a14:	f7f7 fc58 	bl	80002c8 <__aeabi_dsub>
 8008a18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008a1c:	f7f8 f87e 	bl	8000b1c <__aeabi_dcmplt>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	f040 80b4 	bne.w	8008b8e <_dtoa_r+0x6be>
 8008a26:	42a6      	cmp	r6, r4
 8008a28:	f43f af70 	beq.w	800890c <_dtoa_r+0x43c>
 8008a2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008a30:	4b0a      	ldr	r3, [pc, #40]	@ (8008a5c <_dtoa_r+0x58c>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	f7f7 fe00 	bl	8000638 <__aeabi_dmul>
 8008a38:	4b08      	ldr	r3, [pc, #32]	@ (8008a5c <_dtoa_r+0x58c>)
 8008a3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a3e:	2200      	movs	r2, #0
 8008a40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a44:	f7f7 fdf8 	bl	8000638 <__aeabi_dmul>
 8008a48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a4c:	e7c4      	b.n	80089d8 <_dtoa_r+0x508>
 8008a4e:	bf00      	nop
 8008a50:	0800a918 	.word	0x0800a918
 8008a54:	0800a8f0 	.word	0x0800a8f0
 8008a58:	3ff00000 	.word	0x3ff00000
 8008a5c:	40240000 	.word	0x40240000
 8008a60:	401c0000 	.word	0x401c0000
 8008a64:	40140000 	.word	0x40140000
 8008a68:	3fe00000 	.word	0x3fe00000
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f7f7 fde2 	bl	8000638 <__aeabi_dmul>
 8008a74:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a78:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008a7a:	4656      	mov	r6, sl
 8008a7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a80:	f7f8 f88a 	bl	8000b98 <__aeabi_d2iz>
 8008a84:	4605      	mov	r5, r0
 8008a86:	f7f7 fd6d 	bl	8000564 <__aeabi_i2d>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a92:	f7f7 fc19 	bl	80002c8 <__aeabi_dsub>
 8008a96:	3530      	adds	r5, #48	@ 0x30
 8008a98:	f806 5b01 	strb.w	r5, [r6], #1
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	42a6      	cmp	r6, r4
 8008aa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008aa6:	f04f 0200 	mov.w	r2, #0
 8008aaa:	d124      	bne.n	8008af6 <_dtoa_r+0x626>
 8008aac:	4baf      	ldr	r3, [pc, #700]	@ (8008d6c <_dtoa_r+0x89c>)
 8008aae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008ab2:	f7f7 fc0b 	bl	80002cc <__adddf3>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008abe:	f7f8 f84b 	bl	8000b58 <__aeabi_dcmpgt>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d163      	bne.n	8008b8e <_dtoa_r+0x6be>
 8008ac6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008aca:	49a8      	ldr	r1, [pc, #672]	@ (8008d6c <_dtoa_r+0x89c>)
 8008acc:	2000      	movs	r0, #0
 8008ace:	f7f7 fbfb 	bl	80002c8 <__aeabi_dsub>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ada:	f7f8 f81f 	bl	8000b1c <__aeabi_dcmplt>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	f43f af14 	beq.w	800890c <_dtoa_r+0x43c>
 8008ae4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008ae6:	1e73      	subs	r3, r6, #1
 8008ae8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008aea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008aee:	2b30      	cmp	r3, #48	@ 0x30
 8008af0:	d0f8      	beq.n	8008ae4 <_dtoa_r+0x614>
 8008af2:	4647      	mov	r7, r8
 8008af4:	e03b      	b.n	8008b6e <_dtoa_r+0x69e>
 8008af6:	4b9e      	ldr	r3, [pc, #632]	@ (8008d70 <_dtoa_r+0x8a0>)
 8008af8:	f7f7 fd9e 	bl	8000638 <__aeabi_dmul>
 8008afc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b00:	e7bc      	b.n	8008a7c <_dtoa_r+0x5ac>
 8008b02:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008b06:	4656      	mov	r6, sl
 8008b08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	4629      	mov	r1, r5
 8008b10:	f7f7 febc 	bl	800088c <__aeabi_ddiv>
 8008b14:	f7f8 f840 	bl	8000b98 <__aeabi_d2iz>
 8008b18:	4680      	mov	r8, r0
 8008b1a:	f7f7 fd23 	bl	8000564 <__aeabi_i2d>
 8008b1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b22:	f7f7 fd89 	bl	8000638 <__aeabi_dmul>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008b32:	f7f7 fbc9 	bl	80002c8 <__aeabi_dsub>
 8008b36:	f806 4b01 	strb.w	r4, [r6], #1
 8008b3a:	9d03      	ldr	r5, [sp, #12]
 8008b3c:	eba6 040a 	sub.w	r4, r6, sl
 8008b40:	42a5      	cmp	r5, r4
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	d133      	bne.n	8008bb0 <_dtoa_r+0x6e0>
 8008b48:	f7f7 fbc0 	bl	80002cc <__adddf3>
 8008b4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b50:	4604      	mov	r4, r0
 8008b52:	460d      	mov	r5, r1
 8008b54:	f7f8 f800 	bl	8000b58 <__aeabi_dcmpgt>
 8008b58:	b9c0      	cbnz	r0, 8008b8c <_dtoa_r+0x6bc>
 8008b5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b5e:	4620      	mov	r0, r4
 8008b60:	4629      	mov	r1, r5
 8008b62:	f7f7 ffd1 	bl	8000b08 <__aeabi_dcmpeq>
 8008b66:	b110      	cbz	r0, 8008b6e <_dtoa_r+0x69e>
 8008b68:	f018 0f01 	tst.w	r8, #1
 8008b6c:	d10e      	bne.n	8008b8c <_dtoa_r+0x6bc>
 8008b6e:	9902      	ldr	r1, [sp, #8]
 8008b70:	4648      	mov	r0, r9
 8008b72:	f000 fbbd 	bl	80092f0 <_Bfree>
 8008b76:	2300      	movs	r3, #0
 8008b78:	7033      	strb	r3, [r6, #0]
 8008b7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008b7c:	3701      	adds	r7, #1
 8008b7e:	601f      	str	r7, [r3, #0]
 8008b80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 824b 	beq.w	800901e <_dtoa_r+0xb4e>
 8008b88:	601e      	str	r6, [r3, #0]
 8008b8a:	e248      	b.n	800901e <_dtoa_r+0xb4e>
 8008b8c:	46b8      	mov	r8, r7
 8008b8e:	4633      	mov	r3, r6
 8008b90:	461e      	mov	r6, r3
 8008b92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b96:	2a39      	cmp	r2, #57	@ 0x39
 8008b98:	d106      	bne.n	8008ba8 <_dtoa_r+0x6d8>
 8008b9a:	459a      	cmp	sl, r3
 8008b9c:	d1f8      	bne.n	8008b90 <_dtoa_r+0x6c0>
 8008b9e:	2230      	movs	r2, #48	@ 0x30
 8008ba0:	f108 0801 	add.w	r8, r8, #1
 8008ba4:	f88a 2000 	strb.w	r2, [sl]
 8008ba8:	781a      	ldrb	r2, [r3, #0]
 8008baa:	3201      	adds	r2, #1
 8008bac:	701a      	strb	r2, [r3, #0]
 8008bae:	e7a0      	b.n	8008af2 <_dtoa_r+0x622>
 8008bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8008d70 <_dtoa_r+0x8a0>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f7f7 fd40 	bl	8000638 <__aeabi_dmul>
 8008bb8:	2200      	movs	r2, #0
 8008bba:	2300      	movs	r3, #0
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	460d      	mov	r5, r1
 8008bc0:	f7f7 ffa2 	bl	8000b08 <__aeabi_dcmpeq>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d09f      	beq.n	8008b08 <_dtoa_r+0x638>
 8008bc8:	e7d1      	b.n	8008b6e <_dtoa_r+0x69e>
 8008bca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bcc:	2a00      	cmp	r2, #0
 8008bce:	f000 80ea 	beq.w	8008da6 <_dtoa_r+0x8d6>
 8008bd2:	9a07      	ldr	r2, [sp, #28]
 8008bd4:	2a01      	cmp	r2, #1
 8008bd6:	f300 80cd 	bgt.w	8008d74 <_dtoa_r+0x8a4>
 8008bda:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008bdc:	2a00      	cmp	r2, #0
 8008bde:	f000 80c1 	beq.w	8008d64 <_dtoa_r+0x894>
 8008be2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008be6:	9c08      	ldr	r4, [sp, #32]
 8008be8:	9e00      	ldr	r6, [sp, #0]
 8008bea:	9a00      	ldr	r2, [sp, #0]
 8008bec:	441a      	add	r2, r3
 8008bee:	9200      	str	r2, [sp, #0]
 8008bf0:	9a06      	ldr	r2, [sp, #24]
 8008bf2:	2101      	movs	r1, #1
 8008bf4:	441a      	add	r2, r3
 8008bf6:	4648      	mov	r0, r9
 8008bf8:	9206      	str	r2, [sp, #24]
 8008bfa:	f000 fc2d 	bl	8009458 <__i2b>
 8008bfe:	4605      	mov	r5, r0
 8008c00:	b166      	cbz	r6, 8008c1c <_dtoa_r+0x74c>
 8008c02:	9b06      	ldr	r3, [sp, #24]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	dd09      	ble.n	8008c1c <_dtoa_r+0x74c>
 8008c08:	42b3      	cmp	r3, r6
 8008c0a:	9a00      	ldr	r2, [sp, #0]
 8008c0c:	bfa8      	it	ge
 8008c0e:	4633      	movge	r3, r6
 8008c10:	1ad2      	subs	r2, r2, r3
 8008c12:	9200      	str	r2, [sp, #0]
 8008c14:	9a06      	ldr	r2, [sp, #24]
 8008c16:	1af6      	subs	r6, r6, r3
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	9306      	str	r3, [sp, #24]
 8008c1c:	9b08      	ldr	r3, [sp, #32]
 8008c1e:	b30b      	cbz	r3, 8008c64 <_dtoa_r+0x794>
 8008c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 80c6 	beq.w	8008db4 <_dtoa_r+0x8e4>
 8008c28:	2c00      	cmp	r4, #0
 8008c2a:	f000 80c0 	beq.w	8008dae <_dtoa_r+0x8de>
 8008c2e:	4629      	mov	r1, r5
 8008c30:	4622      	mov	r2, r4
 8008c32:	4648      	mov	r0, r9
 8008c34:	f000 fcc8 	bl	80095c8 <__pow5mult>
 8008c38:	9a02      	ldr	r2, [sp, #8]
 8008c3a:	4601      	mov	r1, r0
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	4648      	mov	r0, r9
 8008c40:	f000 fc20 	bl	8009484 <__multiply>
 8008c44:	9902      	ldr	r1, [sp, #8]
 8008c46:	4680      	mov	r8, r0
 8008c48:	4648      	mov	r0, r9
 8008c4a:	f000 fb51 	bl	80092f0 <_Bfree>
 8008c4e:	9b08      	ldr	r3, [sp, #32]
 8008c50:	1b1b      	subs	r3, r3, r4
 8008c52:	9308      	str	r3, [sp, #32]
 8008c54:	f000 80b1 	beq.w	8008dba <_dtoa_r+0x8ea>
 8008c58:	9a08      	ldr	r2, [sp, #32]
 8008c5a:	4641      	mov	r1, r8
 8008c5c:	4648      	mov	r0, r9
 8008c5e:	f000 fcb3 	bl	80095c8 <__pow5mult>
 8008c62:	9002      	str	r0, [sp, #8]
 8008c64:	2101      	movs	r1, #1
 8008c66:	4648      	mov	r0, r9
 8008c68:	f000 fbf6 	bl	8009458 <__i2b>
 8008c6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c6e:	4604      	mov	r4, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 81d8 	beq.w	8009026 <_dtoa_r+0xb56>
 8008c76:	461a      	mov	r2, r3
 8008c78:	4601      	mov	r1, r0
 8008c7a:	4648      	mov	r0, r9
 8008c7c:	f000 fca4 	bl	80095c8 <__pow5mult>
 8008c80:	9b07      	ldr	r3, [sp, #28]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	4604      	mov	r4, r0
 8008c86:	f300 809f 	bgt.w	8008dc8 <_dtoa_r+0x8f8>
 8008c8a:	9b04      	ldr	r3, [sp, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f040 8097 	bne.w	8008dc0 <_dtoa_r+0x8f0>
 8008c92:	9b05      	ldr	r3, [sp, #20]
 8008c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f040 8093 	bne.w	8008dc4 <_dtoa_r+0x8f4>
 8008c9e:	9b05      	ldr	r3, [sp, #20]
 8008ca0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ca4:	0d1b      	lsrs	r3, r3, #20
 8008ca6:	051b      	lsls	r3, r3, #20
 8008ca8:	b133      	cbz	r3, 8008cb8 <_dtoa_r+0x7e8>
 8008caa:	9b00      	ldr	r3, [sp, #0]
 8008cac:	3301      	adds	r3, #1
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	9b06      	ldr	r3, [sp, #24]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	9306      	str	r3, [sp, #24]
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	9308      	str	r3, [sp, #32]
 8008cba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 81b8 	beq.w	8009032 <_dtoa_r+0xb62>
 8008cc2:	6923      	ldr	r3, [r4, #16]
 8008cc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cc8:	6918      	ldr	r0, [r3, #16]
 8008cca:	f000 fb79 	bl	80093c0 <__hi0bits>
 8008cce:	f1c0 0020 	rsb	r0, r0, #32
 8008cd2:	9b06      	ldr	r3, [sp, #24]
 8008cd4:	4418      	add	r0, r3
 8008cd6:	f010 001f 	ands.w	r0, r0, #31
 8008cda:	f000 8082 	beq.w	8008de2 <_dtoa_r+0x912>
 8008cde:	f1c0 0320 	rsb	r3, r0, #32
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	dd73      	ble.n	8008dce <_dtoa_r+0x8fe>
 8008ce6:	9b00      	ldr	r3, [sp, #0]
 8008ce8:	f1c0 001c 	rsb	r0, r0, #28
 8008cec:	4403      	add	r3, r0
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	9b06      	ldr	r3, [sp, #24]
 8008cf2:	4403      	add	r3, r0
 8008cf4:	4406      	add	r6, r0
 8008cf6:	9306      	str	r3, [sp, #24]
 8008cf8:	9b00      	ldr	r3, [sp, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	dd05      	ble.n	8008d0a <_dtoa_r+0x83a>
 8008cfe:	9902      	ldr	r1, [sp, #8]
 8008d00:	461a      	mov	r2, r3
 8008d02:	4648      	mov	r0, r9
 8008d04:	f000 fcba 	bl	800967c <__lshift>
 8008d08:	9002      	str	r0, [sp, #8]
 8008d0a:	9b06      	ldr	r3, [sp, #24]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	dd05      	ble.n	8008d1c <_dtoa_r+0x84c>
 8008d10:	4621      	mov	r1, r4
 8008d12:	461a      	mov	r2, r3
 8008d14:	4648      	mov	r0, r9
 8008d16:	f000 fcb1 	bl	800967c <__lshift>
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d061      	beq.n	8008de6 <_dtoa_r+0x916>
 8008d22:	9802      	ldr	r0, [sp, #8]
 8008d24:	4621      	mov	r1, r4
 8008d26:	f000 fd15 	bl	8009754 <__mcmp>
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	da5b      	bge.n	8008de6 <_dtoa_r+0x916>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	9902      	ldr	r1, [sp, #8]
 8008d32:	220a      	movs	r2, #10
 8008d34:	4648      	mov	r0, r9
 8008d36:	f000 fafd 	bl	8009334 <__multadd>
 8008d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d3c:	9002      	str	r0, [sp, #8]
 8008d3e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 8177 	beq.w	8009036 <_dtoa_r+0xb66>
 8008d48:	4629      	mov	r1, r5
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	220a      	movs	r2, #10
 8008d4e:	4648      	mov	r0, r9
 8008d50:	f000 faf0 	bl	8009334 <__multadd>
 8008d54:	f1bb 0f00 	cmp.w	fp, #0
 8008d58:	4605      	mov	r5, r0
 8008d5a:	dc6f      	bgt.n	8008e3c <_dtoa_r+0x96c>
 8008d5c:	9b07      	ldr	r3, [sp, #28]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	dc49      	bgt.n	8008df6 <_dtoa_r+0x926>
 8008d62:	e06b      	b.n	8008e3c <_dtoa_r+0x96c>
 8008d64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008d66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008d6a:	e73c      	b.n	8008be6 <_dtoa_r+0x716>
 8008d6c:	3fe00000 	.word	0x3fe00000
 8008d70:	40240000 	.word	0x40240000
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	1e5c      	subs	r4, r3, #1
 8008d78:	9b08      	ldr	r3, [sp, #32]
 8008d7a:	42a3      	cmp	r3, r4
 8008d7c:	db09      	blt.n	8008d92 <_dtoa_r+0x8c2>
 8008d7e:	1b1c      	subs	r4, r3, r4
 8008d80:	9b03      	ldr	r3, [sp, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f6bf af30 	bge.w	8008be8 <_dtoa_r+0x718>
 8008d88:	9b00      	ldr	r3, [sp, #0]
 8008d8a:	9a03      	ldr	r2, [sp, #12]
 8008d8c:	1a9e      	subs	r6, r3, r2
 8008d8e:	2300      	movs	r3, #0
 8008d90:	e72b      	b.n	8008bea <_dtoa_r+0x71a>
 8008d92:	9b08      	ldr	r3, [sp, #32]
 8008d94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d96:	9408      	str	r4, [sp, #32]
 8008d98:	1ae3      	subs	r3, r4, r3
 8008d9a:	441a      	add	r2, r3
 8008d9c:	9e00      	ldr	r6, [sp, #0]
 8008d9e:	9b03      	ldr	r3, [sp, #12]
 8008da0:	920d      	str	r2, [sp, #52]	@ 0x34
 8008da2:	2400      	movs	r4, #0
 8008da4:	e721      	b.n	8008bea <_dtoa_r+0x71a>
 8008da6:	9c08      	ldr	r4, [sp, #32]
 8008da8:	9e00      	ldr	r6, [sp, #0]
 8008daa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008dac:	e728      	b.n	8008c00 <_dtoa_r+0x730>
 8008dae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008db2:	e751      	b.n	8008c58 <_dtoa_r+0x788>
 8008db4:	9a08      	ldr	r2, [sp, #32]
 8008db6:	9902      	ldr	r1, [sp, #8]
 8008db8:	e750      	b.n	8008c5c <_dtoa_r+0x78c>
 8008dba:	f8cd 8008 	str.w	r8, [sp, #8]
 8008dbe:	e751      	b.n	8008c64 <_dtoa_r+0x794>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	e779      	b.n	8008cb8 <_dtoa_r+0x7e8>
 8008dc4:	9b04      	ldr	r3, [sp, #16]
 8008dc6:	e777      	b.n	8008cb8 <_dtoa_r+0x7e8>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	9308      	str	r3, [sp, #32]
 8008dcc:	e779      	b.n	8008cc2 <_dtoa_r+0x7f2>
 8008dce:	d093      	beq.n	8008cf8 <_dtoa_r+0x828>
 8008dd0:	9a00      	ldr	r2, [sp, #0]
 8008dd2:	331c      	adds	r3, #28
 8008dd4:	441a      	add	r2, r3
 8008dd6:	9200      	str	r2, [sp, #0]
 8008dd8:	9a06      	ldr	r2, [sp, #24]
 8008dda:	441a      	add	r2, r3
 8008ddc:	441e      	add	r6, r3
 8008dde:	9206      	str	r2, [sp, #24]
 8008de0:	e78a      	b.n	8008cf8 <_dtoa_r+0x828>
 8008de2:	4603      	mov	r3, r0
 8008de4:	e7f4      	b.n	8008dd0 <_dtoa_r+0x900>
 8008de6:	9b03      	ldr	r3, [sp, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	46b8      	mov	r8, r7
 8008dec:	dc20      	bgt.n	8008e30 <_dtoa_r+0x960>
 8008dee:	469b      	mov	fp, r3
 8008df0:	9b07      	ldr	r3, [sp, #28]
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	dd1e      	ble.n	8008e34 <_dtoa_r+0x964>
 8008df6:	f1bb 0f00 	cmp.w	fp, #0
 8008dfa:	f47f adb1 	bne.w	8008960 <_dtoa_r+0x490>
 8008dfe:	4621      	mov	r1, r4
 8008e00:	465b      	mov	r3, fp
 8008e02:	2205      	movs	r2, #5
 8008e04:	4648      	mov	r0, r9
 8008e06:	f000 fa95 	bl	8009334 <__multadd>
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	9802      	ldr	r0, [sp, #8]
 8008e10:	f000 fca0 	bl	8009754 <__mcmp>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	f77f ada3 	ble.w	8008960 <_dtoa_r+0x490>
 8008e1a:	4656      	mov	r6, sl
 8008e1c:	2331      	movs	r3, #49	@ 0x31
 8008e1e:	f806 3b01 	strb.w	r3, [r6], #1
 8008e22:	f108 0801 	add.w	r8, r8, #1
 8008e26:	e59f      	b.n	8008968 <_dtoa_r+0x498>
 8008e28:	9c03      	ldr	r4, [sp, #12]
 8008e2a:	46b8      	mov	r8, r7
 8008e2c:	4625      	mov	r5, r4
 8008e2e:	e7f4      	b.n	8008e1a <_dtoa_r+0x94a>
 8008e30:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 8101 	beq.w	800903e <_dtoa_r+0xb6e>
 8008e3c:	2e00      	cmp	r6, #0
 8008e3e:	dd05      	ble.n	8008e4c <_dtoa_r+0x97c>
 8008e40:	4629      	mov	r1, r5
 8008e42:	4632      	mov	r2, r6
 8008e44:	4648      	mov	r0, r9
 8008e46:	f000 fc19 	bl	800967c <__lshift>
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	9b08      	ldr	r3, [sp, #32]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d05c      	beq.n	8008f0c <_dtoa_r+0xa3c>
 8008e52:	6869      	ldr	r1, [r5, #4]
 8008e54:	4648      	mov	r0, r9
 8008e56:	f000 fa0b 	bl	8009270 <_Balloc>
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	b928      	cbnz	r0, 8008e6a <_dtoa_r+0x99a>
 8008e5e:	4b82      	ldr	r3, [pc, #520]	@ (8009068 <_dtoa_r+0xb98>)
 8008e60:	4602      	mov	r2, r0
 8008e62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008e66:	f7ff bb4a 	b.w	80084fe <_dtoa_r+0x2e>
 8008e6a:	692a      	ldr	r2, [r5, #16]
 8008e6c:	3202      	adds	r2, #2
 8008e6e:	0092      	lsls	r2, r2, #2
 8008e70:	f105 010c 	add.w	r1, r5, #12
 8008e74:	300c      	adds	r0, #12
 8008e76:	f7ff fa92 	bl	800839e <memcpy>
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	4631      	mov	r1, r6
 8008e7e:	4648      	mov	r0, r9
 8008e80:	f000 fbfc 	bl	800967c <__lshift>
 8008e84:	f10a 0301 	add.w	r3, sl, #1
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	eb0a 030b 	add.w	r3, sl, fp
 8008e8e:	9308      	str	r3, [sp, #32]
 8008e90:	9b04      	ldr	r3, [sp, #16]
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	462f      	mov	r7, r5
 8008e98:	9306      	str	r3, [sp, #24]
 8008e9a:	4605      	mov	r5, r0
 8008e9c:	9b00      	ldr	r3, [sp, #0]
 8008e9e:	9802      	ldr	r0, [sp, #8]
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	f103 3bff 	add.w	fp, r3, #4294967295
 8008ea6:	f7ff fa88 	bl	80083ba <quorem>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	3330      	adds	r3, #48	@ 0x30
 8008eae:	9003      	str	r0, [sp, #12]
 8008eb0:	4639      	mov	r1, r7
 8008eb2:	9802      	ldr	r0, [sp, #8]
 8008eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eb6:	f000 fc4d 	bl	8009754 <__mcmp>
 8008eba:	462a      	mov	r2, r5
 8008ebc:	9004      	str	r0, [sp, #16]
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	4648      	mov	r0, r9
 8008ec2:	f000 fc63 	bl	800978c <__mdiff>
 8008ec6:	68c2      	ldr	r2, [r0, #12]
 8008ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eca:	4606      	mov	r6, r0
 8008ecc:	bb02      	cbnz	r2, 8008f10 <_dtoa_r+0xa40>
 8008ece:	4601      	mov	r1, r0
 8008ed0:	9802      	ldr	r0, [sp, #8]
 8008ed2:	f000 fc3f 	bl	8009754 <__mcmp>
 8008ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ed8:	4602      	mov	r2, r0
 8008eda:	4631      	mov	r1, r6
 8008edc:	4648      	mov	r0, r9
 8008ede:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ee0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ee2:	f000 fa05 	bl	80092f0 <_Bfree>
 8008ee6:	9b07      	ldr	r3, [sp, #28]
 8008ee8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008eea:	9e00      	ldr	r6, [sp, #0]
 8008eec:	ea42 0103 	orr.w	r1, r2, r3
 8008ef0:	9b06      	ldr	r3, [sp, #24]
 8008ef2:	4319      	orrs	r1, r3
 8008ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ef6:	d10d      	bne.n	8008f14 <_dtoa_r+0xa44>
 8008ef8:	2b39      	cmp	r3, #57	@ 0x39
 8008efa:	d027      	beq.n	8008f4c <_dtoa_r+0xa7c>
 8008efc:	9a04      	ldr	r2, [sp, #16]
 8008efe:	2a00      	cmp	r2, #0
 8008f00:	dd01      	ble.n	8008f06 <_dtoa_r+0xa36>
 8008f02:	9b03      	ldr	r3, [sp, #12]
 8008f04:	3331      	adds	r3, #49	@ 0x31
 8008f06:	f88b 3000 	strb.w	r3, [fp]
 8008f0a:	e52e      	b.n	800896a <_dtoa_r+0x49a>
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	e7b9      	b.n	8008e84 <_dtoa_r+0x9b4>
 8008f10:	2201      	movs	r2, #1
 8008f12:	e7e2      	b.n	8008eda <_dtoa_r+0xa0a>
 8008f14:	9904      	ldr	r1, [sp, #16]
 8008f16:	2900      	cmp	r1, #0
 8008f18:	db04      	blt.n	8008f24 <_dtoa_r+0xa54>
 8008f1a:	9807      	ldr	r0, [sp, #28]
 8008f1c:	4301      	orrs	r1, r0
 8008f1e:	9806      	ldr	r0, [sp, #24]
 8008f20:	4301      	orrs	r1, r0
 8008f22:	d120      	bne.n	8008f66 <_dtoa_r+0xa96>
 8008f24:	2a00      	cmp	r2, #0
 8008f26:	ddee      	ble.n	8008f06 <_dtoa_r+0xa36>
 8008f28:	9902      	ldr	r1, [sp, #8]
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	4648      	mov	r0, r9
 8008f30:	f000 fba4 	bl	800967c <__lshift>
 8008f34:	4621      	mov	r1, r4
 8008f36:	9002      	str	r0, [sp, #8]
 8008f38:	f000 fc0c 	bl	8009754 <__mcmp>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	9b00      	ldr	r3, [sp, #0]
 8008f40:	dc02      	bgt.n	8008f48 <_dtoa_r+0xa78>
 8008f42:	d1e0      	bne.n	8008f06 <_dtoa_r+0xa36>
 8008f44:	07da      	lsls	r2, r3, #31
 8008f46:	d5de      	bpl.n	8008f06 <_dtoa_r+0xa36>
 8008f48:	2b39      	cmp	r3, #57	@ 0x39
 8008f4a:	d1da      	bne.n	8008f02 <_dtoa_r+0xa32>
 8008f4c:	2339      	movs	r3, #57	@ 0x39
 8008f4e:	f88b 3000 	strb.w	r3, [fp]
 8008f52:	4633      	mov	r3, r6
 8008f54:	461e      	mov	r6, r3
 8008f56:	3b01      	subs	r3, #1
 8008f58:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008f5c:	2a39      	cmp	r2, #57	@ 0x39
 8008f5e:	d04e      	beq.n	8008ffe <_dtoa_r+0xb2e>
 8008f60:	3201      	adds	r2, #1
 8008f62:	701a      	strb	r2, [r3, #0]
 8008f64:	e501      	b.n	800896a <_dtoa_r+0x49a>
 8008f66:	2a00      	cmp	r2, #0
 8008f68:	dd03      	ble.n	8008f72 <_dtoa_r+0xaa2>
 8008f6a:	2b39      	cmp	r3, #57	@ 0x39
 8008f6c:	d0ee      	beq.n	8008f4c <_dtoa_r+0xa7c>
 8008f6e:	3301      	adds	r3, #1
 8008f70:	e7c9      	b.n	8008f06 <_dtoa_r+0xa36>
 8008f72:	9a00      	ldr	r2, [sp, #0]
 8008f74:	9908      	ldr	r1, [sp, #32]
 8008f76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008f7a:	428a      	cmp	r2, r1
 8008f7c:	d028      	beq.n	8008fd0 <_dtoa_r+0xb00>
 8008f7e:	9902      	ldr	r1, [sp, #8]
 8008f80:	2300      	movs	r3, #0
 8008f82:	220a      	movs	r2, #10
 8008f84:	4648      	mov	r0, r9
 8008f86:	f000 f9d5 	bl	8009334 <__multadd>
 8008f8a:	42af      	cmp	r7, r5
 8008f8c:	9002      	str	r0, [sp, #8]
 8008f8e:	f04f 0300 	mov.w	r3, #0
 8008f92:	f04f 020a 	mov.w	r2, #10
 8008f96:	4639      	mov	r1, r7
 8008f98:	4648      	mov	r0, r9
 8008f9a:	d107      	bne.n	8008fac <_dtoa_r+0xadc>
 8008f9c:	f000 f9ca 	bl	8009334 <__multadd>
 8008fa0:	4607      	mov	r7, r0
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	9b00      	ldr	r3, [sp, #0]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	9300      	str	r3, [sp, #0]
 8008faa:	e777      	b.n	8008e9c <_dtoa_r+0x9cc>
 8008fac:	f000 f9c2 	bl	8009334 <__multadd>
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	4607      	mov	r7, r0
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	220a      	movs	r2, #10
 8008fb8:	4648      	mov	r0, r9
 8008fba:	f000 f9bb 	bl	8009334 <__multadd>
 8008fbe:	4605      	mov	r5, r0
 8008fc0:	e7f0      	b.n	8008fa4 <_dtoa_r+0xad4>
 8008fc2:	f1bb 0f00 	cmp.w	fp, #0
 8008fc6:	bfcc      	ite	gt
 8008fc8:	465e      	movgt	r6, fp
 8008fca:	2601      	movle	r6, #1
 8008fcc:	4456      	add	r6, sl
 8008fce:	2700      	movs	r7, #0
 8008fd0:	9902      	ldr	r1, [sp, #8]
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	4648      	mov	r0, r9
 8008fd8:	f000 fb50 	bl	800967c <__lshift>
 8008fdc:	4621      	mov	r1, r4
 8008fde:	9002      	str	r0, [sp, #8]
 8008fe0:	f000 fbb8 	bl	8009754 <__mcmp>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	dcb4      	bgt.n	8008f52 <_dtoa_r+0xa82>
 8008fe8:	d102      	bne.n	8008ff0 <_dtoa_r+0xb20>
 8008fea:	9b00      	ldr	r3, [sp, #0]
 8008fec:	07db      	lsls	r3, r3, #31
 8008fee:	d4b0      	bmi.n	8008f52 <_dtoa_r+0xa82>
 8008ff0:	4633      	mov	r3, r6
 8008ff2:	461e      	mov	r6, r3
 8008ff4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ff8:	2a30      	cmp	r2, #48	@ 0x30
 8008ffa:	d0fa      	beq.n	8008ff2 <_dtoa_r+0xb22>
 8008ffc:	e4b5      	b.n	800896a <_dtoa_r+0x49a>
 8008ffe:	459a      	cmp	sl, r3
 8009000:	d1a8      	bne.n	8008f54 <_dtoa_r+0xa84>
 8009002:	2331      	movs	r3, #49	@ 0x31
 8009004:	f108 0801 	add.w	r8, r8, #1
 8009008:	f88a 3000 	strb.w	r3, [sl]
 800900c:	e4ad      	b.n	800896a <_dtoa_r+0x49a>
 800900e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009010:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800906c <_dtoa_r+0xb9c>
 8009014:	b11b      	cbz	r3, 800901e <_dtoa_r+0xb4e>
 8009016:	f10a 0308 	add.w	r3, sl, #8
 800901a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800901c:	6013      	str	r3, [r2, #0]
 800901e:	4650      	mov	r0, sl
 8009020:	b017      	add	sp, #92	@ 0x5c
 8009022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009026:	9b07      	ldr	r3, [sp, #28]
 8009028:	2b01      	cmp	r3, #1
 800902a:	f77f ae2e 	ble.w	8008c8a <_dtoa_r+0x7ba>
 800902e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009030:	9308      	str	r3, [sp, #32]
 8009032:	2001      	movs	r0, #1
 8009034:	e64d      	b.n	8008cd2 <_dtoa_r+0x802>
 8009036:	f1bb 0f00 	cmp.w	fp, #0
 800903a:	f77f aed9 	ble.w	8008df0 <_dtoa_r+0x920>
 800903e:	4656      	mov	r6, sl
 8009040:	9802      	ldr	r0, [sp, #8]
 8009042:	4621      	mov	r1, r4
 8009044:	f7ff f9b9 	bl	80083ba <quorem>
 8009048:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800904c:	f806 3b01 	strb.w	r3, [r6], #1
 8009050:	eba6 020a 	sub.w	r2, r6, sl
 8009054:	4593      	cmp	fp, r2
 8009056:	ddb4      	ble.n	8008fc2 <_dtoa_r+0xaf2>
 8009058:	9902      	ldr	r1, [sp, #8]
 800905a:	2300      	movs	r3, #0
 800905c:	220a      	movs	r2, #10
 800905e:	4648      	mov	r0, r9
 8009060:	f000 f968 	bl	8009334 <__multadd>
 8009064:	9002      	str	r0, [sp, #8]
 8009066:	e7eb      	b.n	8009040 <_dtoa_r+0xb70>
 8009068:	0800a81c 	.word	0x0800a81c
 800906c:	0800a7a0 	.word	0x0800a7a0

08009070 <_free_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4605      	mov	r5, r0
 8009074:	2900      	cmp	r1, #0
 8009076:	d041      	beq.n	80090fc <_free_r+0x8c>
 8009078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800907c:	1f0c      	subs	r4, r1, #4
 800907e:	2b00      	cmp	r3, #0
 8009080:	bfb8      	it	lt
 8009082:	18e4      	addlt	r4, r4, r3
 8009084:	f000 f8e8 	bl	8009258 <__malloc_lock>
 8009088:	4a1d      	ldr	r2, [pc, #116]	@ (8009100 <_free_r+0x90>)
 800908a:	6813      	ldr	r3, [r2, #0]
 800908c:	b933      	cbnz	r3, 800909c <_free_r+0x2c>
 800908e:	6063      	str	r3, [r4, #4]
 8009090:	6014      	str	r4, [r2, #0]
 8009092:	4628      	mov	r0, r5
 8009094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009098:	f000 b8e4 	b.w	8009264 <__malloc_unlock>
 800909c:	42a3      	cmp	r3, r4
 800909e:	d908      	bls.n	80090b2 <_free_r+0x42>
 80090a0:	6820      	ldr	r0, [r4, #0]
 80090a2:	1821      	adds	r1, r4, r0
 80090a4:	428b      	cmp	r3, r1
 80090a6:	bf01      	itttt	eq
 80090a8:	6819      	ldreq	r1, [r3, #0]
 80090aa:	685b      	ldreq	r3, [r3, #4]
 80090ac:	1809      	addeq	r1, r1, r0
 80090ae:	6021      	streq	r1, [r4, #0]
 80090b0:	e7ed      	b.n	800908e <_free_r+0x1e>
 80090b2:	461a      	mov	r2, r3
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	b10b      	cbz	r3, 80090bc <_free_r+0x4c>
 80090b8:	42a3      	cmp	r3, r4
 80090ba:	d9fa      	bls.n	80090b2 <_free_r+0x42>
 80090bc:	6811      	ldr	r1, [r2, #0]
 80090be:	1850      	adds	r0, r2, r1
 80090c0:	42a0      	cmp	r0, r4
 80090c2:	d10b      	bne.n	80090dc <_free_r+0x6c>
 80090c4:	6820      	ldr	r0, [r4, #0]
 80090c6:	4401      	add	r1, r0
 80090c8:	1850      	adds	r0, r2, r1
 80090ca:	4283      	cmp	r3, r0
 80090cc:	6011      	str	r1, [r2, #0]
 80090ce:	d1e0      	bne.n	8009092 <_free_r+0x22>
 80090d0:	6818      	ldr	r0, [r3, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	6053      	str	r3, [r2, #4]
 80090d6:	4408      	add	r0, r1
 80090d8:	6010      	str	r0, [r2, #0]
 80090da:	e7da      	b.n	8009092 <_free_r+0x22>
 80090dc:	d902      	bls.n	80090e4 <_free_r+0x74>
 80090de:	230c      	movs	r3, #12
 80090e0:	602b      	str	r3, [r5, #0]
 80090e2:	e7d6      	b.n	8009092 <_free_r+0x22>
 80090e4:	6820      	ldr	r0, [r4, #0]
 80090e6:	1821      	adds	r1, r4, r0
 80090e8:	428b      	cmp	r3, r1
 80090ea:	bf04      	itt	eq
 80090ec:	6819      	ldreq	r1, [r3, #0]
 80090ee:	685b      	ldreq	r3, [r3, #4]
 80090f0:	6063      	str	r3, [r4, #4]
 80090f2:	bf04      	itt	eq
 80090f4:	1809      	addeq	r1, r1, r0
 80090f6:	6021      	streq	r1, [r4, #0]
 80090f8:	6054      	str	r4, [r2, #4]
 80090fa:	e7ca      	b.n	8009092 <_free_r+0x22>
 80090fc:	bd38      	pop	{r3, r4, r5, pc}
 80090fe:	bf00      	nop
 8009100:	20004fb4 	.word	0x20004fb4

08009104 <malloc>:
 8009104:	4b02      	ldr	r3, [pc, #8]	@ (8009110 <malloc+0xc>)
 8009106:	4601      	mov	r1, r0
 8009108:	6818      	ldr	r0, [r3, #0]
 800910a:	f000 b825 	b.w	8009158 <_malloc_r>
 800910e:	bf00      	nop
 8009110:	2000001c 	.word	0x2000001c

08009114 <sbrk_aligned>:
 8009114:	b570      	push	{r4, r5, r6, lr}
 8009116:	4e0f      	ldr	r6, [pc, #60]	@ (8009154 <sbrk_aligned+0x40>)
 8009118:	460c      	mov	r4, r1
 800911a:	6831      	ldr	r1, [r6, #0]
 800911c:	4605      	mov	r5, r0
 800911e:	b911      	cbnz	r1, 8009126 <sbrk_aligned+0x12>
 8009120:	f000 fe3e 	bl	8009da0 <_sbrk_r>
 8009124:	6030      	str	r0, [r6, #0]
 8009126:	4621      	mov	r1, r4
 8009128:	4628      	mov	r0, r5
 800912a:	f000 fe39 	bl	8009da0 <_sbrk_r>
 800912e:	1c43      	adds	r3, r0, #1
 8009130:	d103      	bne.n	800913a <sbrk_aligned+0x26>
 8009132:	f04f 34ff 	mov.w	r4, #4294967295
 8009136:	4620      	mov	r0, r4
 8009138:	bd70      	pop	{r4, r5, r6, pc}
 800913a:	1cc4      	adds	r4, r0, #3
 800913c:	f024 0403 	bic.w	r4, r4, #3
 8009140:	42a0      	cmp	r0, r4
 8009142:	d0f8      	beq.n	8009136 <sbrk_aligned+0x22>
 8009144:	1a21      	subs	r1, r4, r0
 8009146:	4628      	mov	r0, r5
 8009148:	f000 fe2a 	bl	8009da0 <_sbrk_r>
 800914c:	3001      	adds	r0, #1
 800914e:	d1f2      	bne.n	8009136 <sbrk_aligned+0x22>
 8009150:	e7ef      	b.n	8009132 <sbrk_aligned+0x1e>
 8009152:	bf00      	nop
 8009154:	20004fb0 	.word	0x20004fb0

08009158 <_malloc_r>:
 8009158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800915c:	1ccd      	adds	r5, r1, #3
 800915e:	f025 0503 	bic.w	r5, r5, #3
 8009162:	3508      	adds	r5, #8
 8009164:	2d0c      	cmp	r5, #12
 8009166:	bf38      	it	cc
 8009168:	250c      	movcc	r5, #12
 800916a:	2d00      	cmp	r5, #0
 800916c:	4606      	mov	r6, r0
 800916e:	db01      	blt.n	8009174 <_malloc_r+0x1c>
 8009170:	42a9      	cmp	r1, r5
 8009172:	d904      	bls.n	800917e <_malloc_r+0x26>
 8009174:	230c      	movs	r3, #12
 8009176:	6033      	str	r3, [r6, #0]
 8009178:	2000      	movs	r0, #0
 800917a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800917e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009254 <_malloc_r+0xfc>
 8009182:	f000 f869 	bl	8009258 <__malloc_lock>
 8009186:	f8d8 3000 	ldr.w	r3, [r8]
 800918a:	461c      	mov	r4, r3
 800918c:	bb44      	cbnz	r4, 80091e0 <_malloc_r+0x88>
 800918e:	4629      	mov	r1, r5
 8009190:	4630      	mov	r0, r6
 8009192:	f7ff ffbf 	bl	8009114 <sbrk_aligned>
 8009196:	1c43      	adds	r3, r0, #1
 8009198:	4604      	mov	r4, r0
 800919a:	d158      	bne.n	800924e <_malloc_r+0xf6>
 800919c:	f8d8 4000 	ldr.w	r4, [r8]
 80091a0:	4627      	mov	r7, r4
 80091a2:	2f00      	cmp	r7, #0
 80091a4:	d143      	bne.n	800922e <_malloc_r+0xd6>
 80091a6:	2c00      	cmp	r4, #0
 80091a8:	d04b      	beq.n	8009242 <_malloc_r+0xea>
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	4639      	mov	r1, r7
 80091ae:	4630      	mov	r0, r6
 80091b0:	eb04 0903 	add.w	r9, r4, r3
 80091b4:	f000 fdf4 	bl	8009da0 <_sbrk_r>
 80091b8:	4581      	cmp	r9, r0
 80091ba:	d142      	bne.n	8009242 <_malloc_r+0xea>
 80091bc:	6821      	ldr	r1, [r4, #0]
 80091be:	1a6d      	subs	r5, r5, r1
 80091c0:	4629      	mov	r1, r5
 80091c2:	4630      	mov	r0, r6
 80091c4:	f7ff ffa6 	bl	8009114 <sbrk_aligned>
 80091c8:	3001      	adds	r0, #1
 80091ca:	d03a      	beq.n	8009242 <_malloc_r+0xea>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	442b      	add	r3, r5
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	f8d8 3000 	ldr.w	r3, [r8]
 80091d6:	685a      	ldr	r2, [r3, #4]
 80091d8:	bb62      	cbnz	r2, 8009234 <_malloc_r+0xdc>
 80091da:	f8c8 7000 	str.w	r7, [r8]
 80091de:	e00f      	b.n	8009200 <_malloc_r+0xa8>
 80091e0:	6822      	ldr	r2, [r4, #0]
 80091e2:	1b52      	subs	r2, r2, r5
 80091e4:	d420      	bmi.n	8009228 <_malloc_r+0xd0>
 80091e6:	2a0b      	cmp	r2, #11
 80091e8:	d917      	bls.n	800921a <_malloc_r+0xc2>
 80091ea:	1961      	adds	r1, r4, r5
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	6025      	str	r5, [r4, #0]
 80091f0:	bf18      	it	ne
 80091f2:	6059      	strne	r1, [r3, #4]
 80091f4:	6863      	ldr	r3, [r4, #4]
 80091f6:	bf08      	it	eq
 80091f8:	f8c8 1000 	streq.w	r1, [r8]
 80091fc:	5162      	str	r2, [r4, r5]
 80091fe:	604b      	str	r3, [r1, #4]
 8009200:	4630      	mov	r0, r6
 8009202:	f000 f82f 	bl	8009264 <__malloc_unlock>
 8009206:	f104 000b 	add.w	r0, r4, #11
 800920a:	1d23      	adds	r3, r4, #4
 800920c:	f020 0007 	bic.w	r0, r0, #7
 8009210:	1ac2      	subs	r2, r0, r3
 8009212:	bf1c      	itt	ne
 8009214:	1a1b      	subne	r3, r3, r0
 8009216:	50a3      	strne	r3, [r4, r2]
 8009218:	e7af      	b.n	800917a <_malloc_r+0x22>
 800921a:	6862      	ldr	r2, [r4, #4]
 800921c:	42a3      	cmp	r3, r4
 800921e:	bf0c      	ite	eq
 8009220:	f8c8 2000 	streq.w	r2, [r8]
 8009224:	605a      	strne	r2, [r3, #4]
 8009226:	e7eb      	b.n	8009200 <_malloc_r+0xa8>
 8009228:	4623      	mov	r3, r4
 800922a:	6864      	ldr	r4, [r4, #4]
 800922c:	e7ae      	b.n	800918c <_malloc_r+0x34>
 800922e:	463c      	mov	r4, r7
 8009230:	687f      	ldr	r7, [r7, #4]
 8009232:	e7b6      	b.n	80091a2 <_malloc_r+0x4a>
 8009234:	461a      	mov	r2, r3
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	42a3      	cmp	r3, r4
 800923a:	d1fb      	bne.n	8009234 <_malloc_r+0xdc>
 800923c:	2300      	movs	r3, #0
 800923e:	6053      	str	r3, [r2, #4]
 8009240:	e7de      	b.n	8009200 <_malloc_r+0xa8>
 8009242:	230c      	movs	r3, #12
 8009244:	6033      	str	r3, [r6, #0]
 8009246:	4630      	mov	r0, r6
 8009248:	f000 f80c 	bl	8009264 <__malloc_unlock>
 800924c:	e794      	b.n	8009178 <_malloc_r+0x20>
 800924e:	6005      	str	r5, [r0, #0]
 8009250:	e7d6      	b.n	8009200 <_malloc_r+0xa8>
 8009252:	bf00      	nop
 8009254:	20004fb4 	.word	0x20004fb4

08009258 <__malloc_lock>:
 8009258:	4801      	ldr	r0, [pc, #4]	@ (8009260 <__malloc_lock+0x8>)
 800925a:	f7ff b89e 	b.w	800839a <__retarget_lock_acquire_recursive>
 800925e:	bf00      	nop
 8009260:	20004fac 	.word	0x20004fac

08009264 <__malloc_unlock>:
 8009264:	4801      	ldr	r0, [pc, #4]	@ (800926c <__malloc_unlock+0x8>)
 8009266:	f7ff b899 	b.w	800839c <__retarget_lock_release_recursive>
 800926a:	bf00      	nop
 800926c:	20004fac 	.word	0x20004fac

08009270 <_Balloc>:
 8009270:	b570      	push	{r4, r5, r6, lr}
 8009272:	69c6      	ldr	r6, [r0, #28]
 8009274:	4604      	mov	r4, r0
 8009276:	460d      	mov	r5, r1
 8009278:	b976      	cbnz	r6, 8009298 <_Balloc+0x28>
 800927a:	2010      	movs	r0, #16
 800927c:	f7ff ff42 	bl	8009104 <malloc>
 8009280:	4602      	mov	r2, r0
 8009282:	61e0      	str	r0, [r4, #28]
 8009284:	b920      	cbnz	r0, 8009290 <_Balloc+0x20>
 8009286:	4b18      	ldr	r3, [pc, #96]	@ (80092e8 <_Balloc+0x78>)
 8009288:	4818      	ldr	r0, [pc, #96]	@ (80092ec <_Balloc+0x7c>)
 800928a:	216b      	movs	r1, #107	@ 0x6b
 800928c:	f000 fd98 	bl	8009dc0 <__assert_func>
 8009290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009294:	6006      	str	r6, [r0, #0]
 8009296:	60c6      	str	r6, [r0, #12]
 8009298:	69e6      	ldr	r6, [r4, #28]
 800929a:	68f3      	ldr	r3, [r6, #12]
 800929c:	b183      	cbz	r3, 80092c0 <_Balloc+0x50>
 800929e:	69e3      	ldr	r3, [r4, #28]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092a6:	b9b8      	cbnz	r0, 80092d8 <_Balloc+0x68>
 80092a8:	2101      	movs	r1, #1
 80092aa:	fa01 f605 	lsl.w	r6, r1, r5
 80092ae:	1d72      	adds	r2, r6, #5
 80092b0:	0092      	lsls	r2, r2, #2
 80092b2:	4620      	mov	r0, r4
 80092b4:	f000 fda2 	bl	8009dfc <_calloc_r>
 80092b8:	b160      	cbz	r0, 80092d4 <_Balloc+0x64>
 80092ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092be:	e00e      	b.n	80092de <_Balloc+0x6e>
 80092c0:	2221      	movs	r2, #33	@ 0x21
 80092c2:	2104      	movs	r1, #4
 80092c4:	4620      	mov	r0, r4
 80092c6:	f000 fd99 	bl	8009dfc <_calloc_r>
 80092ca:	69e3      	ldr	r3, [r4, #28]
 80092cc:	60f0      	str	r0, [r6, #12]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e4      	bne.n	800929e <_Balloc+0x2e>
 80092d4:	2000      	movs	r0, #0
 80092d6:	bd70      	pop	{r4, r5, r6, pc}
 80092d8:	6802      	ldr	r2, [r0, #0]
 80092da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092de:	2300      	movs	r3, #0
 80092e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092e4:	e7f7      	b.n	80092d6 <_Balloc+0x66>
 80092e6:	bf00      	nop
 80092e8:	0800a7ad 	.word	0x0800a7ad
 80092ec:	0800a82d 	.word	0x0800a82d

080092f0 <_Bfree>:
 80092f0:	b570      	push	{r4, r5, r6, lr}
 80092f2:	69c6      	ldr	r6, [r0, #28]
 80092f4:	4605      	mov	r5, r0
 80092f6:	460c      	mov	r4, r1
 80092f8:	b976      	cbnz	r6, 8009318 <_Bfree+0x28>
 80092fa:	2010      	movs	r0, #16
 80092fc:	f7ff ff02 	bl	8009104 <malloc>
 8009300:	4602      	mov	r2, r0
 8009302:	61e8      	str	r0, [r5, #28]
 8009304:	b920      	cbnz	r0, 8009310 <_Bfree+0x20>
 8009306:	4b09      	ldr	r3, [pc, #36]	@ (800932c <_Bfree+0x3c>)
 8009308:	4809      	ldr	r0, [pc, #36]	@ (8009330 <_Bfree+0x40>)
 800930a:	218f      	movs	r1, #143	@ 0x8f
 800930c:	f000 fd58 	bl	8009dc0 <__assert_func>
 8009310:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009314:	6006      	str	r6, [r0, #0]
 8009316:	60c6      	str	r6, [r0, #12]
 8009318:	b13c      	cbz	r4, 800932a <_Bfree+0x3a>
 800931a:	69eb      	ldr	r3, [r5, #28]
 800931c:	6862      	ldr	r2, [r4, #4]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009324:	6021      	str	r1, [r4, #0]
 8009326:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800932a:	bd70      	pop	{r4, r5, r6, pc}
 800932c:	0800a7ad 	.word	0x0800a7ad
 8009330:	0800a82d 	.word	0x0800a82d

08009334 <__multadd>:
 8009334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009338:	690d      	ldr	r5, [r1, #16]
 800933a:	4607      	mov	r7, r0
 800933c:	460c      	mov	r4, r1
 800933e:	461e      	mov	r6, r3
 8009340:	f101 0c14 	add.w	ip, r1, #20
 8009344:	2000      	movs	r0, #0
 8009346:	f8dc 3000 	ldr.w	r3, [ip]
 800934a:	b299      	uxth	r1, r3
 800934c:	fb02 6101 	mla	r1, r2, r1, r6
 8009350:	0c1e      	lsrs	r6, r3, #16
 8009352:	0c0b      	lsrs	r3, r1, #16
 8009354:	fb02 3306 	mla	r3, r2, r6, r3
 8009358:	b289      	uxth	r1, r1
 800935a:	3001      	adds	r0, #1
 800935c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009360:	4285      	cmp	r5, r0
 8009362:	f84c 1b04 	str.w	r1, [ip], #4
 8009366:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800936a:	dcec      	bgt.n	8009346 <__multadd+0x12>
 800936c:	b30e      	cbz	r6, 80093b2 <__multadd+0x7e>
 800936e:	68a3      	ldr	r3, [r4, #8]
 8009370:	42ab      	cmp	r3, r5
 8009372:	dc19      	bgt.n	80093a8 <__multadd+0x74>
 8009374:	6861      	ldr	r1, [r4, #4]
 8009376:	4638      	mov	r0, r7
 8009378:	3101      	adds	r1, #1
 800937a:	f7ff ff79 	bl	8009270 <_Balloc>
 800937e:	4680      	mov	r8, r0
 8009380:	b928      	cbnz	r0, 800938e <__multadd+0x5a>
 8009382:	4602      	mov	r2, r0
 8009384:	4b0c      	ldr	r3, [pc, #48]	@ (80093b8 <__multadd+0x84>)
 8009386:	480d      	ldr	r0, [pc, #52]	@ (80093bc <__multadd+0x88>)
 8009388:	21ba      	movs	r1, #186	@ 0xba
 800938a:	f000 fd19 	bl	8009dc0 <__assert_func>
 800938e:	6922      	ldr	r2, [r4, #16]
 8009390:	3202      	adds	r2, #2
 8009392:	f104 010c 	add.w	r1, r4, #12
 8009396:	0092      	lsls	r2, r2, #2
 8009398:	300c      	adds	r0, #12
 800939a:	f7ff f800 	bl	800839e <memcpy>
 800939e:	4621      	mov	r1, r4
 80093a0:	4638      	mov	r0, r7
 80093a2:	f7ff ffa5 	bl	80092f0 <_Bfree>
 80093a6:	4644      	mov	r4, r8
 80093a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093ac:	3501      	adds	r5, #1
 80093ae:	615e      	str	r6, [r3, #20]
 80093b0:	6125      	str	r5, [r4, #16]
 80093b2:	4620      	mov	r0, r4
 80093b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b8:	0800a81c 	.word	0x0800a81c
 80093bc:	0800a82d 	.word	0x0800a82d

080093c0 <__hi0bits>:
 80093c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80093c4:	4603      	mov	r3, r0
 80093c6:	bf36      	itet	cc
 80093c8:	0403      	lslcc	r3, r0, #16
 80093ca:	2000      	movcs	r0, #0
 80093cc:	2010      	movcc	r0, #16
 80093ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093d2:	bf3c      	itt	cc
 80093d4:	021b      	lslcc	r3, r3, #8
 80093d6:	3008      	addcc	r0, #8
 80093d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093dc:	bf3c      	itt	cc
 80093de:	011b      	lslcc	r3, r3, #4
 80093e0:	3004      	addcc	r0, #4
 80093e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093e6:	bf3c      	itt	cc
 80093e8:	009b      	lslcc	r3, r3, #2
 80093ea:	3002      	addcc	r0, #2
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	db05      	blt.n	80093fc <__hi0bits+0x3c>
 80093f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80093f4:	f100 0001 	add.w	r0, r0, #1
 80093f8:	bf08      	it	eq
 80093fa:	2020      	moveq	r0, #32
 80093fc:	4770      	bx	lr

080093fe <__lo0bits>:
 80093fe:	6803      	ldr	r3, [r0, #0]
 8009400:	4602      	mov	r2, r0
 8009402:	f013 0007 	ands.w	r0, r3, #7
 8009406:	d00b      	beq.n	8009420 <__lo0bits+0x22>
 8009408:	07d9      	lsls	r1, r3, #31
 800940a:	d421      	bmi.n	8009450 <__lo0bits+0x52>
 800940c:	0798      	lsls	r0, r3, #30
 800940e:	bf49      	itett	mi
 8009410:	085b      	lsrmi	r3, r3, #1
 8009412:	089b      	lsrpl	r3, r3, #2
 8009414:	2001      	movmi	r0, #1
 8009416:	6013      	strmi	r3, [r2, #0]
 8009418:	bf5c      	itt	pl
 800941a:	6013      	strpl	r3, [r2, #0]
 800941c:	2002      	movpl	r0, #2
 800941e:	4770      	bx	lr
 8009420:	b299      	uxth	r1, r3
 8009422:	b909      	cbnz	r1, 8009428 <__lo0bits+0x2a>
 8009424:	0c1b      	lsrs	r3, r3, #16
 8009426:	2010      	movs	r0, #16
 8009428:	b2d9      	uxtb	r1, r3
 800942a:	b909      	cbnz	r1, 8009430 <__lo0bits+0x32>
 800942c:	3008      	adds	r0, #8
 800942e:	0a1b      	lsrs	r3, r3, #8
 8009430:	0719      	lsls	r1, r3, #28
 8009432:	bf04      	itt	eq
 8009434:	091b      	lsreq	r3, r3, #4
 8009436:	3004      	addeq	r0, #4
 8009438:	0799      	lsls	r1, r3, #30
 800943a:	bf04      	itt	eq
 800943c:	089b      	lsreq	r3, r3, #2
 800943e:	3002      	addeq	r0, #2
 8009440:	07d9      	lsls	r1, r3, #31
 8009442:	d403      	bmi.n	800944c <__lo0bits+0x4e>
 8009444:	085b      	lsrs	r3, r3, #1
 8009446:	f100 0001 	add.w	r0, r0, #1
 800944a:	d003      	beq.n	8009454 <__lo0bits+0x56>
 800944c:	6013      	str	r3, [r2, #0]
 800944e:	4770      	bx	lr
 8009450:	2000      	movs	r0, #0
 8009452:	4770      	bx	lr
 8009454:	2020      	movs	r0, #32
 8009456:	4770      	bx	lr

08009458 <__i2b>:
 8009458:	b510      	push	{r4, lr}
 800945a:	460c      	mov	r4, r1
 800945c:	2101      	movs	r1, #1
 800945e:	f7ff ff07 	bl	8009270 <_Balloc>
 8009462:	4602      	mov	r2, r0
 8009464:	b928      	cbnz	r0, 8009472 <__i2b+0x1a>
 8009466:	4b05      	ldr	r3, [pc, #20]	@ (800947c <__i2b+0x24>)
 8009468:	4805      	ldr	r0, [pc, #20]	@ (8009480 <__i2b+0x28>)
 800946a:	f240 1145 	movw	r1, #325	@ 0x145
 800946e:	f000 fca7 	bl	8009dc0 <__assert_func>
 8009472:	2301      	movs	r3, #1
 8009474:	6144      	str	r4, [r0, #20]
 8009476:	6103      	str	r3, [r0, #16]
 8009478:	bd10      	pop	{r4, pc}
 800947a:	bf00      	nop
 800947c:	0800a81c 	.word	0x0800a81c
 8009480:	0800a82d 	.word	0x0800a82d

08009484 <__multiply>:
 8009484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009488:	4617      	mov	r7, r2
 800948a:	690a      	ldr	r2, [r1, #16]
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	429a      	cmp	r2, r3
 8009490:	bfa8      	it	ge
 8009492:	463b      	movge	r3, r7
 8009494:	4689      	mov	r9, r1
 8009496:	bfa4      	itt	ge
 8009498:	460f      	movge	r7, r1
 800949a:	4699      	movge	r9, r3
 800949c:	693d      	ldr	r5, [r7, #16]
 800949e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	6879      	ldr	r1, [r7, #4]
 80094a6:	eb05 060a 	add.w	r6, r5, sl
 80094aa:	42b3      	cmp	r3, r6
 80094ac:	b085      	sub	sp, #20
 80094ae:	bfb8      	it	lt
 80094b0:	3101      	addlt	r1, #1
 80094b2:	f7ff fedd 	bl	8009270 <_Balloc>
 80094b6:	b930      	cbnz	r0, 80094c6 <__multiply+0x42>
 80094b8:	4602      	mov	r2, r0
 80094ba:	4b41      	ldr	r3, [pc, #260]	@ (80095c0 <__multiply+0x13c>)
 80094bc:	4841      	ldr	r0, [pc, #260]	@ (80095c4 <__multiply+0x140>)
 80094be:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80094c2:	f000 fc7d 	bl	8009dc0 <__assert_func>
 80094c6:	f100 0414 	add.w	r4, r0, #20
 80094ca:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80094ce:	4623      	mov	r3, r4
 80094d0:	2200      	movs	r2, #0
 80094d2:	4573      	cmp	r3, lr
 80094d4:	d320      	bcc.n	8009518 <__multiply+0x94>
 80094d6:	f107 0814 	add.w	r8, r7, #20
 80094da:	f109 0114 	add.w	r1, r9, #20
 80094de:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80094e2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80094e6:	9302      	str	r3, [sp, #8]
 80094e8:	1beb      	subs	r3, r5, r7
 80094ea:	3b15      	subs	r3, #21
 80094ec:	f023 0303 	bic.w	r3, r3, #3
 80094f0:	3304      	adds	r3, #4
 80094f2:	3715      	adds	r7, #21
 80094f4:	42bd      	cmp	r5, r7
 80094f6:	bf38      	it	cc
 80094f8:	2304      	movcc	r3, #4
 80094fa:	9301      	str	r3, [sp, #4]
 80094fc:	9b02      	ldr	r3, [sp, #8]
 80094fe:	9103      	str	r1, [sp, #12]
 8009500:	428b      	cmp	r3, r1
 8009502:	d80c      	bhi.n	800951e <__multiply+0x9a>
 8009504:	2e00      	cmp	r6, #0
 8009506:	dd03      	ble.n	8009510 <__multiply+0x8c>
 8009508:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800950c:	2b00      	cmp	r3, #0
 800950e:	d055      	beq.n	80095bc <__multiply+0x138>
 8009510:	6106      	str	r6, [r0, #16]
 8009512:	b005      	add	sp, #20
 8009514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009518:	f843 2b04 	str.w	r2, [r3], #4
 800951c:	e7d9      	b.n	80094d2 <__multiply+0x4e>
 800951e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009522:	f1ba 0f00 	cmp.w	sl, #0
 8009526:	d01f      	beq.n	8009568 <__multiply+0xe4>
 8009528:	46c4      	mov	ip, r8
 800952a:	46a1      	mov	r9, r4
 800952c:	2700      	movs	r7, #0
 800952e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009532:	f8d9 3000 	ldr.w	r3, [r9]
 8009536:	fa1f fb82 	uxth.w	fp, r2
 800953a:	b29b      	uxth	r3, r3
 800953c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009540:	443b      	add	r3, r7
 8009542:	f8d9 7000 	ldr.w	r7, [r9]
 8009546:	0c12      	lsrs	r2, r2, #16
 8009548:	0c3f      	lsrs	r7, r7, #16
 800954a:	fb0a 7202 	mla	r2, sl, r2, r7
 800954e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009552:	b29b      	uxth	r3, r3
 8009554:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009558:	4565      	cmp	r5, ip
 800955a:	f849 3b04 	str.w	r3, [r9], #4
 800955e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009562:	d8e4      	bhi.n	800952e <__multiply+0xaa>
 8009564:	9b01      	ldr	r3, [sp, #4]
 8009566:	50e7      	str	r7, [r4, r3]
 8009568:	9b03      	ldr	r3, [sp, #12]
 800956a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800956e:	3104      	adds	r1, #4
 8009570:	f1b9 0f00 	cmp.w	r9, #0
 8009574:	d020      	beq.n	80095b8 <__multiply+0x134>
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	4647      	mov	r7, r8
 800957a:	46a4      	mov	ip, r4
 800957c:	f04f 0a00 	mov.w	sl, #0
 8009580:	f8b7 b000 	ldrh.w	fp, [r7]
 8009584:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009588:	fb09 220b 	mla	r2, r9, fp, r2
 800958c:	4452      	add	r2, sl
 800958e:	b29b      	uxth	r3, r3
 8009590:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009594:	f84c 3b04 	str.w	r3, [ip], #4
 8009598:	f857 3b04 	ldr.w	r3, [r7], #4
 800959c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095a0:	f8bc 3000 	ldrh.w	r3, [ip]
 80095a4:	fb09 330a 	mla	r3, r9, sl, r3
 80095a8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80095ac:	42bd      	cmp	r5, r7
 80095ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095b2:	d8e5      	bhi.n	8009580 <__multiply+0xfc>
 80095b4:	9a01      	ldr	r2, [sp, #4]
 80095b6:	50a3      	str	r3, [r4, r2]
 80095b8:	3404      	adds	r4, #4
 80095ba:	e79f      	b.n	80094fc <__multiply+0x78>
 80095bc:	3e01      	subs	r6, #1
 80095be:	e7a1      	b.n	8009504 <__multiply+0x80>
 80095c0:	0800a81c 	.word	0x0800a81c
 80095c4:	0800a82d 	.word	0x0800a82d

080095c8 <__pow5mult>:
 80095c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095cc:	4615      	mov	r5, r2
 80095ce:	f012 0203 	ands.w	r2, r2, #3
 80095d2:	4607      	mov	r7, r0
 80095d4:	460e      	mov	r6, r1
 80095d6:	d007      	beq.n	80095e8 <__pow5mult+0x20>
 80095d8:	4c25      	ldr	r4, [pc, #148]	@ (8009670 <__pow5mult+0xa8>)
 80095da:	3a01      	subs	r2, #1
 80095dc:	2300      	movs	r3, #0
 80095de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095e2:	f7ff fea7 	bl	8009334 <__multadd>
 80095e6:	4606      	mov	r6, r0
 80095e8:	10ad      	asrs	r5, r5, #2
 80095ea:	d03d      	beq.n	8009668 <__pow5mult+0xa0>
 80095ec:	69fc      	ldr	r4, [r7, #28]
 80095ee:	b97c      	cbnz	r4, 8009610 <__pow5mult+0x48>
 80095f0:	2010      	movs	r0, #16
 80095f2:	f7ff fd87 	bl	8009104 <malloc>
 80095f6:	4602      	mov	r2, r0
 80095f8:	61f8      	str	r0, [r7, #28]
 80095fa:	b928      	cbnz	r0, 8009608 <__pow5mult+0x40>
 80095fc:	4b1d      	ldr	r3, [pc, #116]	@ (8009674 <__pow5mult+0xac>)
 80095fe:	481e      	ldr	r0, [pc, #120]	@ (8009678 <__pow5mult+0xb0>)
 8009600:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009604:	f000 fbdc 	bl	8009dc0 <__assert_func>
 8009608:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800960c:	6004      	str	r4, [r0, #0]
 800960e:	60c4      	str	r4, [r0, #12]
 8009610:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009614:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009618:	b94c      	cbnz	r4, 800962e <__pow5mult+0x66>
 800961a:	f240 2171 	movw	r1, #625	@ 0x271
 800961e:	4638      	mov	r0, r7
 8009620:	f7ff ff1a 	bl	8009458 <__i2b>
 8009624:	2300      	movs	r3, #0
 8009626:	f8c8 0008 	str.w	r0, [r8, #8]
 800962a:	4604      	mov	r4, r0
 800962c:	6003      	str	r3, [r0, #0]
 800962e:	f04f 0900 	mov.w	r9, #0
 8009632:	07eb      	lsls	r3, r5, #31
 8009634:	d50a      	bpl.n	800964c <__pow5mult+0x84>
 8009636:	4631      	mov	r1, r6
 8009638:	4622      	mov	r2, r4
 800963a:	4638      	mov	r0, r7
 800963c:	f7ff ff22 	bl	8009484 <__multiply>
 8009640:	4631      	mov	r1, r6
 8009642:	4680      	mov	r8, r0
 8009644:	4638      	mov	r0, r7
 8009646:	f7ff fe53 	bl	80092f0 <_Bfree>
 800964a:	4646      	mov	r6, r8
 800964c:	106d      	asrs	r5, r5, #1
 800964e:	d00b      	beq.n	8009668 <__pow5mult+0xa0>
 8009650:	6820      	ldr	r0, [r4, #0]
 8009652:	b938      	cbnz	r0, 8009664 <__pow5mult+0x9c>
 8009654:	4622      	mov	r2, r4
 8009656:	4621      	mov	r1, r4
 8009658:	4638      	mov	r0, r7
 800965a:	f7ff ff13 	bl	8009484 <__multiply>
 800965e:	6020      	str	r0, [r4, #0]
 8009660:	f8c0 9000 	str.w	r9, [r0]
 8009664:	4604      	mov	r4, r0
 8009666:	e7e4      	b.n	8009632 <__pow5mult+0x6a>
 8009668:	4630      	mov	r0, r6
 800966a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800966e:	bf00      	nop
 8009670:	0800a8e0 	.word	0x0800a8e0
 8009674:	0800a7ad 	.word	0x0800a7ad
 8009678:	0800a82d 	.word	0x0800a82d

0800967c <__lshift>:
 800967c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009680:	460c      	mov	r4, r1
 8009682:	6849      	ldr	r1, [r1, #4]
 8009684:	6923      	ldr	r3, [r4, #16]
 8009686:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800968a:	68a3      	ldr	r3, [r4, #8]
 800968c:	4607      	mov	r7, r0
 800968e:	4691      	mov	r9, r2
 8009690:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009694:	f108 0601 	add.w	r6, r8, #1
 8009698:	42b3      	cmp	r3, r6
 800969a:	db0b      	blt.n	80096b4 <__lshift+0x38>
 800969c:	4638      	mov	r0, r7
 800969e:	f7ff fde7 	bl	8009270 <_Balloc>
 80096a2:	4605      	mov	r5, r0
 80096a4:	b948      	cbnz	r0, 80096ba <__lshift+0x3e>
 80096a6:	4602      	mov	r2, r0
 80096a8:	4b28      	ldr	r3, [pc, #160]	@ (800974c <__lshift+0xd0>)
 80096aa:	4829      	ldr	r0, [pc, #164]	@ (8009750 <__lshift+0xd4>)
 80096ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80096b0:	f000 fb86 	bl	8009dc0 <__assert_func>
 80096b4:	3101      	adds	r1, #1
 80096b6:	005b      	lsls	r3, r3, #1
 80096b8:	e7ee      	b.n	8009698 <__lshift+0x1c>
 80096ba:	2300      	movs	r3, #0
 80096bc:	f100 0114 	add.w	r1, r0, #20
 80096c0:	f100 0210 	add.w	r2, r0, #16
 80096c4:	4618      	mov	r0, r3
 80096c6:	4553      	cmp	r3, sl
 80096c8:	db33      	blt.n	8009732 <__lshift+0xb6>
 80096ca:	6920      	ldr	r0, [r4, #16]
 80096cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096d0:	f104 0314 	add.w	r3, r4, #20
 80096d4:	f019 091f 	ands.w	r9, r9, #31
 80096d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80096e0:	d02b      	beq.n	800973a <__lshift+0xbe>
 80096e2:	f1c9 0e20 	rsb	lr, r9, #32
 80096e6:	468a      	mov	sl, r1
 80096e8:	2200      	movs	r2, #0
 80096ea:	6818      	ldr	r0, [r3, #0]
 80096ec:	fa00 f009 	lsl.w	r0, r0, r9
 80096f0:	4310      	orrs	r0, r2
 80096f2:	f84a 0b04 	str.w	r0, [sl], #4
 80096f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096fa:	459c      	cmp	ip, r3
 80096fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009700:	d8f3      	bhi.n	80096ea <__lshift+0x6e>
 8009702:	ebac 0304 	sub.w	r3, ip, r4
 8009706:	3b15      	subs	r3, #21
 8009708:	f023 0303 	bic.w	r3, r3, #3
 800970c:	3304      	adds	r3, #4
 800970e:	f104 0015 	add.w	r0, r4, #21
 8009712:	4560      	cmp	r0, ip
 8009714:	bf88      	it	hi
 8009716:	2304      	movhi	r3, #4
 8009718:	50ca      	str	r2, [r1, r3]
 800971a:	b10a      	cbz	r2, 8009720 <__lshift+0xa4>
 800971c:	f108 0602 	add.w	r6, r8, #2
 8009720:	3e01      	subs	r6, #1
 8009722:	4638      	mov	r0, r7
 8009724:	612e      	str	r6, [r5, #16]
 8009726:	4621      	mov	r1, r4
 8009728:	f7ff fde2 	bl	80092f0 <_Bfree>
 800972c:	4628      	mov	r0, r5
 800972e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009732:	f842 0f04 	str.w	r0, [r2, #4]!
 8009736:	3301      	adds	r3, #1
 8009738:	e7c5      	b.n	80096c6 <__lshift+0x4a>
 800973a:	3904      	subs	r1, #4
 800973c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009740:	f841 2f04 	str.w	r2, [r1, #4]!
 8009744:	459c      	cmp	ip, r3
 8009746:	d8f9      	bhi.n	800973c <__lshift+0xc0>
 8009748:	e7ea      	b.n	8009720 <__lshift+0xa4>
 800974a:	bf00      	nop
 800974c:	0800a81c 	.word	0x0800a81c
 8009750:	0800a82d 	.word	0x0800a82d

08009754 <__mcmp>:
 8009754:	690a      	ldr	r2, [r1, #16]
 8009756:	4603      	mov	r3, r0
 8009758:	6900      	ldr	r0, [r0, #16]
 800975a:	1a80      	subs	r0, r0, r2
 800975c:	b530      	push	{r4, r5, lr}
 800975e:	d10e      	bne.n	800977e <__mcmp+0x2a>
 8009760:	3314      	adds	r3, #20
 8009762:	3114      	adds	r1, #20
 8009764:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009768:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800976c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009770:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009774:	4295      	cmp	r5, r2
 8009776:	d003      	beq.n	8009780 <__mcmp+0x2c>
 8009778:	d205      	bcs.n	8009786 <__mcmp+0x32>
 800977a:	f04f 30ff 	mov.w	r0, #4294967295
 800977e:	bd30      	pop	{r4, r5, pc}
 8009780:	42a3      	cmp	r3, r4
 8009782:	d3f3      	bcc.n	800976c <__mcmp+0x18>
 8009784:	e7fb      	b.n	800977e <__mcmp+0x2a>
 8009786:	2001      	movs	r0, #1
 8009788:	e7f9      	b.n	800977e <__mcmp+0x2a>
	...

0800978c <__mdiff>:
 800978c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009790:	4689      	mov	r9, r1
 8009792:	4606      	mov	r6, r0
 8009794:	4611      	mov	r1, r2
 8009796:	4648      	mov	r0, r9
 8009798:	4614      	mov	r4, r2
 800979a:	f7ff ffdb 	bl	8009754 <__mcmp>
 800979e:	1e05      	subs	r5, r0, #0
 80097a0:	d112      	bne.n	80097c8 <__mdiff+0x3c>
 80097a2:	4629      	mov	r1, r5
 80097a4:	4630      	mov	r0, r6
 80097a6:	f7ff fd63 	bl	8009270 <_Balloc>
 80097aa:	4602      	mov	r2, r0
 80097ac:	b928      	cbnz	r0, 80097ba <__mdiff+0x2e>
 80097ae:	4b3f      	ldr	r3, [pc, #252]	@ (80098ac <__mdiff+0x120>)
 80097b0:	f240 2137 	movw	r1, #567	@ 0x237
 80097b4:	483e      	ldr	r0, [pc, #248]	@ (80098b0 <__mdiff+0x124>)
 80097b6:	f000 fb03 	bl	8009dc0 <__assert_func>
 80097ba:	2301      	movs	r3, #1
 80097bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80097c0:	4610      	mov	r0, r2
 80097c2:	b003      	add	sp, #12
 80097c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c8:	bfbc      	itt	lt
 80097ca:	464b      	movlt	r3, r9
 80097cc:	46a1      	movlt	r9, r4
 80097ce:	4630      	mov	r0, r6
 80097d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80097d4:	bfba      	itte	lt
 80097d6:	461c      	movlt	r4, r3
 80097d8:	2501      	movlt	r5, #1
 80097da:	2500      	movge	r5, #0
 80097dc:	f7ff fd48 	bl	8009270 <_Balloc>
 80097e0:	4602      	mov	r2, r0
 80097e2:	b918      	cbnz	r0, 80097ec <__mdiff+0x60>
 80097e4:	4b31      	ldr	r3, [pc, #196]	@ (80098ac <__mdiff+0x120>)
 80097e6:	f240 2145 	movw	r1, #581	@ 0x245
 80097ea:	e7e3      	b.n	80097b4 <__mdiff+0x28>
 80097ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80097f0:	6926      	ldr	r6, [r4, #16]
 80097f2:	60c5      	str	r5, [r0, #12]
 80097f4:	f109 0310 	add.w	r3, r9, #16
 80097f8:	f109 0514 	add.w	r5, r9, #20
 80097fc:	f104 0e14 	add.w	lr, r4, #20
 8009800:	f100 0b14 	add.w	fp, r0, #20
 8009804:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009808:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800980c:	9301      	str	r3, [sp, #4]
 800980e:	46d9      	mov	r9, fp
 8009810:	f04f 0c00 	mov.w	ip, #0
 8009814:	9b01      	ldr	r3, [sp, #4]
 8009816:	f85e 0b04 	ldr.w	r0, [lr], #4
 800981a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	fa1f f38a 	uxth.w	r3, sl
 8009824:	4619      	mov	r1, r3
 8009826:	b283      	uxth	r3, r0
 8009828:	1acb      	subs	r3, r1, r3
 800982a:	0c00      	lsrs	r0, r0, #16
 800982c:	4463      	add	r3, ip
 800982e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009832:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009836:	b29b      	uxth	r3, r3
 8009838:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800983c:	4576      	cmp	r6, lr
 800983e:	f849 3b04 	str.w	r3, [r9], #4
 8009842:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009846:	d8e5      	bhi.n	8009814 <__mdiff+0x88>
 8009848:	1b33      	subs	r3, r6, r4
 800984a:	3b15      	subs	r3, #21
 800984c:	f023 0303 	bic.w	r3, r3, #3
 8009850:	3415      	adds	r4, #21
 8009852:	3304      	adds	r3, #4
 8009854:	42a6      	cmp	r6, r4
 8009856:	bf38      	it	cc
 8009858:	2304      	movcc	r3, #4
 800985a:	441d      	add	r5, r3
 800985c:	445b      	add	r3, fp
 800985e:	461e      	mov	r6, r3
 8009860:	462c      	mov	r4, r5
 8009862:	4544      	cmp	r4, r8
 8009864:	d30e      	bcc.n	8009884 <__mdiff+0xf8>
 8009866:	f108 0103 	add.w	r1, r8, #3
 800986a:	1b49      	subs	r1, r1, r5
 800986c:	f021 0103 	bic.w	r1, r1, #3
 8009870:	3d03      	subs	r5, #3
 8009872:	45a8      	cmp	r8, r5
 8009874:	bf38      	it	cc
 8009876:	2100      	movcc	r1, #0
 8009878:	440b      	add	r3, r1
 800987a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800987e:	b191      	cbz	r1, 80098a6 <__mdiff+0x11a>
 8009880:	6117      	str	r7, [r2, #16]
 8009882:	e79d      	b.n	80097c0 <__mdiff+0x34>
 8009884:	f854 1b04 	ldr.w	r1, [r4], #4
 8009888:	46e6      	mov	lr, ip
 800988a:	0c08      	lsrs	r0, r1, #16
 800988c:	fa1c fc81 	uxtah	ip, ip, r1
 8009890:	4471      	add	r1, lr
 8009892:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009896:	b289      	uxth	r1, r1
 8009898:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800989c:	f846 1b04 	str.w	r1, [r6], #4
 80098a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80098a4:	e7dd      	b.n	8009862 <__mdiff+0xd6>
 80098a6:	3f01      	subs	r7, #1
 80098a8:	e7e7      	b.n	800987a <__mdiff+0xee>
 80098aa:	bf00      	nop
 80098ac:	0800a81c 	.word	0x0800a81c
 80098b0:	0800a82d 	.word	0x0800a82d

080098b4 <__d2b>:
 80098b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098b8:	460f      	mov	r7, r1
 80098ba:	2101      	movs	r1, #1
 80098bc:	ec59 8b10 	vmov	r8, r9, d0
 80098c0:	4616      	mov	r6, r2
 80098c2:	f7ff fcd5 	bl	8009270 <_Balloc>
 80098c6:	4604      	mov	r4, r0
 80098c8:	b930      	cbnz	r0, 80098d8 <__d2b+0x24>
 80098ca:	4602      	mov	r2, r0
 80098cc:	4b23      	ldr	r3, [pc, #140]	@ (800995c <__d2b+0xa8>)
 80098ce:	4824      	ldr	r0, [pc, #144]	@ (8009960 <__d2b+0xac>)
 80098d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80098d4:	f000 fa74 	bl	8009dc0 <__assert_func>
 80098d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098e0:	b10d      	cbz	r5, 80098e6 <__d2b+0x32>
 80098e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098e6:	9301      	str	r3, [sp, #4]
 80098e8:	f1b8 0300 	subs.w	r3, r8, #0
 80098ec:	d023      	beq.n	8009936 <__d2b+0x82>
 80098ee:	4668      	mov	r0, sp
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	f7ff fd84 	bl	80093fe <__lo0bits>
 80098f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80098fa:	b1d0      	cbz	r0, 8009932 <__d2b+0x7e>
 80098fc:	f1c0 0320 	rsb	r3, r0, #32
 8009900:	fa02 f303 	lsl.w	r3, r2, r3
 8009904:	430b      	orrs	r3, r1
 8009906:	40c2      	lsrs	r2, r0
 8009908:	6163      	str	r3, [r4, #20]
 800990a:	9201      	str	r2, [sp, #4]
 800990c:	9b01      	ldr	r3, [sp, #4]
 800990e:	61a3      	str	r3, [r4, #24]
 8009910:	2b00      	cmp	r3, #0
 8009912:	bf0c      	ite	eq
 8009914:	2201      	moveq	r2, #1
 8009916:	2202      	movne	r2, #2
 8009918:	6122      	str	r2, [r4, #16]
 800991a:	b1a5      	cbz	r5, 8009946 <__d2b+0x92>
 800991c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009920:	4405      	add	r5, r0
 8009922:	603d      	str	r5, [r7, #0]
 8009924:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009928:	6030      	str	r0, [r6, #0]
 800992a:	4620      	mov	r0, r4
 800992c:	b003      	add	sp, #12
 800992e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009932:	6161      	str	r1, [r4, #20]
 8009934:	e7ea      	b.n	800990c <__d2b+0x58>
 8009936:	a801      	add	r0, sp, #4
 8009938:	f7ff fd61 	bl	80093fe <__lo0bits>
 800993c:	9b01      	ldr	r3, [sp, #4]
 800993e:	6163      	str	r3, [r4, #20]
 8009940:	3020      	adds	r0, #32
 8009942:	2201      	movs	r2, #1
 8009944:	e7e8      	b.n	8009918 <__d2b+0x64>
 8009946:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800994a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800994e:	6038      	str	r0, [r7, #0]
 8009950:	6918      	ldr	r0, [r3, #16]
 8009952:	f7ff fd35 	bl	80093c0 <__hi0bits>
 8009956:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800995a:	e7e5      	b.n	8009928 <__d2b+0x74>
 800995c:	0800a81c 	.word	0x0800a81c
 8009960:	0800a82d 	.word	0x0800a82d

08009964 <__ssputs_r>:
 8009964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009968:	688e      	ldr	r6, [r1, #8]
 800996a:	461f      	mov	r7, r3
 800996c:	42be      	cmp	r6, r7
 800996e:	680b      	ldr	r3, [r1, #0]
 8009970:	4682      	mov	sl, r0
 8009972:	460c      	mov	r4, r1
 8009974:	4690      	mov	r8, r2
 8009976:	d82d      	bhi.n	80099d4 <__ssputs_r+0x70>
 8009978:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800997c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009980:	d026      	beq.n	80099d0 <__ssputs_r+0x6c>
 8009982:	6965      	ldr	r5, [r4, #20]
 8009984:	6909      	ldr	r1, [r1, #16]
 8009986:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800998a:	eba3 0901 	sub.w	r9, r3, r1
 800998e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009992:	1c7b      	adds	r3, r7, #1
 8009994:	444b      	add	r3, r9
 8009996:	106d      	asrs	r5, r5, #1
 8009998:	429d      	cmp	r5, r3
 800999a:	bf38      	it	cc
 800999c:	461d      	movcc	r5, r3
 800999e:	0553      	lsls	r3, r2, #21
 80099a0:	d527      	bpl.n	80099f2 <__ssputs_r+0x8e>
 80099a2:	4629      	mov	r1, r5
 80099a4:	f7ff fbd8 	bl	8009158 <_malloc_r>
 80099a8:	4606      	mov	r6, r0
 80099aa:	b360      	cbz	r0, 8009a06 <__ssputs_r+0xa2>
 80099ac:	6921      	ldr	r1, [r4, #16]
 80099ae:	464a      	mov	r2, r9
 80099b0:	f7fe fcf5 	bl	800839e <memcpy>
 80099b4:	89a3      	ldrh	r3, [r4, #12]
 80099b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80099ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099be:	81a3      	strh	r3, [r4, #12]
 80099c0:	6126      	str	r6, [r4, #16]
 80099c2:	6165      	str	r5, [r4, #20]
 80099c4:	444e      	add	r6, r9
 80099c6:	eba5 0509 	sub.w	r5, r5, r9
 80099ca:	6026      	str	r6, [r4, #0]
 80099cc:	60a5      	str	r5, [r4, #8]
 80099ce:	463e      	mov	r6, r7
 80099d0:	42be      	cmp	r6, r7
 80099d2:	d900      	bls.n	80099d6 <__ssputs_r+0x72>
 80099d4:	463e      	mov	r6, r7
 80099d6:	6820      	ldr	r0, [r4, #0]
 80099d8:	4632      	mov	r2, r6
 80099da:	4641      	mov	r1, r8
 80099dc:	f000 f9c6 	bl	8009d6c <memmove>
 80099e0:	68a3      	ldr	r3, [r4, #8]
 80099e2:	1b9b      	subs	r3, r3, r6
 80099e4:	60a3      	str	r3, [r4, #8]
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	4433      	add	r3, r6
 80099ea:	6023      	str	r3, [r4, #0]
 80099ec:	2000      	movs	r0, #0
 80099ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f2:	462a      	mov	r2, r5
 80099f4:	f000 fa28 	bl	8009e48 <_realloc_r>
 80099f8:	4606      	mov	r6, r0
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d1e0      	bne.n	80099c0 <__ssputs_r+0x5c>
 80099fe:	6921      	ldr	r1, [r4, #16]
 8009a00:	4650      	mov	r0, sl
 8009a02:	f7ff fb35 	bl	8009070 <_free_r>
 8009a06:	230c      	movs	r3, #12
 8009a08:	f8ca 3000 	str.w	r3, [sl]
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a12:	81a3      	strh	r3, [r4, #12]
 8009a14:	f04f 30ff 	mov.w	r0, #4294967295
 8009a18:	e7e9      	b.n	80099ee <__ssputs_r+0x8a>
	...

08009a1c <_svfiprintf_r>:
 8009a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a20:	4698      	mov	r8, r3
 8009a22:	898b      	ldrh	r3, [r1, #12]
 8009a24:	061b      	lsls	r3, r3, #24
 8009a26:	b09d      	sub	sp, #116	@ 0x74
 8009a28:	4607      	mov	r7, r0
 8009a2a:	460d      	mov	r5, r1
 8009a2c:	4614      	mov	r4, r2
 8009a2e:	d510      	bpl.n	8009a52 <_svfiprintf_r+0x36>
 8009a30:	690b      	ldr	r3, [r1, #16]
 8009a32:	b973      	cbnz	r3, 8009a52 <_svfiprintf_r+0x36>
 8009a34:	2140      	movs	r1, #64	@ 0x40
 8009a36:	f7ff fb8f 	bl	8009158 <_malloc_r>
 8009a3a:	6028      	str	r0, [r5, #0]
 8009a3c:	6128      	str	r0, [r5, #16]
 8009a3e:	b930      	cbnz	r0, 8009a4e <_svfiprintf_r+0x32>
 8009a40:	230c      	movs	r3, #12
 8009a42:	603b      	str	r3, [r7, #0]
 8009a44:	f04f 30ff 	mov.w	r0, #4294967295
 8009a48:	b01d      	add	sp, #116	@ 0x74
 8009a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4e:	2340      	movs	r3, #64	@ 0x40
 8009a50:	616b      	str	r3, [r5, #20]
 8009a52:	2300      	movs	r3, #0
 8009a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a56:	2320      	movs	r3, #32
 8009a58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a60:	2330      	movs	r3, #48	@ 0x30
 8009a62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009c00 <_svfiprintf_r+0x1e4>
 8009a66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a6a:	f04f 0901 	mov.w	r9, #1
 8009a6e:	4623      	mov	r3, r4
 8009a70:	469a      	mov	sl, r3
 8009a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a76:	b10a      	cbz	r2, 8009a7c <_svfiprintf_r+0x60>
 8009a78:	2a25      	cmp	r2, #37	@ 0x25
 8009a7a:	d1f9      	bne.n	8009a70 <_svfiprintf_r+0x54>
 8009a7c:	ebba 0b04 	subs.w	fp, sl, r4
 8009a80:	d00b      	beq.n	8009a9a <_svfiprintf_r+0x7e>
 8009a82:	465b      	mov	r3, fp
 8009a84:	4622      	mov	r2, r4
 8009a86:	4629      	mov	r1, r5
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f7ff ff6b 	bl	8009964 <__ssputs_r>
 8009a8e:	3001      	adds	r0, #1
 8009a90:	f000 80a7 	beq.w	8009be2 <_svfiprintf_r+0x1c6>
 8009a94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a96:	445a      	add	r2, fp
 8009a98:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f000 809f 	beq.w	8009be2 <_svfiprintf_r+0x1c6>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aae:	f10a 0a01 	add.w	sl, sl, #1
 8009ab2:	9304      	str	r3, [sp, #16]
 8009ab4:	9307      	str	r3, [sp, #28]
 8009ab6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009aba:	931a      	str	r3, [sp, #104]	@ 0x68
 8009abc:	4654      	mov	r4, sl
 8009abe:	2205      	movs	r2, #5
 8009ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac4:	484e      	ldr	r0, [pc, #312]	@ (8009c00 <_svfiprintf_r+0x1e4>)
 8009ac6:	f7f6 fba3 	bl	8000210 <memchr>
 8009aca:	9a04      	ldr	r2, [sp, #16]
 8009acc:	b9d8      	cbnz	r0, 8009b06 <_svfiprintf_r+0xea>
 8009ace:	06d0      	lsls	r0, r2, #27
 8009ad0:	bf44      	itt	mi
 8009ad2:	2320      	movmi	r3, #32
 8009ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ad8:	0711      	lsls	r1, r2, #28
 8009ada:	bf44      	itt	mi
 8009adc:	232b      	movmi	r3, #43	@ 0x2b
 8009ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ae8:	d015      	beq.n	8009b16 <_svfiprintf_r+0xfa>
 8009aea:	9a07      	ldr	r2, [sp, #28]
 8009aec:	4654      	mov	r4, sl
 8009aee:	2000      	movs	r0, #0
 8009af0:	f04f 0c0a 	mov.w	ip, #10
 8009af4:	4621      	mov	r1, r4
 8009af6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009afa:	3b30      	subs	r3, #48	@ 0x30
 8009afc:	2b09      	cmp	r3, #9
 8009afe:	d94b      	bls.n	8009b98 <_svfiprintf_r+0x17c>
 8009b00:	b1b0      	cbz	r0, 8009b30 <_svfiprintf_r+0x114>
 8009b02:	9207      	str	r2, [sp, #28]
 8009b04:	e014      	b.n	8009b30 <_svfiprintf_r+0x114>
 8009b06:	eba0 0308 	sub.w	r3, r0, r8
 8009b0a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	9304      	str	r3, [sp, #16]
 8009b12:	46a2      	mov	sl, r4
 8009b14:	e7d2      	b.n	8009abc <_svfiprintf_r+0xa0>
 8009b16:	9b03      	ldr	r3, [sp, #12]
 8009b18:	1d19      	adds	r1, r3, #4
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	9103      	str	r1, [sp, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	bfbb      	ittet	lt
 8009b22:	425b      	neglt	r3, r3
 8009b24:	f042 0202 	orrlt.w	r2, r2, #2
 8009b28:	9307      	strge	r3, [sp, #28]
 8009b2a:	9307      	strlt	r3, [sp, #28]
 8009b2c:	bfb8      	it	lt
 8009b2e:	9204      	strlt	r2, [sp, #16]
 8009b30:	7823      	ldrb	r3, [r4, #0]
 8009b32:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b34:	d10a      	bne.n	8009b4c <_svfiprintf_r+0x130>
 8009b36:	7863      	ldrb	r3, [r4, #1]
 8009b38:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b3a:	d132      	bne.n	8009ba2 <_svfiprintf_r+0x186>
 8009b3c:	9b03      	ldr	r3, [sp, #12]
 8009b3e:	1d1a      	adds	r2, r3, #4
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	9203      	str	r2, [sp, #12]
 8009b44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b48:	3402      	adds	r4, #2
 8009b4a:	9305      	str	r3, [sp, #20]
 8009b4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009c10 <_svfiprintf_r+0x1f4>
 8009b50:	7821      	ldrb	r1, [r4, #0]
 8009b52:	2203      	movs	r2, #3
 8009b54:	4650      	mov	r0, sl
 8009b56:	f7f6 fb5b 	bl	8000210 <memchr>
 8009b5a:	b138      	cbz	r0, 8009b6c <_svfiprintf_r+0x150>
 8009b5c:	9b04      	ldr	r3, [sp, #16]
 8009b5e:	eba0 000a 	sub.w	r0, r0, sl
 8009b62:	2240      	movs	r2, #64	@ 0x40
 8009b64:	4082      	lsls	r2, r0
 8009b66:	4313      	orrs	r3, r2
 8009b68:	3401      	adds	r4, #1
 8009b6a:	9304      	str	r3, [sp, #16]
 8009b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b70:	4824      	ldr	r0, [pc, #144]	@ (8009c04 <_svfiprintf_r+0x1e8>)
 8009b72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b76:	2206      	movs	r2, #6
 8009b78:	f7f6 fb4a 	bl	8000210 <memchr>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d036      	beq.n	8009bee <_svfiprintf_r+0x1d2>
 8009b80:	4b21      	ldr	r3, [pc, #132]	@ (8009c08 <_svfiprintf_r+0x1ec>)
 8009b82:	bb1b      	cbnz	r3, 8009bcc <_svfiprintf_r+0x1b0>
 8009b84:	9b03      	ldr	r3, [sp, #12]
 8009b86:	3307      	adds	r3, #7
 8009b88:	f023 0307 	bic.w	r3, r3, #7
 8009b8c:	3308      	adds	r3, #8
 8009b8e:	9303      	str	r3, [sp, #12]
 8009b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b92:	4433      	add	r3, r6
 8009b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b96:	e76a      	b.n	8009a6e <_svfiprintf_r+0x52>
 8009b98:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b9c:	460c      	mov	r4, r1
 8009b9e:	2001      	movs	r0, #1
 8009ba0:	e7a8      	b.n	8009af4 <_svfiprintf_r+0xd8>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	3401      	adds	r4, #1
 8009ba6:	9305      	str	r3, [sp, #20]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	f04f 0c0a 	mov.w	ip, #10
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bb4:	3a30      	subs	r2, #48	@ 0x30
 8009bb6:	2a09      	cmp	r2, #9
 8009bb8:	d903      	bls.n	8009bc2 <_svfiprintf_r+0x1a6>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d0c6      	beq.n	8009b4c <_svfiprintf_r+0x130>
 8009bbe:	9105      	str	r1, [sp, #20]
 8009bc0:	e7c4      	b.n	8009b4c <_svfiprintf_r+0x130>
 8009bc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e7f0      	b.n	8009bae <_svfiprintf_r+0x192>
 8009bcc:	ab03      	add	r3, sp, #12
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	462a      	mov	r2, r5
 8009bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8009c0c <_svfiprintf_r+0x1f0>)
 8009bd4:	a904      	add	r1, sp, #16
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	f7fd fe26 	bl	8007828 <_printf_float>
 8009bdc:	1c42      	adds	r2, r0, #1
 8009bde:	4606      	mov	r6, r0
 8009be0:	d1d6      	bne.n	8009b90 <_svfiprintf_r+0x174>
 8009be2:	89ab      	ldrh	r3, [r5, #12]
 8009be4:	065b      	lsls	r3, r3, #25
 8009be6:	f53f af2d 	bmi.w	8009a44 <_svfiprintf_r+0x28>
 8009bea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bec:	e72c      	b.n	8009a48 <_svfiprintf_r+0x2c>
 8009bee:	ab03      	add	r3, sp, #12
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	462a      	mov	r2, r5
 8009bf4:	4b05      	ldr	r3, [pc, #20]	@ (8009c0c <_svfiprintf_r+0x1f0>)
 8009bf6:	a904      	add	r1, sp, #16
 8009bf8:	4638      	mov	r0, r7
 8009bfa:	f7fe f8ad 	bl	8007d58 <_printf_i>
 8009bfe:	e7ed      	b.n	8009bdc <_svfiprintf_r+0x1c0>
 8009c00:	0800a886 	.word	0x0800a886
 8009c04:	0800a890 	.word	0x0800a890
 8009c08:	08007829 	.word	0x08007829
 8009c0c:	08009965 	.word	0x08009965
 8009c10:	0800a88c 	.word	0x0800a88c

08009c14 <__sflush_r>:
 8009c14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c1c:	0716      	lsls	r6, r2, #28
 8009c1e:	4605      	mov	r5, r0
 8009c20:	460c      	mov	r4, r1
 8009c22:	d454      	bmi.n	8009cce <__sflush_r+0xba>
 8009c24:	684b      	ldr	r3, [r1, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	dc02      	bgt.n	8009c30 <__sflush_r+0x1c>
 8009c2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	dd48      	ble.n	8009cc2 <__sflush_r+0xae>
 8009c30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c32:	2e00      	cmp	r6, #0
 8009c34:	d045      	beq.n	8009cc2 <__sflush_r+0xae>
 8009c36:	2300      	movs	r3, #0
 8009c38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c3c:	682f      	ldr	r7, [r5, #0]
 8009c3e:	6a21      	ldr	r1, [r4, #32]
 8009c40:	602b      	str	r3, [r5, #0]
 8009c42:	d030      	beq.n	8009ca6 <__sflush_r+0x92>
 8009c44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c46:	89a3      	ldrh	r3, [r4, #12]
 8009c48:	0759      	lsls	r1, r3, #29
 8009c4a:	d505      	bpl.n	8009c58 <__sflush_r+0x44>
 8009c4c:	6863      	ldr	r3, [r4, #4]
 8009c4e:	1ad2      	subs	r2, r2, r3
 8009c50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c52:	b10b      	cbz	r3, 8009c58 <__sflush_r+0x44>
 8009c54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c56:	1ad2      	subs	r2, r2, r3
 8009c58:	2300      	movs	r3, #0
 8009c5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c5c:	6a21      	ldr	r1, [r4, #32]
 8009c5e:	4628      	mov	r0, r5
 8009c60:	47b0      	blx	r6
 8009c62:	1c43      	adds	r3, r0, #1
 8009c64:	89a3      	ldrh	r3, [r4, #12]
 8009c66:	d106      	bne.n	8009c76 <__sflush_r+0x62>
 8009c68:	6829      	ldr	r1, [r5, #0]
 8009c6a:	291d      	cmp	r1, #29
 8009c6c:	d82b      	bhi.n	8009cc6 <__sflush_r+0xb2>
 8009c6e:	4a2a      	ldr	r2, [pc, #168]	@ (8009d18 <__sflush_r+0x104>)
 8009c70:	40ca      	lsrs	r2, r1
 8009c72:	07d6      	lsls	r6, r2, #31
 8009c74:	d527      	bpl.n	8009cc6 <__sflush_r+0xb2>
 8009c76:	2200      	movs	r2, #0
 8009c78:	6062      	str	r2, [r4, #4]
 8009c7a:	04d9      	lsls	r1, r3, #19
 8009c7c:	6922      	ldr	r2, [r4, #16]
 8009c7e:	6022      	str	r2, [r4, #0]
 8009c80:	d504      	bpl.n	8009c8c <__sflush_r+0x78>
 8009c82:	1c42      	adds	r2, r0, #1
 8009c84:	d101      	bne.n	8009c8a <__sflush_r+0x76>
 8009c86:	682b      	ldr	r3, [r5, #0]
 8009c88:	b903      	cbnz	r3, 8009c8c <__sflush_r+0x78>
 8009c8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c8e:	602f      	str	r7, [r5, #0]
 8009c90:	b1b9      	cbz	r1, 8009cc2 <__sflush_r+0xae>
 8009c92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c96:	4299      	cmp	r1, r3
 8009c98:	d002      	beq.n	8009ca0 <__sflush_r+0x8c>
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f7ff f9e8 	bl	8009070 <_free_r>
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ca4:	e00d      	b.n	8009cc2 <__sflush_r+0xae>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	4628      	mov	r0, r5
 8009caa:	47b0      	blx	r6
 8009cac:	4602      	mov	r2, r0
 8009cae:	1c50      	adds	r0, r2, #1
 8009cb0:	d1c9      	bne.n	8009c46 <__sflush_r+0x32>
 8009cb2:	682b      	ldr	r3, [r5, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d0c6      	beq.n	8009c46 <__sflush_r+0x32>
 8009cb8:	2b1d      	cmp	r3, #29
 8009cba:	d001      	beq.n	8009cc0 <__sflush_r+0xac>
 8009cbc:	2b16      	cmp	r3, #22
 8009cbe:	d11e      	bne.n	8009cfe <__sflush_r+0xea>
 8009cc0:	602f      	str	r7, [r5, #0]
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	e022      	b.n	8009d0c <__sflush_r+0xf8>
 8009cc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cca:	b21b      	sxth	r3, r3
 8009ccc:	e01b      	b.n	8009d06 <__sflush_r+0xf2>
 8009cce:	690f      	ldr	r7, [r1, #16]
 8009cd0:	2f00      	cmp	r7, #0
 8009cd2:	d0f6      	beq.n	8009cc2 <__sflush_r+0xae>
 8009cd4:	0793      	lsls	r3, r2, #30
 8009cd6:	680e      	ldr	r6, [r1, #0]
 8009cd8:	bf08      	it	eq
 8009cda:	694b      	ldreq	r3, [r1, #20]
 8009cdc:	600f      	str	r7, [r1, #0]
 8009cde:	bf18      	it	ne
 8009ce0:	2300      	movne	r3, #0
 8009ce2:	eba6 0807 	sub.w	r8, r6, r7
 8009ce6:	608b      	str	r3, [r1, #8]
 8009ce8:	f1b8 0f00 	cmp.w	r8, #0
 8009cec:	dde9      	ble.n	8009cc2 <__sflush_r+0xae>
 8009cee:	6a21      	ldr	r1, [r4, #32]
 8009cf0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009cf2:	4643      	mov	r3, r8
 8009cf4:	463a      	mov	r2, r7
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	47b0      	blx	r6
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	dc08      	bgt.n	8009d10 <__sflush_r+0xfc>
 8009cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d06:	81a3      	strh	r3, [r4, #12]
 8009d08:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d10:	4407      	add	r7, r0
 8009d12:	eba8 0800 	sub.w	r8, r8, r0
 8009d16:	e7e7      	b.n	8009ce8 <__sflush_r+0xd4>
 8009d18:	20400001 	.word	0x20400001

08009d1c <_fflush_r>:
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	690b      	ldr	r3, [r1, #16]
 8009d20:	4605      	mov	r5, r0
 8009d22:	460c      	mov	r4, r1
 8009d24:	b913      	cbnz	r3, 8009d2c <_fflush_r+0x10>
 8009d26:	2500      	movs	r5, #0
 8009d28:	4628      	mov	r0, r5
 8009d2a:	bd38      	pop	{r3, r4, r5, pc}
 8009d2c:	b118      	cbz	r0, 8009d36 <_fflush_r+0x1a>
 8009d2e:	6a03      	ldr	r3, [r0, #32]
 8009d30:	b90b      	cbnz	r3, 8009d36 <_fflush_r+0x1a>
 8009d32:	f7fe f9bb 	bl	80080ac <__sinit>
 8009d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d0f3      	beq.n	8009d26 <_fflush_r+0xa>
 8009d3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d40:	07d0      	lsls	r0, r2, #31
 8009d42:	d404      	bmi.n	8009d4e <_fflush_r+0x32>
 8009d44:	0599      	lsls	r1, r3, #22
 8009d46:	d402      	bmi.n	8009d4e <_fflush_r+0x32>
 8009d48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d4a:	f7fe fb26 	bl	800839a <__retarget_lock_acquire_recursive>
 8009d4e:	4628      	mov	r0, r5
 8009d50:	4621      	mov	r1, r4
 8009d52:	f7ff ff5f 	bl	8009c14 <__sflush_r>
 8009d56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d58:	07da      	lsls	r2, r3, #31
 8009d5a:	4605      	mov	r5, r0
 8009d5c:	d4e4      	bmi.n	8009d28 <_fflush_r+0xc>
 8009d5e:	89a3      	ldrh	r3, [r4, #12]
 8009d60:	059b      	lsls	r3, r3, #22
 8009d62:	d4e1      	bmi.n	8009d28 <_fflush_r+0xc>
 8009d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d66:	f7fe fb19 	bl	800839c <__retarget_lock_release_recursive>
 8009d6a:	e7dd      	b.n	8009d28 <_fflush_r+0xc>

08009d6c <memmove>:
 8009d6c:	4288      	cmp	r0, r1
 8009d6e:	b510      	push	{r4, lr}
 8009d70:	eb01 0402 	add.w	r4, r1, r2
 8009d74:	d902      	bls.n	8009d7c <memmove+0x10>
 8009d76:	4284      	cmp	r4, r0
 8009d78:	4623      	mov	r3, r4
 8009d7a:	d807      	bhi.n	8009d8c <memmove+0x20>
 8009d7c:	1e43      	subs	r3, r0, #1
 8009d7e:	42a1      	cmp	r1, r4
 8009d80:	d008      	beq.n	8009d94 <memmove+0x28>
 8009d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d8a:	e7f8      	b.n	8009d7e <memmove+0x12>
 8009d8c:	4402      	add	r2, r0
 8009d8e:	4601      	mov	r1, r0
 8009d90:	428a      	cmp	r2, r1
 8009d92:	d100      	bne.n	8009d96 <memmove+0x2a>
 8009d94:	bd10      	pop	{r4, pc}
 8009d96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d9e:	e7f7      	b.n	8009d90 <memmove+0x24>

08009da0 <_sbrk_r>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	4d06      	ldr	r5, [pc, #24]	@ (8009dbc <_sbrk_r+0x1c>)
 8009da4:	2300      	movs	r3, #0
 8009da6:	4604      	mov	r4, r0
 8009da8:	4608      	mov	r0, r1
 8009daa:	602b      	str	r3, [r5, #0]
 8009dac:	f7f7 fdce 	bl	800194c <_sbrk>
 8009db0:	1c43      	adds	r3, r0, #1
 8009db2:	d102      	bne.n	8009dba <_sbrk_r+0x1a>
 8009db4:	682b      	ldr	r3, [r5, #0]
 8009db6:	b103      	cbz	r3, 8009dba <_sbrk_r+0x1a>
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	bd38      	pop	{r3, r4, r5, pc}
 8009dbc:	20004fa8 	.word	0x20004fa8

08009dc0 <__assert_func>:
 8009dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009dc2:	4614      	mov	r4, r2
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	4b09      	ldr	r3, [pc, #36]	@ (8009dec <__assert_func+0x2c>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4605      	mov	r5, r0
 8009dcc:	68d8      	ldr	r0, [r3, #12]
 8009dce:	b14c      	cbz	r4, 8009de4 <__assert_func+0x24>
 8009dd0:	4b07      	ldr	r3, [pc, #28]	@ (8009df0 <__assert_func+0x30>)
 8009dd2:	9100      	str	r1, [sp, #0]
 8009dd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009dd8:	4906      	ldr	r1, [pc, #24]	@ (8009df4 <__assert_func+0x34>)
 8009dda:	462b      	mov	r3, r5
 8009ddc:	f000 f870 	bl	8009ec0 <fiprintf>
 8009de0:	f000 f880 	bl	8009ee4 <abort>
 8009de4:	4b04      	ldr	r3, [pc, #16]	@ (8009df8 <__assert_func+0x38>)
 8009de6:	461c      	mov	r4, r3
 8009de8:	e7f3      	b.n	8009dd2 <__assert_func+0x12>
 8009dea:	bf00      	nop
 8009dec:	2000001c 	.word	0x2000001c
 8009df0:	0800a8a1 	.word	0x0800a8a1
 8009df4:	0800a8ae 	.word	0x0800a8ae
 8009df8:	0800a8dc 	.word	0x0800a8dc

08009dfc <_calloc_r>:
 8009dfc:	b570      	push	{r4, r5, r6, lr}
 8009dfe:	fba1 5402 	umull	r5, r4, r1, r2
 8009e02:	b934      	cbnz	r4, 8009e12 <_calloc_r+0x16>
 8009e04:	4629      	mov	r1, r5
 8009e06:	f7ff f9a7 	bl	8009158 <_malloc_r>
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	b928      	cbnz	r0, 8009e1a <_calloc_r+0x1e>
 8009e0e:	4630      	mov	r0, r6
 8009e10:	bd70      	pop	{r4, r5, r6, pc}
 8009e12:	220c      	movs	r2, #12
 8009e14:	6002      	str	r2, [r0, #0]
 8009e16:	2600      	movs	r6, #0
 8009e18:	e7f9      	b.n	8009e0e <_calloc_r+0x12>
 8009e1a:	462a      	mov	r2, r5
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	f7fe f9e0 	bl	80081e2 <memset>
 8009e22:	e7f4      	b.n	8009e0e <_calloc_r+0x12>

08009e24 <__ascii_mbtowc>:
 8009e24:	b082      	sub	sp, #8
 8009e26:	b901      	cbnz	r1, 8009e2a <__ascii_mbtowc+0x6>
 8009e28:	a901      	add	r1, sp, #4
 8009e2a:	b142      	cbz	r2, 8009e3e <__ascii_mbtowc+0x1a>
 8009e2c:	b14b      	cbz	r3, 8009e42 <__ascii_mbtowc+0x1e>
 8009e2e:	7813      	ldrb	r3, [r2, #0]
 8009e30:	600b      	str	r3, [r1, #0]
 8009e32:	7812      	ldrb	r2, [r2, #0]
 8009e34:	1e10      	subs	r0, r2, #0
 8009e36:	bf18      	it	ne
 8009e38:	2001      	movne	r0, #1
 8009e3a:	b002      	add	sp, #8
 8009e3c:	4770      	bx	lr
 8009e3e:	4610      	mov	r0, r2
 8009e40:	e7fb      	b.n	8009e3a <__ascii_mbtowc+0x16>
 8009e42:	f06f 0001 	mvn.w	r0, #1
 8009e46:	e7f8      	b.n	8009e3a <__ascii_mbtowc+0x16>

08009e48 <_realloc_r>:
 8009e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4c:	4607      	mov	r7, r0
 8009e4e:	4614      	mov	r4, r2
 8009e50:	460d      	mov	r5, r1
 8009e52:	b921      	cbnz	r1, 8009e5e <_realloc_r+0x16>
 8009e54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e58:	4611      	mov	r1, r2
 8009e5a:	f7ff b97d 	b.w	8009158 <_malloc_r>
 8009e5e:	b92a      	cbnz	r2, 8009e6c <_realloc_r+0x24>
 8009e60:	f7ff f906 	bl	8009070 <_free_r>
 8009e64:	4625      	mov	r5, r4
 8009e66:	4628      	mov	r0, r5
 8009e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e6c:	f000 f841 	bl	8009ef2 <_malloc_usable_size_r>
 8009e70:	4284      	cmp	r4, r0
 8009e72:	4606      	mov	r6, r0
 8009e74:	d802      	bhi.n	8009e7c <_realloc_r+0x34>
 8009e76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e7a:	d8f4      	bhi.n	8009e66 <_realloc_r+0x1e>
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	4638      	mov	r0, r7
 8009e80:	f7ff f96a 	bl	8009158 <_malloc_r>
 8009e84:	4680      	mov	r8, r0
 8009e86:	b908      	cbnz	r0, 8009e8c <_realloc_r+0x44>
 8009e88:	4645      	mov	r5, r8
 8009e8a:	e7ec      	b.n	8009e66 <_realloc_r+0x1e>
 8009e8c:	42b4      	cmp	r4, r6
 8009e8e:	4622      	mov	r2, r4
 8009e90:	4629      	mov	r1, r5
 8009e92:	bf28      	it	cs
 8009e94:	4632      	movcs	r2, r6
 8009e96:	f7fe fa82 	bl	800839e <memcpy>
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	4638      	mov	r0, r7
 8009e9e:	f7ff f8e7 	bl	8009070 <_free_r>
 8009ea2:	e7f1      	b.n	8009e88 <_realloc_r+0x40>

08009ea4 <__ascii_wctomb>:
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	4608      	mov	r0, r1
 8009ea8:	b141      	cbz	r1, 8009ebc <__ascii_wctomb+0x18>
 8009eaa:	2aff      	cmp	r2, #255	@ 0xff
 8009eac:	d904      	bls.n	8009eb8 <__ascii_wctomb+0x14>
 8009eae:	228a      	movs	r2, #138	@ 0x8a
 8009eb0:	601a      	str	r2, [r3, #0]
 8009eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb6:	4770      	bx	lr
 8009eb8:	700a      	strb	r2, [r1, #0]
 8009eba:	2001      	movs	r0, #1
 8009ebc:	4770      	bx	lr
	...

08009ec0 <fiprintf>:
 8009ec0:	b40e      	push	{r1, r2, r3}
 8009ec2:	b503      	push	{r0, r1, lr}
 8009ec4:	4601      	mov	r1, r0
 8009ec6:	ab03      	add	r3, sp, #12
 8009ec8:	4805      	ldr	r0, [pc, #20]	@ (8009ee0 <fiprintf+0x20>)
 8009eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ece:	6800      	ldr	r0, [r0, #0]
 8009ed0:	9301      	str	r3, [sp, #4]
 8009ed2:	f000 f83f 	bl	8009f54 <_vfiprintf_r>
 8009ed6:	b002      	add	sp, #8
 8009ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009edc:	b003      	add	sp, #12
 8009ede:	4770      	bx	lr
 8009ee0:	2000001c 	.word	0x2000001c

08009ee4 <abort>:
 8009ee4:	b508      	push	{r3, lr}
 8009ee6:	2006      	movs	r0, #6
 8009ee8:	f000 fa08 	bl	800a2fc <raise>
 8009eec:	2001      	movs	r0, #1
 8009eee:	f7f7 fcb5 	bl	800185c <_exit>

08009ef2 <_malloc_usable_size_r>:
 8009ef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ef6:	1f18      	subs	r0, r3, #4
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	bfbc      	itt	lt
 8009efc:	580b      	ldrlt	r3, [r1, r0]
 8009efe:	18c0      	addlt	r0, r0, r3
 8009f00:	4770      	bx	lr

08009f02 <__sfputc_r>:
 8009f02:	6893      	ldr	r3, [r2, #8]
 8009f04:	3b01      	subs	r3, #1
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	b410      	push	{r4}
 8009f0a:	6093      	str	r3, [r2, #8]
 8009f0c:	da08      	bge.n	8009f20 <__sfputc_r+0x1e>
 8009f0e:	6994      	ldr	r4, [r2, #24]
 8009f10:	42a3      	cmp	r3, r4
 8009f12:	db01      	blt.n	8009f18 <__sfputc_r+0x16>
 8009f14:	290a      	cmp	r1, #10
 8009f16:	d103      	bne.n	8009f20 <__sfputc_r+0x1e>
 8009f18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f1c:	f000 b932 	b.w	800a184 <__swbuf_r>
 8009f20:	6813      	ldr	r3, [r2, #0]
 8009f22:	1c58      	adds	r0, r3, #1
 8009f24:	6010      	str	r0, [r2, #0]
 8009f26:	7019      	strb	r1, [r3, #0]
 8009f28:	4608      	mov	r0, r1
 8009f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <__sfputs_r>:
 8009f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f32:	4606      	mov	r6, r0
 8009f34:	460f      	mov	r7, r1
 8009f36:	4614      	mov	r4, r2
 8009f38:	18d5      	adds	r5, r2, r3
 8009f3a:	42ac      	cmp	r4, r5
 8009f3c:	d101      	bne.n	8009f42 <__sfputs_r+0x12>
 8009f3e:	2000      	movs	r0, #0
 8009f40:	e007      	b.n	8009f52 <__sfputs_r+0x22>
 8009f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f46:	463a      	mov	r2, r7
 8009f48:	4630      	mov	r0, r6
 8009f4a:	f7ff ffda 	bl	8009f02 <__sfputc_r>
 8009f4e:	1c43      	adds	r3, r0, #1
 8009f50:	d1f3      	bne.n	8009f3a <__sfputs_r+0xa>
 8009f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f54 <_vfiprintf_r>:
 8009f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f58:	460d      	mov	r5, r1
 8009f5a:	b09d      	sub	sp, #116	@ 0x74
 8009f5c:	4614      	mov	r4, r2
 8009f5e:	4698      	mov	r8, r3
 8009f60:	4606      	mov	r6, r0
 8009f62:	b118      	cbz	r0, 8009f6c <_vfiprintf_r+0x18>
 8009f64:	6a03      	ldr	r3, [r0, #32]
 8009f66:	b90b      	cbnz	r3, 8009f6c <_vfiprintf_r+0x18>
 8009f68:	f7fe f8a0 	bl	80080ac <__sinit>
 8009f6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f6e:	07d9      	lsls	r1, r3, #31
 8009f70:	d405      	bmi.n	8009f7e <_vfiprintf_r+0x2a>
 8009f72:	89ab      	ldrh	r3, [r5, #12]
 8009f74:	059a      	lsls	r2, r3, #22
 8009f76:	d402      	bmi.n	8009f7e <_vfiprintf_r+0x2a>
 8009f78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f7a:	f7fe fa0e 	bl	800839a <__retarget_lock_acquire_recursive>
 8009f7e:	89ab      	ldrh	r3, [r5, #12]
 8009f80:	071b      	lsls	r3, r3, #28
 8009f82:	d501      	bpl.n	8009f88 <_vfiprintf_r+0x34>
 8009f84:	692b      	ldr	r3, [r5, #16]
 8009f86:	b99b      	cbnz	r3, 8009fb0 <_vfiprintf_r+0x5c>
 8009f88:	4629      	mov	r1, r5
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f000 f938 	bl	800a200 <__swsetup_r>
 8009f90:	b170      	cbz	r0, 8009fb0 <_vfiprintf_r+0x5c>
 8009f92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f94:	07dc      	lsls	r4, r3, #31
 8009f96:	d504      	bpl.n	8009fa2 <_vfiprintf_r+0x4e>
 8009f98:	f04f 30ff 	mov.w	r0, #4294967295
 8009f9c:	b01d      	add	sp, #116	@ 0x74
 8009f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa2:	89ab      	ldrh	r3, [r5, #12]
 8009fa4:	0598      	lsls	r0, r3, #22
 8009fa6:	d4f7      	bmi.n	8009f98 <_vfiprintf_r+0x44>
 8009fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009faa:	f7fe f9f7 	bl	800839c <__retarget_lock_release_recursive>
 8009fae:	e7f3      	b.n	8009f98 <_vfiprintf_r+0x44>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fb4:	2320      	movs	r3, #32
 8009fb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fba:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fbe:	2330      	movs	r3, #48	@ 0x30
 8009fc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a170 <_vfiprintf_r+0x21c>
 8009fc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fc8:	f04f 0901 	mov.w	r9, #1
 8009fcc:	4623      	mov	r3, r4
 8009fce:	469a      	mov	sl, r3
 8009fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fd4:	b10a      	cbz	r2, 8009fda <_vfiprintf_r+0x86>
 8009fd6:	2a25      	cmp	r2, #37	@ 0x25
 8009fd8:	d1f9      	bne.n	8009fce <_vfiprintf_r+0x7a>
 8009fda:	ebba 0b04 	subs.w	fp, sl, r4
 8009fde:	d00b      	beq.n	8009ff8 <_vfiprintf_r+0xa4>
 8009fe0:	465b      	mov	r3, fp
 8009fe2:	4622      	mov	r2, r4
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	f7ff ffa2 	bl	8009f30 <__sfputs_r>
 8009fec:	3001      	adds	r0, #1
 8009fee:	f000 80a7 	beq.w	800a140 <_vfiprintf_r+0x1ec>
 8009ff2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ff4:	445a      	add	r2, fp
 8009ff6:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f000 809f 	beq.w	800a140 <_vfiprintf_r+0x1ec>
 800a002:	2300      	movs	r3, #0
 800a004:	f04f 32ff 	mov.w	r2, #4294967295
 800a008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a00c:	f10a 0a01 	add.w	sl, sl, #1
 800a010:	9304      	str	r3, [sp, #16]
 800a012:	9307      	str	r3, [sp, #28]
 800a014:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a018:	931a      	str	r3, [sp, #104]	@ 0x68
 800a01a:	4654      	mov	r4, sl
 800a01c:	2205      	movs	r2, #5
 800a01e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a022:	4853      	ldr	r0, [pc, #332]	@ (800a170 <_vfiprintf_r+0x21c>)
 800a024:	f7f6 f8f4 	bl	8000210 <memchr>
 800a028:	9a04      	ldr	r2, [sp, #16]
 800a02a:	b9d8      	cbnz	r0, 800a064 <_vfiprintf_r+0x110>
 800a02c:	06d1      	lsls	r1, r2, #27
 800a02e:	bf44      	itt	mi
 800a030:	2320      	movmi	r3, #32
 800a032:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a036:	0713      	lsls	r3, r2, #28
 800a038:	bf44      	itt	mi
 800a03a:	232b      	movmi	r3, #43	@ 0x2b
 800a03c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a040:	f89a 3000 	ldrb.w	r3, [sl]
 800a044:	2b2a      	cmp	r3, #42	@ 0x2a
 800a046:	d015      	beq.n	800a074 <_vfiprintf_r+0x120>
 800a048:	9a07      	ldr	r2, [sp, #28]
 800a04a:	4654      	mov	r4, sl
 800a04c:	2000      	movs	r0, #0
 800a04e:	f04f 0c0a 	mov.w	ip, #10
 800a052:	4621      	mov	r1, r4
 800a054:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a058:	3b30      	subs	r3, #48	@ 0x30
 800a05a:	2b09      	cmp	r3, #9
 800a05c:	d94b      	bls.n	800a0f6 <_vfiprintf_r+0x1a2>
 800a05e:	b1b0      	cbz	r0, 800a08e <_vfiprintf_r+0x13a>
 800a060:	9207      	str	r2, [sp, #28]
 800a062:	e014      	b.n	800a08e <_vfiprintf_r+0x13a>
 800a064:	eba0 0308 	sub.w	r3, r0, r8
 800a068:	fa09 f303 	lsl.w	r3, r9, r3
 800a06c:	4313      	orrs	r3, r2
 800a06e:	9304      	str	r3, [sp, #16]
 800a070:	46a2      	mov	sl, r4
 800a072:	e7d2      	b.n	800a01a <_vfiprintf_r+0xc6>
 800a074:	9b03      	ldr	r3, [sp, #12]
 800a076:	1d19      	adds	r1, r3, #4
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	9103      	str	r1, [sp, #12]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	bfbb      	ittet	lt
 800a080:	425b      	neglt	r3, r3
 800a082:	f042 0202 	orrlt.w	r2, r2, #2
 800a086:	9307      	strge	r3, [sp, #28]
 800a088:	9307      	strlt	r3, [sp, #28]
 800a08a:	bfb8      	it	lt
 800a08c:	9204      	strlt	r2, [sp, #16]
 800a08e:	7823      	ldrb	r3, [r4, #0]
 800a090:	2b2e      	cmp	r3, #46	@ 0x2e
 800a092:	d10a      	bne.n	800a0aa <_vfiprintf_r+0x156>
 800a094:	7863      	ldrb	r3, [r4, #1]
 800a096:	2b2a      	cmp	r3, #42	@ 0x2a
 800a098:	d132      	bne.n	800a100 <_vfiprintf_r+0x1ac>
 800a09a:	9b03      	ldr	r3, [sp, #12]
 800a09c:	1d1a      	adds	r2, r3, #4
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	9203      	str	r2, [sp, #12]
 800a0a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0a6:	3402      	adds	r4, #2
 800a0a8:	9305      	str	r3, [sp, #20]
 800a0aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a180 <_vfiprintf_r+0x22c>
 800a0ae:	7821      	ldrb	r1, [r4, #0]
 800a0b0:	2203      	movs	r2, #3
 800a0b2:	4650      	mov	r0, sl
 800a0b4:	f7f6 f8ac 	bl	8000210 <memchr>
 800a0b8:	b138      	cbz	r0, 800a0ca <_vfiprintf_r+0x176>
 800a0ba:	9b04      	ldr	r3, [sp, #16]
 800a0bc:	eba0 000a 	sub.w	r0, r0, sl
 800a0c0:	2240      	movs	r2, #64	@ 0x40
 800a0c2:	4082      	lsls	r2, r0
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	3401      	adds	r4, #1
 800a0c8:	9304      	str	r3, [sp, #16]
 800a0ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ce:	4829      	ldr	r0, [pc, #164]	@ (800a174 <_vfiprintf_r+0x220>)
 800a0d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0d4:	2206      	movs	r2, #6
 800a0d6:	f7f6 f89b 	bl	8000210 <memchr>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d03f      	beq.n	800a15e <_vfiprintf_r+0x20a>
 800a0de:	4b26      	ldr	r3, [pc, #152]	@ (800a178 <_vfiprintf_r+0x224>)
 800a0e0:	bb1b      	cbnz	r3, 800a12a <_vfiprintf_r+0x1d6>
 800a0e2:	9b03      	ldr	r3, [sp, #12]
 800a0e4:	3307      	adds	r3, #7
 800a0e6:	f023 0307 	bic.w	r3, r3, #7
 800a0ea:	3308      	adds	r3, #8
 800a0ec:	9303      	str	r3, [sp, #12]
 800a0ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0f0:	443b      	add	r3, r7
 800a0f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0f4:	e76a      	b.n	8009fcc <_vfiprintf_r+0x78>
 800a0f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	2001      	movs	r0, #1
 800a0fe:	e7a8      	b.n	800a052 <_vfiprintf_r+0xfe>
 800a100:	2300      	movs	r3, #0
 800a102:	3401      	adds	r4, #1
 800a104:	9305      	str	r3, [sp, #20]
 800a106:	4619      	mov	r1, r3
 800a108:	f04f 0c0a 	mov.w	ip, #10
 800a10c:	4620      	mov	r0, r4
 800a10e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a112:	3a30      	subs	r2, #48	@ 0x30
 800a114:	2a09      	cmp	r2, #9
 800a116:	d903      	bls.n	800a120 <_vfiprintf_r+0x1cc>
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d0c6      	beq.n	800a0aa <_vfiprintf_r+0x156>
 800a11c:	9105      	str	r1, [sp, #20]
 800a11e:	e7c4      	b.n	800a0aa <_vfiprintf_r+0x156>
 800a120:	fb0c 2101 	mla	r1, ip, r1, r2
 800a124:	4604      	mov	r4, r0
 800a126:	2301      	movs	r3, #1
 800a128:	e7f0      	b.n	800a10c <_vfiprintf_r+0x1b8>
 800a12a:	ab03      	add	r3, sp, #12
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	462a      	mov	r2, r5
 800a130:	4b12      	ldr	r3, [pc, #72]	@ (800a17c <_vfiprintf_r+0x228>)
 800a132:	a904      	add	r1, sp, #16
 800a134:	4630      	mov	r0, r6
 800a136:	f7fd fb77 	bl	8007828 <_printf_float>
 800a13a:	4607      	mov	r7, r0
 800a13c:	1c78      	adds	r0, r7, #1
 800a13e:	d1d6      	bne.n	800a0ee <_vfiprintf_r+0x19a>
 800a140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a142:	07d9      	lsls	r1, r3, #31
 800a144:	d405      	bmi.n	800a152 <_vfiprintf_r+0x1fe>
 800a146:	89ab      	ldrh	r3, [r5, #12]
 800a148:	059a      	lsls	r2, r3, #22
 800a14a:	d402      	bmi.n	800a152 <_vfiprintf_r+0x1fe>
 800a14c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a14e:	f7fe f925 	bl	800839c <__retarget_lock_release_recursive>
 800a152:	89ab      	ldrh	r3, [r5, #12]
 800a154:	065b      	lsls	r3, r3, #25
 800a156:	f53f af1f 	bmi.w	8009f98 <_vfiprintf_r+0x44>
 800a15a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a15c:	e71e      	b.n	8009f9c <_vfiprintf_r+0x48>
 800a15e:	ab03      	add	r3, sp, #12
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	462a      	mov	r2, r5
 800a164:	4b05      	ldr	r3, [pc, #20]	@ (800a17c <_vfiprintf_r+0x228>)
 800a166:	a904      	add	r1, sp, #16
 800a168:	4630      	mov	r0, r6
 800a16a:	f7fd fdf5 	bl	8007d58 <_printf_i>
 800a16e:	e7e4      	b.n	800a13a <_vfiprintf_r+0x1e6>
 800a170:	0800a886 	.word	0x0800a886
 800a174:	0800a890 	.word	0x0800a890
 800a178:	08007829 	.word	0x08007829
 800a17c:	08009f31 	.word	0x08009f31
 800a180:	0800a88c 	.word	0x0800a88c

0800a184 <__swbuf_r>:
 800a184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a186:	460e      	mov	r6, r1
 800a188:	4614      	mov	r4, r2
 800a18a:	4605      	mov	r5, r0
 800a18c:	b118      	cbz	r0, 800a196 <__swbuf_r+0x12>
 800a18e:	6a03      	ldr	r3, [r0, #32]
 800a190:	b90b      	cbnz	r3, 800a196 <__swbuf_r+0x12>
 800a192:	f7fd ff8b 	bl	80080ac <__sinit>
 800a196:	69a3      	ldr	r3, [r4, #24]
 800a198:	60a3      	str	r3, [r4, #8]
 800a19a:	89a3      	ldrh	r3, [r4, #12]
 800a19c:	071a      	lsls	r2, r3, #28
 800a19e:	d501      	bpl.n	800a1a4 <__swbuf_r+0x20>
 800a1a0:	6923      	ldr	r3, [r4, #16]
 800a1a2:	b943      	cbnz	r3, 800a1b6 <__swbuf_r+0x32>
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	f000 f82a 	bl	800a200 <__swsetup_r>
 800a1ac:	b118      	cbz	r0, 800a1b6 <__swbuf_r+0x32>
 800a1ae:	f04f 37ff 	mov.w	r7, #4294967295
 800a1b2:	4638      	mov	r0, r7
 800a1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1b6:	6823      	ldr	r3, [r4, #0]
 800a1b8:	6922      	ldr	r2, [r4, #16]
 800a1ba:	1a98      	subs	r0, r3, r2
 800a1bc:	6963      	ldr	r3, [r4, #20]
 800a1be:	b2f6      	uxtb	r6, r6
 800a1c0:	4283      	cmp	r3, r0
 800a1c2:	4637      	mov	r7, r6
 800a1c4:	dc05      	bgt.n	800a1d2 <__swbuf_r+0x4e>
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	f7ff fda7 	bl	8009d1c <_fflush_r>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d1ed      	bne.n	800a1ae <__swbuf_r+0x2a>
 800a1d2:	68a3      	ldr	r3, [r4, #8]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	60a3      	str	r3, [r4, #8]
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	6022      	str	r2, [r4, #0]
 800a1de:	701e      	strb	r6, [r3, #0]
 800a1e0:	6962      	ldr	r2, [r4, #20]
 800a1e2:	1c43      	adds	r3, r0, #1
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d004      	beq.n	800a1f2 <__swbuf_r+0x6e>
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	07db      	lsls	r3, r3, #31
 800a1ec:	d5e1      	bpl.n	800a1b2 <__swbuf_r+0x2e>
 800a1ee:	2e0a      	cmp	r6, #10
 800a1f0:	d1df      	bne.n	800a1b2 <__swbuf_r+0x2e>
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	f7ff fd91 	bl	8009d1c <_fflush_r>
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	d0d9      	beq.n	800a1b2 <__swbuf_r+0x2e>
 800a1fe:	e7d6      	b.n	800a1ae <__swbuf_r+0x2a>

0800a200 <__swsetup_r>:
 800a200:	b538      	push	{r3, r4, r5, lr}
 800a202:	4b29      	ldr	r3, [pc, #164]	@ (800a2a8 <__swsetup_r+0xa8>)
 800a204:	4605      	mov	r5, r0
 800a206:	6818      	ldr	r0, [r3, #0]
 800a208:	460c      	mov	r4, r1
 800a20a:	b118      	cbz	r0, 800a214 <__swsetup_r+0x14>
 800a20c:	6a03      	ldr	r3, [r0, #32]
 800a20e:	b90b      	cbnz	r3, 800a214 <__swsetup_r+0x14>
 800a210:	f7fd ff4c 	bl	80080ac <__sinit>
 800a214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a218:	0719      	lsls	r1, r3, #28
 800a21a:	d422      	bmi.n	800a262 <__swsetup_r+0x62>
 800a21c:	06da      	lsls	r2, r3, #27
 800a21e:	d407      	bmi.n	800a230 <__swsetup_r+0x30>
 800a220:	2209      	movs	r2, #9
 800a222:	602a      	str	r2, [r5, #0]
 800a224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a228:	81a3      	strh	r3, [r4, #12]
 800a22a:	f04f 30ff 	mov.w	r0, #4294967295
 800a22e:	e033      	b.n	800a298 <__swsetup_r+0x98>
 800a230:	0758      	lsls	r0, r3, #29
 800a232:	d512      	bpl.n	800a25a <__swsetup_r+0x5a>
 800a234:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a236:	b141      	cbz	r1, 800a24a <__swsetup_r+0x4a>
 800a238:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a23c:	4299      	cmp	r1, r3
 800a23e:	d002      	beq.n	800a246 <__swsetup_r+0x46>
 800a240:	4628      	mov	r0, r5
 800a242:	f7fe ff15 	bl	8009070 <_free_r>
 800a246:	2300      	movs	r3, #0
 800a248:	6363      	str	r3, [r4, #52]	@ 0x34
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a250:	81a3      	strh	r3, [r4, #12]
 800a252:	2300      	movs	r3, #0
 800a254:	6063      	str	r3, [r4, #4]
 800a256:	6923      	ldr	r3, [r4, #16]
 800a258:	6023      	str	r3, [r4, #0]
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	f043 0308 	orr.w	r3, r3, #8
 800a260:	81a3      	strh	r3, [r4, #12]
 800a262:	6923      	ldr	r3, [r4, #16]
 800a264:	b94b      	cbnz	r3, 800a27a <__swsetup_r+0x7a>
 800a266:	89a3      	ldrh	r3, [r4, #12]
 800a268:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a26c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a270:	d003      	beq.n	800a27a <__swsetup_r+0x7a>
 800a272:	4621      	mov	r1, r4
 800a274:	4628      	mov	r0, r5
 800a276:	f000 f883 	bl	800a380 <__smakebuf_r>
 800a27a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a27e:	f013 0201 	ands.w	r2, r3, #1
 800a282:	d00a      	beq.n	800a29a <__swsetup_r+0x9a>
 800a284:	2200      	movs	r2, #0
 800a286:	60a2      	str	r2, [r4, #8]
 800a288:	6962      	ldr	r2, [r4, #20]
 800a28a:	4252      	negs	r2, r2
 800a28c:	61a2      	str	r2, [r4, #24]
 800a28e:	6922      	ldr	r2, [r4, #16]
 800a290:	b942      	cbnz	r2, 800a2a4 <__swsetup_r+0xa4>
 800a292:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a296:	d1c5      	bne.n	800a224 <__swsetup_r+0x24>
 800a298:	bd38      	pop	{r3, r4, r5, pc}
 800a29a:	0799      	lsls	r1, r3, #30
 800a29c:	bf58      	it	pl
 800a29e:	6962      	ldrpl	r2, [r4, #20]
 800a2a0:	60a2      	str	r2, [r4, #8]
 800a2a2:	e7f4      	b.n	800a28e <__swsetup_r+0x8e>
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	e7f7      	b.n	800a298 <__swsetup_r+0x98>
 800a2a8:	2000001c 	.word	0x2000001c

0800a2ac <_raise_r>:
 800a2ac:	291f      	cmp	r1, #31
 800a2ae:	b538      	push	{r3, r4, r5, lr}
 800a2b0:	4605      	mov	r5, r0
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	d904      	bls.n	800a2c0 <_raise_r+0x14>
 800a2b6:	2316      	movs	r3, #22
 800a2b8:	6003      	str	r3, [r0, #0]
 800a2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a2c2:	b112      	cbz	r2, 800a2ca <_raise_r+0x1e>
 800a2c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2c8:	b94b      	cbnz	r3, 800a2de <_raise_r+0x32>
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	f000 f830 	bl	800a330 <_getpid_r>
 800a2d0:	4622      	mov	r2, r4
 800a2d2:	4601      	mov	r1, r0
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2da:	f000 b817 	b.w	800a30c <_kill_r>
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d00a      	beq.n	800a2f8 <_raise_r+0x4c>
 800a2e2:	1c59      	adds	r1, r3, #1
 800a2e4:	d103      	bne.n	800a2ee <_raise_r+0x42>
 800a2e6:	2316      	movs	r3, #22
 800a2e8:	6003      	str	r3, [r0, #0]
 800a2ea:	2001      	movs	r0, #1
 800a2ec:	e7e7      	b.n	800a2be <_raise_r+0x12>
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	4798      	blx	r3
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	e7e0      	b.n	800a2be <_raise_r+0x12>

0800a2fc <raise>:
 800a2fc:	4b02      	ldr	r3, [pc, #8]	@ (800a308 <raise+0xc>)
 800a2fe:	4601      	mov	r1, r0
 800a300:	6818      	ldr	r0, [r3, #0]
 800a302:	f7ff bfd3 	b.w	800a2ac <_raise_r>
 800a306:	bf00      	nop
 800a308:	2000001c 	.word	0x2000001c

0800a30c <_kill_r>:
 800a30c:	b538      	push	{r3, r4, r5, lr}
 800a30e:	4d07      	ldr	r5, [pc, #28]	@ (800a32c <_kill_r+0x20>)
 800a310:	2300      	movs	r3, #0
 800a312:	4604      	mov	r4, r0
 800a314:	4608      	mov	r0, r1
 800a316:	4611      	mov	r1, r2
 800a318:	602b      	str	r3, [r5, #0]
 800a31a:	f7f7 fa8f 	bl	800183c <_kill>
 800a31e:	1c43      	adds	r3, r0, #1
 800a320:	d102      	bne.n	800a328 <_kill_r+0x1c>
 800a322:	682b      	ldr	r3, [r5, #0]
 800a324:	b103      	cbz	r3, 800a328 <_kill_r+0x1c>
 800a326:	6023      	str	r3, [r4, #0]
 800a328:	bd38      	pop	{r3, r4, r5, pc}
 800a32a:	bf00      	nop
 800a32c:	20004fa8 	.word	0x20004fa8

0800a330 <_getpid_r>:
 800a330:	f7f7 ba7c 	b.w	800182c <_getpid>

0800a334 <__swhatbuf_r>:
 800a334:	b570      	push	{r4, r5, r6, lr}
 800a336:	460c      	mov	r4, r1
 800a338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a33c:	2900      	cmp	r1, #0
 800a33e:	b096      	sub	sp, #88	@ 0x58
 800a340:	4615      	mov	r5, r2
 800a342:	461e      	mov	r6, r3
 800a344:	da0d      	bge.n	800a362 <__swhatbuf_r+0x2e>
 800a346:	89a3      	ldrh	r3, [r4, #12]
 800a348:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a34c:	f04f 0100 	mov.w	r1, #0
 800a350:	bf14      	ite	ne
 800a352:	2340      	movne	r3, #64	@ 0x40
 800a354:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a358:	2000      	movs	r0, #0
 800a35a:	6031      	str	r1, [r6, #0]
 800a35c:	602b      	str	r3, [r5, #0]
 800a35e:	b016      	add	sp, #88	@ 0x58
 800a360:	bd70      	pop	{r4, r5, r6, pc}
 800a362:	466a      	mov	r2, sp
 800a364:	f000 f848 	bl	800a3f8 <_fstat_r>
 800a368:	2800      	cmp	r0, #0
 800a36a:	dbec      	blt.n	800a346 <__swhatbuf_r+0x12>
 800a36c:	9901      	ldr	r1, [sp, #4]
 800a36e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a372:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a376:	4259      	negs	r1, r3
 800a378:	4159      	adcs	r1, r3
 800a37a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a37e:	e7eb      	b.n	800a358 <__swhatbuf_r+0x24>

0800a380 <__smakebuf_r>:
 800a380:	898b      	ldrh	r3, [r1, #12]
 800a382:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a384:	079d      	lsls	r5, r3, #30
 800a386:	4606      	mov	r6, r0
 800a388:	460c      	mov	r4, r1
 800a38a:	d507      	bpl.n	800a39c <__smakebuf_r+0x1c>
 800a38c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a390:	6023      	str	r3, [r4, #0]
 800a392:	6123      	str	r3, [r4, #16]
 800a394:	2301      	movs	r3, #1
 800a396:	6163      	str	r3, [r4, #20]
 800a398:	b003      	add	sp, #12
 800a39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a39c:	ab01      	add	r3, sp, #4
 800a39e:	466a      	mov	r2, sp
 800a3a0:	f7ff ffc8 	bl	800a334 <__swhatbuf_r>
 800a3a4:	9f00      	ldr	r7, [sp, #0]
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	4639      	mov	r1, r7
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	f7fe fed4 	bl	8009158 <_malloc_r>
 800a3b0:	b948      	cbnz	r0, 800a3c6 <__smakebuf_r+0x46>
 800a3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3b6:	059a      	lsls	r2, r3, #22
 800a3b8:	d4ee      	bmi.n	800a398 <__smakebuf_r+0x18>
 800a3ba:	f023 0303 	bic.w	r3, r3, #3
 800a3be:	f043 0302 	orr.w	r3, r3, #2
 800a3c2:	81a3      	strh	r3, [r4, #12]
 800a3c4:	e7e2      	b.n	800a38c <__smakebuf_r+0xc>
 800a3c6:	89a3      	ldrh	r3, [r4, #12]
 800a3c8:	6020      	str	r0, [r4, #0]
 800a3ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3ce:	81a3      	strh	r3, [r4, #12]
 800a3d0:	9b01      	ldr	r3, [sp, #4]
 800a3d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a3d6:	b15b      	cbz	r3, 800a3f0 <__smakebuf_r+0x70>
 800a3d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3dc:	4630      	mov	r0, r6
 800a3de:	f000 f81d 	bl	800a41c <_isatty_r>
 800a3e2:	b128      	cbz	r0, 800a3f0 <__smakebuf_r+0x70>
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	f023 0303 	bic.w	r3, r3, #3
 800a3ea:	f043 0301 	orr.w	r3, r3, #1
 800a3ee:	81a3      	strh	r3, [r4, #12]
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	431d      	orrs	r5, r3
 800a3f4:	81a5      	strh	r5, [r4, #12]
 800a3f6:	e7cf      	b.n	800a398 <__smakebuf_r+0x18>

0800a3f8 <_fstat_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	4d07      	ldr	r5, [pc, #28]	@ (800a418 <_fstat_r+0x20>)
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	4604      	mov	r4, r0
 800a400:	4608      	mov	r0, r1
 800a402:	4611      	mov	r1, r2
 800a404:	602b      	str	r3, [r5, #0]
 800a406:	f7f7 fa79 	bl	80018fc <_fstat>
 800a40a:	1c43      	adds	r3, r0, #1
 800a40c:	d102      	bne.n	800a414 <_fstat_r+0x1c>
 800a40e:	682b      	ldr	r3, [r5, #0]
 800a410:	b103      	cbz	r3, 800a414 <_fstat_r+0x1c>
 800a412:	6023      	str	r3, [r4, #0]
 800a414:	bd38      	pop	{r3, r4, r5, pc}
 800a416:	bf00      	nop
 800a418:	20004fa8 	.word	0x20004fa8

0800a41c <_isatty_r>:
 800a41c:	b538      	push	{r3, r4, r5, lr}
 800a41e:	4d06      	ldr	r5, [pc, #24]	@ (800a438 <_isatty_r+0x1c>)
 800a420:	2300      	movs	r3, #0
 800a422:	4604      	mov	r4, r0
 800a424:	4608      	mov	r0, r1
 800a426:	602b      	str	r3, [r5, #0]
 800a428:	f7f7 fa78 	bl	800191c <_isatty>
 800a42c:	1c43      	adds	r3, r0, #1
 800a42e:	d102      	bne.n	800a436 <_isatty_r+0x1a>
 800a430:	682b      	ldr	r3, [r5, #0]
 800a432:	b103      	cbz	r3, 800a436 <_isatty_r+0x1a>
 800a434:	6023      	str	r3, [r4, #0]
 800a436:	bd38      	pop	{r3, r4, r5, pc}
 800a438:	20004fa8 	.word	0x20004fa8

0800a43c <_init>:
 800a43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43e:	bf00      	nop
 800a440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a442:	bc08      	pop	{r3}
 800a444:	469e      	mov	lr, r3
 800a446:	4770      	bx	lr

0800a448 <_fini>:
 800a448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44a:	bf00      	nop
 800a44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a44e:	bc08      	pop	{r3}
 800a450:	469e      	mov	lr, r3
 800a452:	4770      	bx	lr
