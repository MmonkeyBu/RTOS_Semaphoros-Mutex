
Atvidade_4_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006870  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006a40  08006a40  00007a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b68  08006b68  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006b68  08006b68  00007b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b70  08006b70  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b70  08006b70  00007b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b74  08006b74  00007b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006b78  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be8  20000060  08006bd8  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c48  08006bd8  00008c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e35  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000357f  00000000  00000000  00020ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00024448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001031  00000000  00000000  00025910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003346  00000000  00000000  00026941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178cc  00000000  00000000  00029c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db275  00000000  00000000  00041553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c7c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ac4  00000000  00000000  0011c80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001222d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006a28 	.word	0x08006a28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08006a28 	.word	0x08006a28

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f000 fb1c 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f840 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 f8c8 	bl	80006ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055c:	f000 f89c 	bl	8000698 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000560:	f002 feea 	bl	8003338 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of MeuSemaforoContador */
  MeuSemaforoContadorHandle = osSemaphoreNew(2, 0, &MeuSemaforoContador_attributes);
 8000564:	4a11      	ldr	r2, [pc, #68]	@ (80005ac <main+0x60>)
 8000566:	2100      	movs	r1, #0
 8000568:	2002      	movs	r0, #2
 800056a:	f002 ffdc 	bl	8003526 <osSemaphoreNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a0f      	ldr	r2, [pc, #60]	@ (80005b0 <main+0x64>)
 8000572:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_1 */
  Task_1Handle = osThreadNew(StartTask1, NULL, &Task_1_attributes);
 8000574:	4a0f      	ldr	r2, [pc, #60]	@ (80005b4 <main+0x68>)
 8000576:	2100      	movs	r1, #0
 8000578:	480f      	ldr	r0, [pc, #60]	@ (80005b8 <main+0x6c>)
 800057a:	f002 ff27 	bl	80033cc <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a0e      	ldr	r2, [pc, #56]	@ (80005bc <main+0x70>)
 8000582:	6013      	str	r3, [r2, #0]

  /* creation of Task_2 */
  Task_2Handle = osThreadNew(StartTask2, NULL, &Task_2_attributes);
 8000584:	4a0e      	ldr	r2, [pc, #56]	@ (80005c0 <main+0x74>)
 8000586:	2100      	movs	r1, #0
 8000588:	480e      	ldr	r0, [pc, #56]	@ (80005c4 <main+0x78>)
 800058a:	f002 ff1f 	bl	80033cc <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a0d      	ldr	r2, [pc, #52]	@ (80005c8 <main+0x7c>)
 8000592:	6013      	str	r3, [r2, #0]

  /* creation of Task_3 */
  Task_3Handle = osThreadNew(StartTask3, NULL, &Task_3_attributes);
 8000594:	4a0d      	ldr	r2, [pc, #52]	@ (80005cc <main+0x80>)
 8000596:	2100      	movs	r1, #0
 8000598:	480d      	ldr	r0, [pc, #52]	@ (80005d0 <main+0x84>)
 800059a:	f002 ff17 	bl	80033cc <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a0c      	ldr	r2, [pc, #48]	@ (80005d4 <main+0x88>)
 80005a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a4:	f002 feec 	bl	8003380 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <main+0x5c>
 80005ac:	08006b40 	.word	0x08006b40
 80005b0:	200000d0 	.word	0x200000d0
 80005b4:	08006ad4 	.word	0x08006ad4
 80005b8:	08000721 	.word	0x08000721
 80005bc:	200000c4 	.word	0x200000c4
 80005c0:	08006af8 	.word	0x08006af8
 80005c4:	080007dd 	.word	0x080007dd
 80005c8:	200000c8 	.word	0x200000c8
 80005cc:	08006b1c 	.word	0x08006b1c
 80005d0:	08000899 	.word	0x08000899
 80005d4:	200000cc 	.word	0x200000cc

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	@ 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f006 f92e 	bl	8006848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b23      	ldr	r3, [pc, #140]	@ (8000690 <SystemClock_Config+0xb8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	4a22      	ldr	r2, [pc, #136]	@ (8000690 <SystemClock_Config+0xb8>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
 800060c:	4b20      	ldr	r3, [pc, #128]	@ (8000690 <SystemClock_Config+0xb8>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000618:	2300      	movs	r3, #0
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	4b1d      	ldr	r3, [pc, #116]	@ (8000694 <SystemClock_Config+0xbc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000624:	4a1b      	ldr	r2, [pc, #108]	@ (8000694 <SystemClock_Config+0xbc>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <SystemClock_Config+0xbc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000644:	2300      	movs	r3, #0
 8000646:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4618      	mov	r0, r3
 800064e:	f001 f8dd 	bl	800180c <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000658:	f000 f938 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fdd2 	bl	8001220 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000682:	f000 f923 	bl	80008cc <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	@ 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800069c:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 800069e:	4a12      	ldr	r2, [pc, #72]	@ (80006e8 <MX_USART2_UART_Init+0x50>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f001 fdd6 	bl	8002280 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006da:	f000 f8f7 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000007c 	.word	0x2000007c
 80006e8:	40004400 	.word	0x40004400

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_GPIO_Init+0x30>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a08      	ldr	r2, [pc, #32]	@ (800071c <MX_GPIO_Init+0x30>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_GPIO_Init+0x30>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800

08000720 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000720:	b5b0      	push	{r4, r5, r7, lr}
 8000722:	b08c      	sub	sp, #48	@ 0x30
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char Executando [] = "Task 1 Executando";
 8000728:	4b28      	ldr	r3, [pc, #160]	@ (80007cc <StartTask1+0xac>)
 800072a:	f107 041c 	add.w	r4, r7, #28
 800072e:	461d      	mov	r5, r3
 8000730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000734:	682b      	ldr	r3, [r5, #0]
 8000736:	8023      	strh	r3, [r4, #0]
	//PEGA O SEMÁFORO PARA SI
	osSemaphoreAcquire(MeuSemaforoContadorHandle, osWaitForever);
 8000738:	4b25      	ldr	r3, [pc, #148]	@ (80007d0 <StartTask1+0xb0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f04f 31ff 	mov.w	r1, #4294967295
 8000740:	4618      	mov	r0, r3
 8000742:	f002 ff79 	bl	8003638 <osSemaphoreAcquire>
	char str [] = "Task 1 iniciando";
 8000746:	4b23      	ldr	r3, [pc, #140]	@ (80007d4 <StartTask1+0xb4>)
 8000748:	f107 0408 	add.w	r4, r7, #8
 800074c:	461d      	mov	r5, r3
 800074e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000752:	682b      	ldr	r3, [r5, #0]
 8000754:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), HAL_MAX_DELAY);
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff fd58 	bl	8000210 <strlen>
 8000760:	4603      	mov	r3, r0
 8000762:	b29a      	uxth	r2, r3
 8000764:	f107 0108 	add.w	r1, r7, #8
 8000768:	f04f 33ff 	mov.w	r3, #4294967295
 800076c:	481a      	ldr	r0, [pc, #104]	@ (80007d8 <StartTask1+0xb8>)
 800076e:	f001 fdd7 	bl	8002320 <HAL_UART_Transmit>
	//TRANSMITE QUANTOS ESPAÇOS TEM NO SEMAFORO
	uint8_t STRemINT;
	STRemINT = osSemaphoreGetCount(MeuSemaforoContadorHandle);
 8000772:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <StartTask1+0xb0>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f002 ffb0 	bl	80036dc <osSemaphoreGetCount>
 800077c:	4603      	mov	r3, r0
 800077e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	HAL_UART_Transmit(&huart2, (uint8_t *) STRemINT, strlen(STRemINT), HAL_MAX_DELAY);
 8000782:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000786:	461c      	mov	r4, r3
 8000788:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fd3f 	bl	8000210 <strlen>
 8000792:	4603      	mov	r3, r0
 8000794:	b29a      	uxth	r2, r3
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	4621      	mov	r1, r4
 800079c:	480e      	ldr	r0, [pc, #56]	@ (80007d8 <StartTask1+0xb8>)
 800079e:	f001 fdbf 	bl	8002320 <HAL_UART_Transmit>

  /* Infinite loop */
  for(;;)
  {
	//MOSTRA QUE ESTÁ EXECUTANDO
	HAL_UART_Transmit(&huart2, (uint8_t *) Executando, strlen(Executando), HAL_MAX_DELAY);
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fd32 	bl	8000210 <strlen>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	f107 011c 	add.w	r1, r7, #28
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	4807      	ldr	r0, [pc, #28]	@ (80007d8 <StartTask1+0xb8>)
 80007ba:	f001 fdb1 	bl	8002320 <HAL_UART_Transmit>
    osDelay(500);
 80007be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007c2:	f002 fe95 	bl	80034f0 <osDelay>
	HAL_UART_Transmit(&huart2, (uint8_t *) Executando, strlen(Executando), HAL_MAX_DELAY);
 80007c6:	bf00      	nop
 80007c8:	e7eb      	b.n	80007a2 <StartTask1+0x82>
 80007ca:	bf00      	nop
 80007cc:	08006a6c 	.word	0x08006a6c
 80007d0:	200000d0 	.word	0x200000d0
 80007d4:	08006a80 	.word	0x08006a80
 80007d8:	2000007c 	.word	0x2000007c

080007dc <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80007dc:	b5b0      	push	{r4, r5, r7, lr}
 80007de:	b08c      	sub	sp, #48	@ 0x30
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
	char Executando [] = "Task 2 Executando";
 80007e4:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <StartTask2+0xac>)
 80007e6:	f107 041c 	add.w	r4, r7, #28
 80007ea:	461d      	mov	r5, r3
 80007ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f0:	682b      	ldr	r3, [r5, #0]
 80007f2:	8023      	strh	r3, [r4, #0]
	//PEGA O SEMÁFORO PARA SI
	osSemaphoreAcquire(MeuSemaforoContadorHandle, osWaitForever);
 80007f4:	4b25      	ldr	r3, [pc, #148]	@ (800088c <StartTask2+0xb0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f04f 31ff 	mov.w	r1, #4294967295
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 ff1b 	bl	8003638 <osSemaphoreAcquire>
	char str [] = "Task 2 iniciando";
 8000802:	4b23      	ldr	r3, [pc, #140]	@ (8000890 <StartTask2+0xb4>)
 8000804:	f107 0408 	add.w	r4, r7, #8
 8000808:	461d      	mov	r5, r3
 800080a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080e:	682b      	ldr	r3, [r5, #0]
 8000810:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), HAL_MAX_DELAY);
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fcfa 	bl	8000210 <strlen>
 800081c:	4603      	mov	r3, r0
 800081e:	b29a      	uxth	r2, r3
 8000820:	f107 0108 	add.w	r1, r7, #8
 8000824:	f04f 33ff 	mov.w	r3, #4294967295
 8000828:	481a      	ldr	r0, [pc, #104]	@ (8000894 <StartTask2+0xb8>)
 800082a:	f001 fd79 	bl	8002320 <HAL_UART_Transmit>

	//TRANSMITE QUANTOS ESPAÇOS TEM NO SEMAFORO
	uint8_t STRemINT;
	STRemINT = osSemaphoreGetCount(MeuSemaforoContadorHandle);
 800082e:	4b17      	ldr	r3, [pc, #92]	@ (800088c <StartTask2+0xb0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	f002 ff52 	bl	80036dc <osSemaphoreGetCount>
 8000838:	4603      	mov	r3, r0
 800083a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	HAL_UART_Transmit(&huart2, (uint8_t *) STRemINT, strlen(STRemINT), HAL_MAX_DELAY);
 800083e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000842:	461c      	mov	r4, r3
 8000844:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fce1 	bl	8000210 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	b29a      	uxth	r2, r3
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	4621      	mov	r1, r4
 8000858:	480e      	ldr	r0, [pc, #56]	@ (8000894 <StartTask2+0xb8>)
 800085a:	f001 fd61 	bl	8002320 <HAL_UART_Transmit>

  /* Infinite loop */
  for(;;)
  {
	//MOSTRA QUE ESTÁ EXECUTANDO
	HAL_UART_Transmit(&huart2, (uint8_t *) Executando, strlen(Executando), HAL_MAX_DELAY);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fcd4 	bl	8000210 <strlen>
 8000868:	4603      	mov	r3, r0
 800086a:	b29a      	uxth	r2, r3
 800086c:	f107 011c 	add.w	r1, r7, #28
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	4807      	ldr	r0, [pc, #28]	@ (8000894 <StartTask2+0xb8>)
 8000876:	f001 fd53 	bl	8002320 <HAL_UART_Transmit>
    osDelay(500);
 800087a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800087e:	f002 fe37 	bl	80034f0 <osDelay>
	HAL_UART_Transmit(&huart2, (uint8_t *) Executando, strlen(Executando), HAL_MAX_DELAY);
 8000882:	bf00      	nop
 8000884:	e7eb      	b.n	800085e <StartTask2+0x82>
 8000886:	bf00      	nop
 8000888:	08006a94 	.word	0x08006a94
 800088c:	200000d0 	.word	0x200000d0
 8000890:	08006aa8 	.word	0x08006aa8
 8000894:	2000007c 	.word	0x2000007c

08000898 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f002 fe25 	bl	80034f0 <osDelay>
 80008a6:	e7fb      	b.n	80008a0 <StartTask3+0x8>

080008a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a04      	ldr	r2, [pc, #16]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d101      	bne.n	80008be <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80008ba:	f000 f989 	bl	8000bd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40010000 	.word	0x40010000

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <Error_Handler+0x8>

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <HAL_MspInit+0x54>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e6:	4a11      	ldr	r2, [pc, #68]	@ (800092c <HAL_MspInit+0x54>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <HAL_MspInit+0x54>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <HAL_MspInit+0x54>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	4a0a      	ldr	r2, [pc, #40]	@ (800092c <HAL_MspInit+0x54>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	@ 0x40
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <HAL_MspInit+0x54>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	210f      	movs	r1, #15
 800091a:	f06f 0001 	mvn.w	r0, #1
 800091e:	f000 fa2f 	bl	8000d80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	@ 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a1d      	ldr	r2, [pc, #116]	@ (80009c4 <HAL_UART_MspInit+0x94>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d133      	bne.n	80009ba <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <HAL_UART_MspInit+0x98>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	4a1b      	ldr	r2, [pc, #108]	@ (80009c8 <HAL_UART_MspInit+0x98>)
 800095c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000960:	6413      	str	r3, [r2, #64]	@ 0x40
 8000962:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <HAL_UART_MspInit+0x98>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <HAL_UART_MspInit+0x98>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a14      	ldr	r2, [pc, #80]	@ (80009c8 <HAL_UART_MspInit+0x98>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <HAL_UART_MspInit+0x98>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800098a:	230c      	movs	r3, #12
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800099a:	2307      	movs	r3, #7
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4809      	ldr	r0, [pc, #36]	@ (80009cc <HAL_UART_MspInit+0x9c>)
 80009a6:	f000 faa7 	bl	8000ef8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2105      	movs	r1, #5
 80009ae:	2026      	movs	r0, #38	@ 0x26
 80009b0:	f000 f9e6 	bl	8000d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009b4:	2026      	movs	r0, #38	@ 0x26
 80009b6:	f000 f9ff 	bl	8000db8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	@ 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000

080009d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	@ 0x30
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa0 <HAL_InitTick+0xd0>)
 80009e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e8:	4a2d      	ldr	r2, [pc, #180]	@ (8000aa0 <HAL_InitTick+0xd0>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f0:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa0 <HAL_InitTick+0xd0>)
 80009f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009fc:	f107 020c 	add.w	r2, r7, #12
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fd24 	bl	8001454 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a0c:	f000 fd0e 	bl	800142c <HAL_RCC_GetPCLK2Freq>
 8000a10:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a14:	4a23      	ldr	r2, [pc, #140]	@ (8000aa4 <HAL_InitTick+0xd4>)
 8000a16:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1a:	0c9b      	lsrs	r3, r3, #18
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a20:	4b21      	ldr	r3, [pc, #132]	@ (8000aa8 <HAL_InitTick+0xd8>)
 8000a22:	4a22      	ldr	r2, [pc, #136]	@ (8000aac <HAL_InitTick+0xdc>)
 8000a24:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a26:	4b20      	ldr	r3, [pc, #128]	@ (8000aa8 <HAL_InitTick+0xd8>)
 8000a28:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000aa8 <HAL_InitTick+0xd8>)
 8000a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a34:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa8 <HAL_InitTick+0xd8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <HAL_InitTick+0xd8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a40:	4b19      	ldr	r3, [pc, #100]	@ (8000aa8 <HAL_InitTick+0xd8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a46:	4818      	ldr	r0, [pc, #96]	@ (8000aa8 <HAL_InitTick+0xd8>)
 8000a48:	f001 f97e 	bl	8001d48 <HAL_TIM_Base_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d11b      	bne.n	8000a92 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a5a:	4813      	ldr	r0, [pc, #76]	@ (8000aa8 <HAL_InitTick+0xd8>)
 8000a5c:	f001 f9ce 	bl	8001dfc <HAL_TIM_Base_Start_IT>
 8000a60:	4603      	mov	r3, r0
 8000a62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d111      	bne.n	8000a92 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a6e:	2019      	movs	r0, #25
 8000a70:	f000 f9a2 	bl	8000db8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b0f      	cmp	r3, #15
 8000a78:	d808      	bhi.n	8000a8c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	6879      	ldr	r1, [r7, #4]
 8000a7e:	2019      	movs	r0, #25
 8000a80:	f000 f97e 	bl	8000d80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a84:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <HAL_InitTick+0xe0>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
 8000a8a:	e002      	b.n	8000a92 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3730      	adds	r7, #48	@ 0x30
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	431bde83 	.word	0x431bde83
 8000aa8:	200000d4 	.word	0x200000d4
 8000aac:	40010000 	.word	0x40010000
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <NMI_Handler+0x4>

08000abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <MemManage_Handler+0x4>

08000acc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000af0:	4802      	ldr	r0, [pc, #8]	@ (8000afc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000af2:	f001 f9f3 	bl	8001edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000d4 	.word	0x200000d4

08000b00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <USART2_IRQHandler+0x10>)
 8000b06:	f001 fc97 	bl	8002438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000007c 	.word	0x2000007c

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b3c:	f7ff ffea 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	@ (8000b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	@ (8000b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	@ (8000b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f005 fed5 	bl	8006914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fcef 	bl	800054c <main>
  bx  lr    
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b7c:	08006b78 	.word	0x08006b78
  ldr r2, =_sbss
 8000b80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b84:	20004c48 	.word	0x20004c48

08000b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <HAL_Init+0x40>)
 8000b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <HAL_Init+0x40>)
 8000ba2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <HAL_Init+0x40>)
 8000bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 f8d8 	bl	8000d6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f7ff ff08 	bl	80009d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc0:	f7ff fe8a 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023c00 	.word	0x40023c00

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	2000011c 	.word	0x2000011c

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	@ (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	2000011c 	.word	0x2000011c

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4907      	ldr	r1, [pc, #28]	@ (8000cac <__NVIC_EnableIRQ+0x38>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	@ (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	@ (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	@ 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	@ 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ff4c 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d92:	f7ff ff61 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000d96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	6978      	ldr	r0, [r7, #20]
 8000d9e:	f7ff ffb1 	bl	8000d04 <NVIC_EncodePriority>
 8000da2:	4602      	mov	r2, r0
 8000da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff80 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff54 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000de2:	f7ff ff09 	bl	8000bf8 <HAL_GetTick>
 8000de6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d008      	beq.n	8000e06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2280      	movs	r2, #128	@ 0x80
 8000df8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e052      	b.n	8000eac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 0216 	bic.w	r2, r2, #22
 8000e14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	695a      	ldr	r2, [r3, #20]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d103      	bne.n	8000e36 <HAL_DMA_Abort+0x62>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d007      	beq.n	8000e46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 0208 	bic.w	r2, r2, #8
 8000e44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 0201 	bic.w	r2, r2, #1
 8000e54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e56:	e013      	b.n	8000e80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e58:	f7ff fece 	bl	8000bf8 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b05      	cmp	r3, #5
 8000e64:	d90c      	bls.n	8000e80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2220      	movs	r2, #32
 8000e6a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2203      	movs	r2, #3
 8000e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e015      	b.n	8000eac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1e4      	bne.n	8000e58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e92:	223f      	movs	r2, #63	@ 0x3f
 8000e94:	409a      	lsls	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d004      	beq.n	8000ed2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2280      	movs	r2, #128	@ 0x80
 8000ecc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00c      	b.n	8000eec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2205      	movs	r2, #5
 8000ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 0201 	bic.w	r2, r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	@ 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	e165      	b.n	80011e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f040 8154 	bne.w	80011da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d005      	beq.n	8000f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d130      	bne.n	8000fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d017      	beq.n	8000fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d123      	bne.n	800103c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	69b9      	ldr	r1, [r7, #24]
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0203 	and.w	r2, r3, #3
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80ae 	beq.w	80011da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b5d      	ldr	r3, [pc, #372]	@ (80011f8 <HAL_GPIO_Init+0x300>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	4a5c      	ldr	r2, [pc, #368]	@ (80011f8 <HAL_GPIO_Init+0x300>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800108c:	6453      	str	r3, [r2, #68]	@ 0x44
 800108e:	4b5a      	ldr	r3, [pc, #360]	@ (80011f8 <HAL_GPIO_Init+0x300>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109a:	4a58      	ldr	r2, [pc, #352]	@ (80011fc <HAL_GPIO_Init+0x304>)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001200 <HAL_GPIO_Init+0x308>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d025      	beq.n	8001112 <HAL_GPIO_Init+0x21a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001204 <HAL_GPIO_Init+0x30c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d01f      	beq.n	800110e <HAL_GPIO_Init+0x216>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001208 <HAL_GPIO_Init+0x310>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d019      	beq.n	800110a <HAL_GPIO_Init+0x212>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4c      	ldr	r2, [pc, #304]	@ (800120c <HAL_GPIO_Init+0x314>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0x20e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001210 <HAL_GPIO_Init+0x318>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00d      	beq.n	8001102 <HAL_GPIO_Init+0x20a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4a      	ldr	r2, [pc, #296]	@ (8001214 <HAL_GPIO_Init+0x31c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x206>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a49      	ldr	r2, [pc, #292]	@ (8001218 <HAL_GPIO_Init+0x320>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_GPIO_Init+0x202>
 80010f6:	2306      	movs	r3, #6
 80010f8:	e00c      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 80010fa:	2307      	movs	r3, #7
 80010fc:	e00a      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 80010fe:	2305      	movs	r3, #5
 8001100:	e008      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 8001102:	2304      	movs	r3, #4
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 8001106:	2303      	movs	r3, #3
 8001108:	e004      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 800110a:	2302      	movs	r3, #2
 800110c:	e002      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <HAL_GPIO_Init+0x21c>
 8001112:	2300      	movs	r3, #0
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	f002 0203 	and.w	r2, r2, #3
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	4093      	lsls	r3, r2
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001124:	4935      	ldr	r1, [pc, #212]	@ (80011fc <HAL_GPIO_Init+0x304>)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001132:	4b3a      	ldr	r3, [pc, #232]	@ (800121c <HAL_GPIO_Init+0x324>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001156:	4a31      	ldr	r2, [pc, #196]	@ (800121c <HAL_GPIO_Init+0x324>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800115c:	4b2f      	ldr	r3, [pc, #188]	@ (800121c <HAL_GPIO_Init+0x324>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001180:	4a26      	ldr	r2, [pc, #152]	@ (800121c <HAL_GPIO_Init+0x324>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001186:	4b25      	ldr	r3, [pc, #148]	@ (800121c <HAL_GPIO_Init+0x324>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011aa:	4a1c      	ldr	r2, [pc, #112]	@ (800121c <HAL_GPIO_Init+0x324>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <HAL_GPIO_Init+0x324>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d4:	4a11      	ldr	r2, [pc, #68]	@ (800121c <HAL_GPIO_Init+0x324>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3301      	adds	r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	2b0f      	cmp	r3, #15
 80011e4:	f67f ae96 	bls.w	8000f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3724      	adds	r7, #36	@ 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40013800 	.word	0x40013800
 8001200:	40020000 	.word	0x40020000
 8001204:	40020400 	.word	0x40020400
 8001208:	40020800 	.word	0x40020800
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40021000 	.word	0x40021000
 8001214:	40021400 	.word	0x40021400
 8001218:	40021800 	.word	0x40021800
 800121c:	40013c00 	.word	0x40013c00

08001220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e0cc      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001234:	4b68      	ldr	r3, [pc, #416]	@ (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 030f 	and.w	r3, r3, #15
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d90c      	bls.n	800125c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001242:	4b65      	ldr	r3, [pc, #404]	@ (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800124a:	4b63      	ldr	r3, [pc, #396]	@ (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d001      	beq.n	800125c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0b8      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d020      	beq.n	80012aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d005      	beq.n	8001280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001274:	4b59      	ldr	r3, [pc, #356]	@ (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	4a58      	ldr	r2, [pc, #352]	@ (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800127e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	2b00      	cmp	r3, #0
 800128a:	d005      	beq.n	8001298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800128c:	4b53      	ldr	r3, [pc, #332]	@ (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	4a52      	ldr	r2, [pc, #328]	@ (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001298:	4b50      	ldr	r3, [pc, #320]	@ (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	494d      	ldr	r1, [pc, #308]	@ (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d044      	beq.n	8001340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d107      	bne.n	80012ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	4b47      	ldr	r3, [pc, #284]	@ (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d119      	bne.n	80012fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e07f      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d003      	beq.n	80012de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d107      	bne.n	80012ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012de:	4b3f      	ldr	r3, [pc, #252]	@ (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d109      	bne.n	80012fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e06f      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ee:	4b3b      	ldr	r3, [pc, #236]	@ (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e067      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012fe:	4b37      	ldr	r3, [pc, #220]	@ (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f023 0203 	bic.w	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4934      	ldr	r1, [pc, #208]	@ (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 800130c:	4313      	orrs	r3, r2
 800130e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001310:	f7ff fc72 	bl	8000bf8 <HAL_GetTick>
 8001314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001316:	e00a      	b.n	800132e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001318:	f7ff fc6e 	bl	8000bf8 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001326:	4293      	cmp	r3, r2
 8001328:	d901      	bls.n	800132e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e04f      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132e:	4b2b      	ldr	r3, [pc, #172]	@ (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 020c 	and.w	r2, r3, #12
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	429a      	cmp	r2, r3
 800133e:	d1eb      	bne.n	8001318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001340:	4b25      	ldr	r3, [pc, #148]	@ (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d20c      	bcs.n	8001368 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134e:	4b22      	ldr	r3, [pc, #136]	@ (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001356:	4b20      	ldr	r3, [pc, #128]	@ (80013d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d001      	beq.n	8001368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e032      	b.n	80013ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001374:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	4916      	ldr	r1, [pc, #88]	@ (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001382:	4313      	orrs	r3, r2
 8001384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d009      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001392:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	490e      	ldr	r1, [pc, #56]	@ (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013a6:	f000 f887 	bl	80014b8 <HAL_RCC_GetSysClockFreq>
 80013aa:	4602      	mov	r2, r0
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	490a      	ldr	r1, [pc, #40]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c0>)
 80013b8:	5ccb      	ldrb	r3, [r1, r3]
 80013ba:	fa22 f303 	lsr.w	r3, r2, r3
 80013be:	4a09      	ldr	r2, [pc, #36]	@ (80013e4 <HAL_RCC_ClockConfig+0x1c4>)
 80013c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80013c2:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <HAL_RCC_ClockConfig+0x1c8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fb02 	bl	80009d0 <HAL_InitTick>

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023c00 	.word	0x40023c00
 80013dc:	40023800 	.word	0x40023800
 80013e0:	08006b50 	.word	0x08006b50
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000004 	.word	0x20000004

080013ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013f0:	4b03      	ldr	r3, [pc, #12]	@ (8001400 <HAL_RCC_GetHCLKFreq+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000000 	.word	0x20000000

08001404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001408:	f7ff fff0 	bl	80013ec <HAL_RCC_GetHCLKFreq>
 800140c:	4602      	mov	r2, r0
 800140e:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	0a9b      	lsrs	r3, r3, #10
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	4903      	ldr	r1, [pc, #12]	@ (8001428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800141a:	5ccb      	ldrb	r3, [r1, r3]
 800141c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001420:	4618      	mov	r0, r3
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	08006b60 	.word	0x08006b60

0800142c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001430:	f7ff ffdc 	bl	80013ec <HAL_RCC_GetHCLKFreq>
 8001434:	4602      	mov	r2, r0
 8001436:	4b05      	ldr	r3, [pc, #20]	@ (800144c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	0b5b      	lsrs	r3, r3, #13
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	4903      	ldr	r1, [pc, #12]	@ (8001450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001442:	5ccb      	ldrb	r3, [r1, r3]
 8001444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001448:	4618      	mov	r0, r3
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	08006b60 	.word	0x08006b60

08001454 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	220f      	movs	r2, #15
 8001462:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0203 	and.w	r2, r3, #3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001470:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800147c:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <HAL_RCC_GetClockConfig+0x5c>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001488:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <HAL_RCC_GetClockConfig+0x5c>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	08db      	lsrs	r3, r3, #3
 800148e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001496:	4b07      	ldr	r3, [pc, #28]	@ (80014b4 <HAL_RCC_GetClockConfig+0x60>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 020f 	and.w	r2, r3, #15
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	601a      	str	r2, [r3, #0]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40023c00 	.word	0x40023c00

080014b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014bc:	b0a6      	sub	sp, #152	@ 0x98
 80014be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014de:	4bc8      	ldr	r3, [pc, #800]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x348>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b0c      	cmp	r3, #12
 80014e8:	f200 817e 	bhi.w	80017e8 <HAL_RCC_GetSysClockFreq+0x330>
 80014ec:	a201      	add	r2, pc, #4	@ (adr r2, 80014f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80014ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f2:	bf00      	nop
 80014f4:	08001529 	.word	0x08001529
 80014f8:	080017e9 	.word	0x080017e9
 80014fc:	080017e9 	.word	0x080017e9
 8001500:	080017e9 	.word	0x080017e9
 8001504:	08001531 	.word	0x08001531
 8001508:	080017e9 	.word	0x080017e9
 800150c:	080017e9 	.word	0x080017e9
 8001510:	080017e9 	.word	0x080017e9
 8001514:	08001539 	.word	0x08001539
 8001518:	080017e9 	.word	0x080017e9
 800151c:	080017e9 	.word	0x080017e9
 8001520:	080017e9 	.word	0x080017e9
 8001524:	080016a3 	.word	0x080016a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001528:	4bb6      	ldr	r3, [pc, #728]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x34c>)
 800152a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800152e:	e15f      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001530:	4bb5      	ldr	r3, [pc, #724]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x350>)
 8001532:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001536:	e15b      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001538:	4bb1      	ldr	r3, [pc, #708]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x348>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001540:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001544:	4bae      	ldr	r3, [pc, #696]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x348>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d031      	beq.n	80015b4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001550:	4bab      	ldr	r3, [pc, #684]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x348>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	099b      	lsrs	r3, r3, #6
 8001556:	2200      	movs	r2, #0
 8001558:	66bb      	str	r3, [r7, #104]	@ 0x68
 800155a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800155c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800155e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001562:	663b      	str	r3, [r7, #96]	@ 0x60
 8001564:	2300      	movs	r3, #0
 8001566:	667b      	str	r3, [r7, #100]	@ 0x64
 8001568:	4ba7      	ldr	r3, [pc, #668]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x350>)
 800156a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800156e:	462a      	mov	r2, r5
 8001570:	fb03 f202 	mul.w	r2, r3, r2
 8001574:	2300      	movs	r3, #0
 8001576:	4621      	mov	r1, r4
 8001578:	fb01 f303 	mul.w	r3, r1, r3
 800157c:	4413      	add	r3, r2
 800157e:	4aa2      	ldr	r2, [pc, #648]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x350>)
 8001580:	4621      	mov	r1, r4
 8001582:	fba1 1202 	umull	r1, r2, r1, r2
 8001586:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001588:	460a      	mov	r2, r1
 800158a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800158c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800158e:	4413      	add	r3, r2
 8001590:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001592:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001596:	2200      	movs	r2, #0
 8001598:	65bb      	str	r3, [r7, #88]	@ 0x58
 800159a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800159c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80015a0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80015a4:	f7fe fe3c 	bl	8000220 <__aeabi_uldivmod>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4613      	mov	r3, r2
 80015ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015b2:	e064      	b.n	800167e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b4:	4b92      	ldr	r3, [pc, #584]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x348>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	099b      	lsrs	r3, r3, #6
 80015ba:	2200      	movs	r2, #0
 80015bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80015be:	657a      	str	r2, [r7, #84]	@ 0x54
 80015c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80015c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015c8:	2300      	movs	r3, #0
 80015ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015cc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80015d0:	4622      	mov	r2, r4
 80015d2:	462b      	mov	r3, r5
 80015d4:	f04f 0000 	mov.w	r0, #0
 80015d8:	f04f 0100 	mov.w	r1, #0
 80015dc:	0159      	lsls	r1, r3, #5
 80015de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015e2:	0150      	lsls	r0, r2, #5
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4621      	mov	r1, r4
 80015ea:	1a51      	subs	r1, r2, r1
 80015ec:	6139      	str	r1, [r7, #16]
 80015ee:	4629      	mov	r1, r5
 80015f0:	eb63 0301 	sbc.w	r3, r3, r1
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001602:	4659      	mov	r1, fp
 8001604:	018b      	lsls	r3, r1, #6
 8001606:	4651      	mov	r1, sl
 8001608:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800160c:	4651      	mov	r1, sl
 800160e:	018a      	lsls	r2, r1, #6
 8001610:	4651      	mov	r1, sl
 8001612:	ebb2 0801 	subs.w	r8, r2, r1
 8001616:	4659      	mov	r1, fp
 8001618:	eb63 0901 	sbc.w	r9, r3, r1
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001628:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800162c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001630:	4690      	mov	r8, r2
 8001632:	4699      	mov	r9, r3
 8001634:	4623      	mov	r3, r4
 8001636:	eb18 0303 	adds.w	r3, r8, r3
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	462b      	mov	r3, r5
 800163e:	eb49 0303 	adc.w	r3, r9, r3
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001650:	4629      	mov	r1, r5
 8001652:	028b      	lsls	r3, r1, #10
 8001654:	4621      	mov	r1, r4
 8001656:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800165a:	4621      	mov	r1, r4
 800165c:	028a      	lsls	r2, r1, #10
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001666:	2200      	movs	r2, #0
 8001668:	643b      	str	r3, [r7, #64]	@ 0x40
 800166a:	647a      	str	r2, [r7, #68]	@ 0x44
 800166c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001670:	f7fe fdd6 	bl	8000220 <__aeabi_uldivmod>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4613      	mov	r3, r2
 800167a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800167e:	4b60      	ldr	r3, [pc, #384]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x348>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	0c1b      	lsrs	r3, r3, #16
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	3301      	adds	r3, #1
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001690:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001694:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001698:	fbb2 f3f3 	udiv	r3, r2, r3
 800169c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80016a0:	e0a6      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016a2:	4b57      	ldr	r3, [pc, #348]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x348>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ae:	4b54      	ldr	r3, [pc, #336]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x348>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d02a      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ba:	4b51      	ldr	r3, [pc, #324]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x348>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	099b      	lsrs	r3, r3, #6
 80016c0:	2200      	movs	r2, #0
 80016c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80016c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016cc:	2100      	movs	r1, #0
 80016ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x350>)
 80016d0:	fb03 f201 	mul.w	r2, r3, r1
 80016d4:	2300      	movs	r3, #0
 80016d6:	fb00 f303 	mul.w	r3, r0, r3
 80016da:	4413      	add	r3, r2
 80016dc:	4a4a      	ldr	r2, [pc, #296]	@ (8001808 <HAL_RCC_GetSysClockFreq+0x350>)
 80016de:	fba0 1202 	umull	r1, r2, r0, r2
 80016e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80016e4:	460a      	mov	r2, r1
 80016e6:	673a      	str	r2, [r7, #112]	@ 0x70
 80016e8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80016ea:	4413      	add	r3, r2
 80016ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80016ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016f2:	2200      	movs	r2, #0
 80016f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80016f6:	637a      	str	r2, [r7, #52]	@ 0x34
 80016f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80016fc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001700:	f7fe fd8e 	bl	8000220 <__aeabi_uldivmod>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4613      	mov	r3, r2
 800170a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800170e:	e05b      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001710:	4b3b      	ldr	r3, [pc, #236]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x348>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	099b      	lsrs	r3, r3, #6
 8001716:	2200      	movs	r2, #0
 8001718:	62bb      	str	r3, [r7, #40]	@ 0x28
 800171a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800171c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800171e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001722:	623b      	str	r3, [r7, #32]
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
 8001728:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800172c:	4642      	mov	r2, r8
 800172e:	464b      	mov	r3, r9
 8001730:	f04f 0000 	mov.w	r0, #0
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	0159      	lsls	r1, r3, #5
 800173a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800173e:	0150      	lsls	r0, r2, #5
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4641      	mov	r1, r8
 8001746:	ebb2 0a01 	subs.w	sl, r2, r1
 800174a:	4649      	mov	r1, r9
 800174c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800175c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001760:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001764:	ebb2 040a 	subs.w	r4, r2, sl
 8001768:	eb63 050b 	sbc.w	r5, r3, fp
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	00eb      	lsls	r3, r5, #3
 8001776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800177a:	00e2      	lsls	r2, r4, #3
 800177c:	4614      	mov	r4, r2
 800177e:	461d      	mov	r5, r3
 8001780:	4643      	mov	r3, r8
 8001782:	18e3      	adds	r3, r4, r3
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	464b      	mov	r3, r9
 8001788:	eb45 0303 	adc.w	r3, r5, r3
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800179a:	4629      	mov	r1, r5
 800179c:	028b      	lsls	r3, r1, #10
 800179e:	4621      	mov	r1, r4
 80017a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017a4:	4621      	mov	r1, r4
 80017a6:	028a      	lsls	r2, r1, #10
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017b0:	2200      	movs	r2, #0
 80017b2:	61bb      	str	r3, [r7, #24]
 80017b4:	61fa      	str	r2, [r7, #28]
 80017b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017ba:	f7fe fd31 	bl	8000220 <__aeabi_uldivmod>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4613      	mov	r3, r2
 80017c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x348>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	0f1b      	lsrs	r3, r3, #28
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80017d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80017da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80017e6:	e003      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_RCC_GetSysClockFreq+0x34c>)
 80017ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80017ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3798      	adds	r7, #152	@ 0x98
 80017f8:	46bd      	mov	sp, r7
 80017fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	00f42400 	.word	0x00f42400
 8001808:	017d7840 	.word	0x017d7840

0800180c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e28d      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8083 	beq.w	8001932 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800182c:	4b94      	ldr	r3, [pc, #592]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b04      	cmp	r3, #4
 8001836:	d019      	beq.n	800186c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001838:	4b91      	ldr	r3, [pc, #580]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001840:	2b08      	cmp	r3, #8
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001844:	4b8e      	ldr	r3, [pc, #568]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800184c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001850:	d00c      	beq.n	800186c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001852:	4b8b      	ldr	r3, [pc, #556]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800185a:	2b0c      	cmp	r3, #12
 800185c:	d112      	bne.n	8001884 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800185e:	4b88      	ldr	r3, [pc, #544]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001866:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800186a:	d10b      	bne.n	8001884 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186c:	4b84      	ldr	r3, [pc, #528]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d05b      	beq.n	8001930 <HAL_RCC_OscConfig+0x124>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d157      	bne.n	8001930 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e25a      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800188c:	d106      	bne.n	800189c <HAL_RCC_OscConfig+0x90>
 800188e:	4b7c      	ldr	r3, [pc, #496]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a7b      	ldr	r2, [pc, #492]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e01d      	b.n	80018d8 <HAL_RCC_OscConfig+0xcc>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0xb4>
 80018a6:	4b76      	ldr	r3, [pc, #472]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a75      	ldr	r2, [pc, #468]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b73      	ldr	r3, [pc, #460]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a72      	ldr	r2, [pc, #456]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e00b      	b.n	80018d8 <HAL_RCC_OscConfig+0xcc>
 80018c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a6b      	ldr	r2, [pc, #428]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff f98a 	bl	8000bf8 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff f986 	bl	8000bf8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	@ 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e21f      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b61      	ldr	r3, [pc, #388]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0xdc>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff f976 	bl	8000bf8 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff f972 	bl	8000bf8 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	@ 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e20b      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	4b57      	ldr	r3, [pc, #348]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x104>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d06f      	beq.n	8001a1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800193e:	4b50      	ldr	r3, [pc, #320]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b00      	cmp	r3, #0
 8001948:	d017      	beq.n	800197a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800194a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001952:	2b08      	cmp	r3, #8
 8001954:	d105      	bne.n	8001962 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001956:	4b4a      	ldr	r3, [pc, #296]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00b      	beq.n	800197a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001962:	4b47      	ldr	r3, [pc, #284]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800196a:	2b0c      	cmp	r3, #12
 800196c:	d11c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800196e:	4b44      	ldr	r3, [pc, #272]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d116      	bne.n	80019a8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197a:	4b41      	ldr	r3, [pc, #260]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d005      	beq.n	8001992 <HAL_RCC_OscConfig+0x186>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d001      	beq.n	8001992 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e1d3      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001992:	4b3b      	ldr	r3, [pc, #236]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4937      	ldr	r1, [pc, #220]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a6:	e03a      	b.n	8001a1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b0:	4b34      	ldr	r3, [pc, #208]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b6:	f7ff f91f 	bl	8000bf8 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff f91b 	bl	8000bf8 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e1b4      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019dc:	4b28      	ldr	r3, [pc, #160]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4925      	ldr	r1, [pc, #148]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]
 80019f0:	e015      	b.n	8001a1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f2:	4b24      	ldr	r3, [pc, #144]	@ (8001a84 <HAL_RCC_OscConfig+0x278>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff f8fe 	bl	8000bf8 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a00:	f7ff f8fa 	bl	8000bf8 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e193      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	4b1b      	ldr	r3, [pc, #108]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d036      	beq.n	8001a98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d016      	beq.n	8001a60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <HAL_RCC_OscConfig+0x27c>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff f8de 	bl	8000bf8 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a40:	f7ff f8da 	bl	8000bf8 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e173      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <HAL_RCC_OscConfig+0x274>)
 8001a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x234>
 8001a5e:	e01b      	b.n	8001a98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a60:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_RCC_OscConfig+0x27c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a66:	f7ff f8c7 	bl	8000bf8 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6c:	e00e      	b.n	8001a8c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6e:	f7ff f8c3 	bl	8000bf8 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d907      	bls.n	8001a8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e15c      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
 8001a80:	40023800 	.word	0x40023800
 8001a84:	42470000 	.word	0x42470000
 8001a88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8c:	4b8a      	ldr	r3, [pc, #552]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1ea      	bne.n	8001a6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 8097 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aaa:	4b83      	ldr	r3, [pc, #524]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10f      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	4b7f      	ldr	r3, [pc, #508]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	4a7e      	ldr	r2, [pc, #504]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac6:	4b7c      	ldr	r3, [pc, #496]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad6:	4b79      	ldr	r3, [pc, #484]	@ (8001cbc <HAL_RCC_OscConfig+0x4b0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d118      	bne.n	8001b14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae2:	4b76      	ldr	r3, [pc, #472]	@ (8001cbc <HAL_RCC_OscConfig+0x4b0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a75      	ldr	r2, [pc, #468]	@ (8001cbc <HAL_RCC_OscConfig+0x4b0>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aee:	f7ff f883 	bl	8000bf8 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af6:	f7ff f87f 	bl	8000bf8 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e118      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	4b6c      	ldr	r3, [pc, #432]	@ (8001cbc <HAL_RCC_OscConfig+0x4b0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x31e>
 8001b1c:	4b66      	ldr	r3, [pc, #408]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b20:	4a65      	ldr	r2, [pc, #404]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b28:	e01c      	b.n	8001b64 <HAL_RCC_OscConfig+0x358>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x340>
 8001b32:	4b61      	ldr	r3, [pc, #388]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b36:	4a60      	ldr	r2, [pc, #384]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b3e:	4b5e      	ldr	r3, [pc, #376]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b42:	4a5d      	ldr	r2, [pc, #372]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b4a:	e00b      	b.n	8001b64 <HAL_RCC_OscConfig+0x358>
 8001b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b50:	4a59      	ldr	r2, [pc, #356]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b52:	f023 0301 	bic.w	r3, r3, #1
 8001b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b58:	4b57      	ldr	r3, [pc, #348]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5c:	4a56      	ldr	r2, [pc, #344]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b5e:	f023 0304 	bic.w	r3, r3, #4
 8001b62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d015      	beq.n	8001b98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff f844 	bl	8000bf8 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b74:	f7ff f840 	bl	8000bf8 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e0d7      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8a:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0ee      	beq.n	8001b74 <HAL_RCC_OscConfig+0x368>
 8001b96:	e014      	b.n	8001bc2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b98:	f7ff f82e 	bl	8000bf8 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9e:	e00a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba0:	f7ff f82a 	bl	8000bf8 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e0c1      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb6:	4b40      	ldr	r3, [pc, #256]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1ee      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	4a3a      	ldr	r2, [pc, #232]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80ad 	beq.w	8001d38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bde:	4b36      	ldr	r3, [pc, #216]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d060      	beq.n	8001cac <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d145      	bne.n	8001c7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf2:	4b33      	ldr	r3, [pc, #204]	@ (8001cc0 <HAL_RCC_OscConfig+0x4b4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7fe fffe 	bl	8000bf8 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7fe fffa 	bl	8000bf8 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e093      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c12:	4b29      	ldr	r3, [pc, #164]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2c:	019b      	lsls	r3, r3, #6
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	3b01      	subs	r3, #1
 8001c38:	041b      	lsls	r3, r3, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c40:	061b      	lsls	r3, r3, #24
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c48:	071b      	lsls	r3, r3, #28
 8001c4a:	491b      	ldr	r1, [pc, #108]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c50:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <HAL_RCC_OscConfig+0x4b4>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7fe ffcf 	bl	8000bf8 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7fe ffcb 	bl	8000bf8 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e064      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x452>
 8001c7c:	e05c      	b.n	8001d38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_RCC_OscConfig+0x4b4>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7fe ffb8 	bl	8000bf8 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7fe ffb4 	bl	8000bf8 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e04d      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9e:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <HAL_RCC_OscConfig+0x4ac>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x480>
 8001caa:	e045      	b.n	8001d38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e040      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d44 <HAL_RCC_OscConfig+0x538>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d030      	beq.n	8001d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d129      	bne.n	8001d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d122      	bne.n	8001d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d119      	bne.n	8001d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0a:	085b      	lsrs	r3, r3, #1
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d10f      	bne.n	8001d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d107      	bne.n	8001d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800

08001d48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e041      	b.n	8001dde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f839 	bl	8001de6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3304      	adds	r3, #4
 8001d84:	4619      	mov	r1, r3
 8001d86:	4610      	mov	r0, r2
 8001d88:	f000 f9c0 	bl	800210c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d001      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e04e      	b.n	8001eb2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a23      	ldr	r2, [pc, #140]	@ (8001ec0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d022      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e3e:	d01d      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d018      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ec8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1c      	ldr	r2, [pc, #112]	@ (8001ecc <HAL_TIM_Base_Start_IT+0xd0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00e      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1b      	ldr	r2, [pc, #108]	@ (8001ed0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d009      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a19      	ldr	r2, [pc, #100]	@ (8001ed4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d004      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a18      	ldr	r2, [pc, #96]	@ (8001ed8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d111      	bne.n	8001ea0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d010      	beq.n	8001eb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0201 	orr.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9e:	e007      	b.n	8001eb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40010000 	.word	0x40010000
 8001ec4:	40000400 	.word	0x40000400
 8001ec8:	40000800 	.word	0x40000800
 8001ecc:	40000c00 	.word	0x40000c00
 8001ed0:	40010400 	.word	0x40010400
 8001ed4:	40014000 	.word	0x40014000
 8001ed8:	40001800 	.word	0x40001800

08001edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d020      	beq.n	8001f40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d01b      	beq.n	8001f40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0202 	mvn.w	r2, #2
 8001f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8d2 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8001f2c:	e005      	b.n	8001f3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f8c4 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f8d5 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d020      	beq.n	8001f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01b      	beq.n	8001f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0204 	mvn.w	r2, #4
 8001f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2202      	movs	r2, #2
 8001f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8ac 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8001f78:	e005      	b.n	8001f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f89e 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f8af 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d020      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01b      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0208 	mvn.w	r2, #8
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2204      	movs	r2, #4
 8001fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f886 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f878 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f889 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d020      	beq.n	8002024 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01b      	beq.n	8002024 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0210 	mvn.w	r2, #16
 8001ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f860 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8002010:	e005      	b.n	800201e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f852 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f863 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00c      	beq.n	8002048 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0201 	mvn.w	r2, #1
 8002040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe fc30 	bl	80008a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00c      	beq.n	800206c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f900 	bl	800226c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00c      	beq.n	8002090 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f834 	bl	80020f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00c      	beq.n	80020b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0220 	mvn.w	r2, #32
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f8d2 	bl	8002258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a43      	ldr	r2, [pc, #268]	@ (800222c <TIM_Base_SetConfig+0x120>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d013      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800212a:	d00f      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a40      	ldr	r2, [pc, #256]	@ (8002230 <TIM_Base_SetConfig+0x124>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00b      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3f      	ldr	r2, [pc, #252]	@ (8002234 <TIM_Base_SetConfig+0x128>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d007      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a3e      	ldr	r2, [pc, #248]	@ (8002238 <TIM_Base_SetConfig+0x12c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d003      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3d      	ldr	r2, [pc, #244]	@ (800223c <TIM_Base_SetConfig+0x130>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d108      	bne.n	800215e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a32      	ldr	r2, [pc, #200]	@ (800222c <TIM_Base_SetConfig+0x120>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d02b      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800216c:	d027      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2f      	ldr	r2, [pc, #188]	@ (8002230 <TIM_Base_SetConfig+0x124>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d023      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a2e      	ldr	r2, [pc, #184]	@ (8002234 <TIM_Base_SetConfig+0x128>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2d      	ldr	r2, [pc, #180]	@ (8002238 <TIM_Base_SetConfig+0x12c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d01b      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a2c      	ldr	r2, [pc, #176]	@ (800223c <TIM_Base_SetConfig+0x130>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d017      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a2b      	ldr	r2, [pc, #172]	@ (8002240 <TIM_Base_SetConfig+0x134>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a2a      	ldr	r2, [pc, #168]	@ (8002244 <TIM_Base_SetConfig+0x138>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00f      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a29      	ldr	r2, [pc, #164]	@ (8002248 <TIM_Base_SetConfig+0x13c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00b      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a28      	ldr	r2, [pc, #160]	@ (800224c <TIM_Base_SetConfig+0x140>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a27      	ldr	r2, [pc, #156]	@ (8002250 <TIM_Base_SetConfig+0x144>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d003      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a26      	ldr	r2, [pc, #152]	@ (8002254 <TIM_Base_SetConfig+0x148>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d108      	bne.n	80021d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	4313      	orrs	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a0e      	ldr	r2, [pc, #56]	@ (800222c <TIM_Base_SetConfig+0x120>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d003      	beq.n	80021fe <TIM_Base_SetConfig+0xf2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a10      	ldr	r2, [pc, #64]	@ (800223c <TIM_Base_SetConfig+0x130>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d103      	bne.n	8002206 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f043 0204 	orr.w	r2, r3, #4
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	601a      	str	r2, [r3, #0]
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40010000 	.word	0x40010000
 8002230:	40000400 	.word	0x40000400
 8002234:	40000800 	.word	0x40000800
 8002238:	40000c00 	.word	0x40000c00
 800223c:	40010400 	.word	0x40010400
 8002240:	40014000 	.word	0x40014000
 8002244:	40014400 	.word	0x40014400
 8002248:	40014800 	.word	0x40014800
 800224c:	40001800 	.word	0x40001800
 8002250:	40001c00 	.word	0x40001c00
 8002254:	40002000 	.word	0x40002000

08002258 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e042      	b.n	8002318 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe fb42 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2224      	movs	r2, #36	@ 0x24
 80022b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fd7f 	bl	8002dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695a      	ldr	r2, [r3, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	@ 0x28
 8002324:	af02      	add	r7, sp, #8
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	4613      	mov	r3, r2
 800232e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b20      	cmp	r3, #32
 800233e:	d175      	bne.n	800242c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <HAL_UART_Transmit+0x2c>
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e06e      	b.n	800242e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2221      	movs	r2, #33	@ 0x21
 800235a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800235e:	f7fe fc4b 	bl	8000bf8 <HAL_GetTick>
 8002362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	88fa      	ldrh	r2, [r7, #6]
 8002368:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	88fa      	ldrh	r2, [r7, #6]
 800236e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002378:	d108      	bne.n	800238c <HAL_UART_Transmit+0x6c>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d104      	bne.n	800238c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	e003      	b.n	8002394 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002390:	2300      	movs	r3, #0
 8002392:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002394:	e02e      	b.n	80023f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2200      	movs	r2, #0
 800239e:	2180      	movs	r1, #128	@ 0x80
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 fb1d 	bl	80029e0 <UART_WaitOnFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e03a      	b.n	800242e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10b      	bne.n	80023d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	3302      	adds	r3, #2
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	e007      	b.n	80023e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	3301      	adds	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1cb      	bne.n	8002396 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2200      	movs	r2, #0
 8002406:	2140      	movs	r1, #64	@ 0x40
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 fae9 	bl	80029e0 <UART_WaitOnFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e006      	b.n	800242e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	e000      	b.n	800242e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800242c:	2302      	movs	r3, #2
  }
}
 800242e:	4618      	mov	r0, r3
 8002430:	3720      	adds	r7, #32
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b0ba      	sub	sp, #232	@ 0xe8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002464:	2300      	movs	r3, #0
 8002466:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800246a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10f      	bne.n	800249e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800247e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_UART_IRQHandler+0x66>
 800248a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fbd7 	bl	8002c4a <UART_Receive_IT>
      return;
 800249c:	e273      	b.n	8002986 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800249e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80de 	beq.w	8002664 <HAL_UART_IRQHandler+0x22c>
 80024a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d106      	bne.n	80024c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80d1 	beq.w	8002664 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_UART_IRQHandler+0xae>
 80024ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_UART_IRQHandler+0xd2>
 80024f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002502:	f043 0202 	orr.w	r2, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800250a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_UART_IRQHandler+0xf6>
 8002516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002526:	f043 0204 	orr.w	r2, r3, #4
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800252e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d011      	beq.n	800255e <HAL_UART_IRQHandler+0x126>
 800253a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	f043 0208 	orr.w	r2, r3, #8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 820a 	beq.w	800297c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_UART_IRQHandler+0x14e>
 8002574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fb62 	bl	8002c4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002590:	2b40      	cmp	r3, #64	@ 0x40
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <HAL_UART_IRQHandler+0x17a>
 80025aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d04f      	beq.n	8002652 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fa6d 	bl	8002a92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c2:	2b40      	cmp	r3, #64	@ 0x40
 80025c4:	d141      	bne.n	800264a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3314      	adds	r3, #20
 80025cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025d4:	e853 3f00 	ldrex	r3, [r3]
 80025d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80025dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3314      	adds	r3, #20
 80025ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80025f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80025f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80025fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002602:	e841 2300 	strex	r3, r2, [r1]
 8002606:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800260a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1d9      	bne.n	80025c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d013      	beq.n	8002642 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261e:	4a8a      	ldr	r2, [pc, #552]	@ (8002848 <HAL_UART_IRQHandler+0x410>)
 8002620:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fc44 	bl	8000eb4 <HAL_DMA_Abort_IT>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d016      	beq.n	8002660 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800263c:	4610      	mov	r0, r2
 800263e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002640:	e00e      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f9b6 	bl	80029b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	e00a      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f9b2 	bl	80029b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	e006      	b.n	8002660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f9ae 	bl	80029b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800265e:	e18d      	b.n	800297c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	bf00      	nop
    return;
 8002662:	e18b      	b.n	800297c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002668:	2b01      	cmp	r3, #1
 800266a:	f040 8167 	bne.w	800293c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800266e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8160 	beq.w	800293c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800267c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8159 	beq.w	800293c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026aa:	2b40      	cmp	r3, #64	@ 0x40
 80026ac:	f040 80ce 	bne.w	800284c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80a9 	beq.w	8002818 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026ce:	429a      	cmp	r2, r3
 80026d0:	f080 80a2 	bcs.w	8002818 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026e6:	f000 8088 	beq.w	80027fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	330c      	adds	r3, #12
 80026f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026f8:	e853 3f00 	ldrex	r3, [r3]
 80026fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002700:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002708:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	330c      	adds	r3, #12
 8002712:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002716:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800271a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002722:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002726:	e841 2300 	strex	r3, r2, [r1]
 800272a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800272e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1d9      	bne.n	80026ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3314      	adds	r3, #20
 800273c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002740:	e853 3f00 	ldrex	r3, [r3]
 8002744:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002746:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3314      	adds	r3, #20
 8002756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800275a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800275e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002760:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002762:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002766:	e841 2300 	strex	r3, r2, [r1]
 800276a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800276c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1e1      	bne.n	8002736 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3314      	adds	r3, #20
 8002778:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002784:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002788:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3314      	adds	r3, #20
 8002792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002796:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002798:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800279c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800279e:	e841 2300 	strex	r3, r2, [r1]
 80027a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80027a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1e3      	bne.n	8002772 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027c2:	e853 3f00 	ldrex	r3, [r3]
 80027c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80027c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027ca:	f023 0310 	bic.w	r3, r3, #16
 80027ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	330c      	adds	r3, #12
 80027d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80027dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80027de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80027e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027e4:	e841 2300 	strex	r3, r2, [r1]
 80027e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80027ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e3      	bne.n	80027b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe faed 	bl	8000dd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2202      	movs	r2, #2
 80027fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002808:	b29b      	uxth	r3, r3
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	b29b      	uxth	r3, r3
 800280e:	4619      	mov	r1, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f8d9 	bl	80029c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002816:	e0b3      	b.n	8002980 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800281c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002820:	429a      	cmp	r2, r3
 8002822:	f040 80ad 	bne.w	8002980 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002830:	f040 80a6 	bne.w	8002980 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800283e:	4619      	mov	r1, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f8c1 	bl	80029c8 <HAL_UARTEx_RxEventCallback>
      return;
 8002846:	e09b      	b.n	8002980 <HAL_UART_IRQHandler+0x548>
 8002848:	08002b59 	.word	0x08002b59
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002854:	b29b      	uxth	r3, r3
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 808e 	beq.w	8002984 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8089 	beq.w	8002984 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	330c      	adds	r3, #12
 8002878:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800287c:	e853 3f00 	ldrex	r3, [r3]
 8002880:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002884:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002888:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	330c      	adds	r3, #12
 8002892:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002896:	647a      	str	r2, [r7, #68]	@ 0x44
 8002898:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800289c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800289e:	e841 2300 	strex	r3, r2, [r1]
 80028a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80028a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1e3      	bne.n	8002872 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3314      	adds	r3, #20
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	e853 3f00 	ldrex	r3, [r3]
 80028b8:	623b      	str	r3, [r7, #32]
   return(result);
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3314      	adds	r3, #20
 80028ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80028ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80028d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028d6:	e841 2300 	strex	r3, r2, [r1]
 80028da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80028dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1e3      	bne.n	80028aa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	e853 3f00 	ldrex	r3, [r3]
 80028fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0310 	bic.w	r3, r3, #16
 8002906:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	330c      	adds	r3, #12
 8002910:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002914:	61fa      	str	r2, [r7, #28]
 8002916:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002918:	69b9      	ldr	r1, [r7, #24]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	e841 2300 	strex	r3, r2, [r1]
 8002920:	617b      	str	r3, [r7, #20]
   return(result);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e3      	bne.n	80028f0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800292e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002932:	4619      	mov	r1, r3
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f847 	bl	80029c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800293a:	e023      	b.n	8002984 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800293c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002944:	2b00      	cmp	r3, #0
 8002946:	d009      	beq.n	800295c <HAL_UART_IRQHandler+0x524>
 8002948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800294c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f910 	bl	8002b7a <UART_Transmit_IT>
    return;
 800295a:	e014      	b.n	8002986 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800295c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00e      	beq.n	8002986 <HAL_UART_IRQHandler+0x54e>
 8002968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800296c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f950 	bl	8002c1a <UART_EndTransmit_IT>
    return;
 800297a:	e004      	b.n	8002986 <HAL_UART_IRQHandler+0x54e>
    return;
 800297c:	bf00      	nop
 800297e:	e002      	b.n	8002986 <HAL_UART_IRQHandler+0x54e>
      return;
 8002980:	bf00      	nop
 8002982:	e000      	b.n	8002986 <HAL_UART_IRQHandler+0x54e>
      return;
 8002984:	bf00      	nop
  }
}
 8002986:	37e8      	adds	r7, #232	@ 0xe8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	4613      	mov	r3, r2
 80029ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029f0:	e03b      	b.n	8002a6a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d037      	beq.n	8002a6a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7fe f8fd 	bl	8000bf8 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	6a3a      	ldr	r2, [r7, #32]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e03a      	b.n	8002a8a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d023      	beq.n	8002a6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b80      	cmp	r3, #128	@ 0x80
 8002a26:	d020      	beq.n	8002a6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b40      	cmp	r3, #64	@ 0x40
 8002a2c:	d01d      	beq.n	8002a6a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d116      	bne.n	8002a6a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f81d 	bl	8002a92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2208      	movs	r2, #8
 8002a5c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e00f      	b.n	8002a8a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4013      	ands	r3, r2
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	bf0c      	ite	eq
 8002a7a:	2301      	moveq	r3, #1
 8002a7c:	2300      	movne	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d0b4      	beq.n	80029f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b095      	sub	sp, #84	@ 0x54
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	330c      	adds	r3, #12
 8002aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aa4:	e853 3f00 	ldrex	r3, [r3]
 8002aa8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	330c      	adds	r3, #12
 8002ab8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002aba:	643a      	str	r2, [r7, #64]	@ 0x40
 8002abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ac0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ac2:	e841 2300 	strex	r3, r2, [r1]
 8002ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1e5      	bne.n	8002a9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3314      	adds	r3, #20
 8002ad4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	e853 3f00 	ldrex	r3, [r3]
 8002adc:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3314      	adds	r3, #20
 8002aec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002aee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002af0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002af4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002af6:	e841 2300 	strex	r3, r2, [r1]
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1e5      	bne.n	8002ace <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d119      	bne.n	8002b3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	330c      	adds	r3, #12
 8002b10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	e853 3f00 	ldrex	r3, [r3]
 8002b18:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f023 0310 	bic.w	r3, r3, #16
 8002b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	330c      	adds	r3, #12
 8002b28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b2a:	61ba      	str	r2, [r7, #24]
 8002b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2e:	6979      	ldr	r1, [r7, #20]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	e841 2300 	strex	r3, r2, [r1]
 8002b36:	613b      	str	r3, [r7, #16]
   return(result);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1e5      	bne.n	8002b0a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b4c:	bf00      	nop
 8002b4e:	3754      	adds	r7, #84	@ 0x54
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f7ff ff21 	bl	80029b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b21      	cmp	r3, #33	@ 0x21
 8002b8c:	d13e      	bne.n	8002c0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b96:	d114      	bne.n	8002bc2 <UART_Transmit_IT+0x48>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d110      	bne.n	8002bc2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	1c9a      	adds	r2, r3, #2
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	621a      	str	r2, [r3, #32]
 8002bc0:	e008      	b.n	8002bd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	1c59      	adds	r1, r3, #1
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6211      	str	r1, [r2, #32]
 8002bcc:	781a      	ldrb	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	4619      	mov	r1, r3
 8002be2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10f      	bne.n	8002c08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bf6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e000      	b.n	8002c0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
  }
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff fea6 	bl	800298c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b08c      	sub	sp, #48	@ 0x30
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b22      	cmp	r3, #34	@ 0x22
 8002c64:	f040 80aa 	bne.w	8002dbc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c70:	d115      	bne.n	8002c9e <UART_Receive_IT+0x54>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d111      	bne.n	8002c9e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c96:	1c9a      	adds	r2, r3, #2
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c9c:	e024      	b.n	8002ce8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cac:	d007      	beq.n	8002cbe <UART_Receive_IT+0x74>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <UART_Receive_IT+0x82>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc8:	701a      	strb	r2, [r3, #0]
 8002cca:	e008      	b.n	8002cde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d15d      	bne.n	8002db8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0220 	bic.w	r2, r2, #32
 8002d0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d135      	bne.n	8002dae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	e853 3f00 	ldrex	r3, [r3]
 8002d56:	613b      	str	r3, [r7, #16]
   return(result);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f023 0310 	bic.w	r3, r3, #16
 8002d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	330c      	adds	r3, #12
 8002d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d68:	623a      	str	r2, [r7, #32]
 8002d6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6c:	69f9      	ldr	r1, [r7, #28]
 8002d6e:	6a3a      	ldr	r2, [r7, #32]
 8002d70:	e841 2300 	strex	r3, r2, [r1]
 8002d74:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1e5      	bne.n	8002d48 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b10      	cmp	r3, #16
 8002d88:	d10a      	bne.n	8002da0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002da4:	4619      	mov	r1, r3
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff fe0e 	bl	80029c8 <HAL_UARTEx_RxEventCallback>
 8002dac:	e002      	b.n	8002db4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff fdf6 	bl	80029a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e002      	b.n	8002dbe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e000      	b.n	8002dbe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
  }
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3730      	adds	r7, #48	@ 0x30
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dcc:	b0c0      	sub	sp, #256	@ 0x100
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de4:	68d9      	ldr	r1, [r3, #12]
 8002de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	ea40 0301 	orr.w	r3, r0, r1
 8002df0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e20:	f021 010c 	bic.w	r1, r1, #12
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e42:	6999      	ldr	r1, [r3, #24]
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	ea40 0301 	orr.w	r3, r0, r1
 8002e4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4b8f      	ldr	r3, [pc, #572]	@ (8003094 <UART_SetConfig+0x2cc>)
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d005      	beq.n	8002e68 <UART_SetConfig+0xa0>
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b8d      	ldr	r3, [pc, #564]	@ (8003098 <UART_SetConfig+0x2d0>)
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d104      	bne.n	8002e72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e68:	f7fe fae0 	bl	800142c <HAL_RCC_GetPCLK2Freq>
 8002e6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e70:	e003      	b.n	8002e7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e72:	f7fe fac7 	bl	8001404 <HAL_RCC_GetPCLK1Freq>
 8002e76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e84:	f040 810c 	bne.w	80030a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e9a:	4622      	mov	r2, r4
 8002e9c:	462b      	mov	r3, r5
 8002e9e:	1891      	adds	r1, r2, r2
 8002ea0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ea2:	415b      	adcs	r3, r3
 8002ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ea6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002eaa:	4621      	mov	r1, r4
 8002eac:	eb12 0801 	adds.w	r8, r2, r1
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	eb43 0901 	adc.w	r9, r3, r1
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eca:	4690      	mov	r8, r2
 8002ecc:	4699      	mov	r9, r3
 8002ece:	4623      	mov	r3, r4
 8002ed0:	eb18 0303 	adds.w	r3, r8, r3
 8002ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ed8:	462b      	mov	r3, r5
 8002eda:	eb49 0303 	adc.w	r3, r9, r3
 8002ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002eee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002ef2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	18db      	adds	r3, r3, r3
 8002efa:	653b      	str	r3, [r7, #80]	@ 0x50
 8002efc:	4613      	mov	r3, r2
 8002efe:	eb42 0303 	adc.w	r3, r2, r3
 8002f02:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f0c:	f7fd f988 	bl	8000220 <__aeabi_uldivmod>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4b61      	ldr	r3, [pc, #388]	@ (800309c <UART_SetConfig+0x2d4>)
 8002f16:	fba3 2302 	umull	r2, r3, r3, r2
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	011c      	lsls	r4, r3, #4
 8002f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f22:	2200      	movs	r2, #0
 8002f24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f30:	4642      	mov	r2, r8
 8002f32:	464b      	mov	r3, r9
 8002f34:	1891      	adds	r1, r2, r2
 8002f36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f38:	415b      	adcs	r3, r3
 8002f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f40:	4641      	mov	r1, r8
 8002f42:	eb12 0a01 	adds.w	sl, r2, r1
 8002f46:	4649      	mov	r1, r9
 8002f48:	eb43 0b01 	adc.w	fp, r3, r1
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f60:	4692      	mov	sl, r2
 8002f62:	469b      	mov	fp, r3
 8002f64:	4643      	mov	r3, r8
 8002f66:	eb1a 0303 	adds.w	r3, sl, r3
 8002f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f6e:	464b      	mov	r3, r9
 8002f70:	eb4b 0303 	adc.w	r3, fp, r3
 8002f74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	18db      	adds	r3, r3, r3
 8002f90:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f92:	4613      	mov	r3, r2
 8002f94:	eb42 0303 	adc.w	r3, r2, r3
 8002f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fa2:	f7fd f93d 	bl	8000220 <__aeabi_uldivmod>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4611      	mov	r1, r2
 8002fac:	4b3b      	ldr	r3, [pc, #236]	@ (800309c <UART_SetConfig+0x2d4>)
 8002fae:	fba3 2301 	umull	r2, r3, r3, r1
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	2264      	movs	r2, #100	@ 0x64
 8002fb6:	fb02 f303 	mul.w	r3, r2, r3
 8002fba:	1acb      	subs	r3, r1, r3
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002fc2:	4b36      	ldr	r3, [pc, #216]	@ (800309c <UART_SetConfig+0x2d4>)
 8002fc4:	fba3 2302 	umull	r2, r3, r3, r2
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002fd0:	441c      	add	r4, r3
 8002fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fdc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002fe0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002fe4:	4642      	mov	r2, r8
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	1891      	adds	r1, r2, r2
 8002fea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002fec:	415b      	adcs	r3, r3
 8002fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ff0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ff4:	4641      	mov	r1, r8
 8002ff6:	1851      	adds	r1, r2, r1
 8002ff8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ffa:	4649      	mov	r1, r9
 8002ffc:	414b      	adcs	r3, r1
 8002ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800300c:	4659      	mov	r1, fp
 800300e:	00cb      	lsls	r3, r1, #3
 8003010:	4651      	mov	r1, sl
 8003012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003016:	4651      	mov	r1, sl
 8003018:	00ca      	lsls	r2, r1, #3
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	4603      	mov	r3, r0
 8003020:	4642      	mov	r2, r8
 8003022:	189b      	adds	r3, r3, r2
 8003024:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003028:	464b      	mov	r3, r9
 800302a:	460a      	mov	r2, r1
 800302c:	eb42 0303 	adc.w	r3, r2, r3
 8003030:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003040:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003044:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003048:	460b      	mov	r3, r1
 800304a:	18db      	adds	r3, r3, r3
 800304c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800304e:	4613      	mov	r3, r2
 8003050:	eb42 0303 	adc.w	r3, r2, r3
 8003054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003056:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800305a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800305e:	f7fd f8df 	bl	8000220 <__aeabi_uldivmod>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4b0d      	ldr	r3, [pc, #52]	@ (800309c <UART_SetConfig+0x2d4>)
 8003068:	fba3 1302 	umull	r1, r3, r3, r2
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	2164      	movs	r1, #100	@ 0x64
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	3332      	adds	r3, #50	@ 0x32
 800307a:	4a08      	ldr	r2, [pc, #32]	@ (800309c <UART_SetConfig+0x2d4>)
 800307c:	fba2 2303 	umull	r2, r3, r2, r3
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	f003 0207 	and.w	r2, r3, #7
 8003086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4422      	add	r2, r4
 800308e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003090:	e106      	b.n	80032a0 <UART_SetConfig+0x4d8>
 8003092:	bf00      	nop
 8003094:	40011000 	.word	0x40011000
 8003098:	40011400 	.word	0x40011400
 800309c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030a4:	2200      	movs	r2, #0
 80030a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030b2:	4642      	mov	r2, r8
 80030b4:	464b      	mov	r3, r9
 80030b6:	1891      	adds	r1, r2, r2
 80030b8:	6239      	str	r1, [r7, #32]
 80030ba:	415b      	adcs	r3, r3
 80030bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80030be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030c2:	4641      	mov	r1, r8
 80030c4:	1854      	adds	r4, r2, r1
 80030c6:	4649      	mov	r1, r9
 80030c8:	eb43 0501 	adc.w	r5, r3, r1
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	00eb      	lsls	r3, r5, #3
 80030d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030da:	00e2      	lsls	r2, r4, #3
 80030dc:	4614      	mov	r4, r2
 80030de:	461d      	mov	r5, r3
 80030e0:	4643      	mov	r3, r8
 80030e2:	18e3      	adds	r3, r4, r3
 80030e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030e8:	464b      	mov	r3, r9
 80030ea:	eb45 0303 	adc.w	r3, r5, r3
 80030ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80030f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80030fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800310e:	4629      	mov	r1, r5
 8003110:	008b      	lsls	r3, r1, #2
 8003112:	4621      	mov	r1, r4
 8003114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003118:	4621      	mov	r1, r4
 800311a:	008a      	lsls	r2, r1, #2
 800311c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003120:	f7fd f87e 	bl	8000220 <__aeabi_uldivmod>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4b60      	ldr	r3, [pc, #384]	@ (80032ac <UART_SetConfig+0x4e4>)
 800312a:	fba3 2302 	umull	r2, r3, r3, r2
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	011c      	lsls	r4, r3, #4
 8003132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003136:	2200      	movs	r2, #0
 8003138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800313c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003140:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003144:	4642      	mov	r2, r8
 8003146:	464b      	mov	r3, r9
 8003148:	1891      	adds	r1, r2, r2
 800314a:	61b9      	str	r1, [r7, #24]
 800314c:	415b      	adcs	r3, r3
 800314e:	61fb      	str	r3, [r7, #28]
 8003150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003154:	4641      	mov	r1, r8
 8003156:	1851      	adds	r1, r2, r1
 8003158:	6139      	str	r1, [r7, #16]
 800315a:	4649      	mov	r1, r9
 800315c:	414b      	adcs	r3, r1
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800316c:	4659      	mov	r1, fp
 800316e:	00cb      	lsls	r3, r1, #3
 8003170:	4651      	mov	r1, sl
 8003172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003176:	4651      	mov	r1, sl
 8003178:	00ca      	lsls	r2, r1, #3
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	4603      	mov	r3, r0
 8003180:	4642      	mov	r2, r8
 8003182:	189b      	adds	r3, r3, r2
 8003184:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003188:	464b      	mov	r3, r9
 800318a:	460a      	mov	r2, r1
 800318c:	eb42 0303 	adc.w	r3, r2, r3
 8003190:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800319e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031ac:	4649      	mov	r1, r9
 80031ae:	008b      	lsls	r3, r1, #2
 80031b0:	4641      	mov	r1, r8
 80031b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031b6:	4641      	mov	r1, r8
 80031b8:	008a      	lsls	r2, r1, #2
 80031ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031be:	f7fd f82f 	bl	8000220 <__aeabi_uldivmod>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4611      	mov	r1, r2
 80031c8:	4b38      	ldr	r3, [pc, #224]	@ (80032ac <UART_SetConfig+0x4e4>)
 80031ca:	fba3 2301 	umull	r2, r3, r3, r1
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	2264      	movs	r2, #100	@ 0x64
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	1acb      	subs	r3, r1, r3
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	3332      	adds	r3, #50	@ 0x32
 80031dc:	4a33      	ldr	r2, [pc, #204]	@ (80032ac <UART_SetConfig+0x4e4>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031e8:	441c      	add	r4, r3
 80031ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031ee:	2200      	movs	r2, #0
 80031f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80031f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80031f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80031f8:	4642      	mov	r2, r8
 80031fa:	464b      	mov	r3, r9
 80031fc:	1891      	adds	r1, r2, r2
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	415b      	adcs	r3, r3
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003208:	4641      	mov	r1, r8
 800320a:	1851      	adds	r1, r2, r1
 800320c:	6039      	str	r1, [r7, #0]
 800320e:	4649      	mov	r1, r9
 8003210:	414b      	adcs	r3, r1
 8003212:	607b      	str	r3, [r7, #4]
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003220:	4659      	mov	r1, fp
 8003222:	00cb      	lsls	r3, r1, #3
 8003224:	4651      	mov	r1, sl
 8003226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800322a:	4651      	mov	r1, sl
 800322c:	00ca      	lsls	r2, r1, #3
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	4603      	mov	r3, r0
 8003234:	4642      	mov	r2, r8
 8003236:	189b      	adds	r3, r3, r2
 8003238:	66bb      	str	r3, [r7, #104]	@ 0x68
 800323a:	464b      	mov	r3, r9
 800323c:	460a      	mov	r2, r1
 800323e:	eb42 0303 	adc.w	r3, r2, r3
 8003242:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	663b      	str	r3, [r7, #96]	@ 0x60
 800324e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800325c:	4649      	mov	r1, r9
 800325e:	008b      	lsls	r3, r1, #2
 8003260:	4641      	mov	r1, r8
 8003262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003266:	4641      	mov	r1, r8
 8003268:	008a      	lsls	r2, r1, #2
 800326a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800326e:	f7fc ffd7 	bl	8000220 <__aeabi_uldivmod>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4b0d      	ldr	r3, [pc, #52]	@ (80032ac <UART_SetConfig+0x4e4>)
 8003278:	fba3 1302 	umull	r1, r3, r3, r2
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	2164      	movs	r1, #100	@ 0x64
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	3332      	adds	r3, #50	@ 0x32
 800328a:	4a08      	ldr	r2, [pc, #32]	@ (80032ac <UART_SetConfig+0x4e4>)
 800328c:	fba2 2303 	umull	r2, r3, r2, r3
 8003290:	095b      	lsrs	r3, r3, #5
 8003292:	f003 020f 	and.w	r2, r3, #15
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4422      	add	r2, r4
 800329e:	609a      	str	r2, [r3, #8]
}
 80032a0:	bf00      	nop
 80032a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032a6:	46bd      	mov	sp, r7
 80032a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ac:	51eb851f 	.word	0x51eb851f

080032b0 <__NVIC_SetPriority>:
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	6039      	str	r1, [r7, #0]
 80032ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	db0a      	blt.n	80032da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	490c      	ldr	r1, [pc, #48]	@ (80032fc <__NVIC_SetPriority+0x4c>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	0112      	lsls	r2, r2, #4
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	440b      	add	r3, r1
 80032d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80032d8:	e00a      	b.n	80032f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	4908      	ldr	r1, [pc, #32]	@ (8003300 <__NVIC_SetPriority+0x50>)
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	3b04      	subs	r3, #4
 80032e8:	0112      	lsls	r2, r2, #4
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	440b      	add	r3, r1
 80032ee:	761a      	strb	r2, [r3, #24]
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000e100 	.word	0xe000e100
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003308:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <SysTick_Handler+0x1c>)
 800330a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800330c:	f002 f920 	bl	8005550 <xTaskGetSchedulerState>
 8003310:	4603      	mov	r3, r0
 8003312:	2b01      	cmp	r3, #1
 8003314:	d001      	beq.n	800331a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003316:	f003 f817 	bl	8006348 <xPortSysTickHandler>
  }
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	e000e010 	.word	0xe000e010

08003324 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003328:	2100      	movs	r1, #0
 800332a:	f06f 0004 	mvn.w	r0, #4
 800332e:	f7ff ffbf 	bl	80032b0 <__NVIC_SetPriority>
#endif
}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800333e:	f3ef 8305 	mrs	r3, IPSR
 8003342:	603b      	str	r3, [r7, #0]
  return(result);
 8003344:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800334a:	f06f 0305 	mvn.w	r3, #5
 800334e:	607b      	str	r3, [r7, #4]
 8003350:	e00c      	b.n	800336c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003352:	4b0a      	ldr	r3, [pc, #40]	@ (800337c <osKernelInitialize+0x44>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d105      	bne.n	8003366 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800335a:	4b08      	ldr	r3, [pc, #32]	@ (800337c <osKernelInitialize+0x44>)
 800335c:	2201      	movs	r2, #1
 800335e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003360:	2300      	movs	r3, #0
 8003362:	607b      	str	r3, [r7, #4]
 8003364:	e002      	b.n	800336c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003366:	f04f 33ff 	mov.w	r3, #4294967295
 800336a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800336c:	687b      	ldr	r3, [r7, #4]
}
 800336e:	4618      	mov	r0, r3
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000120 	.word	0x20000120

08003380 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003386:	f3ef 8305 	mrs	r3, IPSR
 800338a:	603b      	str	r3, [r7, #0]
  return(result);
 800338c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003392:	f06f 0305 	mvn.w	r3, #5
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	e010      	b.n	80033bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800339a:	4b0b      	ldr	r3, [pc, #44]	@ (80033c8 <osKernelStart+0x48>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d109      	bne.n	80033b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80033a2:	f7ff ffbf 	bl	8003324 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80033a6:	4b08      	ldr	r3, [pc, #32]	@ (80033c8 <osKernelStart+0x48>)
 80033a8:	2202      	movs	r2, #2
 80033aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80033ac:	f001 fc6c 	bl	8004c88 <vTaskStartScheduler>
      stat = osOK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	607b      	str	r3, [r7, #4]
 80033b4:	e002      	b.n	80033bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80033b6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80033bc:	687b      	ldr	r3, [r7, #4]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000120 	.word	0x20000120

080033cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08e      	sub	sp, #56	@ 0x38
 80033d0:	af04      	add	r7, sp, #16
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033dc:	f3ef 8305 	mrs	r3, IPSR
 80033e0:	617b      	str	r3, [r7, #20]
  return(result);
 80033e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d17e      	bne.n	80034e6 <osThreadNew+0x11a>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d07b      	beq.n	80034e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80033ee:	2380      	movs	r3, #128	@ 0x80
 80033f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80033f2:	2318      	movs	r3, #24
 80033f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80033fa:	f04f 33ff 	mov.w	r3, #4294967295
 80033fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d045      	beq.n	8003492 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <osThreadNew+0x48>
        name = attr->name;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <osThreadNew+0x6e>
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b38      	cmp	r3, #56	@ 0x38
 800342c:	d805      	bhi.n	800343a <osThreadNew+0x6e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <osThreadNew+0x72>
        return (NULL);
 800343a:	2300      	movs	r3, #0
 800343c:	e054      	b.n	80034e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	089b      	lsrs	r3, r3, #2
 800344c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00e      	beq.n	8003474 <osThreadNew+0xa8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2ba7      	cmp	r3, #167	@ 0xa7
 800345c:	d90a      	bls.n	8003474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003462:	2b00      	cmp	r3, #0
 8003464:	d006      	beq.n	8003474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <osThreadNew+0xa8>
        mem = 1;
 800346e:	2301      	movs	r3, #1
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	e010      	b.n	8003496 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10c      	bne.n	8003496 <osThreadNew+0xca>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d108      	bne.n	8003496 <osThreadNew+0xca>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d104      	bne.n	8003496 <osThreadNew+0xca>
          mem = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	e001      	b.n	8003496 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d110      	bne.n	80034be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80034a4:	9202      	str	r2, [sp, #8]
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	6a3a      	ldr	r2, [r7, #32]
 80034b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f001 f9f4 	bl	80048a0 <xTaskCreateStatic>
 80034b8:	4603      	mov	r3, r0
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	e013      	b.n	80034e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d110      	bne.n	80034e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	f107 0310 	add.w	r3, r7, #16
 80034cc:	9301      	str	r3, [sp, #4]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f001 fa42 	bl	8004960 <xTaskCreate>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d001      	beq.n	80034e6 <osThreadNew+0x11a>
            hTask = NULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80034e6:	693b      	ldr	r3, [r7, #16]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3728      	adds	r7, #40	@ 0x28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034f8:	f3ef 8305 	mrs	r3, IPSR
 80034fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80034fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <osDelay+0x1c>
    stat = osErrorISR;
 8003504:	f06f 0305 	mvn.w	r3, #5
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	e007      	b.n	800351c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f001 fb80 	bl	8004c1c <vTaskDelay>
    }
  }

  return (stat);
 800351c:	68fb      	ldr	r3, [r7, #12]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003526:	b580      	push	{r7, lr}
 8003528:	b08a      	sub	sp, #40	@ 0x28
 800352a:	af02      	add	r7, sp, #8
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003536:	f3ef 8305 	mrs	r3, IPSR
 800353a:	613b      	str	r3, [r7, #16]
  return(result);
 800353c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800353e:	2b00      	cmp	r3, #0
 8003540:	d175      	bne.n	800362e <osSemaphoreNew+0x108>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d072      	beq.n	800362e <osSemaphoreNew+0x108>
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	429a      	cmp	r2, r3
 800354e:	d86e      	bhi.n	800362e <osSemaphoreNew+0x108>
    mem = -1;
 8003550:	f04f 33ff 	mov.w	r3, #4294967295
 8003554:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d015      	beq.n	8003588 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d006      	beq.n	8003572 <osSemaphoreNew+0x4c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	2b4f      	cmp	r3, #79	@ 0x4f
 800356a:	d902      	bls.n	8003572 <osSemaphoreNew+0x4c>
        mem = 1;
 800356c:	2301      	movs	r3, #1
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	e00c      	b.n	800358c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d108      	bne.n	800358c <osSemaphoreNew+0x66>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d104      	bne.n	800358c <osSemaphoreNew+0x66>
          mem = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	e001      	b.n	800358c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003592:	d04c      	beq.n	800362e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d128      	bne.n	80035ec <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d10a      	bne.n	80035b6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2203      	movs	r2, #3
 80035a6:	9200      	str	r2, [sp, #0]
 80035a8:	2200      	movs	r2, #0
 80035aa:	2100      	movs	r1, #0
 80035ac:	2001      	movs	r0, #1
 80035ae:	f000 fa07 	bl	80039c0 <xQueueGenericCreateStatic>
 80035b2:	61f8      	str	r0, [r7, #28]
 80035b4:	e005      	b.n	80035c2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80035b6:	2203      	movs	r2, #3
 80035b8:	2100      	movs	r1, #0
 80035ba:	2001      	movs	r0, #1
 80035bc:	f000 fa7d 	bl	8003aba <xQueueGenericCreate>
 80035c0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d022      	beq.n	800360e <osSemaphoreNew+0xe8>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01f      	beq.n	800360e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80035ce:	2300      	movs	r3, #0
 80035d0:	2200      	movs	r2, #0
 80035d2:	2100      	movs	r1, #0
 80035d4:	69f8      	ldr	r0, [r7, #28]
 80035d6:	f000 fb3d 	bl	8003c54 <xQueueGenericSend>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d016      	beq.n	800360e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80035e0:	69f8      	ldr	r0, [r7, #28]
 80035e2:	f000 ff89 	bl	80044f8 <vQueueDelete>
            hSemaphore = NULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	e010      	b.n	800360e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d108      	bne.n	8003604 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	461a      	mov	r2, r3
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fabb 	bl	8003b76 <xQueueCreateCountingSemaphoreStatic>
 8003600:	61f8      	str	r0, [r7, #28]
 8003602:	e004      	b.n	800360e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 faee 	bl	8003be8 <xQueueCreateCountingSemaphore>
 800360c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00c      	beq.n	800362e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <osSemaphoreNew+0xfc>
          name = attr->name;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	e001      	b.n	8003626 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003626:	6979      	ldr	r1, [r7, #20]
 8003628:	69f8      	ldr	r0, [r7, #28]
 800362a:	f001 f8b1 	bl	8004790 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800362e:	69fb      	ldr	r3, [r7, #28]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3720      	adds	r7, #32
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d103      	bne.n	8003658 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003650:	f06f 0303 	mvn.w	r3, #3
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	e039      	b.n	80036cc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003658:	f3ef 8305 	mrs	r3, IPSR
 800365c:	60fb      	str	r3, [r7, #12]
  return(result);
 800365e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003660:	2b00      	cmp	r3, #0
 8003662:	d022      	beq.n	80036aa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800366a:	f06f 0303 	mvn.w	r3, #3
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	e02c      	b.n	80036cc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003676:	f107 0308 	add.w	r3, r7, #8
 800367a:	461a      	mov	r2, r3
 800367c:	2100      	movs	r1, #0
 800367e:	6938      	ldr	r0, [r7, #16]
 8003680:	f000 fe7a 	bl	8004378 <xQueueReceiveFromISR>
 8003684:	4603      	mov	r3, r0
 8003686:	2b01      	cmp	r3, #1
 8003688:	d003      	beq.n	8003692 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800368a:	f06f 0302 	mvn.w	r3, #2
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	e01c      	b.n	80036cc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d019      	beq.n	80036cc <osSemaphoreAcquire+0x94>
 8003698:	4b0f      	ldr	r3, [pc, #60]	@ (80036d8 <osSemaphoreAcquire+0xa0>)
 800369a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	e010      	b.n	80036cc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80036aa:	6839      	ldr	r1, [r7, #0]
 80036ac:	6938      	ldr	r0, [r7, #16]
 80036ae:	f000 fd53 	bl	8004158 <xQueueSemaphoreTake>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d009      	beq.n	80036cc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80036be:	f06f 0301 	mvn.w	r3, #1
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e002      	b.n	80036cc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80036c6:	f06f 0302 	mvn.w	r3, #2
 80036ca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80036cc:	697b      	ldr	r3, [r7, #20]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	e000ed04 	.word	0xe000ed04

080036dc <osSemaphoreGetCount>:
  }

  return (stat);
}

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <osSemaphoreGetCount+0x18>
    count = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e00e      	b.n	8003712 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036f4:	f3ef 8305 	mrs	r3, IPSR
 80036f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80036fa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d004      	beq.n	800370a <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8003700:	6938      	ldr	r0, [r7, #16]
 8003702:	f000 feda 	bl	80044ba <uxQueueMessagesWaitingFromISR>
 8003706:	6178      	str	r0, [r7, #20]
 8003708:	e003      	b.n	8003712 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800370a:	6938      	ldr	r0, [r7, #16]
 800370c:	f000 feb6 	bl	800447c <uxQueueMessagesWaiting>
 8003710:	6178      	str	r0, [r7, #20]
  }

  return (count);
 8003712:	697b      	ldr	r3, [r7, #20]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4a07      	ldr	r2, [pc, #28]	@ (8003748 <vApplicationGetIdleTaskMemory+0x2c>)
 800372c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4a06      	ldr	r2, [pc, #24]	@ (800374c <vApplicationGetIdleTaskMemory+0x30>)
 8003732:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2280      	movs	r2, #128	@ 0x80
 8003738:	601a      	str	r2, [r3, #0]
}
 800373a:	bf00      	nop
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20000124 	.word	0x20000124
 800374c:	200001cc 	.word	0x200001cc

08003750 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a07      	ldr	r2, [pc, #28]	@ (800377c <vApplicationGetTimerTaskMemory+0x2c>)
 8003760:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4a06      	ldr	r2, [pc, #24]	@ (8003780 <vApplicationGetTimerTaskMemory+0x30>)
 8003766:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800376e:	601a      	str	r2, [r3, #0]
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	200003cc 	.word	0x200003cc
 8003780:	20000474 	.word	0x20000474

08003784 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f103 0208 	add.w	r2, r3, #8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f04f 32ff 	mov.w	r2, #4294967295
 800379c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f103 0208 	add.w	r2, r3, #8
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f103 0208 	add.w	r2, r3, #8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037de:	b480      	push	{r7}
 80037e0:	b085      	sub	sp, #20
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	601a      	str	r2, [r3, #0]
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d103      	bne.n	8003846 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	e00c      	b.n	8003860 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3308      	adds	r3, #8
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e002      	b.n	8003854 <vListInsert+0x2e>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	429a      	cmp	r2, r3
 800385e:	d2f6      	bcs.n	800384e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	601a      	str	r2, [r3, #0]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6892      	ldr	r2, [r2, #8]
 80038ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6852      	ldr	r2, [r2, #4]
 80038b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d103      	bne.n	80038cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	1e5a      	subs	r2, r3, #1
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10b      	bne.n	8003918 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003912:	bf00      	nop
 8003914:	bf00      	nop
 8003916:	e7fd      	b.n	8003914 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003918:	f002 fc86 	bl	8006228 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003924:	68f9      	ldr	r1, [r7, #12]
 8003926:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	441a      	add	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003948:	3b01      	subs	r3, #1
 800394a:	68f9      	ldr	r1, [r7, #12]
 800394c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	441a      	add	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	22ff      	movs	r2, #255	@ 0xff
 800395c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	22ff      	movs	r2, #255	@ 0xff
 8003964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d114      	bne.n	8003998 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01a      	beq.n	80039ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3310      	adds	r3, #16
 800397a:	4618      	mov	r0, r3
 800397c:	f001 fc22 	bl	80051c4 <xTaskRemoveFromEventList>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d012      	beq.n	80039ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003986:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <xQueueGenericReset+0xd0>)
 8003988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	e009      	b.n	80039ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3310      	adds	r3, #16
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fef1 	bl	8003784 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3324      	adds	r3, #36	@ 0x24
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff feec 	bl	8003784 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039ac:	f002 fc6e 	bl	800628c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039b0:	2301      	movs	r3, #1
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	e000ed04 	.word	0xe000ed04

080039c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08e      	sub	sp, #56	@ 0x38
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10b      	bne.n	80039ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80039e6:	bf00      	nop
 80039e8:	bf00      	nop
 80039ea:	e7fd      	b.n	80039e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop
 8003a08:	e7fd      	b.n	8003a06 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <xQueueGenericCreateStatic+0x56>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <xQueueGenericCreateStatic+0x5a>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <xQueueGenericCreateStatic+0x5c>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10b      	bne.n	8003a38 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	623b      	str	r3, [r7, #32]
}
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
 8003a36:	e7fd      	b.n	8003a34 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d102      	bne.n	8003a44 <xQueueGenericCreateStatic+0x84>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <xQueueGenericCreateStatic+0x88>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <xQueueGenericCreateStatic+0x8a>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10b      	bne.n	8003a66 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	61fb      	str	r3, [r7, #28]
}
 8003a60:	bf00      	nop
 8003a62:	bf00      	nop
 8003a64:	e7fd      	b.n	8003a62 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a66:	2350      	movs	r3, #80	@ 0x50
 8003a68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b50      	cmp	r3, #80	@ 0x50
 8003a6e:	d00b      	beq.n	8003a88 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	61bb      	str	r3, [r7, #24]
}
 8003a82:	bf00      	nop
 8003a84:	bf00      	nop
 8003a86:	e7fd      	b.n	8003a84 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a88:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00d      	beq.n	8003ab0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a9c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f840 	bl	8003b30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3730      	adds	r7, #48	@ 0x30
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b08a      	sub	sp, #40	@ 0x28
 8003abe:	af02      	add	r7, sp, #8
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10b      	bne.n	8003ae6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	613b      	str	r3, [r7, #16]
}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	e7fd      	b.n	8003ae2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	3350      	adds	r3, #80	@ 0x50
 8003af4:	4618      	mov	r0, r3
 8003af6:	f002 fcb9 	bl	800646c <pvPortMalloc>
 8003afa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d011      	beq.n	8003b26 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3350      	adds	r3, #80	@ 0x50
 8003b0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b14:	79fa      	ldrb	r2, [r7, #7]
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f805 	bl	8003b30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b26:	69bb      	ldr	r3, [r7, #24]
	}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d103      	bne.n	8003b4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	e002      	b.n	8003b52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b5e:	2101      	movs	r1, #1
 8003b60:	69b8      	ldr	r0, [r7, #24]
 8003b62:	f7ff fec3 	bl	80038ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	78fa      	ldrb	r2, [r7, #3]
 8003b6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b08a      	sub	sp, #40	@ 0x28
 8003b7a:	af02      	add	r7, sp, #8
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10b      	bne.n	8003ba0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8003b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	61bb      	str	r3, [r7, #24]
}
 8003b9a:	bf00      	nop
 8003b9c:	bf00      	nop
 8003b9e:	e7fd      	b.n	8003b9c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d90b      	bls.n	8003bc0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	617b      	str	r3, [r7, #20]
}
 8003bba:	bf00      	nop
 8003bbc:	bf00      	nop
 8003bbe:	e7fd      	b.n	8003bbc <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2100      	movs	r1, #0
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f7ff fef8 	bl	80039c0 <xQueueGenericCreateStatic>
 8003bd0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003bde:	69fb      	ldr	r3, [r7, #28]
	}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3720      	adds	r7, #32
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	613b      	str	r3, [r7, #16]
}
 8003c0a:	bf00      	nop
 8003c0c:	bf00      	nop
 8003c0e:	e7fd      	b.n	8003c0c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d90b      	bls.n	8003c30 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	60fb      	str	r3, [r7, #12]
}
 8003c2a:	bf00      	nop
 8003c2c:	bf00      	nop
 8003c2e:	e7fd      	b.n	8003c2c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003c30:	2202      	movs	r2, #2
 8003c32:	2100      	movs	r1, #0
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff ff40 	bl	8003aba <xQueueGenericCreate>
 8003c3a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003c48:	697b      	ldr	r3, [r7, #20]
	}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08e      	sub	sp, #56	@ 0x38
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c62:	2300      	movs	r3, #0
 8003c64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10b      	bne.n	8003c88 <xQueueGenericSend+0x34>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c82:	bf00      	nop
 8003c84:	bf00      	nop
 8003c86:	e7fd      	b.n	8003c84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d103      	bne.n	8003c96 <xQueueGenericSend+0x42>
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <xQueueGenericSend+0x46>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <xQueueGenericSend+0x48>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10b      	bne.n	8003cb8 <xQueueGenericSend+0x64>
	__asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003cb2:	bf00      	nop
 8003cb4:	bf00      	nop
 8003cb6:	e7fd      	b.n	8003cb4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d103      	bne.n	8003cc6 <xQueueGenericSend+0x72>
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <xQueueGenericSend+0x76>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <xQueueGenericSend+0x78>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10b      	bne.n	8003ce8 <xQueueGenericSend+0x94>
	__asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	623b      	str	r3, [r7, #32]
}
 8003ce2:	bf00      	nop
 8003ce4:	bf00      	nop
 8003ce6:	e7fd      	b.n	8003ce4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ce8:	f001 fc32 	bl	8005550 <xTaskGetSchedulerState>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d102      	bne.n	8003cf8 <xQueueGenericSend+0xa4>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <xQueueGenericSend+0xa8>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <xQueueGenericSend+0xaa>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10b      	bne.n	8003d1a <xQueueGenericSend+0xc6>
	__asm volatile
 8003d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	61fb      	str	r3, [r7, #28]
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	e7fd      	b.n	8003d16 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d1a:	f002 fa85 	bl	8006228 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d302      	bcc.n	8003d30 <xQueueGenericSend+0xdc>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d129      	bne.n	8003d84 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d36:	f000 fc1b 	bl	8004570 <prvCopyDataToQueue>
 8003d3a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d010      	beq.n	8003d66 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d46:	3324      	adds	r3, #36	@ 0x24
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f001 fa3b 	bl	80051c4 <xTaskRemoveFromEventList>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d013      	beq.n	8003d7c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d54:	4b3f      	ldr	r3, [pc, #252]	@ (8003e54 <xQueueGenericSend+0x200>)
 8003d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	e00a      	b.n	8003d7c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d6c:	4b39      	ldr	r3, [pc, #228]	@ (8003e54 <xQueueGenericSend+0x200>)
 8003d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d7c:	f002 fa86 	bl	800628c <vPortExitCritical>
				return pdPASS;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e063      	b.n	8003e4c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d103      	bne.n	8003d92 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d8a:	f002 fa7f 	bl	800628c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e05c      	b.n	8003e4c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d106      	bne.n	8003da6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d98:	f107 0314 	add.w	r3, r7, #20
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f001 fa75 	bl	800528c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003da2:	2301      	movs	r3, #1
 8003da4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003da6:	f002 fa71 	bl	800628c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003daa:	f000 ffdd 	bl	8004d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dae:	f002 fa3b 	bl	8006228 <vPortEnterCritical>
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003db8:	b25b      	sxtb	r3, r3
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbe:	d103      	bne.n	8003dc8 <xQueueGenericSend+0x174>
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dce:	b25b      	sxtb	r3, r3
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d103      	bne.n	8003dde <xQueueGenericSend+0x18a>
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dde:	f002 fa55 	bl	800628c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003de2:	1d3a      	adds	r2, r7, #4
 8003de4:	f107 0314 	add.w	r3, r7, #20
 8003de8:	4611      	mov	r1, r2
 8003dea:	4618      	mov	r0, r3
 8003dec:	f001 fa64 	bl	80052b8 <xTaskCheckForTimeOut>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d124      	bne.n	8003e40 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003df6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003df8:	f000 fcb2 	bl	8004760 <prvIsQueueFull>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d018      	beq.n	8003e34 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e04:	3310      	adds	r3, #16
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4611      	mov	r1, r2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f001 f988 	bl	8005120 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e12:	f000 fc3d 	bl	8004690 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e16:	f000 ffb5 	bl	8004d84 <xTaskResumeAll>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f47f af7c 	bne.w	8003d1a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003e22:	4b0c      	ldr	r3, [pc, #48]	@ (8003e54 <xQueueGenericSend+0x200>)
 8003e24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	e772      	b.n	8003d1a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e36:	f000 fc2b 	bl	8004690 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e3a:	f000 ffa3 	bl	8004d84 <xTaskResumeAll>
 8003e3e:	e76c      	b.n	8003d1a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e42:	f000 fc25 	bl	8004690 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e46:	f000 ff9d 	bl	8004d84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3738      	adds	r7, #56	@ 0x38
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	e000ed04 	.word	0xe000ed04

08003e58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b090      	sub	sp, #64	@ 0x40
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10b      	bne.n	8003e88 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e82:	bf00      	nop
 8003e84:	bf00      	nop
 8003e86:	e7fd      	b.n	8003e84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d103      	bne.n	8003e96 <xQueueGenericSendFromISR+0x3e>
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <xQueueGenericSendFromISR+0x42>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <xQueueGenericSendFromISR+0x44>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003eb2:	bf00      	nop
 8003eb4:	bf00      	nop
 8003eb6:	e7fd      	b.n	8003eb4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d103      	bne.n	8003ec6 <xQueueGenericSendFromISR+0x6e>
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <xQueueGenericSendFromISR+0x72>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <xQueueGenericSendFromISR+0x74>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10b      	bne.n	8003ee8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	623b      	str	r3, [r7, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	bf00      	nop
 8003ee6:	e7fd      	b.n	8003ee4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ee8:	f002 fa7e 	bl	80063e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003eec:	f3ef 8211 	mrs	r2, BASEPRI
 8003ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	61fa      	str	r2, [r7, #28]
 8003f02:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f04:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f06:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d302      	bcc.n	8003f1a <xQueueGenericSendFromISR+0xc2>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d12f      	bne.n	8003f7a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f30:	f000 fb1e 	bl	8004570 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f34:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3c:	d112      	bne.n	8003f64 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d016      	beq.n	8003f74 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f48:	3324      	adds	r3, #36	@ 0x24
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 f93a 	bl	80051c4 <xTaskRemoveFromEventList>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00e      	beq.n	8003f74 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00b      	beq.n	8003f74 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	e007      	b.n	8003f74 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003f68:	3301      	adds	r3, #1
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	b25a      	sxtb	r2, r3
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003f74:	2301      	movs	r3, #1
 8003f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003f78:	e001      	b.n	8003f7e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f80:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3740      	adds	r7, #64	@ 0x40
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08c      	sub	sp, #48	@ 0x30
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10b      	bne.n	8003fc6 <xQueueReceive+0x32>
	__asm volatile
 8003fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	623b      	str	r3, [r7, #32]
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	e7fd      	b.n	8003fc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d103      	bne.n	8003fd4 <xQueueReceive+0x40>
 8003fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <xQueueReceive+0x44>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <xQueueReceive+0x46>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10b      	bne.n	8003ff6 <xQueueReceive+0x62>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	61fb      	str	r3, [r7, #28]
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	e7fd      	b.n	8003ff2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ff6:	f001 faab 	bl	8005550 <xTaskGetSchedulerState>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d102      	bne.n	8004006 <xQueueReceive+0x72>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <xQueueReceive+0x76>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <xQueueReceive+0x78>
 800400a:	2300      	movs	r3, #0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <xQueueReceive+0x94>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	61bb      	str	r3, [r7, #24]
}
 8004022:	bf00      	nop
 8004024:	bf00      	nop
 8004026:	e7fd      	b.n	8004024 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004028:	f002 f8fe 	bl	8006228 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800402c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004030:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01f      	beq.n	8004078 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800403c:	f000 fb02 	bl	8004644 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	1e5a      	subs	r2, r3, #1
 8004044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004046:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00f      	beq.n	8004070 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004052:	3310      	adds	r3, #16
 8004054:	4618      	mov	r0, r3
 8004056:	f001 f8b5 	bl	80051c4 <xTaskRemoveFromEventList>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004060:	4b3c      	ldr	r3, [pc, #240]	@ (8004154 <xQueueReceive+0x1c0>)
 8004062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004070:	f002 f90c 	bl	800628c <vPortExitCritical>
				return pdPASS;
 8004074:	2301      	movs	r3, #1
 8004076:	e069      	b.n	800414c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d103      	bne.n	8004086 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800407e:	f002 f905 	bl	800628c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004082:	2300      	movs	r3, #0
 8004084:	e062      	b.n	800414c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800408c:	f107 0310 	add.w	r3, r7, #16
 8004090:	4618      	mov	r0, r3
 8004092:	f001 f8fb 	bl	800528c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004096:	2301      	movs	r3, #1
 8004098:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800409a:	f002 f8f7 	bl	800628c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800409e:	f000 fe63 	bl	8004d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040a2:	f002 f8c1 	bl	8006228 <vPortEnterCritical>
 80040a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040ac:	b25b      	sxtb	r3, r3
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d103      	bne.n	80040bc <xQueueReceive+0x128>
 80040b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040c2:	b25b      	sxtb	r3, r3
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d103      	bne.n	80040d2 <xQueueReceive+0x13e>
 80040ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040d2:	f002 f8db 	bl	800628c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040d6:	1d3a      	adds	r2, r7, #4
 80040d8:	f107 0310 	add.w	r3, r7, #16
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f001 f8ea 	bl	80052b8 <xTaskCheckForTimeOut>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d123      	bne.n	8004132 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040ec:	f000 fb22 	bl	8004734 <prvIsQueueEmpty>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d017      	beq.n	8004126 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f8:	3324      	adds	r3, #36	@ 0x24
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4611      	mov	r1, r2
 80040fe:	4618      	mov	r0, r3
 8004100:	f001 f80e 	bl	8005120 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004104:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004106:	f000 fac3 	bl	8004690 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800410a:	f000 fe3b 	bl	8004d84 <xTaskResumeAll>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d189      	bne.n	8004028 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004114:	4b0f      	ldr	r3, [pc, #60]	@ (8004154 <xQueueReceive+0x1c0>)
 8004116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	e780      	b.n	8004028 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004128:	f000 fab2 	bl	8004690 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800412c:	f000 fe2a 	bl	8004d84 <xTaskResumeAll>
 8004130:	e77a      	b.n	8004028 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004134:	f000 faac 	bl	8004690 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004138:	f000 fe24 	bl	8004d84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800413c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800413e:	f000 faf9 	bl	8004734 <prvIsQueueEmpty>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	f43f af6f 	beq.w	8004028 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800414a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800414c:	4618      	mov	r0, r3
 800414e:	3730      	adds	r7, #48	@ 0x30
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	e000ed04 	.word	0xe000ed04

08004158 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08e      	sub	sp, #56	@ 0x38
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004162:	2300      	movs	r3, #0
 8004164:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800416a:	2300      	movs	r3, #0
 800416c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800416e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	623b      	str	r3, [r7, #32]
}
 8004186:	bf00      	nop
 8004188:	bf00      	nop
 800418a:	e7fd      	b.n	8004188 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800418c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00b      	beq.n	80041ac <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	61fb      	str	r3, [r7, #28]
}
 80041a6:	bf00      	nop
 80041a8:	bf00      	nop
 80041aa:	e7fd      	b.n	80041a8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041ac:	f001 f9d0 	bl	8005550 <xTaskGetSchedulerState>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d102      	bne.n	80041bc <xQueueSemaphoreTake+0x64>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <xQueueSemaphoreTake+0x68>
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <xQueueSemaphoreTake+0x6a>
 80041c0:	2300      	movs	r3, #0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10b      	bne.n	80041de <xQueueSemaphoreTake+0x86>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	61bb      	str	r3, [r7, #24]
}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	e7fd      	b.n	80041da <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041de:	f002 f823 	bl	8006228 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80041e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80041e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d024      	beq.n	8004238 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80041ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f0:	1e5a      	subs	r2, r3, #1
 80041f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d104      	bne.n	8004208 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80041fe:	f001 fb21 	bl	8005844 <pvTaskIncrementMutexHeldCount>
 8004202:	4602      	mov	r2, r0
 8004204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004206:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00f      	beq.n	8004230 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004212:	3310      	adds	r3, #16
 8004214:	4618      	mov	r0, r3
 8004216:	f000 ffd5 	bl	80051c4 <xTaskRemoveFromEventList>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004220:	4b54      	ldr	r3, [pc, #336]	@ (8004374 <xQueueSemaphoreTake+0x21c>)
 8004222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004230:	f002 f82c 	bl	800628c <vPortExitCritical>
				return pdPASS;
 8004234:	2301      	movs	r3, #1
 8004236:	e098      	b.n	800436a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d112      	bne.n	8004264 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800423e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00b      	beq.n	800425c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	617b      	str	r3, [r7, #20]
}
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800425c:	f002 f816 	bl	800628c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004260:	2300      	movs	r3, #0
 8004262:	e082      	b.n	800436a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800426a:	f107 030c 	add.w	r3, r7, #12
 800426e:	4618      	mov	r0, r3
 8004270:	f001 f80c 	bl	800528c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004274:	2301      	movs	r3, #1
 8004276:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004278:	f002 f808 	bl	800628c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800427c:	f000 fd74 	bl	8004d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004280:	f001 ffd2 	bl	8006228 <vPortEnterCritical>
 8004284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004286:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800428a:	b25b      	sxtb	r3, r3
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004290:	d103      	bne.n	800429a <xQueueSemaphoreTake+0x142>
 8004292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800429a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042a0:	b25b      	sxtb	r3, r3
 80042a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a6:	d103      	bne.n	80042b0 <xQueueSemaphoreTake+0x158>
 80042a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042b0:	f001 ffec 	bl	800628c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042b4:	463a      	mov	r2, r7
 80042b6:	f107 030c 	add.w	r3, r7, #12
 80042ba:	4611      	mov	r1, r2
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fffb 	bl	80052b8 <xTaskCheckForTimeOut>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d132      	bne.n	800432e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80042ca:	f000 fa33 	bl	8004734 <prvIsQueueEmpty>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d026      	beq.n	8004322 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d109      	bne.n	80042f0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80042dc:	f001 ffa4 	bl	8006228 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80042e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f001 f951 	bl	800558c <xTaskPriorityInherit>
 80042ea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80042ec:	f001 ffce 	bl	800628c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f2:	3324      	adds	r3, #36	@ 0x24
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 ff11 	bl	8005120 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004300:	f000 f9c6 	bl	8004690 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004304:	f000 fd3e 	bl	8004d84 <xTaskResumeAll>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	f47f af67 	bne.w	80041de <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004310:	4b18      	ldr	r3, [pc, #96]	@ (8004374 <xQueueSemaphoreTake+0x21c>)
 8004312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	e75d      	b.n	80041de <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004322:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004324:	f000 f9b4 	bl	8004690 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004328:	f000 fd2c 	bl	8004d84 <xTaskResumeAll>
 800432c:	e757      	b.n	80041de <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800432e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004330:	f000 f9ae 	bl	8004690 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004334:	f000 fd26 	bl	8004d84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004338:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800433a:	f000 f9fb 	bl	8004734 <prvIsQueueEmpty>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	f43f af4c 	beq.w	80041de <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00d      	beq.n	8004368 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800434c:	f001 ff6c 	bl	8006228 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004350:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004352:	f000 f8f5 	bl	8004540 <prvGetDisinheritPriorityAfterTimeout>
 8004356:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800435e:	4618      	mov	r0, r3
 8004360:	f001 f9ec 	bl	800573c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004364:	f001 ff92 	bl	800628c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004368:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800436a:	4618      	mov	r0, r3
 800436c:	3738      	adds	r7, #56	@ 0x38
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08e      	sub	sp, #56	@ 0x38
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10b      	bne.n	80043a6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	623b      	str	r3, [r7, #32]
}
 80043a0:	bf00      	nop
 80043a2:	bf00      	nop
 80043a4:	e7fd      	b.n	80043a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d103      	bne.n	80043b4 <xQueueReceiveFromISR+0x3c>
 80043ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <xQueueReceiveFromISR+0x40>
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <xQueueReceiveFromISR+0x42>
 80043b8:	2300      	movs	r3, #0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10b      	bne.n	80043d6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	61fb      	str	r3, [r7, #28]
}
 80043d0:	bf00      	nop
 80043d2:	bf00      	nop
 80043d4:	e7fd      	b.n	80043d2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043d6:	f002 f807 	bl	80063e8 <vPortValidateInterruptPriority>
	__asm volatile
 80043da:	f3ef 8211 	mrs	r2, BASEPRI
 80043de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	61ba      	str	r2, [r7, #24]
 80043f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80043f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d02f      	beq.n	8004462 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004404:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004410:	f000 f918 	bl	8004644 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004416:	1e5a      	subs	r2, r3, #1
 8004418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800441c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d112      	bne.n	800444c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d016      	beq.n	800445c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800442e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004430:	3310      	adds	r3, #16
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fec6 	bl	80051c4 <xTaskRemoveFromEventList>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00e      	beq.n	800445c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00b      	beq.n	800445c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	e007      	b.n	800445c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800444c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004450:	3301      	adds	r3, #1
 8004452:	b2db      	uxtb	r3, r3
 8004454:	b25a      	sxtb	r2, r3
 8004456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800445c:	2301      	movs	r3, #1
 800445e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004460:	e001      	b.n	8004466 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004462:	2300      	movs	r3, #0
 8004464:	637b      	str	r3, [r7, #52]	@ 0x34
 8004466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004468:	613b      	str	r3, [r7, #16]
	__asm volatile
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f383 8811 	msr	BASEPRI, r3
}
 8004470:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004474:	4618      	mov	r0, r3
 8004476:	3738      	adds	r7, #56	@ 0x38
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10b      	bne.n	80044a2 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	60bb      	str	r3, [r7, #8]
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	e7fd      	b.n	800449e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80044a2:	f001 fec1 	bl	8006228 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044aa:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80044ac:	f001 feee 	bl	800628c <vPortExitCritical>

	return uxReturn;
 80044b0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80044ba:	b480      	push	{r7}
 80044bc:	b087      	sub	sp, #28
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10b      	bne.n	80044e4 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	60fb      	str	r3, [r7, #12]
}
 80044de:	bf00      	nop
 80044e0:	bf00      	nop
 80044e2:	e7fd      	b.n	80044e0 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80044ea:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80044ec:	4618      	mov	r0, r3
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <vQueueDelete+0x2a>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	60bb      	str	r3, [r7, #8]
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	e7fd      	b.n	800451e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f95e 	bl	80047e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f002 f868 	bl	8006608 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004538:	bf00      	nop
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454c:	2b00      	cmp	r3, #0
 800454e:	d006      	beq.n	800455e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	e001      	b.n	8004562 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004562:	68fb      	ldr	r3, [r7, #12]
	}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004584:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10d      	bne.n	80045aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d14d      	bne.n	8004632 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	4618      	mov	r0, r3
 800459c:	f001 f85e 	bl	800565c <xTaskPriorityDisinherit>
 80045a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	609a      	str	r2, [r3, #8]
 80045a8:	e043      	b.n	8004632 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d119      	bne.n	80045e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6858      	ldr	r0, [r3, #4]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b8:	461a      	mov	r2, r3
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	f002 f9d0 	bl	8006960 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c8:	441a      	add	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d32b      	bcc.n	8004632 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	e026      	b.n	8004632 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	68d8      	ldr	r0, [r3, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ec:	461a      	mov	r2, r3
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	f002 f9b6 	bl	8006960 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fc:	425b      	negs	r3, r3
 80045fe:	441a      	add	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d207      	bcs.n	8004620 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004618:	425b      	negs	r3, r3
 800461a:	441a      	add	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d105      	bne.n	8004632 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	3b01      	subs	r3, #1
 8004630:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800463a:	697b      	ldr	r3, [r7, #20]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d018      	beq.n	8004688 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465e:	441a      	add	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	429a      	cmp	r2, r3
 800466e:	d303      	bcc.n	8004678 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68d9      	ldr	r1, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004680:	461a      	mov	r2, r3
 8004682:	6838      	ldr	r0, [r7, #0]
 8004684:	f002 f96c 	bl	8006960 <memcpy>
	}
}
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004698:	f001 fdc6 	bl	8006228 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046a4:	e011      	b.n	80046ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d012      	beq.n	80046d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3324      	adds	r3, #36	@ 0x24
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fd86 	bl	80051c4 <xTaskRemoveFromEventList>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046be:	f000 fe5f 	bl	8005380 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	dce9      	bgt.n	80046a6 <prvUnlockQueue+0x16>
 80046d2:	e000      	b.n	80046d6 <prvUnlockQueue+0x46>
					break;
 80046d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	22ff      	movs	r2, #255	@ 0xff
 80046da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80046de:	f001 fdd5 	bl	800628c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046e2:	f001 fda1 	bl	8006228 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046ee:	e011      	b.n	8004714 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d012      	beq.n	800471e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3310      	adds	r3, #16
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fd61 	bl	80051c4 <xTaskRemoveFromEventList>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004708:	f000 fe3a 	bl	8005380 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800470c:	7bbb      	ldrb	r3, [r7, #14]
 800470e:	3b01      	subs	r3, #1
 8004710:	b2db      	uxtb	r3, r3
 8004712:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004714:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004718:	2b00      	cmp	r3, #0
 800471a:	dce9      	bgt.n	80046f0 <prvUnlockQueue+0x60>
 800471c:	e000      	b.n	8004720 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800471e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	22ff      	movs	r2, #255	@ 0xff
 8004724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004728:	f001 fdb0 	bl	800628c <vPortExitCritical>
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800473c:	f001 fd74 	bl	8006228 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004748:	2301      	movs	r3, #1
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	e001      	b.n	8004752 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004752:	f001 fd9b 	bl	800628c <vPortExitCritical>

	return xReturn;
 8004756:	68fb      	ldr	r3, [r7, #12]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004768:	f001 fd5e 	bl	8006228 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004774:	429a      	cmp	r2, r3
 8004776:	d102      	bne.n	800477e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004778:	2301      	movs	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	e001      	b.n	8004782 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004782:	f001 fd83 	bl	800628c <vPortExitCritical>

	return xReturn;
 8004786:	68fb      	ldr	r3, [r7, #12]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	e014      	b.n	80047ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80047a0:	4a0f      	ldr	r2, [pc, #60]	@ (80047e0 <vQueueAddToRegistry+0x50>)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80047ac:	490c      	ldr	r1, [pc, #48]	@ (80047e0 <vQueueAddToRegistry+0x50>)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80047b6:	4a0a      	ldr	r2, [pc, #40]	@ (80047e0 <vQueueAddToRegistry+0x50>)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	4413      	add	r3, r2
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80047c2:	e006      	b.n	80047d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	3301      	adds	r3, #1
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b07      	cmp	r3, #7
 80047ce:	d9e7      	bls.n	80047a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80047d0:	bf00      	nop
 80047d2:	bf00      	nop
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	20000874 	.word	0x20000874

080047e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	e016      	b.n	8004820 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80047f2:	4a10      	ldr	r2, [pc, #64]	@ (8004834 <vQueueUnregisterQueue+0x50>)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	4413      	add	r3, r2
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d10b      	bne.n	800481a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004802:	4a0c      	ldr	r2, [pc, #48]	@ (8004834 <vQueueUnregisterQueue+0x50>)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2100      	movs	r1, #0
 8004808:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800480c:	4a09      	ldr	r2, [pc, #36]	@ (8004834 <vQueueUnregisterQueue+0x50>)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	4413      	add	r3, r2
 8004814:	2200      	movs	r2, #0
 8004816:	605a      	str	r2, [r3, #4]
				break;
 8004818:	e006      	b.n	8004828 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3301      	adds	r3, #1
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b07      	cmp	r3, #7
 8004824:	d9e5      	bls.n	80047f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004826:	bf00      	nop
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	20000874 	.word	0x20000874

08004838 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004848:	f001 fcee 	bl	8006228 <vPortEnterCritical>
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004852:	b25b      	sxtb	r3, r3
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d103      	bne.n	8004862 <vQueueWaitForMessageRestricted+0x2a>
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004868:	b25b      	sxtb	r3, r3
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486e:	d103      	bne.n	8004878 <vQueueWaitForMessageRestricted+0x40>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004878:	f001 fd08 	bl	800628c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004880:	2b00      	cmp	r3, #0
 8004882:	d106      	bne.n	8004892 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	3324      	adds	r3, #36	@ 0x24
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fc6d 	bl	800516c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004892:	6978      	ldr	r0, [r7, #20]
 8004894:	f7ff fefc 	bl	8004690 <prvUnlockQueue>
	}
 8004898:	bf00      	nop
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08e      	sub	sp, #56	@ 0x38
 80048a4:	af04      	add	r7, sp, #16
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10b      	bne.n	80048cc <xTaskCreateStatic+0x2c>
	__asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	623b      	str	r3, [r7, #32]
}
 80048c6:	bf00      	nop
 80048c8:	bf00      	nop
 80048ca:	e7fd      	b.n	80048c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10b      	bne.n	80048ea <xTaskCreateStatic+0x4a>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	61fb      	str	r3, [r7, #28]
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop
 80048e8:	e7fd      	b.n	80048e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048ea:	23a8      	movs	r3, #168	@ 0xa8
 80048ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2ba8      	cmp	r3, #168	@ 0xa8
 80048f2:	d00b      	beq.n	800490c <xTaskCreateStatic+0x6c>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	61bb      	str	r3, [r7, #24]
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	e7fd      	b.n	8004908 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800490c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800490e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01e      	beq.n	8004952 <xTaskCreateStatic+0xb2>
 8004914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004916:	2b00      	cmp	r3, #0
 8004918:	d01b      	beq.n	8004952 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800491a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	2202      	movs	r2, #2
 8004928:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800492c:	2300      	movs	r3, #0
 800492e:	9303      	str	r3, [sp, #12]
 8004930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004932:	9302      	str	r3, [sp, #8]
 8004934:	f107 0314 	add.w	r3, r7, #20
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	68b9      	ldr	r1, [r7, #8]
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 f851 	bl	80049ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800494a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800494c:	f000 f8f6 	bl	8004b3c <prvAddNewTaskToReadyList>
 8004950:	e001      	b.n	8004956 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004952:	2300      	movs	r3, #0
 8004954:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004956:	697b      	ldr	r3, [r7, #20]
	}
 8004958:	4618      	mov	r0, r3
 800495a:	3728      	adds	r7, #40	@ 0x28
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08c      	sub	sp, #48	@ 0x30
 8004964:	af04      	add	r7, sp, #16
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	4613      	mov	r3, r2
 800496e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4618      	mov	r0, r3
 8004976:	f001 fd79 	bl	800646c <pvPortMalloc>
 800497a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00e      	beq.n	80049a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004982:	20a8      	movs	r0, #168	@ 0xa8
 8004984:	f001 fd72 	bl	800646c <pvPortMalloc>
 8004988:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	631a      	str	r2, [r3, #48]	@ 0x30
 8004996:	e005      	b.n	80049a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004998:	6978      	ldr	r0, [r7, #20]
 800499a:	f001 fe35 	bl	8006608 <vPortFree>
 800499e:	e001      	b.n	80049a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d017      	beq.n	80049da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049b2:	88fa      	ldrh	r2, [r7, #6]
 80049b4:	2300      	movs	r3, #0
 80049b6:	9303      	str	r3, [sp, #12]
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	9302      	str	r3, [sp, #8]
 80049bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68b9      	ldr	r1, [r7, #8]
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f80f 	bl	80049ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049ce:	69f8      	ldr	r0, [r7, #28]
 80049d0:	f000 f8b4 	bl	8004b3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049d4:	2301      	movs	r3, #1
 80049d6:	61bb      	str	r3, [r7, #24]
 80049d8:	e002      	b.n	80049e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049da:	f04f 33ff 	mov.w	r3, #4294967295
 80049de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049e0:	69bb      	ldr	r3, [r7, #24]
	}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80049fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	461a      	mov	r2, r3
 8004a04:	21a5      	movs	r1, #165	@ 0xa5
 8004a06:	f001 ff1f 	bl	8006848 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a14:	3b01      	subs	r3, #1
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	f023 0307 	bic.w	r3, r3, #7
 8004a22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	617b      	str	r3, [r7, #20]
}
 8004a40:	bf00      	nop
 8004a42:	bf00      	nop
 8004a44:	e7fd      	b.n	8004a42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01f      	beq.n	8004a8c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	e012      	b.n	8004a78 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	4413      	add	r3, r2
 8004a58:	7819      	ldrb	r1, [r3, #0]
 8004a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	4413      	add	r3, r2
 8004a60:	3334      	adds	r3, #52	@ 0x34
 8004a62:	460a      	mov	r2, r1
 8004a64:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d006      	beq.n	8004a80 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	3301      	adds	r3, #1
 8004a76:	61fb      	str	r3, [r7, #28]
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	2b0f      	cmp	r3, #15
 8004a7c:	d9e9      	bls.n	8004a52 <prvInitialiseNewTask+0x66>
 8004a7e:	e000      	b.n	8004a82 <prvInitialiseNewTask+0x96>
			{
				break;
 8004a80:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a8a:	e003      	b.n	8004a94 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a96:	2b37      	cmp	r3, #55	@ 0x37
 8004a98:	d901      	bls.n	8004a9e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a9a:	2337      	movs	r3, #55	@ 0x37
 8004a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004aa8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aac:	2200      	movs	r2, #0
 8004aae:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fe fe85 	bl	80037c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abc:	3318      	adds	r3, #24
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fe fe80 	bl	80037c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ac8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004acc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ad8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004adc:	2200      	movs	r2, #0
 8004ade:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aec:	3354      	adds	r3, #84	@ 0x54
 8004aee:	224c      	movs	r2, #76	@ 0x4c
 8004af0:	2100      	movs	r1, #0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f001 fea8 	bl	8006848 <memset>
 8004af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afa:	4a0d      	ldr	r2, [pc, #52]	@ (8004b30 <prvInitialiseNewTask+0x144>)
 8004afc:	659a      	str	r2, [r3, #88]	@ 0x58
 8004afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b00:	4a0c      	ldr	r2, [pc, #48]	@ (8004b34 <prvInitialiseNewTask+0x148>)
 8004b02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b06:	4a0c      	ldr	r2, [pc, #48]	@ (8004b38 <prvInitialiseNewTask+0x14c>)
 8004b08:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	68f9      	ldr	r1, [r7, #12]
 8004b0e:	69b8      	ldr	r0, [r7, #24]
 8004b10:	f001 fa5a 	bl	8005fc8 <pxPortInitialiseStack>
 8004b14:	4602      	mov	r2, r0
 8004b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b26:	bf00      	nop
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20004b08 	.word	0x20004b08
 8004b34:	20004b70 	.word	0x20004b70
 8004b38:	20004bd8 	.word	0x20004bd8

08004b3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b44:	f001 fb70 	bl	8006228 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b48:	4b2d      	ldr	r3, [pc, #180]	@ (8004c00 <prvAddNewTaskToReadyList+0xc4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	4a2c      	ldr	r2, [pc, #176]	@ (8004c00 <prvAddNewTaskToReadyList+0xc4>)
 8004b50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b52:	4b2c      	ldr	r3, [pc, #176]	@ (8004c04 <prvAddNewTaskToReadyList+0xc8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d109      	bne.n	8004b6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b5a:	4a2a      	ldr	r2, [pc, #168]	@ (8004c04 <prvAddNewTaskToReadyList+0xc8>)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b60:	4b27      	ldr	r3, [pc, #156]	@ (8004c00 <prvAddNewTaskToReadyList+0xc4>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d110      	bne.n	8004b8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b68:	f000 fc2e 	bl	80053c8 <prvInitialiseTaskLists>
 8004b6c:	e00d      	b.n	8004b8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b6e:	4b26      	ldr	r3, [pc, #152]	@ (8004c08 <prvAddNewTaskToReadyList+0xcc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d109      	bne.n	8004b8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b76:	4b23      	ldr	r3, [pc, #140]	@ (8004c04 <prvAddNewTaskToReadyList+0xc8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d802      	bhi.n	8004b8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b84:	4a1f      	ldr	r2, [pc, #124]	@ (8004c04 <prvAddNewTaskToReadyList+0xc8>)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b8a:	4b20      	ldr	r3, [pc, #128]	@ (8004c0c <prvAddNewTaskToReadyList+0xd0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	4a1e      	ldr	r2, [pc, #120]	@ (8004c0c <prvAddNewTaskToReadyList+0xd0>)
 8004b92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b94:	4b1d      	ldr	r3, [pc, #116]	@ (8004c0c <prvAddNewTaskToReadyList+0xd0>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c10 <prvAddNewTaskToReadyList+0xd4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d903      	bls.n	8004bb0 <prvAddNewTaskToReadyList+0x74>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	4a18      	ldr	r2, [pc, #96]	@ (8004c10 <prvAddNewTaskToReadyList+0xd4>)
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4a15      	ldr	r2, [pc, #84]	@ (8004c14 <prvAddNewTaskToReadyList+0xd8>)
 8004bbe:	441a      	add	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	f7fe fe09 	bl	80037de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004bcc:	f001 fb5e 	bl	800628c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8004c08 <prvAddNewTaskToReadyList+0xcc>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00e      	beq.n	8004bf6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c04 <prvAddNewTaskToReadyList+0xc8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d207      	bcs.n	8004bf6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004be6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c18 <prvAddNewTaskToReadyList+0xdc>)
 8004be8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000d88 	.word	0x20000d88
 8004c04:	200008b4 	.word	0x200008b4
 8004c08:	20000d94 	.word	0x20000d94
 8004c0c:	20000da4 	.word	0x20000da4
 8004c10:	20000d90 	.word	0x20000d90
 8004c14:	200008b8 	.word	0x200008b8
 8004c18:	e000ed04 	.word	0xe000ed04

08004c1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d018      	beq.n	8004c60 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c2e:	4b14      	ldr	r3, [pc, #80]	@ (8004c80 <vTaskDelay+0x64>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00b      	beq.n	8004c4e <vTaskDelay+0x32>
	__asm volatile
 8004c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	60bb      	str	r3, [r7, #8]
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	e7fd      	b.n	8004c4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c4e:	f000 f88b 	bl	8004d68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c52:	2100      	movs	r1, #0
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fe09 	bl	800586c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c5a:	f000 f893 	bl	8004d84 <xTaskResumeAll>
 8004c5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d107      	bne.n	8004c76 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004c66:	4b07      	ldr	r3, [pc, #28]	@ (8004c84 <vTaskDelay+0x68>)
 8004c68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c76:	bf00      	nop
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000db0 	.word	0x20000db0
 8004c84:	e000ed04 	.word	0xe000ed04

08004c88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08a      	sub	sp, #40	@ 0x28
 8004c8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c96:	463a      	mov	r2, r7
 8004c98:	1d39      	adds	r1, r7, #4
 8004c9a:	f107 0308 	add.w	r3, r7, #8
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe fd3c 	bl	800371c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ca4:	6839      	ldr	r1, [r7, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	9202      	str	r2, [sp, #8]
 8004cac:	9301      	str	r3, [sp, #4]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	460a      	mov	r2, r1
 8004cb6:	4924      	ldr	r1, [pc, #144]	@ (8004d48 <vTaskStartScheduler+0xc0>)
 8004cb8:	4824      	ldr	r0, [pc, #144]	@ (8004d4c <vTaskStartScheduler+0xc4>)
 8004cba:	f7ff fdf1 	bl	80048a0 <xTaskCreateStatic>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4a23      	ldr	r2, [pc, #140]	@ (8004d50 <vTaskStartScheduler+0xc8>)
 8004cc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cc4:	4b22      	ldr	r3, [pc, #136]	@ (8004d50 <vTaskStartScheduler+0xc8>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e001      	b.n	8004cd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d102      	bne.n	8004ce2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004cdc:	f000 fe1a 	bl	8005914 <xTimerCreateTimerTask>
 8004ce0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d11b      	bne.n	8004d20 <vTaskStartScheduler+0x98>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	613b      	str	r3, [r7, #16]
}
 8004cfa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004cfc:	4b15      	ldr	r3, [pc, #84]	@ (8004d54 <vTaskStartScheduler+0xcc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3354      	adds	r3, #84	@ 0x54
 8004d02:	4a15      	ldr	r2, [pc, #84]	@ (8004d58 <vTaskStartScheduler+0xd0>)
 8004d04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d06:	4b15      	ldr	r3, [pc, #84]	@ (8004d5c <vTaskStartScheduler+0xd4>)
 8004d08:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d0e:	4b14      	ldr	r3, [pc, #80]	@ (8004d60 <vTaskStartScheduler+0xd8>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d14:	4b13      	ldr	r3, [pc, #76]	@ (8004d64 <vTaskStartScheduler+0xdc>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d1a:	f001 f9e1 	bl	80060e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d1e:	e00f      	b.n	8004d40 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d26:	d10b      	bne.n	8004d40 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	60fb      	str	r3, [r7, #12]
}
 8004d3a:	bf00      	nop
 8004d3c:	bf00      	nop
 8004d3e:	e7fd      	b.n	8004d3c <vTaskStartScheduler+0xb4>
}
 8004d40:	bf00      	nop
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	08006abc 	.word	0x08006abc
 8004d4c:	08005399 	.word	0x08005399
 8004d50:	20000dac 	.word	0x20000dac
 8004d54:	200008b4 	.word	0x200008b4
 8004d58:	20000010 	.word	0x20000010
 8004d5c:	20000da8 	.word	0x20000da8
 8004d60:	20000d94 	.word	0x20000d94
 8004d64:	20000d8c 	.word	0x20000d8c

08004d68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d6c:	4b04      	ldr	r3, [pc, #16]	@ (8004d80 <vTaskSuspendAll+0x18>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3301      	adds	r3, #1
 8004d72:	4a03      	ldr	r2, [pc, #12]	@ (8004d80 <vTaskSuspendAll+0x18>)
 8004d74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d76:	bf00      	nop
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	20000db0 	.word	0x20000db0

08004d84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d92:	4b42      	ldr	r3, [pc, #264]	@ (8004e9c <xTaskResumeAll+0x118>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10b      	bne.n	8004db2 <xTaskResumeAll+0x2e>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	603b      	str	r3, [r7, #0]
}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	e7fd      	b.n	8004dae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004db2:	f001 fa39 	bl	8006228 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004db6:	4b39      	ldr	r3, [pc, #228]	@ (8004e9c <xTaskResumeAll+0x118>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	4a37      	ldr	r2, [pc, #220]	@ (8004e9c <xTaskResumeAll+0x118>)
 8004dbe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dc0:	4b36      	ldr	r3, [pc, #216]	@ (8004e9c <xTaskResumeAll+0x118>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d162      	bne.n	8004e8e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dc8:	4b35      	ldr	r3, [pc, #212]	@ (8004ea0 <xTaskResumeAll+0x11c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d05e      	beq.n	8004e8e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dd0:	e02f      	b.n	8004e32 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dd2:	4b34      	ldr	r3, [pc, #208]	@ (8004ea4 <xTaskResumeAll+0x120>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3318      	adds	r3, #24
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fd5a 	bl	8003898 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3304      	adds	r3, #4
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fe fd55 	bl	8003898 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df2:	4b2d      	ldr	r3, [pc, #180]	@ (8004ea8 <xTaskResumeAll+0x124>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d903      	bls.n	8004e02 <xTaskResumeAll+0x7e>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8004ea8 <xTaskResumeAll+0x124>)
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e06:	4613      	mov	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4a27      	ldr	r2, [pc, #156]	@ (8004eac <xTaskResumeAll+0x128>)
 8004e10:	441a      	add	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4619      	mov	r1, r3
 8004e18:	4610      	mov	r0, r2
 8004e1a:	f7fe fce0 	bl	80037de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e22:	4b23      	ldr	r3, [pc, #140]	@ (8004eb0 <xTaskResumeAll+0x12c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d302      	bcc.n	8004e32 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004e2c:	4b21      	ldr	r3, [pc, #132]	@ (8004eb4 <xTaskResumeAll+0x130>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e32:	4b1c      	ldr	r3, [pc, #112]	@ (8004ea4 <xTaskResumeAll+0x120>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1cb      	bne.n	8004dd2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e40:	f000 fb66 	bl	8005510 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e44:	4b1c      	ldr	r3, [pc, #112]	@ (8004eb8 <xTaskResumeAll+0x134>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d010      	beq.n	8004e72 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e50:	f000 f846 	bl	8004ee0 <xTaskIncrementTick>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004e5a:	4b16      	ldr	r3, [pc, #88]	@ (8004eb4 <xTaskResumeAll+0x130>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1f1      	bne.n	8004e50 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004e6c:	4b12      	ldr	r3, [pc, #72]	@ (8004eb8 <xTaskResumeAll+0x134>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e72:	4b10      	ldr	r3, [pc, #64]	@ (8004eb4 <xTaskResumeAll+0x130>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d009      	beq.n	8004e8e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ebc <xTaskResumeAll+0x138>)
 8004e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e8e:	f001 f9fd 	bl	800628c <vPortExitCritical>

	return xAlreadyYielded;
 8004e92:	68bb      	ldr	r3, [r7, #8]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20000db0 	.word	0x20000db0
 8004ea0:	20000d88 	.word	0x20000d88
 8004ea4:	20000d48 	.word	0x20000d48
 8004ea8:	20000d90 	.word	0x20000d90
 8004eac:	200008b8 	.word	0x200008b8
 8004eb0:	200008b4 	.word	0x200008b4
 8004eb4:	20000d9c 	.word	0x20000d9c
 8004eb8:	20000d98 	.word	0x20000d98
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004ec6:	4b05      	ldr	r3, [pc, #20]	@ (8004edc <xTaskGetTickCount+0x1c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ecc:	687b      	ldr	r3, [r7, #4]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000d8c 	.word	0x20000d8c

08004ee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eea:	4b4f      	ldr	r3, [pc, #316]	@ (8005028 <xTaskIncrementTick+0x148>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f040 8090 	bne.w	8005014 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800502c <xTaskIncrementTick+0x14c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004efc:	4a4b      	ldr	r2, [pc, #300]	@ (800502c <xTaskIncrementTick+0x14c>)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d121      	bne.n	8004f4c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f08:	4b49      	ldr	r3, [pc, #292]	@ (8005030 <xTaskIncrementTick+0x150>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00b      	beq.n	8004f2a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	603b      	str	r3, [r7, #0]
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop
 8004f28:	e7fd      	b.n	8004f26 <xTaskIncrementTick+0x46>
 8004f2a:	4b41      	ldr	r3, [pc, #260]	@ (8005030 <xTaskIncrementTick+0x150>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	4b40      	ldr	r3, [pc, #256]	@ (8005034 <xTaskIncrementTick+0x154>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a3e      	ldr	r2, [pc, #248]	@ (8005030 <xTaskIncrementTick+0x150>)
 8004f36:	6013      	str	r3, [r2, #0]
 8004f38:	4a3e      	ldr	r2, [pc, #248]	@ (8005034 <xTaskIncrementTick+0x154>)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8005038 <xTaskIncrementTick+0x158>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3301      	adds	r3, #1
 8004f44:	4a3c      	ldr	r2, [pc, #240]	@ (8005038 <xTaskIncrementTick+0x158>)
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	f000 fae2 	bl	8005510 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800503c <xTaskIncrementTick+0x15c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d349      	bcc.n	8004fea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f56:	4b36      	ldr	r3, [pc, #216]	@ (8005030 <xTaskIncrementTick+0x150>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d104      	bne.n	8004f6a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f60:	4b36      	ldr	r3, [pc, #216]	@ (800503c <xTaskIncrementTick+0x15c>)
 8004f62:	f04f 32ff 	mov.w	r2, #4294967295
 8004f66:	601a      	str	r2, [r3, #0]
					break;
 8004f68:	e03f      	b.n	8004fea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f6a:	4b31      	ldr	r3, [pc, #196]	@ (8005030 <xTaskIncrementTick+0x150>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d203      	bcs.n	8004f8a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f82:	4a2e      	ldr	r2, [pc, #184]	@ (800503c <xTaskIncrementTick+0x15c>)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f88:	e02f      	b.n	8004fea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fe fc82 	bl	8003898 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d004      	beq.n	8004fa6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	3318      	adds	r3, #24
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fe fc79 	bl	8003898 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004faa:	4b25      	ldr	r3, [pc, #148]	@ (8005040 <xTaskIncrementTick+0x160>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d903      	bls.n	8004fba <xTaskIncrementTick+0xda>
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb6:	4a22      	ldr	r2, [pc, #136]	@ (8005040 <xTaskIncrementTick+0x160>)
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8005044 <xTaskIncrementTick+0x164>)
 8004fc8:	441a      	add	r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	f7fe fc04 	bl	80037de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fda:	4b1b      	ldr	r3, [pc, #108]	@ (8005048 <xTaskIncrementTick+0x168>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d3b8      	bcc.n	8004f56 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fe8:	e7b5      	b.n	8004f56 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fea:	4b17      	ldr	r3, [pc, #92]	@ (8005048 <xTaskIncrementTick+0x168>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff0:	4914      	ldr	r1, [pc, #80]	@ (8005044 <xTaskIncrementTick+0x164>)
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d901      	bls.n	8005006 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005002:	2301      	movs	r3, #1
 8005004:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005006:	4b11      	ldr	r3, [pc, #68]	@ (800504c <xTaskIncrementTick+0x16c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d007      	beq.n	800501e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800500e:	2301      	movs	r3, #1
 8005010:	617b      	str	r3, [r7, #20]
 8005012:	e004      	b.n	800501e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005014:	4b0e      	ldr	r3, [pc, #56]	@ (8005050 <xTaskIncrementTick+0x170>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3301      	adds	r3, #1
 800501a:	4a0d      	ldr	r2, [pc, #52]	@ (8005050 <xTaskIncrementTick+0x170>)
 800501c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800501e:	697b      	ldr	r3, [r7, #20]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	20000db0 	.word	0x20000db0
 800502c:	20000d8c 	.word	0x20000d8c
 8005030:	20000d40 	.word	0x20000d40
 8005034:	20000d44 	.word	0x20000d44
 8005038:	20000da0 	.word	0x20000da0
 800503c:	20000da8 	.word	0x20000da8
 8005040:	20000d90 	.word	0x20000d90
 8005044:	200008b8 	.word	0x200008b8
 8005048:	200008b4 	.word	0x200008b4
 800504c:	20000d9c 	.word	0x20000d9c
 8005050:	20000d98 	.word	0x20000d98

08005054 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800505a:	4b2b      	ldr	r3, [pc, #172]	@ (8005108 <vTaskSwitchContext+0xb4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005062:	4b2a      	ldr	r3, [pc, #168]	@ (800510c <vTaskSwitchContext+0xb8>)
 8005064:	2201      	movs	r2, #1
 8005066:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005068:	e047      	b.n	80050fa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800506a:	4b28      	ldr	r3, [pc, #160]	@ (800510c <vTaskSwitchContext+0xb8>)
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005070:	4b27      	ldr	r3, [pc, #156]	@ (8005110 <vTaskSwitchContext+0xbc>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	e011      	b.n	800509c <vTaskSwitchContext+0x48>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10b      	bne.n	8005096 <vTaskSwitchContext+0x42>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	607b      	str	r3, [r7, #4]
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop
 8005094:	e7fd      	b.n	8005092 <vTaskSwitchContext+0x3e>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3b01      	subs	r3, #1
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	491d      	ldr	r1, [pc, #116]	@ (8005114 <vTaskSwitchContext+0xc0>)
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0e3      	beq.n	8005078 <vTaskSwitchContext+0x24>
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4a16      	ldr	r2, [pc, #88]	@ (8005114 <vTaskSwitchContext+0xc0>)
 80050bc:	4413      	add	r3, r2
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	605a      	str	r2, [r3, #4]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	3308      	adds	r3, #8
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d104      	bne.n	80050e0 <vTaskSwitchContext+0x8c>
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	605a      	str	r2, [r3, #4]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	4a0c      	ldr	r2, [pc, #48]	@ (8005118 <vTaskSwitchContext+0xc4>)
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	4a09      	ldr	r2, [pc, #36]	@ (8005110 <vTaskSwitchContext+0xbc>)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050f0:	4b09      	ldr	r3, [pc, #36]	@ (8005118 <vTaskSwitchContext+0xc4>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3354      	adds	r3, #84	@ 0x54
 80050f6:	4a09      	ldr	r2, [pc, #36]	@ (800511c <vTaskSwitchContext+0xc8>)
 80050f8:	6013      	str	r3, [r2, #0]
}
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	20000db0 	.word	0x20000db0
 800510c:	20000d9c 	.word	0x20000d9c
 8005110:	20000d90 	.word	0x20000d90
 8005114:	200008b8 	.word	0x200008b8
 8005118:	200008b4 	.word	0x200008b4
 800511c:	20000010 	.word	0x20000010

08005120 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10b      	bne.n	8005148 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	60fb      	str	r3, [r7, #12]
}
 8005142:	bf00      	nop
 8005144:	bf00      	nop
 8005146:	e7fd      	b.n	8005144 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005148:	4b07      	ldr	r3, [pc, #28]	@ (8005168 <vTaskPlaceOnEventList+0x48>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3318      	adds	r3, #24
 800514e:	4619      	mov	r1, r3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7fe fb68 	bl	8003826 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005156:	2101      	movs	r1, #1
 8005158:	6838      	ldr	r0, [r7, #0]
 800515a:	f000 fb87 	bl	800586c <prvAddCurrentTaskToDelayedList>
}
 800515e:	bf00      	nop
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	200008b4 	.word	0x200008b4

0800516c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10b      	bne.n	8005196 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	617b      	str	r3, [r7, #20]
}
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	e7fd      	b.n	8005192 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005196:	4b0a      	ldr	r3, [pc, #40]	@ (80051c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3318      	adds	r3, #24
 800519c:	4619      	mov	r1, r3
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7fe fb1d 	bl	80037de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80051aa:	f04f 33ff 	mov.w	r3, #4294967295
 80051ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	68b8      	ldr	r0, [r7, #8]
 80051b4:	f000 fb5a 	bl	800586c <prvAddCurrentTaskToDelayedList>
	}
 80051b8:	bf00      	nop
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	200008b4 	.word	0x200008b4

080051c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10b      	bne.n	80051f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	60fb      	str	r3, [r7, #12]
}
 80051ec:	bf00      	nop
 80051ee:	bf00      	nop
 80051f0:	e7fd      	b.n	80051ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	3318      	adds	r3, #24
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fe fb4e 	bl	8003898 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005274 <xTaskRemoveFromEventList+0xb0>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d11d      	bne.n	8005240 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	3304      	adds	r3, #4
 8005208:	4618      	mov	r0, r3
 800520a:	f7fe fb45 	bl	8003898 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005212:	4b19      	ldr	r3, [pc, #100]	@ (8005278 <xTaskRemoveFromEventList+0xb4>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d903      	bls.n	8005222 <xTaskRemoveFromEventList+0x5e>
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521e:	4a16      	ldr	r2, [pc, #88]	@ (8005278 <xTaskRemoveFromEventList+0xb4>)
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4a13      	ldr	r2, [pc, #76]	@ (800527c <xTaskRemoveFromEventList+0xb8>)
 8005230:	441a      	add	r2, r3
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	3304      	adds	r3, #4
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f7fe fad0 	bl	80037de <vListInsertEnd>
 800523e:	e005      	b.n	800524c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	3318      	adds	r3, #24
 8005244:	4619      	mov	r1, r3
 8005246:	480e      	ldr	r0, [pc, #56]	@ (8005280 <xTaskRemoveFromEventList+0xbc>)
 8005248:	f7fe fac9 	bl	80037de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005250:	4b0c      	ldr	r3, [pc, #48]	@ (8005284 <xTaskRemoveFromEventList+0xc0>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005256:	429a      	cmp	r2, r3
 8005258:	d905      	bls.n	8005266 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800525a:	2301      	movs	r3, #1
 800525c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800525e:	4b0a      	ldr	r3, [pc, #40]	@ (8005288 <xTaskRemoveFromEventList+0xc4>)
 8005260:	2201      	movs	r2, #1
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	e001      	b.n	800526a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800526a:	697b      	ldr	r3, [r7, #20]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20000db0 	.word	0x20000db0
 8005278:	20000d90 	.word	0x20000d90
 800527c:	200008b8 	.word	0x200008b8
 8005280:	20000d48 	.word	0x20000d48
 8005284:	200008b4 	.word	0x200008b4
 8005288:	20000d9c 	.word	0x20000d9c

0800528c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005294:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <vTaskInternalSetTimeOutState+0x24>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800529c:	4b05      	ldr	r3, [pc, #20]	@ (80052b4 <vTaskInternalSetTimeOutState+0x28>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	605a      	str	r2, [r3, #4]
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	20000da0 	.word	0x20000da0
 80052b4:	20000d8c 	.word	0x20000d8c

080052b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10b      	bne.n	80052e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	613b      	str	r3, [r7, #16]
}
 80052da:	bf00      	nop
 80052dc:	bf00      	nop
 80052de:	e7fd      	b.n	80052dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10b      	bne.n	80052fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60fb      	str	r3, [r7, #12]
}
 80052f8:	bf00      	nop
 80052fa:	bf00      	nop
 80052fc:	e7fd      	b.n	80052fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80052fe:	f000 ff93 	bl	8006228 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005302:	4b1d      	ldr	r3, [pc, #116]	@ (8005378 <xTaskCheckForTimeOut+0xc0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531a:	d102      	bne.n	8005322 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800531c:	2300      	movs	r3, #0
 800531e:	61fb      	str	r3, [r7, #28]
 8005320:	e023      	b.n	800536a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	4b15      	ldr	r3, [pc, #84]	@ (800537c <xTaskCheckForTimeOut+0xc4>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d007      	beq.n	800533e <xTaskCheckForTimeOut+0x86>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	429a      	cmp	r2, r3
 8005336:	d302      	bcc.n	800533e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005338:	2301      	movs	r3, #1
 800533a:	61fb      	str	r3, [r7, #28]
 800533c:	e015      	b.n	800536a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	429a      	cmp	r2, r3
 8005346:	d20b      	bcs.n	8005360 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	1ad2      	subs	r2, r2, r3
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff ff99 	bl	800528c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	e004      	b.n	800536a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005366:	2301      	movs	r3, #1
 8005368:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800536a:	f000 ff8f 	bl	800628c <vPortExitCritical>

	return xReturn;
 800536e:	69fb      	ldr	r3, [r7, #28]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3720      	adds	r7, #32
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	20000d8c 	.word	0x20000d8c
 800537c:	20000da0 	.word	0x20000da0

08005380 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005384:	4b03      	ldr	r3, [pc, #12]	@ (8005394 <vTaskMissedYield+0x14>)
 8005386:	2201      	movs	r2, #1
 8005388:	601a      	str	r2, [r3, #0]
}
 800538a:	bf00      	nop
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	20000d9c 	.word	0x20000d9c

08005398 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053a0:	f000 f852 	bl	8005448 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053a4:	4b06      	ldr	r3, [pc, #24]	@ (80053c0 <prvIdleTask+0x28>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d9f9      	bls.n	80053a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053ac:	4b05      	ldr	r3, [pc, #20]	@ (80053c4 <prvIdleTask+0x2c>)
 80053ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053bc:	e7f0      	b.n	80053a0 <prvIdleTask+0x8>
 80053be:	bf00      	nop
 80053c0:	200008b8 	.word	0x200008b8
 80053c4:	e000ed04 	.word	0xe000ed04

080053c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053ce:	2300      	movs	r3, #0
 80053d0:	607b      	str	r3, [r7, #4]
 80053d2:	e00c      	b.n	80053ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4a12      	ldr	r2, [pc, #72]	@ (8005428 <prvInitialiseTaskLists+0x60>)
 80053e0:	4413      	add	r3, r2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe f9ce 	bl	8003784 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3301      	adds	r3, #1
 80053ec:	607b      	str	r3, [r7, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b37      	cmp	r3, #55	@ 0x37
 80053f2:	d9ef      	bls.n	80053d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053f4:	480d      	ldr	r0, [pc, #52]	@ (800542c <prvInitialiseTaskLists+0x64>)
 80053f6:	f7fe f9c5 	bl	8003784 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053fa:	480d      	ldr	r0, [pc, #52]	@ (8005430 <prvInitialiseTaskLists+0x68>)
 80053fc:	f7fe f9c2 	bl	8003784 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005400:	480c      	ldr	r0, [pc, #48]	@ (8005434 <prvInitialiseTaskLists+0x6c>)
 8005402:	f7fe f9bf 	bl	8003784 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005406:	480c      	ldr	r0, [pc, #48]	@ (8005438 <prvInitialiseTaskLists+0x70>)
 8005408:	f7fe f9bc 	bl	8003784 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800540c:	480b      	ldr	r0, [pc, #44]	@ (800543c <prvInitialiseTaskLists+0x74>)
 800540e:	f7fe f9b9 	bl	8003784 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005412:	4b0b      	ldr	r3, [pc, #44]	@ (8005440 <prvInitialiseTaskLists+0x78>)
 8005414:	4a05      	ldr	r2, [pc, #20]	@ (800542c <prvInitialiseTaskLists+0x64>)
 8005416:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005418:	4b0a      	ldr	r3, [pc, #40]	@ (8005444 <prvInitialiseTaskLists+0x7c>)
 800541a:	4a05      	ldr	r2, [pc, #20]	@ (8005430 <prvInitialiseTaskLists+0x68>)
 800541c:	601a      	str	r2, [r3, #0]
}
 800541e:	bf00      	nop
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	200008b8 	.word	0x200008b8
 800542c:	20000d18 	.word	0x20000d18
 8005430:	20000d2c 	.word	0x20000d2c
 8005434:	20000d48 	.word	0x20000d48
 8005438:	20000d5c 	.word	0x20000d5c
 800543c:	20000d74 	.word	0x20000d74
 8005440:	20000d40 	.word	0x20000d40
 8005444:	20000d44 	.word	0x20000d44

08005448 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800544e:	e019      	b.n	8005484 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005450:	f000 feea 	bl	8006228 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005454:	4b10      	ldr	r3, [pc, #64]	@ (8005498 <prvCheckTasksWaitingTermination+0x50>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3304      	adds	r3, #4
 8005460:	4618      	mov	r0, r3
 8005462:	f7fe fa19 	bl	8003898 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005466:	4b0d      	ldr	r3, [pc, #52]	@ (800549c <prvCheckTasksWaitingTermination+0x54>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3b01      	subs	r3, #1
 800546c:	4a0b      	ldr	r2, [pc, #44]	@ (800549c <prvCheckTasksWaitingTermination+0x54>)
 800546e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005470:	4b0b      	ldr	r3, [pc, #44]	@ (80054a0 <prvCheckTasksWaitingTermination+0x58>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3b01      	subs	r3, #1
 8005476:	4a0a      	ldr	r2, [pc, #40]	@ (80054a0 <prvCheckTasksWaitingTermination+0x58>)
 8005478:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800547a:	f000 ff07 	bl	800628c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f810 	bl	80054a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005484:	4b06      	ldr	r3, [pc, #24]	@ (80054a0 <prvCheckTasksWaitingTermination+0x58>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1e1      	bne.n	8005450 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800548c:	bf00      	nop
 800548e:	bf00      	nop
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20000d5c 	.word	0x20000d5c
 800549c:	20000d88 	.word	0x20000d88
 80054a0:	20000d70 	.word	0x20000d70

080054a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3354      	adds	r3, #84	@ 0x54
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 f9d1 	bl	8006858 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d108      	bne.n	80054d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 f89f 	bl	8006608 <vPortFree>
				vPortFree( pxTCB );
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f001 f89c 	bl	8006608 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054d0:	e019      	b.n	8005506 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d103      	bne.n	80054e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f001 f893 	bl	8006608 <vPortFree>
	}
 80054e2:	e010      	b.n	8005506 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d00b      	beq.n	8005506 <prvDeleteTCB+0x62>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	60fb      	str	r3, [r7, #12]
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <prvDeleteTCB+0x5e>
	}
 8005506:	bf00      	nop
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005516:	4b0c      	ldr	r3, [pc, #48]	@ (8005548 <prvResetNextTaskUnblockTime+0x38>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d104      	bne.n	800552a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005520:	4b0a      	ldr	r3, [pc, #40]	@ (800554c <prvResetNextTaskUnblockTime+0x3c>)
 8005522:	f04f 32ff 	mov.w	r2, #4294967295
 8005526:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005528:	e008      	b.n	800553c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800552a:	4b07      	ldr	r3, [pc, #28]	@ (8005548 <prvResetNextTaskUnblockTime+0x38>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	4a04      	ldr	r2, [pc, #16]	@ (800554c <prvResetNextTaskUnblockTime+0x3c>)
 800553a:	6013      	str	r3, [r2, #0]
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	20000d40 	.word	0x20000d40
 800554c:	20000da8 	.word	0x20000da8

08005550 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005556:	4b0b      	ldr	r3, [pc, #44]	@ (8005584 <xTaskGetSchedulerState+0x34>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d102      	bne.n	8005564 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800555e:	2301      	movs	r3, #1
 8005560:	607b      	str	r3, [r7, #4]
 8005562:	e008      	b.n	8005576 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005564:	4b08      	ldr	r3, [pc, #32]	@ (8005588 <xTaskGetSchedulerState+0x38>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d102      	bne.n	8005572 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800556c:	2302      	movs	r3, #2
 800556e:	607b      	str	r3, [r7, #4]
 8005570:	e001      	b.n	8005576 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005572:	2300      	movs	r3, #0
 8005574:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005576:	687b      	ldr	r3, [r7, #4]
	}
 8005578:	4618      	mov	r0, r3
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	20000d94 	.word	0x20000d94
 8005588:	20000db0 	.word	0x20000db0

0800558c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005598:	2300      	movs	r3, #0
 800559a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d051      	beq.n	8005646 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005650 <xTaskPriorityInherit+0xc4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d241      	bcs.n	8005634 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	db06      	blt.n	80055c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055b8:	4b25      	ldr	r3, [pc, #148]	@ (8005650 <xTaskPriorityInherit+0xc4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	6959      	ldr	r1, [r3, #20]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005654 <xTaskPriorityInherit+0xc8>)
 80055d8:	4413      	add	r3, r2
 80055da:	4299      	cmp	r1, r3
 80055dc:	d122      	bne.n	8005624 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	3304      	adds	r3, #4
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe f958 	bl	8003898 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80055e8:	4b19      	ldr	r3, [pc, #100]	@ (8005650 <xTaskPriorityInherit+0xc4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055f6:	4b18      	ldr	r3, [pc, #96]	@ (8005658 <xTaskPriorityInherit+0xcc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d903      	bls.n	8005606 <xTaskPriorityInherit+0x7a>
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005602:	4a15      	ldr	r2, [pc, #84]	@ (8005658 <xTaskPriorityInherit+0xcc>)
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4a10      	ldr	r2, [pc, #64]	@ (8005654 <xTaskPriorityInherit+0xc8>)
 8005614:	441a      	add	r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	3304      	adds	r3, #4
 800561a:	4619      	mov	r1, r3
 800561c:	4610      	mov	r0, r2
 800561e:	f7fe f8de 	bl	80037de <vListInsertEnd>
 8005622:	e004      	b.n	800562e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005624:	4b0a      	ldr	r3, [pc, #40]	@ (8005650 <xTaskPriorityInherit+0xc4>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800562e:	2301      	movs	r3, #1
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	e008      	b.n	8005646 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005638:	4b05      	ldr	r3, [pc, #20]	@ (8005650 <xTaskPriorityInherit+0xc4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563e:	429a      	cmp	r2, r3
 8005640:	d201      	bcs.n	8005646 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005642:	2301      	movs	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005646:	68fb      	ldr	r3, [r7, #12]
	}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	200008b4 	.word	0x200008b4
 8005654:	200008b8 	.word	0x200008b8
 8005658:	20000d90 	.word	0x20000d90

0800565c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d058      	beq.n	8005724 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005672:	4b2f      	ldr	r3, [pc, #188]	@ (8005730 <xTaskPriorityDisinherit+0xd4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	429a      	cmp	r2, r3
 800567a:	d00b      	beq.n	8005694 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	60fb      	str	r3, [r7, #12]
}
 800568e:	bf00      	nop
 8005690:	bf00      	nop
 8005692:	e7fd      	b.n	8005690 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10b      	bne.n	80056b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	60bb      	str	r3, [r7, #8]
}
 80056ae:	bf00      	nop
 80056b0:	bf00      	nop
 80056b2:	e7fd      	b.n	80056b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056b8:	1e5a      	subs	r2, r3, #1
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d02c      	beq.n	8005724 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d128      	bne.n	8005724 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	3304      	adds	r3, #4
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe f8de 	bl	8003898 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005734 <xTaskPriorityDisinherit+0xd8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d903      	bls.n	8005704 <xTaskPriorityDisinherit+0xa8>
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005700:	4a0c      	ldr	r2, [pc, #48]	@ (8005734 <xTaskPriorityDisinherit+0xd8>)
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005708:	4613      	mov	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4a09      	ldr	r2, [pc, #36]	@ (8005738 <xTaskPriorityDisinherit+0xdc>)
 8005712:	441a      	add	r2, r3
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	3304      	adds	r3, #4
 8005718:	4619      	mov	r1, r3
 800571a:	4610      	mov	r0, r2
 800571c:	f7fe f85f 	bl	80037de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005720:	2301      	movs	r3, #1
 8005722:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005724:	697b      	ldr	r3, [r7, #20]
	}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	200008b4 	.word	0x200008b4
 8005734:	20000d90 	.word	0x20000d90
 8005738:	200008b8 	.word	0x200008b8

0800573c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800574a:	2301      	movs	r3, #1
 800574c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d06c      	beq.n	800582e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10b      	bne.n	8005774 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	60fb      	str	r3, [r7, #12]
}
 800576e:	bf00      	nop
 8005770:	bf00      	nop
 8005772:	e7fd      	b.n	8005770 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d902      	bls.n	8005784 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	61fb      	str	r3, [r7, #28]
 8005782:	e002      	b.n	800578a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005788:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	429a      	cmp	r2, r3
 8005792:	d04c      	beq.n	800582e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	429a      	cmp	r2, r3
 800579c:	d147      	bne.n	800582e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800579e:	4b26      	ldr	r3, [pc, #152]	@ (8005838 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d10b      	bne.n	80057c0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	60bb      	str	r3, [r7, #8]
}
 80057ba:	bf00      	nop
 80057bc:	bf00      	nop
 80057be:	e7fd      	b.n	80057bc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	db04      	blt.n	80057de <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	6959      	ldr	r1, [r3, #20]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4a13      	ldr	r2, [pc, #76]	@ (800583c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80057ee:	4413      	add	r3, r2
 80057f0:	4299      	cmp	r1, r3
 80057f2:	d11c      	bne.n	800582e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	3304      	adds	r3, #4
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fe f84d 	bl	8003898 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005802:	4b0f      	ldr	r3, [pc, #60]	@ (8005840 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d903      	bls.n	8005812 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580e:	4a0c      	ldr	r2, [pc, #48]	@ (8005840 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4a07      	ldr	r2, [pc, #28]	@ (800583c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005820:	441a      	add	r2, r3
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	3304      	adds	r3, #4
 8005826:	4619      	mov	r1, r3
 8005828:	4610      	mov	r0, r2
 800582a:	f7fd ffd8 	bl	80037de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800582e:	bf00      	nop
 8005830:	3720      	adds	r7, #32
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	200008b4 	.word	0x200008b4
 800583c:	200008b8 	.word	0x200008b8
 8005840:	20000d90 	.word	0x20000d90

08005844 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005848:	4b07      	ldr	r3, [pc, #28]	@ (8005868 <pvTaskIncrementMutexHeldCount+0x24>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d004      	beq.n	800585a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005850:	4b05      	ldr	r3, [pc, #20]	@ (8005868 <pvTaskIncrementMutexHeldCount+0x24>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005856:	3201      	adds	r2, #1
 8005858:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800585a:	4b03      	ldr	r3, [pc, #12]	@ (8005868 <pvTaskIncrementMutexHeldCount+0x24>)
 800585c:	681b      	ldr	r3, [r3, #0]
	}
 800585e:	4618      	mov	r0, r3
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	200008b4 	.word	0x200008b4

0800586c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005876:	4b21      	ldr	r3, [pc, #132]	@ (80058fc <prvAddCurrentTaskToDelayedList+0x90>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800587c:	4b20      	ldr	r3, [pc, #128]	@ (8005900 <prvAddCurrentTaskToDelayedList+0x94>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3304      	adds	r3, #4
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe f808 	bl	8003898 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588e:	d10a      	bne.n	80058a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d007      	beq.n	80058a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005896:	4b1a      	ldr	r3, [pc, #104]	@ (8005900 <prvAddCurrentTaskToDelayedList+0x94>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3304      	adds	r3, #4
 800589c:	4619      	mov	r1, r3
 800589e:	4819      	ldr	r0, [pc, #100]	@ (8005904 <prvAddCurrentTaskToDelayedList+0x98>)
 80058a0:	f7fd ff9d 	bl	80037de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058a4:	e026      	b.n	80058f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4413      	add	r3, r2
 80058ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058ae:	4b14      	ldr	r3, [pc, #80]	@ (8005900 <prvAddCurrentTaskToDelayedList+0x94>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d209      	bcs.n	80058d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058be:	4b12      	ldr	r3, [pc, #72]	@ (8005908 <prvAddCurrentTaskToDelayedList+0x9c>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005900 <prvAddCurrentTaskToDelayedList+0x94>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3304      	adds	r3, #4
 80058c8:	4619      	mov	r1, r3
 80058ca:	4610      	mov	r0, r2
 80058cc:	f7fd ffab 	bl	8003826 <vListInsert>
}
 80058d0:	e010      	b.n	80058f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058d2:	4b0e      	ldr	r3, [pc, #56]	@ (800590c <prvAddCurrentTaskToDelayedList+0xa0>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005900 <prvAddCurrentTaskToDelayedList+0x94>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3304      	adds	r3, #4
 80058dc:	4619      	mov	r1, r3
 80058de:	4610      	mov	r0, r2
 80058e0:	f7fd ffa1 	bl	8003826 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005910 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d202      	bcs.n	80058f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80058ee:	4a08      	ldr	r2, [pc, #32]	@ (8005910 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	6013      	str	r3, [r2, #0]
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	20000d8c 	.word	0x20000d8c
 8005900:	200008b4 	.word	0x200008b4
 8005904:	20000d74 	.word	0x20000d74
 8005908:	20000d44 	.word	0x20000d44
 800590c:	20000d40 	.word	0x20000d40
 8005910:	20000da8 	.word	0x20000da8

08005914 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08a      	sub	sp, #40	@ 0x28
 8005918:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800591e:	f000 fb13 	bl	8005f48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005922:	4b1d      	ldr	r3, [pc, #116]	@ (8005998 <xTimerCreateTimerTask+0x84>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d021      	beq.n	800596e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800592e:	2300      	movs	r3, #0
 8005930:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005932:	1d3a      	adds	r2, r7, #4
 8005934:	f107 0108 	add.w	r1, r7, #8
 8005938:	f107 030c 	add.w	r3, r7, #12
 800593c:	4618      	mov	r0, r3
 800593e:	f7fd ff07 	bl	8003750 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	9202      	str	r2, [sp, #8]
 800594a:	9301      	str	r3, [sp, #4]
 800594c:	2302      	movs	r3, #2
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	2300      	movs	r3, #0
 8005952:	460a      	mov	r2, r1
 8005954:	4911      	ldr	r1, [pc, #68]	@ (800599c <xTimerCreateTimerTask+0x88>)
 8005956:	4812      	ldr	r0, [pc, #72]	@ (80059a0 <xTimerCreateTimerTask+0x8c>)
 8005958:	f7fe ffa2 	bl	80048a0 <xTaskCreateStatic>
 800595c:	4603      	mov	r3, r0
 800595e:	4a11      	ldr	r2, [pc, #68]	@ (80059a4 <xTimerCreateTimerTask+0x90>)
 8005960:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005962:	4b10      	ldr	r3, [pc, #64]	@ (80059a4 <xTimerCreateTimerTask+0x90>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800596a:	2301      	movs	r3, #1
 800596c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10b      	bne.n	800598c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	613b      	str	r3, [r7, #16]
}
 8005986:	bf00      	nop
 8005988:	bf00      	nop
 800598a:	e7fd      	b.n	8005988 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800598c:	697b      	ldr	r3, [r7, #20]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000de4 	.word	0x20000de4
 800599c:	08006ac4 	.word	0x08006ac4
 80059a0:	08005ae1 	.word	0x08005ae1
 80059a4:	20000de8 	.word	0x20000de8

080059a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08a      	sub	sp, #40	@ 0x28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80059b6:	2300      	movs	r3, #0
 80059b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10b      	bne.n	80059d8 <xTimerGenericCommand+0x30>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	623b      	str	r3, [r7, #32]
}
 80059d2:	bf00      	nop
 80059d4:	bf00      	nop
 80059d6:	e7fd      	b.n	80059d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80059d8:	4b19      	ldr	r3, [pc, #100]	@ (8005a40 <xTimerGenericCommand+0x98>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d02a      	beq.n	8005a36 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b05      	cmp	r3, #5
 80059f0:	dc18      	bgt.n	8005a24 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80059f2:	f7ff fdad 	bl	8005550 <xTaskGetSchedulerState>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d109      	bne.n	8005a10 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80059fc:	4b10      	ldr	r3, [pc, #64]	@ (8005a40 <xTimerGenericCommand+0x98>)
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	f107 0110 	add.w	r1, r7, #16
 8005a04:	2300      	movs	r3, #0
 8005a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a08:	f7fe f924 	bl	8003c54 <xQueueGenericSend>
 8005a0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005a0e:	e012      	b.n	8005a36 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a10:	4b0b      	ldr	r3, [pc, #44]	@ (8005a40 <xTimerGenericCommand+0x98>)
 8005a12:	6818      	ldr	r0, [r3, #0]
 8005a14:	f107 0110 	add.w	r1, r7, #16
 8005a18:	2300      	movs	r3, #0
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f7fe f91a 	bl	8003c54 <xQueueGenericSend>
 8005a20:	6278      	str	r0, [r7, #36]	@ 0x24
 8005a22:	e008      	b.n	8005a36 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a24:	4b06      	ldr	r3, [pc, #24]	@ (8005a40 <xTimerGenericCommand+0x98>)
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	f107 0110 	add.w	r1, r7, #16
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	f7fe fa12 	bl	8003e58 <xQueueGenericSendFromISR>
 8005a34:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3728      	adds	r7, #40	@ 0x28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	20000de4 	.word	0x20000de4

08005a44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a4e:	4b23      	ldr	r3, [pc, #140]	@ (8005adc <prvProcessExpiredTimer+0x98>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fd ff1b 	bl	8003898 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d023      	beq.n	8005ab8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	699a      	ldr	r2, [r3, #24]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	18d1      	adds	r1, r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	6978      	ldr	r0, [r7, #20]
 8005a7e:	f000 f8d5 	bl	8005c2c <prvInsertTimerInActiveList>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d020      	beq.n	8005aca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a88:	2300      	movs	r3, #0
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	2100      	movs	r1, #0
 8005a92:	6978      	ldr	r0, [r7, #20]
 8005a94:	f7ff ff88 	bl	80059a8 <xTimerGenericCommand>
 8005a98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d114      	bne.n	8005aca <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	60fb      	str	r3, [r7, #12]
}
 8005ab2:	bf00      	nop
 8005ab4:	bf00      	nop
 8005ab6:	e7fd      	b.n	8005ab4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005abe:	f023 0301 	bic.w	r3, r3, #1
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	6978      	ldr	r0, [r7, #20]
 8005ad0:	4798      	blx	r3
}
 8005ad2:	bf00      	nop
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000ddc 	.word	0x20000ddc

08005ae0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ae8:	f107 0308 	add.w	r3, r7, #8
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 f859 	bl	8005ba4 <prvGetNextExpireTime>
 8005af2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4619      	mov	r1, r3
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 f805 	bl	8005b08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005afe:	f000 f8d7 	bl	8005cb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b02:	bf00      	nop
 8005b04:	e7f0      	b.n	8005ae8 <prvTimerTask+0x8>
	...

08005b08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b12:	f7ff f929 	bl	8004d68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b16:	f107 0308 	add.w	r3, r7, #8
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 f866 	bl	8005bec <prvSampleTimeNow>
 8005b20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d130      	bne.n	8005b8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10a      	bne.n	8005b44 <prvProcessTimerOrBlockTask+0x3c>
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d806      	bhi.n	8005b44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b36:	f7ff f925 	bl	8004d84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b3a:	68f9      	ldr	r1, [r7, #12]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7ff ff81 	bl	8005a44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b42:	e024      	b.n	8005b8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d008      	beq.n	8005b5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b4a:	4b13      	ldr	r3, [pc, #76]	@ (8005b98 <prvProcessTimerOrBlockTask+0x90>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <prvProcessTimerOrBlockTask+0x50>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <prvProcessTimerOrBlockTask+0x52>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b9c <prvProcessTimerOrBlockTask+0x94>)
 8005b5e:	6818      	ldr	r0, [r3, #0]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	4619      	mov	r1, r3
 8005b6a:	f7fe fe65 	bl	8004838 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b6e:	f7ff f909 	bl	8004d84 <xTaskResumeAll>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10a      	bne.n	8005b8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b78:	4b09      	ldr	r3, [pc, #36]	@ (8005ba0 <prvProcessTimerOrBlockTask+0x98>)
 8005b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	f3bf 8f6f 	isb	sy
}
 8005b88:	e001      	b.n	8005b8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b8a:	f7ff f8fb 	bl	8004d84 <xTaskResumeAll>
}
 8005b8e:	bf00      	nop
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20000de0 	.word	0x20000de0
 8005b9c:	20000de4 	.word	0x20000de4
 8005ba0:	e000ed04 	.word	0xe000ed04

08005ba4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005bac:	4b0e      	ldr	r3, [pc, #56]	@ (8005be8 <prvGetNextExpireTime+0x44>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <prvGetNextExpireTime+0x16>
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	e000      	b.n	8005bbc <prvGetNextExpireTime+0x18>
 8005bba:	2200      	movs	r2, #0
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d105      	bne.n	8005bd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bc8:	4b07      	ldr	r3, [pc, #28]	@ (8005be8 <prvGetNextExpireTime+0x44>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	e001      	b.n	8005bd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	20000ddc 	.word	0x20000ddc

08005bec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005bf4:	f7ff f964 	bl	8004ec0 <xTaskGetTickCount>
 8005bf8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8005c28 <prvSampleTimeNow+0x3c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d205      	bcs.n	8005c10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c04:	f000 f93a 	bl	8005e7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	e002      	b.n	8005c16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c16:	4a04      	ldr	r2, [pc, #16]	@ (8005c28 <prvSampleTimeNow+0x3c>)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000dec 	.word	0x20000dec

08005c2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d812      	bhi.n	8005c78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	1ad2      	subs	r2, r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d302      	bcc.n	8005c66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c60:	2301      	movs	r3, #1
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	e01b      	b.n	8005c9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c66:	4b10      	ldr	r3, [pc, #64]	@ (8005ca8 <prvInsertTimerInActiveList+0x7c>)
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	4619      	mov	r1, r3
 8005c70:	4610      	mov	r0, r2
 8005c72:	f7fd fdd8 	bl	8003826 <vListInsert>
 8005c76:	e012      	b.n	8005c9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d206      	bcs.n	8005c8e <prvInsertTimerInActiveList+0x62>
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d302      	bcc.n	8005c8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	e007      	b.n	8005c9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c8e:	4b07      	ldr	r3, [pc, #28]	@ (8005cac <prvInsertTimerInActiveList+0x80>)
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f7fd fdc4 	bl	8003826 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c9e:	697b      	ldr	r3, [r7, #20]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	20000de0 	.word	0x20000de0
 8005cac:	20000ddc 	.word	0x20000ddc

08005cb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08e      	sub	sp, #56	@ 0x38
 8005cb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cb6:	e0ce      	b.n	8005e56 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	da19      	bge.n	8005cf2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005cbe:	1d3b      	adds	r3, r7, #4
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10b      	bne.n	8005ce2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	61fb      	str	r3, [r7, #28]
}
 8005cdc:	bf00      	nop
 8005cde:	bf00      	nop
 8005ce0:	e7fd      	b.n	8005cde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ce8:	6850      	ldr	r0, [r2, #4]
 8005cea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cec:	6892      	ldr	r2, [r2, #8]
 8005cee:	4611      	mov	r1, r2
 8005cf0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f2c0 80ae 	blt.w	8005e56 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d004      	beq.n	8005d10 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fd fdc4 	bl	8003898 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d10:	463b      	mov	r3, r7
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff ff6a 	bl	8005bec <prvSampleTimeNow>
 8005d18:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b09      	cmp	r3, #9
 8005d1e:	f200 8097 	bhi.w	8005e50 <prvProcessReceivedCommands+0x1a0>
 8005d22:	a201      	add	r2, pc, #4	@ (adr r2, 8005d28 <prvProcessReceivedCommands+0x78>)
 8005d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d28:	08005d51 	.word	0x08005d51
 8005d2c:	08005d51 	.word	0x08005d51
 8005d30:	08005d51 	.word	0x08005d51
 8005d34:	08005dc7 	.word	0x08005dc7
 8005d38:	08005ddb 	.word	0x08005ddb
 8005d3c:	08005e27 	.word	0x08005e27
 8005d40:	08005d51 	.word	0x08005d51
 8005d44:	08005d51 	.word	0x08005d51
 8005d48:	08005dc7 	.word	0x08005dc7
 8005d4c:	08005ddb 	.word	0x08005ddb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d56:	f043 0301 	orr.w	r3, r3, #1
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	18d1      	adds	r1, r2, r3
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d70:	f7ff ff5c 	bl	8005c2c <prvInsertTimerInActiveList>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d06c      	beq.n	8005e54 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d061      	beq.n	8005e54 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	441a      	add	r2, r3
 8005d98:	2300      	movs	r3, #0
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	2100      	movs	r1, #0
 8005da0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005da2:	f7ff fe01 	bl	80059a8 <xTimerGenericCommand>
 8005da6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d152      	bne.n	8005e54 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	61bb      	str	r3, [r7, #24]
}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	e7fd      	b.n	8005dc2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005dcc:	f023 0301 	bic.w	r3, r3, #1
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005dd8:	e03d      	b.n	8005e56 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005de0:	f043 0301 	orr.w	r3, r3, #1
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10b      	bne.n	8005e12 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	617b      	str	r3, [r7, #20]
}
 8005e0c:	bf00      	nop
 8005e0e:	bf00      	nop
 8005e10:	e7fd      	b.n	8005e0e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	18d1      	adds	r1, r2, r3
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e20:	f7ff ff04 	bl	8005c2c <prvInsertTimerInActiveList>
					break;
 8005e24:	e017      	b.n	8005e56 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d103      	bne.n	8005e3c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005e34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e36:	f000 fbe7 	bl	8006608 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e3a:	e00c      	b.n	8005e56 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e42:	f023 0301 	bic.w	r3, r3, #1
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005e4e:	e002      	b.n	8005e56 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005e50:	bf00      	nop
 8005e52:	e000      	b.n	8005e56 <prvProcessReceivedCommands+0x1a6>
					break;
 8005e54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e56:	4b08      	ldr	r3, [pc, #32]	@ (8005e78 <prvProcessReceivedCommands+0x1c8>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	1d39      	adds	r1, r7, #4
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fe f898 	bl	8003f94 <xQueueReceive>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f47f af26 	bne.w	8005cb8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	3730      	adds	r7, #48	@ 0x30
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000de4 	.word	0x20000de4

08005e7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e82:	e049      	b.n	8005f18 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e84:	4b2e      	ldr	r3, [pc, #184]	@ (8005f40 <prvSwitchTimerLists+0xc4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8005f40 <prvSwitchTimerLists+0xc4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fd fcfb 	bl	8003898 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d02f      	beq.n	8005f18 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d90e      	bls.n	8005ee8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8005f40 <prvSwitchTimerLists+0xc4>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3304      	adds	r3, #4
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	f7fd fca0 	bl	8003826 <vListInsert>
 8005ee6:	e017      	b.n	8005f18 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ee8:	2300      	movs	r3, #0
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	2300      	movs	r3, #0
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f7ff fd58 	bl	80059a8 <xTimerGenericCommand>
 8005ef8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10b      	bne.n	8005f18 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	603b      	str	r3, [r7, #0]
}
 8005f12:	bf00      	nop
 8005f14:	bf00      	nop
 8005f16:	e7fd      	b.n	8005f14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f18:	4b09      	ldr	r3, [pc, #36]	@ (8005f40 <prvSwitchTimerLists+0xc4>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1b0      	bne.n	8005e84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f22:	4b07      	ldr	r3, [pc, #28]	@ (8005f40 <prvSwitchTimerLists+0xc4>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f28:	4b06      	ldr	r3, [pc, #24]	@ (8005f44 <prvSwitchTimerLists+0xc8>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a04      	ldr	r2, [pc, #16]	@ (8005f40 <prvSwitchTimerLists+0xc4>)
 8005f2e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f30:	4a04      	ldr	r2, [pc, #16]	@ (8005f44 <prvSwitchTimerLists+0xc8>)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	6013      	str	r3, [r2, #0]
}
 8005f36:	bf00      	nop
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000ddc 	.word	0x20000ddc
 8005f44:	20000de0 	.word	0x20000de0

08005f48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f4e:	f000 f96b 	bl	8006228 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f52:	4b15      	ldr	r3, [pc, #84]	@ (8005fa8 <prvCheckForValidListAndQueue+0x60>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d120      	bne.n	8005f9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f5a:	4814      	ldr	r0, [pc, #80]	@ (8005fac <prvCheckForValidListAndQueue+0x64>)
 8005f5c:	f7fd fc12 	bl	8003784 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f60:	4813      	ldr	r0, [pc, #76]	@ (8005fb0 <prvCheckForValidListAndQueue+0x68>)
 8005f62:	f7fd fc0f 	bl	8003784 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f66:	4b13      	ldr	r3, [pc, #76]	@ (8005fb4 <prvCheckForValidListAndQueue+0x6c>)
 8005f68:	4a10      	ldr	r2, [pc, #64]	@ (8005fac <prvCheckForValidListAndQueue+0x64>)
 8005f6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f6c:	4b12      	ldr	r3, [pc, #72]	@ (8005fb8 <prvCheckForValidListAndQueue+0x70>)
 8005f6e:	4a10      	ldr	r2, [pc, #64]	@ (8005fb0 <prvCheckForValidListAndQueue+0x68>)
 8005f70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f72:	2300      	movs	r3, #0
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	4b11      	ldr	r3, [pc, #68]	@ (8005fbc <prvCheckForValidListAndQueue+0x74>)
 8005f78:	4a11      	ldr	r2, [pc, #68]	@ (8005fc0 <prvCheckForValidListAndQueue+0x78>)
 8005f7a:	2110      	movs	r1, #16
 8005f7c:	200a      	movs	r0, #10
 8005f7e:	f7fd fd1f 	bl	80039c0 <xQueueGenericCreateStatic>
 8005f82:	4603      	mov	r3, r0
 8005f84:	4a08      	ldr	r2, [pc, #32]	@ (8005fa8 <prvCheckForValidListAndQueue+0x60>)
 8005f86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f88:	4b07      	ldr	r3, [pc, #28]	@ (8005fa8 <prvCheckForValidListAndQueue+0x60>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f90:	4b05      	ldr	r3, [pc, #20]	@ (8005fa8 <prvCheckForValidListAndQueue+0x60>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	490b      	ldr	r1, [pc, #44]	@ (8005fc4 <prvCheckForValidListAndQueue+0x7c>)
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fe fbfa 	bl	8004790 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f9c:	f000 f976 	bl	800628c <vPortExitCritical>
}
 8005fa0:	bf00      	nop
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000de4 	.word	0x20000de4
 8005fac:	20000db4 	.word	0x20000db4
 8005fb0:	20000dc8 	.word	0x20000dc8
 8005fb4:	20000ddc 	.word	0x20000ddc
 8005fb8:	20000de0 	.word	0x20000de0
 8005fbc:	20000e90 	.word	0x20000e90
 8005fc0:	20000df0 	.word	0x20000df0
 8005fc4:	08006acc 	.word	0x08006acc

08005fc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3b04      	subs	r3, #4
 8005fd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3b04      	subs	r3, #4
 8005fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f023 0201 	bic.w	r2, r3, #1
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3b04      	subs	r3, #4
 8005ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800602c <pxPortInitialiseStack+0x64>)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3b14      	subs	r3, #20
 8006002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3b04      	subs	r3, #4
 800600e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f06f 0202 	mvn.w	r2, #2
 8006016:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3b20      	subs	r3, #32
 800601c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800601e:	68fb      	ldr	r3, [r7, #12]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	08006031 	.word	0x08006031

08006030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800603a:	4b13      	ldr	r3, [pc, #76]	@ (8006088 <prvTaskExitError+0x58>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006042:	d00b      	beq.n	800605c <prvTaskExitError+0x2c>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	60fb      	str	r3, [r7, #12]
}
 8006056:	bf00      	nop
 8006058:	bf00      	nop
 800605a:	e7fd      	b.n	8006058 <prvTaskExitError+0x28>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	60bb      	str	r3, [r7, #8]
}
 800606e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006070:	bf00      	nop
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0fc      	beq.n	8006072 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006078:	bf00      	nop
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	2000000c 	.word	0x2000000c
 800608c:	00000000 	.word	0x00000000

08006090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006090:	4b07      	ldr	r3, [pc, #28]	@ (80060b0 <pxCurrentTCBConst2>)
 8006092:	6819      	ldr	r1, [r3, #0]
 8006094:	6808      	ldr	r0, [r1, #0]
 8006096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609a:	f380 8809 	msr	PSP, r0
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f04f 0000 	mov.w	r0, #0
 80060a6:	f380 8811 	msr	BASEPRI, r0
 80060aa:	4770      	bx	lr
 80060ac:	f3af 8000 	nop.w

080060b0 <pxCurrentTCBConst2>:
 80060b0:	200008b4 	.word	0x200008b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop

080060b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80060b8:	4808      	ldr	r0, [pc, #32]	@ (80060dc <prvPortStartFirstTask+0x24>)
 80060ba:	6800      	ldr	r0, [r0, #0]
 80060bc:	6800      	ldr	r0, [r0, #0]
 80060be:	f380 8808 	msr	MSP, r0
 80060c2:	f04f 0000 	mov.w	r0, #0
 80060c6:	f380 8814 	msr	CONTROL, r0
 80060ca:	b662      	cpsie	i
 80060cc:	b661      	cpsie	f
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	df00      	svc	0
 80060d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060da:	bf00      	nop
 80060dc:	e000ed08 	.word	0xe000ed08

080060e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060e6:	4b47      	ldr	r3, [pc, #284]	@ (8006204 <xPortStartScheduler+0x124>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a47      	ldr	r2, [pc, #284]	@ (8006208 <xPortStartScheduler+0x128>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d10b      	bne.n	8006108 <xPortStartScheduler+0x28>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	60fb      	str	r3, [r7, #12]
}
 8006102:	bf00      	nop
 8006104:	bf00      	nop
 8006106:	e7fd      	b.n	8006104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006108:	4b3e      	ldr	r3, [pc, #248]	@ (8006204 <xPortStartScheduler+0x124>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a3f      	ldr	r2, [pc, #252]	@ (800620c <xPortStartScheduler+0x12c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d10b      	bne.n	800612a <xPortStartScheduler+0x4a>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	613b      	str	r3, [r7, #16]
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	e7fd      	b.n	8006126 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800612a:	4b39      	ldr	r3, [pc, #228]	@ (8006210 <xPortStartScheduler+0x130>)
 800612c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	22ff      	movs	r2, #255	@ 0xff
 800613a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006144:	78fb      	ldrb	r3, [r7, #3]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800614c:	b2da      	uxtb	r2, r3
 800614e:	4b31      	ldr	r3, [pc, #196]	@ (8006214 <xPortStartScheduler+0x134>)
 8006150:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006152:	4b31      	ldr	r3, [pc, #196]	@ (8006218 <xPortStartScheduler+0x138>)
 8006154:	2207      	movs	r2, #7
 8006156:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006158:	e009      	b.n	800616e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800615a:	4b2f      	ldr	r3, [pc, #188]	@ (8006218 <xPortStartScheduler+0x138>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3b01      	subs	r3, #1
 8006160:	4a2d      	ldr	r2, [pc, #180]	@ (8006218 <xPortStartScheduler+0x138>)
 8006162:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	b2db      	uxtb	r3, r3
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	b2db      	uxtb	r3, r3
 800616c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006176:	2b80      	cmp	r3, #128	@ 0x80
 8006178:	d0ef      	beq.n	800615a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800617a:	4b27      	ldr	r3, [pc, #156]	@ (8006218 <xPortStartScheduler+0x138>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f1c3 0307 	rsb	r3, r3, #7
 8006182:	2b04      	cmp	r3, #4
 8006184:	d00b      	beq.n	800619e <xPortStartScheduler+0xbe>
	__asm volatile
 8006186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	60bb      	str	r3, [r7, #8]
}
 8006198:	bf00      	nop
 800619a:	bf00      	nop
 800619c:	e7fd      	b.n	800619a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800619e:	4b1e      	ldr	r3, [pc, #120]	@ (8006218 <xPortStartScheduler+0x138>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006218 <xPortStartScheduler+0x138>)
 80061a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006218 <xPortStartScheduler+0x138>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061b0:	4a19      	ldr	r2, [pc, #100]	@ (8006218 <xPortStartScheduler+0x138>)
 80061b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061bc:	4b17      	ldr	r3, [pc, #92]	@ (800621c <xPortStartScheduler+0x13c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a16      	ldr	r2, [pc, #88]	@ (800621c <xPortStartScheduler+0x13c>)
 80061c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80061c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061c8:	4b14      	ldr	r3, [pc, #80]	@ (800621c <xPortStartScheduler+0x13c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a13      	ldr	r2, [pc, #76]	@ (800621c <xPortStartScheduler+0x13c>)
 80061ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80061d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061d4:	f000 f8da 	bl	800638c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061d8:	4b11      	ldr	r3, [pc, #68]	@ (8006220 <xPortStartScheduler+0x140>)
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061de:	f000 f8f9 	bl	80063d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061e2:	4b10      	ldr	r3, [pc, #64]	@ (8006224 <xPortStartScheduler+0x144>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a0f      	ldr	r2, [pc, #60]	@ (8006224 <xPortStartScheduler+0x144>)
 80061e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80061ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061ee:	f7ff ff63 	bl	80060b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061f2:	f7fe ff2f 	bl	8005054 <vTaskSwitchContext>
	prvTaskExitError();
 80061f6:	f7ff ff1b 	bl	8006030 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	e000ed00 	.word	0xe000ed00
 8006208:	410fc271 	.word	0x410fc271
 800620c:	410fc270 	.word	0x410fc270
 8006210:	e000e400 	.word	0xe000e400
 8006214:	20000ee0 	.word	0x20000ee0
 8006218:	20000ee4 	.word	0x20000ee4
 800621c:	e000ed20 	.word	0xe000ed20
 8006220:	2000000c 	.word	0x2000000c
 8006224:	e000ef34 	.word	0xe000ef34

08006228 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	607b      	str	r3, [r7, #4]
}
 8006240:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006242:	4b10      	ldr	r3, [pc, #64]	@ (8006284 <vPortEnterCritical+0x5c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3301      	adds	r3, #1
 8006248:	4a0e      	ldr	r2, [pc, #56]	@ (8006284 <vPortEnterCritical+0x5c>)
 800624a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800624c:	4b0d      	ldr	r3, [pc, #52]	@ (8006284 <vPortEnterCritical+0x5c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d110      	bne.n	8006276 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006254:	4b0c      	ldr	r3, [pc, #48]	@ (8006288 <vPortEnterCritical+0x60>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00b      	beq.n	8006276 <vPortEnterCritical+0x4e>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	603b      	str	r3, [r7, #0]
}
 8006270:	bf00      	nop
 8006272:	bf00      	nop
 8006274:	e7fd      	b.n	8006272 <vPortEnterCritical+0x4a>
	}
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	2000000c 	.word	0x2000000c
 8006288:	e000ed04 	.word	0xe000ed04

0800628c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006292:	4b12      	ldr	r3, [pc, #72]	@ (80062dc <vPortExitCritical+0x50>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10b      	bne.n	80062b2 <vPortExitCritical+0x26>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	607b      	str	r3, [r7, #4]
}
 80062ac:	bf00      	nop
 80062ae:	bf00      	nop
 80062b0:	e7fd      	b.n	80062ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80062b2:	4b0a      	ldr	r3, [pc, #40]	@ (80062dc <vPortExitCritical+0x50>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	4a08      	ldr	r2, [pc, #32]	@ (80062dc <vPortExitCritical+0x50>)
 80062ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062bc:	4b07      	ldr	r3, [pc, #28]	@ (80062dc <vPortExitCritical+0x50>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d105      	bne.n	80062d0 <vPortExitCritical+0x44>
 80062c4:	2300      	movs	r3, #0
 80062c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f383 8811 	msr	BASEPRI, r3
}
 80062ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	2000000c 	.word	0x2000000c

080062e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062e0:	f3ef 8009 	mrs	r0, PSP
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	4b15      	ldr	r3, [pc, #84]	@ (8006340 <pxCurrentTCBConst>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	f01e 0f10 	tst.w	lr, #16
 80062f0:	bf08      	it	eq
 80062f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fa:	6010      	str	r0, [r2, #0]
 80062fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006300:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006304:	f380 8811 	msr	BASEPRI, r0
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f7fe fea0 	bl	8005054 <vTaskSwitchContext>
 8006314:	f04f 0000 	mov.w	r0, #0
 8006318:	f380 8811 	msr	BASEPRI, r0
 800631c:	bc09      	pop	{r0, r3}
 800631e:	6819      	ldr	r1, [r3, #0]
 8006320:	6808      	ldr	r0, [r1, #0]
 8006322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006326:	f01e 0f10 	tst.w	lr, #16
 800632a:	bf08      	it	eq
 800632c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006330:	f380 8809 	msr	PSP, r0
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	f3af 8000 	nop.w

08006340 <pxCurrentTCBConst>:
 8006340:	200008b4 	.word	0x200008b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop

08006348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	607b      	str	r3, [r7, #4]
}
 8006360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006362:	f7fe fdbd 	bl	8004ee0 <xTaskIncrementTick>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800636c:	4b06      	ldr	r3, [pc, #24]	@ (8006388 <xPortSysTickHandler+0x40>)
 800636e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	2300      	movs	r3, #0
 8006376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	f383 8811 	msr	BASEPRI, r3
}
 800637e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006380:	bf00      	nop
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006390:	4b0b      	ldr	r3, [pc, #44]	@ (80063c0 <vPortSetupTimerInterrupt+0x34>)
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006396:	4b0b      	ldr	r3, [pc, #44]	@ (80063c4 <vPortSetupTimerInterrupt+0x38>)
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800639c:	4b0a      	ldr	r3, [pc, #40]	@ (80063c8 <vPortSetupTimerInterrupt+0x3c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a0a      	ldr	r2, [pc, #40]	@ (80063cc <vPortSetupTimerInterrupt+0x40>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	099b      	lsrs	r3, r3, #6
 80063a8:	4a09      	ldr	r2, [pc, #36]	@ (80063d0 <vPortSetupTimerInterrupt+0x44>)
 80063aa:	3b01      	subs	r3, #1
 80063ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063ae:	4b04      	ldr	r3, [pc, #16]	@ (80063c0 <vPortSetupTimerInterrupt+0x34>)
 80063b0:	2207      	movs	r2, #7
 80063b2:	601a      	str	r2, [r3, #0]
}
 80063b4:	bf00      	nop
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	e000e010 	.word	0xe000e010
 80063c4:	e000e018 	.word	0xe000e018
 80063c8:	20000000 	.word	0x20000000
 80063cc:	10624dd3 	.word	0x10624dd3
 80063d0:	e000e014 	.word	0xe000e014

080063d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80063e4 <vPortEnableVFP+0x10>
 80063d8:	6801      	ldr	r1, [r0, #0]
 80063da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80063de:	6001      	str	r1, [r0, #0]
 80063e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063e2:	bf00      	nop
 80063e4:	e000ed88 	.word	0xe000ed88

080063e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063ee:	f3ef 8305 	mrs	r3, IPSR
 80063f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	d915      	bls.n	8006426 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063fa:	4a18      	ldr	r2, [pc, #96]	@ (800645c <vPortValidateInterruptPriority+0x74>)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4413      	add	r3, r2
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006404:	4b16      	ldr	r3, [pc, #88]	@ (8006460 <vPortValidateInterruptPriority+0x78>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	7afa      	ldrb	r2, [r7, #11]
 800640a:	429a      	cmp	r2, r3
 800640c:	d20b      	bcs.n	8006426 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	607b      	str	r3, [r7, #4]
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	e7fd      	b.n	8006422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006426:	4b0f      	ldr	r3, [pc, #60]	@ (8006464 <vPortValidateInterruptPriority+0x7c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800642e:	4b0e      	ldr	r3, [pc, #56]	@ (8006468 <vPortValidateInterruptPriority+0x80>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d90b      	bls.n	800644e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	603b      	str	r3, [r7, #0]
}
 8006448:	bf00      	nop
 800644a:	bf00      	nop
 800644c:	e7fd      	b.n	800644a <vPortValidateInterruptPriority+0x62>
	}
 800644e:	bf00      	nop
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	e000e3f0 	.word	0xe000e3f0
 8006460:	20000ee0 	.word	0x20000ee0
 8006464:	e000ed0c 	.word	0xe000ed0c
 8006468:	20000ee4 	.word	0x20000ee4

0800646c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08a      	sub	sp, #40	@ 0x28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006474:	2300      	movs	r3, #0
 8006476:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006478:	f7fe fc76 	bl	8004d68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800647c:	4b5c      	ldr	r3, [pc, #368]	@ (80065f0 <pvPortMalloc+0x184>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006484:	f000 f924 	bl	80066d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006488:	4b5a      	ldr	r3, [pc, #360]	@ (80065f4 <pvPortMalloc+0x188>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4013      	ands	r3, r2
 8006490:	2b00      	cmp	r3, #0
 8006492:	f040 8095 	bne.w	80065c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d01e      	beq.n	80064da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800649c:	2208      	movs	r2, #8
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4413      	add	r3, r2
 80064a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f003 0307 	and.w	r3, r3, #7
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d015      	beq.n	80064da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f023 0307 	bic.w	r3, r3, #7
 80064b4:	3308      	adds	r3, #8
 80064b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f003 0307 	and.w	r3, r3, #7
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00b      	beq.n	80064da <pvPortMalloc+0x6e>
	__asm volatile
 80064c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	617b      	str	r3, [r7, #20]
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop
 80064d8:	e7fd      	b.n	80064d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d06f      	beq.n	80065c0 <pvPortMalloc+0x154>
 80064e0:	4b45      	ldr	r3, [pc, #276]	@ (80065f8 <pvPortMalloc+0x18c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d86a      	bhi.n	80065c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064ea:	4b44      	ldr	r3, [pc, #272]	@ (80065fc <pvPortMalloc+0x190>)
 80064ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064ee:	4b43      	ldr	r3, [pc, #268]	@ (80065fc <pvPortMalloc+0x190>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064f4:	e004      	b.n	8006500 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	429a      	cmp	r2, r3
 8006508:	d903      	bls.n	8006512 <pvPortMalloc+0xa6>
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f1      	bne.n	80064f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006512:	4b37      	ldr	r3, [pc, #220]	@ (80065f0 <pvPortMalloc+0x184>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006518:	429a      	cmp	r2, r3
 800651a:	d051      	beq.n	80065c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2208      	movs	r2, #8
 8006522:	4413      	add	r3, r2
 8006524:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	1ad2      	subs	r2, r2, r3
 8006536:	2308      	movs	r3, #8
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	429a      	cmp	r2, r3
 800653c:	d920      	bls.n	8006580 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800653e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4413      	add	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00b      	beq.n	8006568 <pvPortMalloc+0xfc>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	613b      	str	r3, [r7, #16]
}
 8006562:	bf00      	nop
 8006564:	bf00      	nop
 8006566:	e7fd      	b.n	8006564 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	1ad2      	subs	r2, r2, r3
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800657a:	69b8      	ldr	r0, [r7, #24]
 800657c:	f000 f90a 	bl	8006794 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006580:	4b1d      	ldr	r3, [pc, #116]	@ (80065f8 <pvPortMalloc+0x18c>)
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	4a1b      	ldr	r2, [pc, #108]	@ (80065f8 <pvPortMalloc+0x18c>)
 800658c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800658e:	4b1a      	ldr	r3, [pc, #104]	@ (80065f8 <pvPortMalloc+0x18c>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b1b      	ldr	r3, [pc, #108]	@ (8006600 <pvPortMalloc+0x194>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d203      	bcs.n	80065a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800659a:	4b17      	ldr	r3, [pc, #92]	@ (80065f8 <pvPortMalloc+0x18c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a18      	ldr	r2, [pc, #96]	@ (8006600 <pvPortMalloc+0x194>)
 80065a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	4b13      	ldr	r3, [pc, #76]	@ (80065f4 <pvPortMalloc+0x188>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80065b6:	4b13      	ldr	r3, [pc, #76]	@ (8006604 <pvPortMalloc+0x198>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3301      	adds	r3, #1
 80065bc:	4a11      	ldr	r2, [pc, #68]	@ (8006604 <pvPortMalloc+0x198>)
 80065be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065c0:	f7fe fbe0 	bl	8004d84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00b      	beq.n	80065e6 <pvPortMalloc+0x17a>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	60fb      	str	r3, [r7, #12]
}
 80065e0:	bf00      	nop
 80065e2:	bf00      	nop
 80065e4:	e7fd      	b.n	80065e2 <pvPortMalloc+0x176>
	return pvReturn;
 80065e6:	69fb      	ldr	r3, [r7, #28]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3728      	adds	r7, #40	@ 0x28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20004af0 	.word	0x20004af0
 80065f4:	20004b04 	.word	0x20004b04
 80065f8:	20004af4 	.word	0x20004af4
 80065fc:	20004ae8 	.word	0x20004ae8
 8006600:	20004af8 	.word	0x20004af8
 8006604:	20004afc 	.word	0x20004afc

08006608 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d04f      	beq.n	80066ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800661a:	2308      	movs	r3, #8
 800661c:	425b      	negs	r3, r3
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4413      	add	r3, r2
 8006622:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	4b25      	ldr	r3, [pc, #148]	@ (80066c4 <vPortFree+0xbc>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4013      	ands	r3, r2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10b      	bne.n	800664e <vPortFree+0x46>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	60fb      	str	r3, [r7, #12]
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	e7fd      	b.n	800664a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <vPortFree+0x66>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	60bb      	str	r3, [r7, #8]
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	e7fd      	b.n	800666a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	4b14      	ldr	r3, [pc, #80]	@ (80066c4 <vPortFree+0xbc>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4013      	ands	r3, r2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01e      	beq.n	80066ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d11a      	bne.n	80066ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	4b0e      	ldr	r3, [pc, #56]	@ (80066c4 <vPortFree+0xbc>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	43db      	mvns	r3, r3
 800668e:	401a      	ands	r2, r3
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006694:	f7fe fb68 	bl	8004d68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	4b0a      	ldr	r3, [pc, #40]	@ (80066c8 <vPortFree+0xc0>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4413      	add	r3, r2
 80066a2:	4a09      	ldr	r2, [pc, #36]	@ (80066c8 <vPortFree+0xc0>)
 80066a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066a6:	6938      	ldr	r0, [r7, #16]
 80066a8:	f000 f874 	bl	8006794 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80066ac:	4b07      	ldr	r3, [pc, #28]	@ (80066cc <vPortFree+0xc4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3301      	adds	r3, #1
 80066b2:	4a06      	ldr	r2, [pc, #24]	@ (80066cc <vPortFree+0xc4>)
 80066b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80066b6:	f7fe fb65 	bl	8004d84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066ba:	bf00      	nop
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20004b04 	.word	0x20004b04
 80066c8:	20004af4 	.word	0x20004af4
 80066cc:	20004b00 	.word	0x20004b00

080066d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80066da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066dc:	4b27      	ldr	r3, [pc, #156]	@ (800677c <prvHeapInit+0xac>)
 80066de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00c      	beq.n	8006704 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3307      	adds	r3, #7
 80066ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0307 	bic.w	r3, r3, #7
 80066f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	4a1f      	ldr	r2, [pc, #124]	@ (800677c <prvHeapInit+0xac>)
 8006700:	4413      	add	r3, r2
 8006702:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006708:	4a1d      	ldr	r2, [pc, #116]	@ (8006780 <prvHeapInit+0xb0>)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800670e:	4b1c      	ldr	r3, [pc, #112]	@ (8006780 <prvHeapInit+0xb0>)
 8006710:	2200      	movs	r2, #0
 8006712:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	4413      	add	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800671c:	2208      	movs	r2, #8
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	1a9b      	subs	r3, r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0307 	bic.w	r3, r3, #7
 800672a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4a15      	ldr	r2, [pc, #84]	@ (8006784 <prvHeapInit+0xb4>)
 8006730:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006732:	4b14      	ldr	r3, [pc, #80]	@ (8006784 <prvHeapInit+0xb4>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2200      	movs	r2, #0
 8006738:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800673a:	4b12      	ldr	r3, [pc, #72]	@ (8006784 <prvHeapInit+0xb4>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2200      	movs	r2, #0
 8006740:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	1ad2      	subs	r2, r2, r3
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006750:	4b0c      	ldr	r3, [pc, #48]	@ (8006784 <prvHeapInit+0xb4>)
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	4a0a      	ldr	r2, [pc, #40]	@ (8006788 <prvHeapInit+0xb8>)
 800675e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	4a09      	ldr	r2, [pc, #36]	@ (800678c <prvHeapInit+0xbc>)
 8006766:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006768:	4b09      	ldr	r3, [pc, #36]	@ (8006790 <prvHeapInit+0xc0>)
 800676a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800676e:	601a      	str	r2, [r3, #0]
}
 8006770:	bf00      	nop
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	20000ee8 	.word	0x20000ee8
 8006780:	20004ae8 	.word	0x20004ae8
 8006784:	20004af0 	.word	0x20004af0
 8006788:	20004af8 	.word	0x20004af8
 800678c:	20004af4 	.word	0x20004af4
 8006790:	20004b04 	.word	0x20004b04

08006794 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800679c:	4b28      	ldr	r3, [pc, #160]	@ (8006840 <prvInsertBlockIntoFreeList+0xac>)
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	e002      	b.n	80067a8 <prvInsertBlockIntoFreeList+0x14>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d8f7      	bhi.n	80067a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	4413      	add	r3, r2
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d108      	bne.n	80067d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	441a      	add	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	441a      	add	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d118      	bne.n	800681c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	4b15      	ldr	r3, [pc, #84]	@ (8006844 <prvInsertBlockIntoFreeList+0xb0>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d00d      	beq.n	8006812 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	441a      	add	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	e008      	b.n	8006824 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006812:	4b0c      	ldr	r3, [pc, #48]	@ (8006844 <prvInsertBlockIntoFreeList+0xb0>)
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	e003      	b.n	8006824 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	429a      	cmp	r2, r3
 800682a:	d002      	beq.n	8006832 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006832:	bf00      	nop
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20004ae8 	.word	0x20004ae8
 8006844:	20004af0 	.word	0x20004af0

08006848 <memset>:
 8006848:	4402      	add	r2, r0
 800684a:	4603      	mov	r3, r0
 800684c:	4293      	cmp	r3, r2
 800684e:	d100      	bne.n	8006852 <memset+0xa>
 8006850:	4770      	bx	lr
 8006852:	f803 1b01 	strb.w	r1, [r3], #1
 8006856:	e7f9      	b.n	800684c <memset+0x4>

08006858 <_reclaim_reent>:
 8006858:	4b2d      	ldr	r3, [pc, #180]	@ (8006910 <_reclaim_reent+0xb8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4283      	cmp	r3, r0
 800685e:	b570      	push	{r4, r5, r6, lr}
 8006860:	4604      	mov	r4, r0
 8006862:	d053      	beq.n	800690c <_reclaim_reent+0xb4>
 8006864:	69c3      	ldr	r3, [r0, #28]
 8006866:	b31b      	cbz	r3, 80068b0 <_reclaim_reent+0x58>
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	b163      	cbz	r3, 8006886 <_reclaim_reent+0x2e>
 800686c:	2500      	movs	r5, #0
 800686e:	69e3      	ldr	r3, [r4, #28]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	5959      	ldr	r1, [r3, r5]
 8006874:	b9b1      	cbnz	r1, 80068a4 <_reclaim_reent+0x4c>
 8006876:	3504      	adds	r5, #4
 8006878:	2d80      	cmp	r5, #128	@ 0x80
 800687a:	d1f8      	bne.n	800686e <_reclaim_reent+0x16>
 800687c:	69e3      	ldr	r3, [r4, #28]
 800687e:	4620      	mov	r0, r4
 8006880:	68d9      	ldr	r1, [r3, #12]
 8006882:	f000 f87b 	bl	800697c <_free_r>
 8006886:	69e3      	ldr	r3, [r4, #28]
 8006888:	6819      	ldr	r1, [r3, #0]
 800688a:	b111      	cbz	r1, 8006892 <_reclaim_reent+0x3a>
 800688c:	4620      	mov	r0, r4
 800688e:	f000 f875 	bl	800697c <_free_r>
 8006892:	69e3      	ldr	r3, [r4, #28]
 8006894:	689d      	ldr	r5, [r3, #8]
 8006896:	b15d      	cbz	r5, 80068b0 <_reclaim_reent+0x58>
 8006898:	4629      	mov	r1, r5
 800689a:	4620      	mov	r0, r4
 800689c:	682d      	ldr	r5, [r5, #0]
 800689e:	f000 f86d 	bl	800697c <_free_r>
 80068a2:	e7f8      	b.n	8006896 <_reclaim_reent+0x3e>
 80068a4:	680e      	ldr	r6, [r1, #0]
 80068a6:	4620      	mov	r0, r4
 80068a8:	f000 f868 	bl	800697c <_free_r>
 80068ac:	4631      	mov	r1, r6
 80068ae:	e7e1      	b.n	8006874 <_reclaim_reent+0x1c>
 80068b0:	6961      	ldr	r1, [r4, #20]
 80068b2:	b111      	cbz	r1, 80068ba <_reclaim_reent+0x62>
 80068b4:	4620      	mov	r0, r4
 80068b6:	f000 f861 	bl	800697c <_free_r>
 80068ba:	69e1      	ldr	r1, [r4, #28]
 80068bc:	b111      	cbz	r1, 80068c4 <_reclaim_reent+0x6c>
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 f85c 	bl	800697c <_free_r>
 80068c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80068c6:	b111      	cbz	r1, 80068ce <_reclaim_reent+0x76>
 80068c8:	4620      	mov	r0, r4
 80068ca:	f000 f857 	bl	800697c <_free_r>
 80068ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068d0:	b111      	cbz	r1, 80068d8 <_reclaim_reent+0x80>
 80068d2:	4620      	mov	r0, r4
 80068d4:	f000 f852 	bl	800697c <_free_r>
 80068d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80068da:	b111      	cbz	r1, 80068e2 <_reclaim_reent+0x8a>
 80068dc:	4620      	mov	r0, r4
 80068de:	f000 f84d 	bl	800697c <_free_r>
 80068e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80068e4:	b111      	cbz	r1, 80068ec <_reclaim_reent+0x94>
 80068e6:	4620      	mov	r0, r4
 80068e8:	f000 f848 	bl	800697c <_free_r>
 80068ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80068ee:	b111      	cbz	r1, 80068f6 <_reclaim_reent+0x9e>
 80068f0:	4620      	mov	r0, r4
 80068f2:	f000 f843 	bl	800697c <_free_r>
 80068f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80068f8:	b111      	cbz	r1, 8006900 <_reclaim_reent+0xa8>
 80068fa:	4620      	mov	r0, r4
 80068fc:	f000 f83e 	bl	800697c <_free_r>
 8006900:	6a23      	ldr	r3, [r4, #32]
 8006902:	b11b      	cbz	r3, 800690c <_reclaim_reent+0xb4>
 8006904:	4620      	mov	r0, r4
 8006906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800690a:	4718      	bx	r3
 800690c:	bd70      	pop	{r4, r5, r6, pc}
 800690e:	bf00      	nop
 8006910:	20000010 	.word	0x20000010

08006914 <__libc_init_array>:
 8006914:	b570      	push	{r4, r5, r6, lr}
 8006916:	4d0d      	ldr	r5, [pc, #52]	@ (800694c <__libc_init_array+0x38>)
 8006918:	4c0d      	ldr	r4, [pc, #52]	@ (8006950 <__libc_init_array+0x3c>)
 800691a:	1b64      	subs	r4, r4, r5
 800691c:	10a4      	asrs	r4, r4, #2
 800691e:	2600      	movs	r6, #0
 8006920:	42a6      	cmp	r6, r4
 8006922:	d109      	bne.n	8006938 <__libc_init_array+0x24>
 8006924:	4d0b      	ldr	r5, [pc, #44]	@ (8006954 <__libc_init_array+0x40>)
 8006926:	4c0c      	ldr	r4, [pc, #48]	@ (8006958 <__libc_init_array+0x44>)
 8006928:	f000 f87e 	bl	8006a28 <_init>
 800692c:	1b64      	subs	r4, r4, r5
 800692e:	10a4      	asrs	r4, r4, #2
 8006930:	2600      	movs	r6, #0
 8006932:	42a6      	cmp	r6, r4
 8006934:	d105      	bne.n	8006942 <__libc_init_array+0x2e>
 8006936:	bd70      	pop	{r4, r5, r6, pc}
 8006938:	f855 3b04 	ldr.w	r3, [r5], #4
 800693c:	4798      	blx	r3
 800693e:	3601      	adds	r6, #1
 8006940:	e7ee      	b.n	8006920 <__libc_init_array+0xc>
 8006942:	f855 3b04 	ldr.w	r3, [r5], #4
 8006946:	4798      	blx	r3
 8006948:	3601      	adds	r6, #1
 800694a:	e7f2      	b.n	8006932 <__libc_init_array+0x1e>
 800694c:	08006b70 	.word	0x08006b70
 8006950:	08006b70 	.word	0x08006b70
 8006954:	08006b70 	.word	0x08006b70
 8006958:	08006b74 	.word	0x08006b74

0800695c <__retarget_lock_acquire_recursive>:
 800695c:	4770      	bx	lr

0800695e <__retarget_lock_release_recursive>:
 800695e:	4770      	bx	lr

08006960 <memcpy>:
 8006960:	440a      	add	r2, r1
 8006962:	4291      	cmp	r1, r2
 8006964:	f100 33ff 	add.w	r3, r0, #4294967295
 8006968:	d100      	bne.n	800696c <memcpy+0xc>
 800696a:	4770      	bx	lr
 800696c:	b510      	push	{r4, lr}
 800696e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006972:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006976:	4291      	cmp	r1, r2
 8006978:	d1f9      	bne.n	800696e <memcpy+0xe>
 800697a:	bd10      	pop	{r4, pc}

0800697c <_free_r>:
 800697c:	b538      	push	{r3, r4, r5, lr}
 800697e:	4605      	mov	r5, r0
 8006980:	2900      	cmp	r1, #0
 8006982:	d041      	beq.n	8006a08 <_free_r+0x8c>
 8006984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006988:	1f0c      	subs	r4, r1, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	bfb8      	it	lt
 800698e:	18e4      	addlt	r4, r4, r3
 8006990:	f000 f83e 	bl	8006a10 <__malloc_lock>
 8006994:	4a1d      	ldr	r2, [pc, #116]	@ (8006a0c <_free_r+0x90>)
 8006996:	6813      	ldr	r3, [r2, #0]
 8006998:	b933      	cbnz	r3, 80069a8 <_free_r+0x2c>
 800699a:	6063      	str	r3, [r4, #4]
 800699c:	6014      	str	r4, [r2, #0]
 800699e:	4628      	mov	r0, r5
 80069a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069a4:	f000 b83a 	b.w	8006a1c <__malloc_unlock>
 80069a8:	42a3      	cmp	r3, r4
 80069aa:	d908      	bls.n	80069be <_free_r+0x42>
 80069ac:	6820      	ldr	r0, [r4, #0]
 80069ae:	1821      	adds	r1, r4, r0
 80069b0:	428b      	cmp	r3, r1
 80069b2:	bf01      	itttt	eq
 80069b4:	6819      	ldreq	r1, [r3, #0]
 80069b6:	685b      	ldreq	r3, [r3, #4]
 80069b8:	1809      	addeq	r1, r1, r0
 80069ba:	6021      	streq	r1, [r4, #0]
 80069bc:	e7ed      	b.n	800699a <_free_r+0x1e>
 80069be:	461a      	mov	r2, r3
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	b10b      	cbz	r3, 80069c8 <_free_r+0x4c>
 80069c4:	42a3      	cmp	r3, r4
 80069c6:	d9fa      	bls.n	80069be <_free_r+0x42>
 80069c8:	6811      	ldr	r1, [r2, #0]
 80069ca:	1850      	adds	r0, r2, r1
 80069cc:	42a0      	cmp	r0, r4
 80069ce:	d10b      	bne.n	80069e8 <_free_r+0x6c>
 80069d0:	6820      	ldr	r0, [r4, #0]
 80069d2:	4401      	add	r1, r0
 80069d4:	1850      	adds	r0, r2, r1
 80069d6:	4283      	cmp	r3, r0
 80069d8:	6011      	str	r1, [r2, #0]
 80069da:	d1e0      	bne.n	800699e <_free_r+0x22>
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	6053      	str	r3, [r2, #4]
 80069e2:	4408      	add	r0, r1
 80069e4:	6010      	str	r0, [r2, #0]
 80069e6:	e7da      	b.n	800699e <_free_r+0x22>
 80069e8:	d902      	bls.n	80069f0 <_free_r+0x74>
 80069ea:	230c      	movs	r3, #12
 80069ec:	602b      	str	r3, [r5, #0]
 80069ee:	e7d6      	b.n	800699e <_free_r+0x22>
 80069f0:	6820      	ldr	r0, [r4, #0]
 80069f2:	1821      	adds	r1, r4, r0
 80069f4:	428b      	cmp	r3, r1
 80069f6:	bf04      	itt	eq
 80069f8:	6819      	ldreq	r1, [r3, #0]
 80069fa:	685b      	ldreq	r3, [r3, #4]
 80069fc:	6063      	str	r3, [r4, #4]
 80069fe:	bf04      	itt	eq
 8006a00:	1809      	addeq	r1, r1, r0
 8006a02:	6021      	streq	r1, [r4, #0]
 8006a04:	6054      	str	r4, [r2, #4]
 8006a06:	e7ca      	b.n	800699e <_free_r+0x22>
 8006a08:	bd38      	pop	{r3, r4, r5, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20004c44 	.word	0x20004c44

08006a10 <__malloc_lock>:
 8006a10:	4801      	ldr	r0, [pc, #4]	@ (8006a18 <__malloc_lock+0x8>)
 8006a12:	f7ff bfa3 	b.w	800695c <__retarget_lock_acquire_recursive>
 8006a16:	bf00      	nop
 8006a18:	20004c40 	.word	0x20004c40

08006a1c <__malloc_unlock>:
 8006a1c:	4801      	ldr	r0, [pc, #4]	@ (8006a24 <__malloc_unlock+0x8>)
 8006a1e:	f7ff bf9e 	b.w	800695e <__retarget_lock_release_recursive>
 8006a22:	bf00      	nop
 8006a24:	20004c40 	.word	0x20004c40

08006a28 <_init>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	bf00      	nop
 8006a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2e:	bc08      	pop	{r3}
 8006a30:	469e      	mov	lr, r3
 8006a32:	4770      	bx	lr

08006a34 <_fini>:
 8006a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a36:	bf00      	nop
 8006a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a3a:	bc08      	pop	{r3}
 8006a3c:	469e      	mov	lr, r3
 8006a3e:	4770      	bx	lr
