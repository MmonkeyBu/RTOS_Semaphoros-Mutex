
Atividade4_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006520  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080066f0  080066f0  000076f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006818  08006818  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006818  08006818  00007818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006820  08006820  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006820  08006820  00007820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006824  08006824  00007824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006828  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be4  20000060  08006888  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c44  08006888  00008c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f91  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000350e  00000000  00000000  0001f021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00022530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f9d  00000000  00000000  00023968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003354  00000000  00000000  00024905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a82  00000000  00000000  00027c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da91a  00000000  00000000  0003e6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118ff5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005828  00000000  00000000  00119038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0011e860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080066d8 	.word	0x080066d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080066d8 	.word	0x080066d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b5b0      	push	{r4, r5, r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000552:	f000 fafb 	bl	8000b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000556:	f000 f857 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055a:	f000 f8e1 	bl	8000720 <MX_GPIO_Init>
  MX_USART2_Init();
 800055e:	f000 f8b3 	bl	80006c8 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000562:	f002 fd3d 	bl	8002fe0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of MeuSemaforoContador */
  MeuSemaforoContadorHandle = osSemaphoreNew(2, 0, &MeuSemaforoContador_attributes);
 8000566:	4a1b      	ldr	r2, [pc, #108]	@ (80005d4 <main+0x88>)
 8000568:	2100      	movs	r1, #0
 800056a:	2002      	movs	r0, #2
 800056c:	f002 fe2f 	bl	80031ce <osSemaphoreNew>
 8000570:	4603      	mov	r3, r0
 8000572:	4a19      	ldr	r2, [pc, #100]	@ (80005d8 <main+0x8c>)
 8000574:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_1 */
  Task_1Handle = osThreadNew(StartTask1, NULL, &Task_1_attributes);
 8000576:	4a19      	ldr	r2, [pc, #100]	@ (80005dc <main+0x90>)
 8000578:	2100      	movs	r1, #0
 800057a:	4819      	ldr	r0, [pc, #100]	@ (80005e0 <main+0x94>)
 800057c:	f002 fd7a 	bl	8003074 <osThreadNew>
 8000580:	4603      	mov	r3, r0
 8000582:	4a18      	ldr	r2, [pc, #96]	@ (80005e4 <main+0x98>)
 8000584:	6013      	str	r3, [r2, #0]

  /* creation of Task_2 */
  Task_2Handle = osThreadNew(StartTask2, NULL, &Task_2_attributes);
 8000586:	4a18      	ldr	r2, [pc, #96]	@ (80005e8 <main+0x9c>)
 8000588:	2100      	movs	r1, #0
 800058a:	4818      	ldr	r0, [pc, #96]	@ (80005ec <main+0xa0>)
 800058c:	f002 fd72 	bl	8003074 <osThreadNew>
 8000590:	4603      	mov	r3, r0
 8000592:	4a17      	ldr	r2, [pc, #92]	@ (80005f0 <main+0xa4>)
 8000594:	6013      	str	r3, [r2, #0]

  /* creation of Task_3 */
  Task_3Handle = osThreadNew(StartTask3, NULL, &Task_3_attributes);
 8000596:	4a17      	ldr	r2, [pc, #92]	@ (80005f4 <main+0xa8>)
 8000598:	2100      	movs	r1, #0
 800059a:	4817      	ldr	r0, [pc, #92]	@ (80005f8 <main+0xac>)
 800059c:	f002 fd6a 	bl	8003074 <osThreadNew>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a16      	ldr	r2, [pc, #88]	@ (80005fc <main+0xb0>)
 80005a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a6:	f002 fd3f 	bl	8003028 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  char str [] = "Task 1 iniciando";
 80005aa:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <main+0xb4>)
 80005ac:	1d3c      	adds	r4, r7, #4
 80005ae:	461d      	mov	r5, r3
 80005b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b4:	682b      	ldr	r3, [r5, #0]
 80005b6:	7023      	strb	r3, [r4, #0]
	  HAL_USART_Transmit(&husart2, (uint8_t *) str, strlen(str), HAL_MAX_DELAY);
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff fe28 	bl	8000210 <strlen>
 80005c0:	4603      	mov	r3, r0
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	1d39      	adds	r1, r7, #4
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	480e      	ldr	r0, [pc, #56]	@ (8000604 <main+0xb8>)
 80005cc:	f001 fe09 	bl	80021e2 <HAL_USART_Transmit>
  {
 80005d0:	bf00      	nop
 80005d2:	e7ea      	b.n	80005aa <main+0x5e>
 80005d4:	080067f0 	.word	0x080067f0
 80005d8:	200000cc 	.word	0x200000cc
 80005dc:	08006784 	.word	0x08006784
 80005e0:	08000755 	.word	0x08000755
 80005e4:	200000c0 	.word	0x200000c0
 80005e8:	080067a8 	.word	0x080067a8
 80005ec:	080007b1 	.word	0x080007b1
 80005f0:	200000c4 	.word	0x200000c4
 80005f4:	080067cc 	.word	0x080067cc
 80005f8:	0800080d 	.word	0x0800080d
 80005fc:	200000c8 	.word	0x200000c8
 8000600:	0800671c 	.word	0x0800671c
 8000604:	2000007c 	.word	0x2000007c

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2234      	movs	r2, #52	@ 0x34
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f005 ff6e 	bl	80064f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b23      	ldr	r3, [pc, #140]	@ (80006c0 <SystemClock_Config+0xb8>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	4a22      	ldr	r2, [pc, #136]	@ (80006c0 <SystemClock_Config+0xb8>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	@ 0x40
 800063c:	4b20      	ldr	r3, [pc, #128]	@ (80006c0 <SystemClock_Config+0xb8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <SystemClock_Config+0xbc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000654:	4a1b      	ldr	r2, [pc, #108]	@ (80006c4 <SystemClock_Config+0xbc>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <SystemClock_Config+0xbc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000674:	2300      	movs	r3, #0
 8000676:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4618      	mov	r0, r3
 800067e:	f001 f835 	bl	80016ec <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000688:	f000 f900 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fd2a 	bl	8001100 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006b2:	f000 f8eb 	bl	800088c <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	@ 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <MX_USART2_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	@ (800071c <MX_USART2_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 9600;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_USART2_Init+0x50>)
 80006d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006d8:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80006da:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MX_USART2_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80006e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <MX_USART2_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_USART2_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <MX_USART2_Init+0x50>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_USART2_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <MX_USART2_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_USART2_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_USART2_Init+0x50>)
 8000706:	f001 fd2b 	bl	8002160 <HAL_USART_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 f8bc 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000007c 	.word	0x2000007c
 800071c:	40004400 	.word	0x40004400

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_GPIO_Init+0x30>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a08      	ldr	r2, [pc, #32]	@ (8000750 <MX_GPIO_Init+0x30>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_GPIO_Init+0x30>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000754:	b5b0      	push	{r4, r5, r7, lr}
 8000756:	b08c      	sub	sp, #48	@ 0x30
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char Executando [] = "Task 1 Executando";
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <StartTask1+0x50>)
 800075e:	f107 041c 	add.w	r4, r7, #28
 8000762:	461d      	mov	r5, r3
 8000764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000768:	682b      	ldr	r3, [r5, #0]
 800076a:	8023      	strh	r3, [r4, #0]
	//PEGA O SEMÁFORO PARA SI
	osSemaphoreAcquire(MeuSemaforoContadorHandle, osWaitForever);
 800076c:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <StartTask1+0x54>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f04f 31ff 	mov.w	r1, #4294967295
 8000774:	4618      	mov	r0, r3
 8000776:	f002 fdb3 	bl	80032e0 <osSemaphoreAcquire>
	char str [] = "Task 1 iniciando";
 800077a:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <StartTask1+0x58>)
 800077c:	f107 0408 	add.w	r4, r7, #8
 8000780:	461d      	mov	r5, r3
 8000782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000786:	682b      	ldr	r3, [r5, #0]
 8000788:	7023      	strb	r3, [r4, #0]
    //HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), HAL_MAX_DELAY);
	//TRANSMITE QUANTOS ESPAÇOS TEM NO SEMAFORO
	uint8_t STRemINT;
	STRemINT = osSemaphoreGetCount(MeuSemaforoContadorHandle);
 800078a:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <StartTask1+0x54>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f002 fdf8 	bl	8003384 <osSemaphoreGetCount>
 8000794:	4603      	mov	r3, r0
 8000796:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  /* Infinite loop */
  for(;;)
  {
	//MOSTRA QUE ESTÁ EXECUTANDO
	//HAL_UART_Transmit(&huart2, (uint8_t *) Executando, strlen(Executando), HAL_MAX_DELAY);
    osDelay(500);
 800079a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800079e:	f002 fcfb 	bl	8003198 <osDelay>
 80007a2:	e7fa      	b.n	800079a <StartTask1+0x46>
 80007a4:	08006730 	.word	0x08006730
 80007a8:	200000cc 	.word	0x200000cc
 80007ac:	0800671c 	.word	0x0800671c

080007b0 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80007b0:	b5b0      	push	{r4, r5, r7, lr}
 80007b2:	b08c      	sub	sp, #48	@ 0x30
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
	char Executando [] = "Task 2 Executando";
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <StartTask2+0x50>)
 80007ba:	f107 041c 	add.w	r4, r7, #28
 80007be:	461d      	mov	r5, r3
 80007c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c4:	682b      	ldr	r3, [r5, #0]
 80007c6:	8023      	strh	r3, [r4, #0]
	//PEGA O SEMÁFORO PARA SI
	osSemaphoreAcquire(MeuSemaforoContadorHandle, osWaitForever);
 80007c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <StartTask2+0x54>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f04f 31ff 	mov.w	r1, #4294967295
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 fd85 	bl	80032e0 <osSemaphoreAcquire>
	char str [] = "Task 2 iniciando";
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <StartTask2+0x58>)
 80007d8:	f107 0408 	add.w	r4, r7, #8
 80007dc:	461d      	mov	r5, r3
 80007de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e2:	682b      	ldr	r3, [r5, #0]
 80007e4:	7023      	strb	r3, [r4, #0]
    //HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), HAL_MAX_DELAY);

	//TRANSMITE QUANTOS ESPAÇOS TEM NO SEMAFORO
	uint8_t STRemINT;
	STRemINT = osSemaphoreGetCount(MeuSemaforoContadorHandle);
 80007e6:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <StartTask2+0x54>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 fdca 	bl	8003384 <osSemaphoreGetCount>
 80007f0:	4603      	mov	r3, r0
 80007f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  /* Infinite loop */
  for(;;)
  {
	//MOSTRA QUE ESTÁ EXECUTANDO
	//HAL_UART_Transmit(&huart2, (uint8_t *) Executando, strlen(Executando), HAL_MAX_DELAY);
    osDelay(500);
 80007f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007fa:	f002 fccd 	bl	8003198 <osDelay>
 80007fe:	e7fa      	b.n	80007f6 <StartTask2+0x46>
 8000800:	08006744 	.word	0x08006744
 8000804:	200000cc 	.word	0x200000cc
 8000808:	08006758 	.word	0x08006758

0800080c <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 800080c:	b5b0      	push	{r4, r5, r7, lr}
 800080e:	b08c      	sub	sp, #48	@ 0x30
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
		char Executando [] = "Task 2 Executando";
 8000814:	4b11      	ldr	r3, [pc, #68]	@ (800085c <StartTask3+0x50>)
 8000816:	f107 041c 	add.w	r4, r7, #28
 800081a:	461d      	mov	r5, r3
 800081c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000820:	682b      	ldr	r3, [r5, #0]
 8000822:	8023      	strh	r3, [r4, #0]
		//PEGA O SEMÁFORO PARA SI
		osSemaphoreAcquire(MeuSemaforoContadorHandle, osWaitForever);
 8000824:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <StartTask3+0x54>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f04f 31ff 	mov.w	r1, #4294967295
 800082c:	4618      	mov	r0, r3
 800082e:	f002 fd57 	bl	80032e0 <osSemaphoreAcquire>
		char str [] = "Task 2 iniciando";
 8000832:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <StartTask3+0x58>)
 8000834:	f107 0408 	add.w	r4, r7, #8
 8000838:	461d      	mov	r5, r3
 800083a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800083c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083e:	682b      	ldr	r3, [r5, #0]
 8000840:	7023      	strb	r3, [r4, #0]
	    //HAL_UART_Transmit(&huart2, (uint8_t *) str, strlen(str), HAL_MAX_DELAY);
		//TRANSMITE QUANTOS ESPAÇOS TEM NO SEMAFORO
		uint8_t STRemINT;
		STRemINT = osSemaphoreGetCount(MeuSemaforoContadorHandle);
 8000842:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <StartTask3+0x54>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f002 fd9c 	bl	8003384 <osSemaphoreGetCount>
 800084c:	4603      	mov	r3, r0
 800084e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  /* Infinite loop */
	  for(;;)
	  {
		//MOSTRA QUE ESTÁ EXECUTANDO
		//HAL_UART_Transmit(&huart2, (uint8_t *) Executando, strlen(Executando), HAL_MAX_DELAY);
	    osDelay(500);
 8000852:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000856:	f002 fc9f 	bl	8003198 <osDelay>
 800085a:	e7fa      	b.n	8000852 <StartTask3+0x46>
 800085c:	08006744 	.word	0x08006744
 8000860:	200000cc 	.word	0x200000cc
 8000864:	08006758 	.word	0x08006758

08000868 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d101      	bne.n	800087e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800087a:	f000 f989 	bl	8000b90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40010000 	.word	0x40010000

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <Error_Handler+0x8>

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <HAL_MspInit+0x54>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a6:	4a11      	ldr	r2, [pc, #68]	@ (80008ec <HAL_MspInit+0x54>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <HAL_MspInit+0x54>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <HAL_MspInit+0x54>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c2:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <HAL_MspInit+0x54>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <HAL_MspInit+0x54>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	210f      	movs	r1, #15
 80008da:	f06f 0001 	mvn.w	r0, #1
 80008de:	f000 fa2f 	bl	8000d40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <HAL_USART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param husart: USART handle pointer
  * @retval None
  */
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	@ 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a1d      	ldr	r2, [pc, #116]	@ (8000984 <HAL_USART_MspInit+0x94>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d133      	bne.n	800097a <HAL_USART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <HAL_USART_MspInit+0x98>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	4a1b      	ldr	r2, [pc, #108]	@ (8000988 <HAL_USART_MspInit+0x98>)
 800091c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000920:	6413      	str	r3, [r2, #64]	@ 0x40
 8000922:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <HAL_USART_MspInit+0x98>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <HAL_USART_MspInit+0x98>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a14      	ldr	r2, [pc, #80]	@ (8000988 <HAL_USART_MspInit+0x98>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <HAL_USART_MspInit+0x98>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800094a:	231c      	movs	r3, #28
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800095a:	2307      	movs	r3, #7
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4809      	ldr	r0, [pc, #36]	@ (800098c <HAL_USART_MspInit+0x9c>)
 8000966:	f000 fa37 	bl	8000dd8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2105      	movs	r1, #5
 800096e:	2026      	movs	r0, #38	@ 0x26
 8000970:	f000 f9e6 	bl	8000d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000974:	2026      	movs	r0, #38	@ 0x26
 8000976:	f000 f9ff 	bl	8000d78 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	@ 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40004400 	.word	0x40004400
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000

08000990 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	@ 0x30
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a60 <HAL_InitTick+0xd0>)
 80009a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a8:	4a2d      	ldr	r2, [pc, #180]	@ (8000a60 <HAL_InitTick+0xd0>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a60 <HAL_InitTick+0xd0>)
 80009b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009bc:	f107 020c 	add.w	r2, r7, #12
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4611      	mov	r1, r2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fcb4 	bl	8001334 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009cc:	f000 fc9e 	bl	800130c <HAL_RCC_GetPCLK2Freq>
 80009d0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009d4:	4a23      	ldr	r2, [pc, #140]	@ (8000a64 <HAL_InitTick+0xd4>)
 80009d6:	fba2 2303 	umull	r2, r3, r2, r3
 80009da:	0c9b      	lsrs	r3, r3, #18
 80009dc:	3b01      	subs	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009e0:	4b21      	ldr	r3, [pc, #132]	@ (8000a68 <HAL_InitTick+0xd8>)
 80009e2:	4a22      	ldr	r2, [pc, #136]	@ (8000a6c <HAL_InitTick+0xdc>)
 80009e4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009e6:	4b20      	ldr	r3, [pc, #128]	@ (8000a68 <HAL_InitTick+0xd8>)
 80009e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000a68 <HAL_InitTick+0xd8>)
 80009f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <HAL_InitTick+0xd8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000a68 <HAL_InitTick+0xd8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a00:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <HAL_InitTick+0xd8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a06:	4818      	ldr	r0, [pc, #96]	@ (8000a68 <HAL_InitTick+0xd8>)
 8000a08:	f001 f90e 	bl	8001c28 <HAL_TIM_Base_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d11b      	bne.n	8000a52 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a1a:	4813      	ldr	r0, [pc, #76]	@ (8000a68 <HAL_InitTick+0xd8>)
 8000a1c:	f001 f95e 	bl	8001cdc <HAL_TIM_Base_Start_IT>
 8000a20:	4603      	mov	r3, r0
 8000a22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d111      	bne.n	8000a52 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a2e:	2019      	movs	r0, #25
 8000a30:	f000 f9a2 	bl	8000d78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b0f      	cmp	r3, #15
 8000a38:	d808      	bhi.n	8000a4c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	6879      	ldr	r1, [r7, #4]
 8000a3e:	2019      	movs	r0, #25
 8000a40:	f000 f97e 	bl	8000d40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a44:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <HAL_InitTick+0xe0>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6013      	str	r3, [r2, #0]
 8000a4a:	e002      	b.n	8000a52 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3730      	adds	r7, #48	@ 0x30
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	431bde83 	.word	0x431bde83
 8000a68:	200000d0 	.word	0x200000d0
 8000a6c:	40010000 	.word	0x40010000
 8000a70:	20000004 	.word	0x20000004

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <NMI_Handler+0x4>

08000a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ab0:	4802      	ldr	r0, [pc, #8]	@ (8000abc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ab2:	f001 f983 	bl	8001dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000d0 	.word	0x200000d0

08000ac0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 8000ac4:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <USART2_IRQHandler+0x10>)
 8000ac6:	f001 fc1d 	bl	8002304 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000007c 	.word	0x2000007c

08000ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <SystemInit+0x20>)
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ade:	4a05      	ldr	r2, [pc, #20]	@ (8000af4 <SystemInit+0x20>)
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000afc:	f7ff ffea 	bl	8000ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b00:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b02:	490d      	ldr	r1, [pc, #52]	@ (8000b38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b04:	4a0d      	ldr	r2, [pc, #52]	@ (8000b3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0a      	ldr	r2, [pc, #40]	@ (8000b40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b18:	4c0a      	ldr	r4, [pc, #40]	@ (8000b44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b26:	f005 fd4d 	bl	80065c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2a:	f7ff fd0f 	bl	800054c <main>
  bx  lr    
 8000b2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b3c:	08006828 	.word	0x08006828
  ldr r2, =_sbss
 8000b40:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b44:	20004c44 	.word	0x20004c44

08000b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC_IRQHandler>
	...

08000b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b50:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0d      	ldr	r2, [pc, #52]	@ (8000b8c <HAL_Init+0x40>)
 8000b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <HAL_Init+0x40>)
 8000b62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	@ (8000b8c <HAL_Init+0x40>)
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f8d8 	bl	8000d2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f7ff ff08 	bl	8000990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fe8a 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023c00 	.word	0x40023c00

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000118 	.word	0x20000118

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	@ (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000118 	.word	0x20000118

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0b      	blt.n	8000c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4907      	ldr	r1, [pc, #28]	@ (8000c6c <__NVIC_EnableIRQ+0x38>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	@ (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	@ (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	@ 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	@ 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ff4c 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d52:	f7ff ff61 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	68b9      	ldr	r1, [r7, #8]
 8000d5c:	6978      	ldr	r0, [r7, #20]
 8000d5e:	f7ff ffb1 	bl	8000cc4 <NVIC_EncodePriority>
 8000d62:	4602      	mov	r2, r0
 8000d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff80 	bl	8000c70 <__NVIC_SetPriority>
}
 8000d70:	bf00      	nop
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff54 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d004      	beq.n	8000db2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2280      	movs	r2, #128	@ 0x80
 8000dac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00c      	b.n	8000dcc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2205      	movs	r2, #5
 8000db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 0201 	bic.w	r2, r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	@ 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	e165      	b.n	80010c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df4:	2201      	movs	r2, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	f040 8154 	bne.w	80010ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d005      	beq.n	8000e2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d130      	bne.n	8000e8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e60:	2201      	movs	r2, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	f003 0201 	and.w	r2, r3, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d017      	beq.n	8000ec8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d123      	bne.n	8000f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	220f      	movs	r2, #15
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	69b9      	ldr	r1, [r7, #24]
 8000f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0203 	and.w	r2, r3, #3
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 80ae 	beq.w	80010ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b5d      	ldr	r3, [pc, #372]	@ (80010d8 <HAL_GPIO_Init+0x300>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	4a5c      	ldr	r2, [pc, #368]	@ (80010d8 <HAL_GPIO_Init+0x300>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6e:	4b5a      	ldr	r3, [pc, #360]	@ (80010d8 <HAL_GPIO_Init+0x300>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7a:	4a58      	ldr	r2, [pc, #352]	@ (80010dc <HAL_GPIO_Init+0x304>)
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4f      	ldr	r2, [pc, #316]	@ (80010e0 <HAL_GPIO_Init+0x308>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d025      	beq.n	8000ff2 <HAL_GPIO_Init+0x21a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4e      	ldr	r2, [pc, #312]	@ (80010e4 <HAL_GPIO_Init+0x30c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d01f      	beq.n	8000fee <HAL_GPIO_Init+0x216>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4d      	ldr	r2, [pc, #308]	@ (80010e8 <HAL_GPIO_Init+0x310>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d019      	beq.n	8000fea <HAL_GPIO_Init+0x212>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4c      	ldr	r2, [pc, #304]	@ (80010ec <HAL_GPIO_Init+0x314>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0x20e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4b      	ldr	r2, [pc, #300]	@ (80010f0 <HAL_GPIO_Init+0x318>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00d      	beq.n	8000fe2 <HAL_GPIO_Init+0x20a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4a      	ldr	r2, [pc, #296]	@ (80010f4 <HAL_GPIO_Init+0x31c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d007      	beq.n	8000fde <HAL_GPIO_Init+0x206>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a49      	ldr	r2, [pc, #292]	@ (80010f8 <HAL_GPIO_Init+0x320>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_GPIO_Init+0x202>
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	e00c      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fda:	2307      	movs	r3, #7
 8000fdc:	e00a      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fde:	2305      	movs	r3, #5
 8000fe0:	e008      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e004      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fea:	2302      	movs	r3, #2
 8000fec:	e002      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <HAL_GPIO_Init+0x21c>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	69fa      	ldr	r2, [r7, #28]
 8000ff6:	f002 0203 	and.w	r2, r2, #3
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	4093      	lsls	r3, r2
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001004:	4935      	ldr	r1, [pc, #212]	@ (80010dc <HAL_GPIO_Init+0x304>)
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3302      	adds	r3, #2
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001012:	4b3a      	ldr	r3, [pc, #232]	@ (80010fc <HAL_GPIO_Init+0x324>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001036:	4a31      	ldr	r2, [pc, #196]	@ (80010fc <HAL_GPIO_Init+0x324>)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800103c:	4b2f      	ldr	r3, [pc, #188]	@ (80010fc <HAL_GPIO_Init+0x324>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001060:	4a26      	ldr	r2, [pc, #152]	@ (80010fc <HAL_GPIO_Init+0x324>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001066:	4b25      	ldr	r3, [pc, #148]	@ (80010fc <HAL_GPIO_Init+0x324>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800108a:	4a1c      	ldr	r2, [pc, #112]	@ (80010fc <HAL_GPIO_Init+0x324>)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001090:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <HAL_GPIO_Init+0x324>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b4:	4a11      	ldr	r2, [pc, #68]	@ (80010fc <HAL_GPIO_Init+0x324>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3301      	adds	r3, #1
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	f67f ae96 	bls.w	8000df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3724      	adds	r7, #36	@ 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40013800 	.word	0x40013800
 80010e0:	40020000 	.word	0x40020000
 80010e4:	40020400 	.word	0x40020400
 80010e8:	40020800 	.word	0x40020800
 80010ec:	40020c00 	.word	0x40020c00
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40021400 	.word	0x40021400
 80010f8:	40021800 	.word	0x40021800
 80010fc:	40013c00 	.word	0x40013c00

08001100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e0cc      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001114:	4b68      	ldr	r3, [pc, #416]	@ (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d90c      	bls.n	800113c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001122:	4b65      	ldr	r3, [pc, #404]	@ (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800112a:	4b63      	ldr	r3, [pc, #396]	@ (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d001      	beq.n	800113c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e0b8      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d020      	beq.n	800118a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001154:	4b59      	ldr	r3, [pc, #356]	@ (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	4a58      	ldr	r2, [pc, #352]	@ (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800115e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800116c:	4b53      	ldr	r3, [pc, #332]	@ (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4a52      	ldr	r2, [pc, #328]	@ (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001178:	4b50      	ldr	r3, [pc, #320]	@ (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	494d      	ldr	r1, [pc, #308]	@ (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	4313      	orrs	r3, r2
 8001188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d044      	beq.n	8001220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d107      	bne.n	80011ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	4b47      	ldr	r3, [pc, #284]	@ (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d119      	bne.n	80011de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e07f      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d003      	beq.n	80011be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d107      	bne.n	80011ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011be:	4b3f      	ldr	r3, [pc, #252]	@ (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d109      	bne.n	80011de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e06f      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ce:	4b3b      	ldr	r3, [pc, #236]	@ (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e067      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011de:	4b37      	ldr	r3, [pc, #220]	@ (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f023 0203 	bic.w	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4934      	ldr	r1, [pc, #208]	@ (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011f0:	f7ff fce2 	bl	8000bb8 <HAL_GetTick>
 80011f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f6:	e00a      	b.n	800120e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f8:	f7ff fcde 	bl	8000bb8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001206:	4293      	cmp	r3, r2
 8001208:	d901      	bls.n	800120e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e04f      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120e:	4b2b      	ldr	r3, [pc, #172]	@ (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 020c 	and.w	r2, r3, #12
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	429a      	cmp	r2, r3
 800121e:	d1eb      	bne.n	80011f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001220:	4b25      	ldr	r3, [pc, #148]	@ (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d20c      	bcs.n	8001248 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122e:	4b22      	ldr	r3, [pc, #136]	@ (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001236:	4b20      	ldr	r3, [pc, #128]	@ (80012b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d001      	beq.n	8001248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e032      	b.n	80012ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b00      	cmp	r3, #0
 8001252:	d008      	beq.n	8001266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001254:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	4916      	ldr	r1, [pc, #88]	@ (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	4313      	orrs	r3, r2
 8001264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d009      	beq.n	8001286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	490e      	ldr	r1, [pc, #56]	@ (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	4313      	orrs	r3, r2
 8001284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001286:	f000 f887 	bl	8001398 <HAL_RCC_GetSysClockFreq>
 800128a:	4602      	mov	r2, r0
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	490a      	ldr	r1, [pc, #40]	@ (80012c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001298:	5ccb      	ldrb	r3, [r1, r3]
 800129a:	fa22 f303 	lsr.w	r3, r2, r3
 800129e:	4a09      	ldr	r2, [pc, #36]	@ (80012c4 <HAL_RCC_ClockConfig+0x1c4>)
 80012a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <HAL_RCC_ClockConfig+0x1c8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fb72 	bl	8000990 <HAL_InitTick>

  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023c00 	.word	0x40023c00
 80012bc:	40023800 	.word	0x40023800
 80012c0:	08006800 	.word	0x08006800
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012d0:	4b03      	ldr	r3, [pc, #12]	@ (80012e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000000 	.word	0x20000000

080012e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012e8:	f7ff fff0 	bl	80012cc <HAL_RCC_GetHCLKFreq>
 80012ec:	4602      	mov	r2, r0
 80012ee:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	0a9b      	lsrs	r3, r3, #10
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	4903      	ldr	r1, [pc, #12]	@ (8001308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012fa:	5ccb      	ldrb	r3, [r1, r3]
 80012fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001300:	4618      	mov	r0, r3
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	08006810 	.word	0x08006810

0800130c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001310:	f7ff ffdc 	bl	80012cc <HAL_RCC_GetHCLKFreq>
 8001314:	4602      	mov	r2, r0
 8001316:	4b05      	ldr	r3, [pc, #20]	@ (800132c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	0b5b      	lsrs	r3, r3, #13
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	4903      	ldr	r1, [pc, #12]	@ (8001330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001322:	5ccb      	ldrb	r3, [r1, r3]
 8001324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001328:	4618      	mov	r0, r3
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023800 	.word	0x40023800
 8001330:	08006810 	.word	0x08006810

08001334 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	220f      	movs	r2, #15
 8001342:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001344:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <HAL_RCC_GetClockConfig+0x5c>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 0203 	and.w	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001350:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <HAL_RCC_GetClockConfig+0x5c>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <HAL_RCC_GetClockConfig+0x5c>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001368:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <HAL_RCC_GetClockConfig+0x5c>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	08db      	lsrs	r3, r3, #3
 800136e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001376:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <HAL_RCC_GetClockConfig+0x60>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 020f 	and.w	r2, r3, #15
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	601a      	str	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40023c00 	.word	0x40023c00

08001398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800139c:	b0a6      	sub	sp, #152	@ 0x98
 800139e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013be:	4bc8      	ldr	r3, [pc, #800]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x348>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b0c      	cmp	r3, #12
 80013c8:	f200 817e 	bhi.w	80016c8 <HAL_RCC_GetSysClockFreq+0x330>
 80013cc:	a201      	add	r2, pc, #4	@ (adr r2, 80013d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80013ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d2:	bf00      	nop
 80013d4:	08001409 	.word	0x08001409
 80013d8:	080016c9 	.word	0x080016c9
 80013dc:	080016c9 	.word	0x080016c9
 80013e0:	080016c9 	.word	0x080016c9
 80013e4:	08001411 	.word	0x08001411
 80013e8:	080016c9 	.word	0x080016c9
 80013ec:	080016c9 	.word	0x080016c9
 80013f0:	080016c9 	.word	0x080016c9
 80013f4:	08001419 	.word	0x08001419
 80013f8:	080016c9 	.word	0x080016c9
 80013fc:	080016c9 	.word	0x080016c9
 8001400:	080016c9 	.word	0x080016c9
 8001404:	08001583 	.word	0x08001583
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001408:	4bb6      	ldr	r3, [pc, #728]	@ (80016e4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800140a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800140e:	e15f      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001410:	4bb5      	ldr	r3, [pc, #724]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001412:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001416:	e15b      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001418:	4bb1      	ldr	r3, [pc, #708]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x348>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001420:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001424:	4bae      	ldr	r3, [pc, #696]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d031      	beq.n	8001494 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001430:	4bab      	ldr	r3, [pc, #684]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	099b      	lsrs	r3, r3, #6
 8001436:	2200      	movs	r2, #0
 8001438:	66bb      	str	r3, [r7, #104]	@ 0x68
 800143a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800143c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800143e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001442:	663b      	str	r3, [r7, #96]	@ 0x60
 8001444:	2300      	movs	r3, #0
 8001446:	667b      	str	r3, [r7, #100]	@ 0x64
 8001448:	4ba7      	ldr	r3, [pc, #668]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x350>)
 800144a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800144e:	462a      	mov	r2, r5
 8001450:	fb03 f202 	mul.w	r2, r3, r2
 8001454:	2300      	movs	r3, #0
 8001456:	4621      	mov	r1, r4
 8001458:	fb01 f303 	mul.w	r3, r1, r3
 800145c:	4413      	add	r3, r2
 800145e:	4aa2      	ldr	r2, [pc, #648]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001460:	4621      	mov	r1, r4
 8001462:	fba1 1202 	umull	r1, r2, r1, r2
 8001466:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001468:	460a      	mov	r2, r1
 800146a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800146c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800146e:	4413      	add	r3, r2
 8001470:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001476:	2200      	movs	r2, #0
 8001478:	65bb      	str	r3, [r7, #88]	@ 0x58
 800147a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800147c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001480:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001484:	f7fe fecc 	bl	8000220 <__aeabi_uldivmod>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4613      	mov	r3, r2
 800148e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001492:	e064      	b.n	800155e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001494:	4b92      	ldr	r3, [pc, #584]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	099b      	lsrs	r3, r3, #6
 800149a:	2200      	movs	r2, #0
 800149c:	653b      	str	r3, [r7, #80]	@ 0x50
 800149e:	657a      	str	r2, [r7, #84]	@ 0x54
 80014a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80014a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80014a8:	2300      	movs	r3, #0
 80014aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80014ac:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80014b0:	4622      	mov	r2, r4
 80014b2:	462b      	mov	r3, r5
 80014b4:	f04f 0000 	mov.w	r0, #0
 80014b8:	f04f 0100 	mov.w	r1, #0
 80014bc:	0159      	lsls	r1, r3, #5
 80014be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014c2:	0150      	lsls	r0, r2, #5
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4621      	mov	r1, r4
 80014ca:	1a51      	subs	r1, r2, r1
 80014cc:	6139      	str	r1, [r7, #16]
 80014ce:	4629      	mov	r1, r5
 80014d0:	eb63 0301 	sbc.w	r3, r3, r1
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80014e2:	4659      	mov	r1, fp
 80014e4:	018b      	lsls	r3, r1, #6
 80014e6:	4651      	mov	r1, sl
 80014e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014ec:	4651      	mov	r1, sl
 80014ee:	018a      	lsls	r2, r1, #6
 80014f0:	4651      	mov	r1, sl
 80014f2:	ebb2 0801 	subs.w	r8, r2, r1
 80014f6:	4659      	mov	r1, fp
 80014f8:	eb63 0901 	sbc.w	r9, r3, r1
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001508:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800150c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001510:	4690      	mov	r8, r2
 8001512:	4699      	mov	r9, r3
 8001514:	4623      	mov	r3, r4
 8001516:	eb18 0303 	adds.w	r3, r8, r3
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	462b      	mov	r3, r5
 800151e:	eb49 0303 	adc.w	r3, r9, r3
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001530:	4629      	mov	r1, r5
 8001532:	028b      	lsls	r3, r1, #10
 8001534:	4621      	mov	r1, r4
 8001536:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800153a:	4621      	mov	r1, r4
 800153c:	028a      	lsls	r2, r1, #10
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001546:	2200      	movs	r2, #0
 8001548:	643b      	str	r3, [r7, #64]	@ 0x40
 800154a:	647a      	str	r2, [r7, #68]	@ 0x44
 800154c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001550:	f7fe fe66 	bl	8000220 <__aeabi_uldivmod>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4613      	mov	r3, r2
 800155a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800155e:	4b60      	ldr	r3, [pc, #384]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	0c1b      	lsrs	r3, r3, #16
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	3301      	adds	r3, #1
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001570:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001574:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001578:	fbb2 f3f3 	udiv	r3, r2, r3
 800157c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001580:	e0a6      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001582:	4b57      	ldr	r3, [pc, #348]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800158a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800158e:	4b54      	ldr	r3, [pc, #336]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d02a      	beq.n	80015f0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800159a:	4b51      	ldr	r3, [pc, #324]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x348>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	099b      	lsrs	r3, r3, #6
 80015a0:	2200      	movs	r2, #0
 80015a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80015a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80015ac:	2100      	movs	r1, #0
 80015ae:	4b4e      	ldr	r3, [pc, #312]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x350>)
 80015b0:	fb03 f201 	mul.w	r2, r3, r1
 80015b4:	2300      	movs	r3, #0
 80015b6:	fb00 f303 	mul.w	r3, r0, r3
 80015ba:	4413      	add	r3, r2
 80015bc:	4a4a      	ldr	r2, [pc, #296]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x350>)
 80015be:	fba0 1202 	umull	r1, r2, r0, r2
 80015c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80015c4:	460a      	mov	r2, r1
 80015c6:	673a      	str	r2, [r7, #112]	@ 0x70
 80015c8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80015ca:	4413      	add	r3, r2
 80015cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80015ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015d2:	2200      	movs	r2, #0
 80015d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80015d6:	637a      	str	r2, [r7, #52]	@ 0x34
 80015d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80015dc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80015e0:	f7fe fe1e 	bl	8000220 <__aeabi_uldivmod>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4613      	mov	r3, r2
 80015ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015ee:	e05b      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f0:	4b3b      	ldr	r3, [pc, #236]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x348>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	099b      	lsrs	r3, r3, #6
 80015f6:	2200      	movs	r2, #0
 80015f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001602:	623b      	str	r3, [r7, #32]
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
 8001608:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800160c:	4642      	mov	r2, r8
 800160e:	464b      	mov	r3, r9
 8001610:	f04f 0000 	mov.w	r0, #0
 8001614:	f04f 0100 	mov.w	r1, #0
 8001618:	0159      	lsls	r1, r3, #5
 800161a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800161e:	0150      	lsls	r0, r2, #5
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4641      	mov	r1, r8
 8001626:	ebb2 0a01 	subs.w	sl, r2, r1
 800162a:	4649      	mov	r1, r9
 800162c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800163c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001640:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001644:	ebb2 040a 	subs.w	r4, r2, sl
 8001648:	eb63 050b 	sbc.w	r5, r3, fp
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	00eb      	lsls	r3, r5, #3
 8001656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800165a:	00e2      	lsls	r2, r4, #3
 800165c:	4614      	mov	r4, r2
 800165e:	461d      	mov	r5, r3
 8001660:	4643      	mov	r3, r8
 8001662:	18e3      	adds	r3, r4, r3
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	464b      	mov	r3, r9
 8001668:	eb45 0303 	adc.w	r3, r5, r3
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	e9d7 4500 	ldrd	r4, r5, [r7]
 800167a:	4629      	mov	r1, r5
 800167c:	028b      	lsls	r3, r1, #10
 800167e:	4621      	mov	r1, r4
 8001680:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001684:	4621      	mov	r1, r4
 8001686:	028a      	lsls	r2, r1, #10
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001690:	2200      	movs	r2, #0
 8001692:	61bb      	str	r3, [r7, #24]
 8001694:	61fa      	str	r2, [r7, #28]
 8001696:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800169a:	f7fe fdc1 	bl	8000220 <__aeabi_uldivmod>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4613      	mov	r3, r2
 80016a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016a8:	4b0d      	ldr	r3, [pc, #52]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x348>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	0f1b      	lsrs	r3, r3, #28
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80016b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80016ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80016c6:	e003      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80016ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80016ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3798      	adds	r7, #152	@ 0x98
 80016d8:	46bd      	mov	sp, r7
 80016da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	00f42400 	.word	0x00f42400
 80016e8:	017d7840 	.word	0x017d7840

080016ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e28d      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8083 	beq.w	8001812 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800170c:	4b94      	ldr	r3, [pc, #592]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b04      	cmp	r3, #4
 8001716:	d019      	beq.n	800174c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001718:	4b91      	ldr	r3, [pc, #580]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001720:	2b08      	cmp	r3, #8
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001724:	4b8e      	ldr	r3, [pc, #568]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800172c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001730:	d00c      	beq.n	800174c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001732:	4b8b      	ldr	r3, [pc, #556]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d112      	bne.n	8001764 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173e:	4b88      	ldr	r3, [pc, #544]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001746:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800174a:	d10b      	bne.n	8001764 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	4b84      	ldr	r3, [pc, #528]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d05b      	beq.n	8001810 <HAL_RCC_OscConfig+0x124>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d157      	bne.n	8001810 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e25a      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x90>
 800176e:	4b7c      	ldr	r3, [pc, #496]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a7b      	ldr	r2, [pc, #492]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e01d      	b.n	80017b8 <HAL_RCC_OscConfig+0xcc>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0xb4>
 8001786:	4b76      	ldr	r3, [pc, #472]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a75      	ldr	r2, [pc, #468]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b73      	ldr	r3, [pc, #460]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a72      	ldr	r2, [pc, #456]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0xcc>
 80017a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a6e      	ldr	r2, [pc, #440]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a6b      	ldr	r2, [pc, #428]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 80017b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d013      	beq.n	80017e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff f9fa 	bl	8000bb8 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff f9f6 	bl	8000bb8 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	@ 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e21f      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b61      	ldr	r3, [pc, #388]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0xdc>
 80017e6:	e014      	b.n	8001812 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff f9e6 	bl	8000bb8 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff f9e2 	bl	8000bb8 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	@ 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e20b      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	4b57      	ldr	r3, [pc, #348]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x104>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d06f      	beq.n	80018fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800181e:	4b50      	ldr	r3, [pc, #320]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b00      	cmp	r3, #0
 8001828:	d017      	beq.n	800185a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800182a:	4b4d      	ldr	r3, [pc, #308]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001832:	2b08      	cmp	r3, #8
 8001834:	d105      	bne.n	8001842 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001836:	4b4a      	ldr	r3, [pc, #296]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001842:	4b47      	ldr	r3, [pc, #284]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800184a:	2b0c      	cmp	r3, #12
 800184c:	d11c      	bne.n	8001888 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800184e:	4b44      	ldr	r3, [pc, #272]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d116      	bne.n	8001888 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	4b41      	ldr	r3, [pc, #260]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_RCC_OscConfig+0x186>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e1d3      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b3b      	ldr	r3, [pc, #236]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4937      	ldr	r1, [pc, #220]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	e03a      	b.n	80018fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001890:	4b34      	ldr	r3, [pc, #208]	@ (8001964 <HAL_RCC_OscConfig+0x278>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001896:	f7ff f98f 	bl	8000bb8 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff f98b 	bl	8000bb8 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e1b4      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b28      	ldr	r3, [pc, #160]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4925      	ldr	r1, [pc, #148]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
 80018d0:	e015      	b.n	80018fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d2:	4b24      	ldr	r3, [pc, #144]	@ (8001964 <HAL_RCC_OscConfig+0x278>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff f96e 	bl	8000bb8 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e0:	f7ff f96a 	bl	8000bb8 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e193      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d036      	beq.n	8001978 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d016      	beq.n	8001940 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <HAL_RCC_OscConfig+0x27c>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7ff f94e 	bl	8000bb8 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001920:	f7ff f94a 	bl	8000bb8 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e173      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_RCC_OscConfig+0x274>)
 8001934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x234>
 800193e:	e01b      	b.n	8001978 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001940:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <HAL_RCC_OscConfig+0x27c>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff f937 	bl	8000bb8 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	e00e      	b.n	800196c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff f933 	bl	8000bb8 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d907      	bls.n	800196c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e15c      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
 8001960:	40023800 	.word	0x40023800
 8001964:	42470000 	.word	0x42470000
 8001968:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	4b8a      	ldr	r3, [pc, #552]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 800196e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ea      	bne.n	800194e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8097 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198a:	4b83      	ldr	r3, [pc, #524]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10f      	bne.n	80019b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	4a7e      	ldr	r2, [pc, #504]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b2:	2301      	movs	r3, #1
 80019b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b6:	4b79      	ldr	r3, [pc, #484]	@ (8001b9c <HAL_RCC_OscConfig+0x4b0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d118      	bne.n	80019f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c2:	4b76      	ldr	r3, [pc, #472]	@ (8001b9c <HAL_RCC_OscConfig+0x4b0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a75      	ldr	r2, [pc, #468]	@ (8001b9c <HAL_RCC_OscConfig+0x4b0>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ce:	f7ff f8f3 	bl	8000bb8 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d6:	f7ff f8ef 	bl	8000bb8 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e118      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	4b6c      	ldr	r3, [pc, #432]	@ (8001b9c <HAL_RCC_OscConfig+0x4b0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x31e>
 80019fc:	4b66      	ldr	r3, [pc, #408]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 80019fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a00:	4a65      	ldr	r2, [pc, #404]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a08:	e01c      	b.n	8001a44 <HAL_RCC_OscConfig+0x358>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b05      	cmp	r3, #5
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x340>
 8001a12:	4b61      	ldr	r3, [pc, #388]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a16:	4a60      	ldr	r2, [pc, #384]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a1e:	4b5e      	ldr	r3, [pc, #376]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a22:	4a5d      	ldr	r2, [pc, #372]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a2a:	e00b      	b.n	8001a44 <HAL_RCC_OscConfig+0x358>
 8001a2c:	4b5a      	ldr	r3, [pc, #360]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a30:	4a59      	ldr	r2, [pc, #356]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a38:	4b57      	ldr	r3, [pc, #348]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3c:	4a56      	ldr	r2, [pc, #344]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a3e:	f023 0304 	bic.w	r3, r3, #4
 8001a42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d015      	beq.n	8001a78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff f8b4 	bl	8000bb8 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a54:	f7ff f8b0 	bl	8000bb8 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e0d7      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0ee      	beq.n	8001a54 <HAL_RCC_OscConfig+0x368>
 8001a76:	e014      	b.n	8001aa2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff f89e 	bl	8000bb8 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7ff f89a 	bl	8000bb8 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e0c1      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a96:	4b40      	ldr	r3, [pc, #256]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1ee      	bne.n	8001a80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001aa2:	7dfb      	ldrb	r3, [r7, #23]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d105      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	4a3a      	ldr	r2, [pc, #232]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80ad 	beq.w	8001c18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001abe:	4b36      	ldr	r3, [pc, #216]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d060      	beq.n	8001b8c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d145      	bne.n	8001b5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad2:	4b33      	ldr	r3, [pc, #204]	@ (8001ba0 <HAL_RCC_OscConfig+0x4b4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f86e 	bl	8000bb8 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f86a 	bl	8000bb8 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e093      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af2:	4b29      	ldr	r3, [pc, #164]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69da      	ldr	r2, [r3, #28]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0c:	019b      	lsls	r3, r3, #6
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b14:	085b      	lsrs	r3, r3, #1
 8001b16:	3b01      	subs	r3, #1
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b20:	061b      	lsls	r3, r3, #24
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b28:	071b      	lsls	r3, r3, #28
 8001b2a:	491b      	ldr	r1, [pc, #108]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba0 <HAL_RCC_OscConfig+0x4b4>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff f83f 	bl	8000bb8 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7ff f83b 	bl	8000bb8 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e064      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b50:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x452>
 8001b5c:	e05c      	b.n	8001c18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ba0 <HAL_RCC_OscConfig+0x4b4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff f828 	bl	8000bb8 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff f824 	bl	8000bb8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e04d      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7e:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x480>
 8001b8a:	e045      	b.n	8001c18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e040      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40007000 	.word	0x40007000
 8001ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c24 <HAL_RCC_OscConfig+0x538>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d030      	beq.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d129      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d122      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d119      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bea:	085b      	lsrs	r3, r3, #1
 8001bec:	3b01      	subs	r3, #1
 8001bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d10f      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800

08001c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e041      	b.n	8001cbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f839 	bl	8001cc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3304      	adds	r3, #4
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f000 f9c0 	bl	8001fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d001      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e04e      	b.n	8001d92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a23      	ldr	r2, [pc, #140]	@ (8001da0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d022      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d1e:	d01d      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1f      	ldr	r2, [pc, #124]	@ (8001da4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d018      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001da8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d013      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1c      	ldr	r2, [pc, #112]	@ (8001dac <HAL_TIM_Base_Start_IT+0xd0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00e      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1b      	ldr	r2, [pc, #108]	@ (8001db0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	@ (8001db4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d004      	beq.n	8001d5c <HAL_TIM_Base_Start_IT+0x80>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a18      	ldr	r2, [pc, #96]	@ (8001db8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d111      	bne.n	8001d80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d010      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0201 	orr.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7e:	e007      	b.n	8001d90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0201 	orr.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40000400 	.word	0x40000400
 8001da8:	40000800 	.word	0x40000800
 8001dac:	40000c00 	.word	0x40000c00
 8001db0:	40010400 	.word	0x40010400
 8001db4:	40014000 	.word	0x40014000
 8001db8:	40001800 	.word	0x40001800

08001dbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d020      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01b      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0202 	mvn.w	r2, #2
 8001df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8d2 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f8c4 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f8d5 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d020      	beq.n	8001e6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01b      	beq.n	8001e6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0204 	mvn.w	r2, #4
 8001e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2202      	movs	r2, #2
 8001e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f8ac 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001e58:	e005      	b.n	8001e66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f89e 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f8af 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d020      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d01b      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0208 	mvn.w	r2, #8
 8001e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f886 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f878 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f889 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d020      	beq.n	8001f04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01b      	beq.n	8001f04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0210 	mvn.w	r2, #16
 8001ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2208      	movs	r2, #8
 8001eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f860 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001ef0:	e005      	b.n	8001efe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f852 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f863 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00c      	beq.n	8001f28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0201 	mvn.w	r2, #1
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fca0 	bl	8000868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00c      	beq.n	8001f4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d007      	beq.n	8001f4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f900 	bl	800214c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00c      	beq.n	8001f70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f834 	bl	8001fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00c      	beq.n	8001f94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d007      	beq.n	8001f94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0220 	mvn.w	r2, #32
 8001f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8d2 	bl	8002138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f94:	bf00      	nop
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a43      	ldr	r2, [pc, #268]	@ (800210c <TIM_Base_SetConfig+0x120>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d013      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800200a:	d00f      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a40      	ldr	r2, [pc, #256]	@ (8002110 <TIM_Base_SetConfig+0x124>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00b      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3f      	ldr	r2, [pc, #252]	@ (8002114 <TIM_Base_SetConfig+0x128>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d007      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3e      	ldr	r2, [pc, #248]	@ (8002118 <TIM_Base_SetConfig+0x12c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d003      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3d      	ldr	r2, [pc, #244]	@ (800211c <TIM_Base_SetConfig+0x130>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d108      	bne.n	800203e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a32      	ldr	r2, [pc, #200]	@ (800210c <TIM_Base_SetConfig+0x120>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d02b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800204c:	d027      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2f      	ldr	r2, [pc, #188]	@ (8002110 <TIM_Base_SetConfig+0x124>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d023      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2e      	ldr	r2, [pc, #184]	@ (8002114 <TIM_Base_SetConfig+0x128>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01f      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2d      	ldr	r2, [pc, #180]	@ (8002118 <TIM_Base_SetConfig+0x12c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2c      	ldr	r2, [pc, #176]	@ (800211c <TIM_Base_SetConfig+0x130>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d017      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2b      	ldr	r2, [pc, #172]	@ (8002120 <TIM_Base_SetConfig+0x134>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2a      	ldr	r2, [pc, #168]	@ (8002124 <TIM_Base_SetConfig+0x138>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00f      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a29      	ldr	r2, [pc, #164]	@ (8002128 <TIM_Base_SetConfig+0x13c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00b      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a28      	ldr	r2, [pc, #160]	@ (800212c <TIM_Base_SetConfig+0x140>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a27      	ldr	r2, [pc, #156]	@ (8002130 <TIM_Base_SetConfig+0x144>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d003      	beq.n	800209e <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a26      	ldr	r2, [pc, #152]	@ (8002134 <TIM_Base_SetConfig+0x148>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d108      	bne.n	80020b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a0e      	ldr	r2, [pc, #56]	@ (800210c <TIM_Base_SetConfig+0x120>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d003      	beq.n	80020de <TIM_Base_SetConfig+0xf2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a10      	ldr	r2, [pc, #64]	@ (800211c <TIM_Base_SetConfig+0x130>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d103      	bne.n	80020e6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f043 0204 	orr.w	r2, r3, #4
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	601a      	str	r2, [r3, #0]
}
 80020fe:	bf00      	nop
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40010000 	.word	0x40010000
 8002110:	40000400 	.word	0x40000400
 8002114:	40000800 	.word	0x40000800
 8002118:	40000c00 	.word	0x40000c00
 800211c:	40010400 	.word	0x40010400
 8002120:	40014000 	.word	0x40014000
 8002124:	40014400 	.word	0x40014400
 8002128:	40014800 	.word	0x40014800
 800212c:	40001800 	.word	0x40001800
 8002130:	40001c00 	.word	0x40001c00
 8002134:	40002000 	.word	0x40002000

08002138 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e033      	b.n	80021da <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe fbb2 	bl	80008f0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fc47 	bl	8002a28 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80021a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021b8:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021c8:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b08a      	sub	sp, #40	@ 0x28
 80021e6:	af02      	add	r7, sp, #8
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	4613      	mov	r3, r2
 80021f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d17c      	bne.n	80022f8 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <HAL_USART_Transmit+0x28>
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e075      	b.n	80022fa <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_USART_Transmit+0x3a>
 8002218:	2302      	movs	r3, #2
 800221a:	e06e      	b.n	80022fa <HAL_USART_Transmit+0x118>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	641a      	str	r2, [r3, #64]	@ 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2212      	movs	r2, #18
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002232:	f7fe fcc1 	bl	8000bb8 <HAL_GetTick>
 8002236:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	88fa      	ldrh	r2, [r7, #6]
 800223c:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	88fa      	ldrh	r2, [r7, #6]
 8002242:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800224c:	d108      	bne.n	8002260 <HAL_USART_Transmit+0x7e>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d104      	bne.n	8002260 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	e003      	b.n	8002268 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8002268:	e02a      	b.n	80022c0 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2200      	movs	r2, #0
 8002272:	2180      	movs	r1, #128	@ 0x80
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 f98b 	bl	8002590 <USART_WaitOnFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e03a      	b.n	80022fa <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10b      	bne.n	80022a2 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002298:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	3302      	adds	r3, #2
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	e007      	b.n	80022b2 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	781a      	ldrb	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	3301      	adds	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (husart->TxXferCount > 0U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1cf      	bne.n	800226a <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2200      	movs	r2, #0
 80022d2:	2140      	movs	r1, #64	@ 0x40
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 f95b 	bl	8002590 <USART_WaitOnFlagUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e00a      	b.n	80022fa <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e000      	b.n	80022fa <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 80022f8:	2302      	movs	r3, #2
  }
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d117      	bne.n	800236a <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	d012      	beq.n	800236a <HAL_USART_IRQHandler+0x66>
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	f003 0320 	and.w	r3, r3, #32
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00d      	beq.n	800236a <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b22      	cmp	r3, #34	@ 0x22
 8002358:	d103      	bne.n	8002362 <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fa10 	bl	8002780 <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 8002360:	e0e9      	b.n	8002536 <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 fa92 	bl	800288c <USART_TransmitReceive_IT>
      return;
 8002368:	e0e5      	b.n	8002536 <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80bb 	beq.w	80024e8 <HAL_USART_IRQHandler+0x1e4>
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <HAL_USART_IRQHandler+0x84>
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80b0 	beq.w	80024e8 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_USART_IRQHandler+0xa4>
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	f043 0201 	orr.w	r2, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00a      	beq.n	80023c8 <HAL_USART_IRQHandler+0xc4>
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c0:	f043 0202 	orr.w	r2, r3, #2
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <HAL_USART_IRQHandler+0xe4>
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	f043 0204 	orr.w	r2, r3, #4
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00f      	beq.n	8002412 <HAL_USART_IRQHandler+0x10e>
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d104      	bne.n	8002406 <HAL_USART_IRQHandler+0x102>
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f043 0208 	orr.w	r2, r3, #8
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 808c 	beq.w	8002534 <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d011      	beq.n	800244a <HAL_USART_IRQHandler+0x146>
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00c      	beq.n	800244a <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b22      	cmp	r3, #34	@ 0x22
 800243a:	d103      	bne.n	8002444 <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f99f 	bl	8002780 <USART_Receive_IT>
 8002442:	e002      	b.n	800244a <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 fa21 	bl	800288c <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002454:	2b40      	cmp	r3, #64	@ 0x40
 8002456:	bf0c      	ite	eq
 8002458:	2301      	moveq	r3, #1
 800245a:	2300      	movne	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <HAL_USART_IRQHandler+0x16e>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d031      	beq.n	80024d6 <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f8e2 	bl	800263c <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002482:	2b40      	cmp	r3, #64	@ 0x40
 8002484:	d123      	bne.n	80024ce <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002494:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800249a:	2b00      	cmp	r3, #0
 800249c:	d013      	beq.n	80024c6 <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a2:	4a26      	ldr	r2, [pc, #152]	@ (800253c <HAL_USART_IRQHandler+0x238>)
 80024a4:	651a      	str	r2, [r3, #80]	@ 0x50

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fc72 	bl	8000d94 <HAL_DMA_Abort_IT>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d016      	beq.n	80024e4 <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024c0:	4610      	mov	r0, r2
 80024c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80024c4:	e00e      	b.n	80024e4 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f858 	bl	800257c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80024cc:	e00a      	b.n	80024e4 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f854 	bl	800257c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80024d4:	e006      	b.n	80024e4 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f850 	bl	800257c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80024e2:	e027      	b.n	8002534 <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80024e4:	bf00      	nop
    return;
 80024e6:	e025      	b.n	8002534 <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d012      	beq.n	8002518 <HAL_USART_IRQHandler+0x214>
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00d      	beq.n	8002518 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b12      	cmp	r3, #18
 8002506:	d103      	bne.n	8002510 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f8c9 	bl	80026a0 <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 800250e:	e012      	b.n	8002536 <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f9bb 	bl	800288c <USART_TransmitReceive_IT>
    return;
 8002516:	e00e      	b.n	8002536 <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_USART_IRQHandler+0x232>
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002528:	2b00      	cmp	r3, #0
 800252a:	d004      	beq.n	8002536 <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f907 	bl	8002740 <USART_EndTransmit_IT>
    return;
 8002532:	e000      	b.n	8002536 <HAL_USART_IRQHandler+0x232>
    return;
 8002534:	bf00      	nop
  }
}
 8002536:	3720      	adds	r7, #32
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	08002679 	.word	0x08002679

08002540 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	4613      	mov	r3, r2
 800259e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80025a0:	e038      	b.n	8002614 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a8:	d034      	beq.n	8002614 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <USART_WaitOnFlagUntilTimeout+0x30>
 80025b0:	f7fe fb02 	bl	8000bb8 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d229      	bcs.n	8002614 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025ce:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0220 	bic.w	r2, r2, #32
 80025de:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025ee:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e00f      	b.n	8002634 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	4013      	ands	r3, r2
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	429a      	cmp	r2, r3
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	429a      	cmp	r2, r3
 8002630:	d0b7      	beq.n	80025a2 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8002652:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002684:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	865a      	strh	r2, [r3, #50]	@ 0x32
  husart->TxXferCount = 0x00U;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	855a      	strh	r2, [r3, #42]	@ 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f7ff ff72 	bl	800257c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b12      	cmp	r3, #18
 80026b2:	d13e      	bne.n	8002732 <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026bc:	d114      	bne.n	80026e8 <USART_Transmit_IT+0x48>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d110      	bne.n	80026e8 <USART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) husart->pTxBuffPtr;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026da:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	1c9a      	adds	r2, r3, #2
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80026e6:	e008      	b.n	80026fa <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	1c59      	adds	r1, r3, #1
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6251      	str	r1, [r2, #36]	@ 0x24
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29b      	uxth	r3, r3
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	4619      	mov	r1, r3
 8002708:	8551      	strh	r1, [r2, #42]	@ 0x2a
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10f      	bne.n	800272e <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800271c:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800272c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002732:	2302      	movs	r3, #2
  }
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002756:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff fee5 	bl	8002540 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
  uint16_t *pdata16bits = NULL;
 800278c:	2300      	movs	r3, #0
 800278e:	60bb      	str	r3, [r7, #8]

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b22      	cmp	r3, #34	@ 0x22
 800279a:	d172      	bne.n	8002882 <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027a4:	d115      	bne.n	80027d2 <USART_Receive_IT+0x52>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d111      	bne.n	80027d2 <USART_Receive_IT+0x52>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ca:	1c9a      	adds	r2, r3, #2
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80027d0:	e024      	b.n	800281c <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d6:	60fb      	str	r3, [r7, #12]
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027e0:	d007      	beq.n	80027f2 <USART_Receive_IT+0x72>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10a      	bne.n	8002800 <USART_Receive_IT+0x80>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	e008      	b.n	8002812 <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800280c:	b2da      	uxtb	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    husart->RxXferCount--;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	865a      	strh	r2, [r3, #50]	@ 0x32

    if (husart->RxXferCount == 0U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d120      	bne.n	8002876 <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0220 	bic.w	r2, r2, #32
 8002842:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002852:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff fe71 	bl	8002554 <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e006      	b.n	8002884 <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	22ff      	movs	r2, #255	@ 0xff
 800287c:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e000      	b.n	8002884 <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 8002882:	2302      	movs	r3, #2
  }
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  const uint16_t *pdatatx16bits;
  uint16_t *pdatarx16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b32      	cmp	r3, #50	@ 0x32
 800289e:	f040 80bd 	bne.w	8002a1c <USART_TransmitReceive_IT+0x190>
  {
    if (husart->TxXferCount != 0x00U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d03d      	beq.n	8002928 <USART_TransmitReceive_IT+0x9c>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b6:	2b80      	cmp	r3, #128	@ 0x80
 80028b8:	d136      	bne.n	8002928 <USART_TransmitReceive_IT+0x9c>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028c2:	d114      	bne.n	80028ee <USART_TransmitReceive_IT+0x62>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d110      	bne.n	80028ee <USART_TransmitReceive_IT+0x62>
        {
          pdatatx16bits = (const uint16_t *) husart->pTxBuffPtr;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	60fb      	str	r3, [r7, #12]
          husart->Instance->DR = (uint16_t)(*pdatatx16bits & (uint16_t)0x01FF);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e0:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e6:	1c9a      	adds	r2, r3, #2
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80028ec:	e008      	b.n	8002900 <USART_TransmitReceive_IT+0x74>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f2:	1c59      	adds	r1, r3, #1
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6251      	str	r1, [r2, #36]	@ 0x24
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d107      	bne.n	8002928 <USART_TransmitReceive_IT+0x9c>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002926:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d04c      	beq.n	80029cc <USART_TransmitReceive_IT+0x140>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b20      	cmp	r3, #32
 800293e:	d145      	bne.n	80029cc <USART_TransmitReceive_IT+0x140>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002948:	d115      	bne.n	8002976 <USART_TransmitReceive_IT+0xea>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d111      	bne.n	8002976 <USART_TransmitReceive_IT+0xea>
        {
          pdatarx16bits = (uint16_t *) husart->pRxBuffPtr;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002956:	60bb      	str	r3, [r7, #8]
          *pdatarx16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	b29b      	uxth	r3, r3
 8002960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002964:	b29a      	uxth	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	801a      	strh	r2, [r3, #0]
          husart->pRxBuffPtr += 2U;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	1c9a      	adds	r2, r3, #2
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002974:	e023      	b.n	80029be <USART_TransmitReceive_IT+0x132>
        }
        else
        {
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800297e:	d007      	beq.n	8002990 <USART_TransmitReceive_IT+0x104>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10b      	bne.n	80029a0 <USART_TransmitReceive_IT+0x114>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d107      	bne.n	80029a0 <USART_TransmitReceive_IT+0x114>
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]
 800299e:	e009      	b.n	80029b4 <USART_TransmitReceive_IT+0x128>
          }
          else
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	62da      	str	r2, [r3, #44]	@ 0x2c
        }

        husart->RxXferCount--;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	865a      	strh	r2, [r3, #50]	@ 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d120      	bne.n	8002a18 <USART_TransmitReceive_IT+0x18c>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0220 	bic.w	r2, r2, #32
 80029e4:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029f4:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fdaa 	bl	8002568 <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e002      	b.n	8002a1e <USART_TransmitReceive_IT+0x192>
    }

    return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e000      	b.n	8002a1e <USART_TransmitReceive_IT+0x192>
  }
  else
  {
    return HAL_BUSY;
 8002a1c:	2302      	movs	r3, #2
  }
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a2c:	b0c6      	sub	sp, #280	@ 0x118
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg = 0x00U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8002a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68d9      	ldr	r1, [r3, #12]
 8002a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	f021 030c 	bic.w	r3, r1, #12
 8002a4c:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8002a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8002a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a5e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a62:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a6a:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a70:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002a72:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a80:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002a82:	431a      	orrs	r2, r3
 8002a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a8e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8002a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a9c:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8002a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aae:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002ab2:	f023 030c 	bic.w	r3, r3, #12
 8002ab6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ada:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8002ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae8:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8002aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6959      	ldr	r1, [r3, #20]
 8002af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 8002afc:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8002afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b8b      	ldr	r3, [pc, #556]	@ (8002d34 <USART_SetConfig+0x30c>)
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d006      	beq.n	8002b18 <USART_SetConfig+0xf0>
 8002b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b89      	ldr	r3, [pc, #548]	@ (8002d38 <USART_SetConfig+0x310>)
 8002b12:	429a      	cmp	r2, r3
 8002b14:	f040 8114 	bne.w	8002d40 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b18:	f7fe fbf8 	bl	800130c <HAL_RCC_GetPCLK2Freq>
 8002b1c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8002b20:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b24:	2200      	movs	r2, #0
 8002b26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002b2a:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8002b2e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8002b32:	4622      	mov	r2, r4
 8002b34:	462b      	mov	r3, r5
 8002b36:	1891      	adds	r1, r2, r2
 8002b38:	6739      	str	r1, [r7, #112]	@ 0x70
 8002b3a:	415b      	adcs	r3, r3
 8002b3c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b3e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002b42:	4621      	mov	r1, r4
 8002b44:	eb12 0801 	adds.w	r8, r2, r1
 8002b48:	4629      	mov	r1, r5
 8002b4a:	eb43 0901 	adc.w	r9, r3, r1
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b62:	4690      	mov	r8, r2
 8002b64:	4699      	mov	r9, r3
 8002b66:	4623      	mov	r3, r4
 8002b68:	eb18 0303 	adds.w	r3, r8, r3
 8002b6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002b70:	462b      	mov	r3, r5
 8002b72:	eb49 0303 	adc.w	r3, r9, r3
 8002b76:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002b86:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8002b8a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	18db      	adds	r3, r3, r3
 8002b92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b94:	4613      	mov	r3, r2
 8002b96:	eb42 0303 	adc.w	r3, r2, r3
 8002b9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b9c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002ba0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8002ba4:	f7fd fb3c 	bl	8000220 <__aeabi_uldivmod>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4b63      	ldr	r3, [pc, #396]	@ (8002d3c <USART_SetConfig+0x314>)
 8002bae:	fba3 2302 	umull	r2, r3, r3, r2
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	011c      	lsls	r4, r3, #4
 8002bb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bc0:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002bc4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8002bc8:	4642      	mov	r2, r8
 8002bca:	464b      	mov	r3, r9
 8002bcc:	1891      	adds	r1, r2, r2
 8002bce:	6639      	str	r1, [r7, #96]	@ 0x60
 8002bd0:	415b      	adcs	r3, r3
 8002bd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bd4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002bd8:	4641      	mov	r1, r8
 8002bda:	1851      	adds	r1, r2, r1
 8002bdc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002bde:	4649      	mov	r1, r9
 8002be0:	414b      	adcs	r3, r1
 8002be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8002bf0:	4659      	mov	r1, fp
 8002bf2:	00cb      	lsls	r3, r1, #3
 8002bf4:	4651      	mov	r1, sl
 8002bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bfa:	4651      	mov	r1, sl
 8002bfc:	00ca      	lsls	r2, r1, #3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4619      	mov	r1, r3
 8002c02:	4603      	mov	r3, r0
 8002c04:	4642      	mov	r2, r8
 8002c06:	189b      	adds	r3, r3, r2
 8002c08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c0c:	464b      	mov	r3, r9
 8002c0e:	460a      	mov	r2, r1
 8002c10:	eb42 0303 	adc.w	r3, r2, r3
 8002c14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c24:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c28:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	18db      	adds	r3, r3, r3
 8002c30:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c32:	4613      	mov	r3, r2
 8002c34:	eb42 0303 	adc.w	r3, r2, r3
 8002c38:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c3a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c3e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c42:	f7fd faed 	bl	8000220 <__aeabi_uldivmod>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d3c <USART_SetConfig+0x314>)
 8002c4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	2264      	movs	r2, #100	@ 0x64
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	1acb      	subs	r3, r1, r3
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c62:	4b36      	ldr	r3, [pc, #216]	@ (8002d3c <USART_SetConfig+0x314>)
 8002c64:	fba3 2302 	umull	r2, r3, r3, r2
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c70:	441c      	add	r4, r3
 8002c72:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c84:	4642      	mov	r2, r8
 8002c86:	464b      	mov	r3, r9
 8002c88:	1891      	adds	r1, r2, r2
 8002c8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c8c:	415b      	adcs	r3, r3
 8002c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c94:	4641      	mov	r1, r8
 8002c96:	1851      	adds	r1, r2, r1
 8002c98:	6439      	str	r1, [r7, #64]	@ 0x40
 8002c9a:	4649      	mov	r1, r9
 8002c9c:	414b      	adcs	r3, r1
 8002c9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	@ 0x40
 8002cac:	4659      	mov	r1, fp
 8002cae:	00cb      	lsls	r3, r1, #3
 8002cb0:	4651      	mov	r1, sl
 8002cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cb6:	4651      	mov	r1, sl
 8002cb8:	00ca      	lsls	r2, r1, #3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4642      	mov	r2, r8
 8002cc2:	189b      	adds	r3, r3, r2
 8002cc4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cc8:	464b      	mov	r3, r9
 8002cca:	460a      	mov	r2, r1
 8002ccc:	eb42 0303 	adc.w	r3, r2, r3
 8002cd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ce0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002ce4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	18db      	adds	r3, r3, r3
 8002cec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cee:	4613      	mov	r3, r2
 8002cf0:	eb42 0303 	adc.w	r3, r2, r3
 8002cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cf6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002cfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002cfe:	f7fd fa8f 	bl	8000220 <__aeabi_uldivmod>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4b0d      	ldr	r3, [pc, #52]	@ (8002d3c <USART_SetConfig+0x314>)
 8002d08:	fba3 1302 	umull	r1, r3, r3, r2
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	2164      	movs	r1, #100	@ 0x64
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	3332      	adds	r3, #50	@ 0x32
 8002d1a:	4a08      	ldr	r2, [pc, #32]	@ (8002d3c <USART_SetConfig+0x314>)
 8002d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	f003 0207 	and.w	r2, r3, #7
 8002d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4422      	add	r2, r4
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	e109      	b.n	8002f46 <USART_SetConfig+0x51e>
 8002d32:	bf00      	nop
 8002d34:	40011000 	.word	0x40011000
 8002d38:	40011400 	.word	0x40011400
 8002d3c:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d40:	f7fe fad0 	bl	80012e4 <HAL_RCC_GetPCLK1Freq>
 8002d44:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8002d48:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d52:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002d56:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002d5a:	4642      	mov	r2, r8
 8002d5c:	464b      	mov	r3, r9
 8002d5e:	1891      	adds	r1, r2, r2
 8002d60:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d62:	415b      	adcs	r3, r3
 8002d64:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002d6a:	4641      	mov	r1, r8
 8002d6c:	1854      	adds	r4, r2, r1
 8002d6e:	4649      	mov	r1, r9
 8002d70:	eb43 0501 	adc.w	r5, r3, r1
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	00eb      	lsls	r3, r5, #3
 8002d7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d82:	00e2      	lsls	r2, r4, #3
 8002d84:	4614      	mov	r4, r2
 8002d86:	461d      	mov	r5, r3
 8002d88:	4643      	mov	r3, r8
 8002d8a:	18e3      	adds	r3, r4, r3
 8002d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d90:	464b      	mov	r3, r9
 8002d92:	eb45 0303 	adc.w	r3, r5, r3
 8002d96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002da6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002daa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002dae:	460b      	mov	r3, r1
 8002db0:	18db      	adds	r3, r3, r3
 8002db2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002db4:	4613      	mov	r3, r2
 8002db6:	eb42 0303 	adc.w	r3, r2, r3
 8002dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dc0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002dc4:	f7fd fa2c 	bl	8000220 <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4b61      	ldr	r3, [pc, #388]	@ (8002f54 <USART_SetConfig+0x52c>)
 8002dce:	fba3 2302 	umull	r2, r3, r3, r2
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	011c      	lsls	r4, r3, #4
 8002dd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002de0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002de4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002de8:	4642      	mov	r2, r8
 8002dea:	464b      	mov	r3, r9
 8002dec:	1891      	adds	r1, r2, r2
 8002dee:	6239      	str	r1, [r7, #32]
 8002df0:	415b      	adcs	r3, r3
 8002df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002df8:	4641      	mov	r1, r8
 8002dfa:	eb12 0a01 	adds.w	sl, r2, r1
 8002dfe:	4649      	mov	r1, r9
 8002e00:	eb43 0b01 	adc.w	fp, r3, r1
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e18:	4692      	mov	sl, r2
 8002e1a:	469b      	mov	fp, r3
 8002e1c:	4643      	mov	r3, r8
 8002e1e:	eb1a 0303 	adds.w	r3, sl, r3
 8002e22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e26:	464b      	mov	r3, r9
 8002e28:	eb4b 0303 	adc.w	r3, fp, r3
 8002e2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e3c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e40:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002e44:	460b      	mov	r3, r1
 8002e46:	18db      	adds	r3, r3, r3
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	eb42 0303 	adc.w	r3, r2, r3
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e56:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e5a:	f7fd f9e1 	bl	8000220 <__aeabi_uldivmod>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4611      	mov	r1, r2
 8002e64:	4b3b      	ldr	r3, [pc, #236]	@ (8002f54 <USART_SetConfig+0x52c>)
 8002e66:	fba3 2301 	umull	r2, r3, r3, r1
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2264      	movs	r2, #100	@ 0x64
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	1acb      	subs	r3, r1, r3
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e7a:	4b36      	ldr	r3, [pc, #216]	@ (8002f54 <USART_SetConfig+0x52c>)
 8002e7c:	fba3 2302 	umull	r2, r3, r3, r2
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e88:	441c      	add	r4, r3
 8002e8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e9c:	4642      	mov	r2, r8
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	1891      	adds	r1, r2, r2
 8002ea2:	6139      	str	r1, [r7, #16]
 8002ea4:	415b      	adcs	r3, r3
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002eac:	4641      	mov	r1, r8
 8002eae:	1851      	adds	r1, r2, r1
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	4649      	mov	r1, r9
 8002eb4:	414b      	adcs	r3, r1
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ec4:	4659      	mov	r1, fp
 8002ec6:	00cb      	lsls	r3, r1, #3
 8002ec8:	4651      	mov	r1, sl
 8002eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ece:	4651      	mov	r1, sl
 8002ed0:	00ca      	lsls	r2, r1, #3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4642      	mov	r2, r8
 8002eda:	189b      	adds	r3, r3, r2
 8002edc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ee0:	464b      	mov	r3, r9
 8002ee2:	460a      	mov	r2, r1
 8002ee4:	eb42 0303 	adc.w	r3, r2, r3
 8002ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ef6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ef8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002efc:	460b      	mov	r3, r1
 8002efe:	18db      	adds	r3, r3, r3
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	4613      	mov	r3, r2
 8002f04:	eb42 0303 	adc.w	r3, r2, r3
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002f12:	f7fd f985 	bl	8000220 <__aeabi_uldivmod>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f54 <USART_SetConfig+0x52c>)
 8002f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f20:	095b      	lsrs	r3, r3, #5
 8002f22:	2164      	movs	r1, #100	@ 0x64
 8002f24:	fb01 f303 	mul.w	r3, r1, r3
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	3332      	adds	r3, #50	@ 0x32
 8002f2e:	4a09      	ldr	r2, [pc, #36]	@ (8002f54 <USART_SetConfig+0x52c>)
 8002f30:	fba2 2303 	umull	r2, r3, r2, r3
 8002f34:	095b      	lsrs	r3, r3, #5
 8002f36:	f003 0207 	and.w	r2, r3, #7
 8002f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4422      	add	r2, r4
 8002f42:	609a      	str	r2, [r3, #8]
  }
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f52:	bf00      	nop
 8002f54:	51eb851f 	.word	0x51eb851f

08002f58 <__NVIC_SetPriority>:
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	6039      	str	r1, [r7, #0]
 8002f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	db0a      	blt.n	8002f82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	490c      	ldr	r1, [pc, #48]	@ (8002fa4 <__NVIC_SetPriority+0x4c>)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	0112      	lsls	r2, r2, #4
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002f80:	e00a      	b.n	8002f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	4908      	ldr	r1, [pc, #32]	@ (8002fa8 <__NVIC_SetPriority+0x50>)
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	3b04      	subs	r3, #4
 8002f90:	0112      	lsls	r2, r2, #4
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	440b      	add	r3, r1
 8002f96:	761a      	strb	r2, [r3, #24]
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	e000e100 	.word	0xe000e100
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <SysTick_Handler+0x1c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002fb4:	f002 f920 	bl	80051f8 <xTaskGetSchedulerState>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d001      	beq.n	8002fc2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002fbe:	f003 f81b 	bl	8005ff8 <xPortSysTickHandler>
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	e000e010 	.word	0xe000e010

08002fcc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	f06f 0004 	mvn.w	r0, #4
 8002fd6:	f7ff ffbf 	bl	8002f58 <__NVIC_SetPriority>
#endif
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fe6:	f3ef 8305 	mrs	r3, IPSR
 8002fea:	603b      	str	r3, [r7, #0]
  return(result);
 8002fec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002ff2:	f06f 0305 	mvn.w	r3, #5
 8002ff6:	607b      	str	r3, [r7, #4]
 8002ff8:	e00c      	b.n	8003014 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <osKernelInitialize+0x44>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d105      	bne.n	800300e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003002:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <osKernelInitialize+0x44>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003008:	2300      	movs	r3, #0
 800300a:	607b      	str	r3, [r7, #4]
 800300c:	e002      	b.n	8003014 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003014:	687b      	ldr	r3, [r7, #4]
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	2000011c 	.word	0x2000011c

08003028 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800302e:	f3ef 8305 	mrs	r3, IPSR
 8003032:	603b      	str	r3, [r7, #0]
  return(result);
 8003034:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <osKernelStart+0x1a>
    stat = osErrorISR;
 800303a:	f06f 0305 	mvn.w	r3, #5
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	e010      	b.n	8003064 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003042:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <osKernelStart+0x48>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d109      	bne.n	800305e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800304a:	f7ff ffbf 	bl	8002fcc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800304e:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <osKernelStart+0x48>)
 8003050:	2202      	movs	r2, #2
 8003052:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003054:	f001 fc6c 	bl	8004930 <vTaskStartScheduler>
      stat = osOK;
 8003058:	2300      	movs	r3, #0
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	e002      	b.n	8003064 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003064:	687b      	ldr	r3, [r7, #4]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	2000011c 	.word	0x2000011c

08003074 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b08e      	sub	sp, #56	@ 0x38
 8003078:	af04      	add	r7, sp, #16
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003080:	2300      	movs	r3, #0
 8003082:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003084:	f3ef 8305 	mrs	r3, IPSR
 8003088:	617b      	str	r3, [r7, #20]
  return(result);
 800308a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800308c:	2b00      	cmp	r3, #0
 800308e:	d17e      	bne.n	800318e <osThreadNew+0x11a>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d07b      	beq.n	800318e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003096:	2380      	movs	r3, #128	@ 0x80
 8003098:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800309a:	2318      	movs	r3, #24
 800309c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80030a2:	f04f 33ff 	mov.w	r3, #4294967295
 80030a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d045      	beq.n	800313a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <osThreadNew+0x48>
        name = attr->name;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <osThreadNew+0x6e>
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b38      	cmp	r3, #56	@ 0x38
 80030d4:	d805      	bhi.n	80030e2 <osThreadNew+0x6e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <osThreadNew+0x72>
        return (NULL);
 80030e2:	2300      	movs	r3, #0
 80030e4:	e054      	b.n	8003190 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00e      	beq.n	800311c <osThreadNew+0xa8>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2ba7      	cmp	r3, #167	@ 0xa7
 8003104:	d90a      	bls.n	800311c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800310a:	2b00      	cmp	r3, #0
 800310c:	d006      	beq.n	800311c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <osThreadNew+0xa8>
        mem = 1;
 8003116:	2301      	movs	r3, #1
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	e010      	b.n	800313e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10c      	bne.n	800313e <osThreadNew+0xca>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d108      	bne.n	800313e <osThreadNew+0xca>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d104      	bne.n	800313e <osThreadNew+0xca>
          mem = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	61bb      	str	r3, [r7, #24]
 8003138:	e001      	b.n	800313e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d110      	bne.n	8003166 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800314c:	9202      	str	r2, [sp, #8]
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	6a3a      	ldr	r2, [r7, #32]
 8003158:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f001 f9f4 	bl	8004548 <xTaskCreateStatic>
 8003160:	4603      	mov	r3, r0
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	e013      	b.n	800318e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d110      	bne.n	800318e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	b29a      	uxth	r2, r3
 8003170:	f107 0310 	add.w	r3, r7, #16
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f001 fa42 	bl	8004608 <xTaskCreate>
 8003184:	4603      	mov	r3, r0
 8003186:	2b01      	cmp	r3, #1
 8003188:	d001      	beq.n	800318e <osThreadNew+0x11a>
            hTask = NULL;
 800318a:	2300      	movs	r3, #0
 800318c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800318e:	693b      	ldr	r3, [r7, #16]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3728      	adds	r7, #40	@ 0x28
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031a0:	f3ef 8305 	mrs	r3, IPSR
 80031a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80031a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <osDelay+0x1c>
    stat = osErrorISR;
 80031ac:	f06f 0305 	mvn.w	r3, #5
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	e007      	b.n	80031c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f001 fb80 	bl	80048c4 <vTaskDelay>
    }
  }

  return (stat);
 80031c4:	68fb      	ldr	r3, [r7, #12]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b08a      	sub	sp, #40	@ 0x28
 80031d2:	af02      	add	r7, sp, #8
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031de:	f3ef 8305 	mrs	r3, IPSR
 80031e2:	613b      	str	r3, [r7, #16]
  return(result);
 80031e4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d175      	bne.n	80032d6 <osSemaphoreNew+0x108>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d072      	beq.n	80032d6 <osSemaphoreNew+0x108>
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d86e      	bhi.n	80032d6 <osSemaphoreNew+0x108>
    mem = -1;
 80031f8:	f04f 33ff 	mov.w	r3, #4294967295
 80031fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d015      	beq.n	8003230 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d006      	beq.n	800321a <osSemaphoreNew+0x4c>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b4f      	cmp	r3, #79	@ 0x4f
 8003212:	d902      	bls.n	800321a <osSemaphoreNew+0x4c>
        mem = 1;
 8003214:	2301      	movs	r3, #1
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	e00c      	b.n	8003234 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d108      	bne.n	8003234 <osSemaphoreNew+0x66>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d104      	bne.n	8003234 <osSemaphoreNew+0x66>
          mem = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	e001      	b.n	8003234 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323a:	d04c      	beq.n	80032d6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d128      	bne.n	8003294 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d10a      	bne.n	800325e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2203      	movs	r2, #3
 800324e:	9200      	str	r2, [sp, #0]
 8003250:	2200      	movs	r2, #0
 8003252:	2100      	movs	r1, #0
 8003254:	2001      	movs	r0, #1
 8003256:	f000 fa07 	bl	8003668 <xQueueGenericCreateStatic>
 800325a:	61f8      	str	r0, [r7, #28]
 800325c:	e005      	b.n	800326a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800325e:	2203      	movs	r2, #3
 8003260:	2100      	movs	r1, #0
 8003262:	2001      	movs	r0, #1
 8003264:	f000 fa7d 	bl	8003762 <xQueueGenericCreate>
 8003268:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d022      	beq.n	80032b6 <osSemaphoreNew+0xe8>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01f      	beq.n	80032b6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003276:	2300      	movs	r3, #0
 8003278:	2200      	movs	r2, #0
 800327a:	2100      	movs	r1, #0
 800327c:	69f8      	ldr	r0, [r7, #28]
 800327e:	f000 fb3d 	bl	80038fc <xQueueGenericSend>
 8003282:	4603      	mov	r3, r0
 8003284:	2b01      	cmp	r3, #1
 8003286:	d016      	beq.n	80032b6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003288:	69f8      	ldr	r0, [r7, #28]
 800328a:	f000 ff89 	bl	80041a0 <vQueueDelete>
            hSemaphore = NULL;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	e010      	b.n	80032b6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d108      	bne.n	80032ac <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	461a      	mov	r2, r3
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fabb 	bl	800381e <xQueueCreateCountingSemaphoreStatic>
 80032a8:	61f8      	str	r0, [r7, #28]
 80032aa:	e004      	b.n	80032b6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 faee 	bl	8003890 <xQueueCreateCountingSemaphore>
 80032b4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00c      	beq.n	80032d6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <osSemaphoreNew+0xfc>
          name = attr->name;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	e001      	b.n	80032ce <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80032ce:	6979      	ldr	r1, [r7, #20]
 80032d0:	69f8      	ldr	r0, [r7, #28]
 80032d2:	f001 f8b1 	bl	8004438 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80032d6:	69fb      	ldr	r3, [r7, #28]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3720      	adds	r7, #32
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d103      	bne.n	8003300 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80032f8:	f06f 0303 	mvn.w	r3, #3
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	e039      	b.n	8003374 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003300:	f3ef 8305 	mrs	r3, IPSR
 8003304:	60fb      	str	r3, [r7, #12]
  return(result);
 8003306:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003308:	2b00      	cmp	r3, #0
 800330a:	d022      	beq.n	8003352 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003312:	f06f 0303 	mvn.w	r3, #3
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	e02c      	b.n	8003374 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800331e:	f107 0308 	add.w	r3, r7, #8
 8003322:	461a      	mov	r2, r3
 8003324:	2100      	movs	r1, #0
 8003326:	6938      	ldr	r0, [r7, #16]
 8003328:	f000 fe7a 	bl	8004020 <xQueueReceiveFromISR>
 800332c:	4603      	mov	r3, r0
 800332e:	2b01      	cmp	r3, #1
 8003330:	d003      	beq.n	800333a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003332:	f06f 0302 	mvn.w	r3, #2
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	e01c      	b.n	8003374 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d019      	beq.n	8003374 <osSemaphoreAcquire+0x94>
 8003340:	4b0f      	ldr	r3, [pc, #60]	@ (8003380 <osSemaphoreAcquire+0xa0>)
 8003342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	e010      	b.n	8003374 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003352:	6839      	ldr	r1, [r7, #0]
 8003354:	6938      	ldr	r0, [r7, #16]
 8003356:	f000 fd53 	bl	8003e00 <xQueueSemaphoreTake>
 800335a:	4603      	mov	r3, r0
 800335c:	2b01      	cmp	r3, #1
 800335e:	d009      	beq.n	8003374 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003366:	f06f 0301 	mvn.w	r3, #1
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	e002      	b.n	8003374 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800336e:	f06f 0302 	mvn.w	r3, #2
 8003372:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003374:	697b      	ldr	r3, [r7, #20]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	e000ed04 	.word	0xe000ed04

08003384 <osSemaphoreGetCount>:
  }

  return (stat);
}

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <osSemaphoreGetCount+0x18>
    count = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	e00e      	b.n	80033ba <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800339c:	f3ef 8305 	mrs	r3, IPSR
 80033a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80033a2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d004      	beq.n	80033b2 <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 80033a8:	6938      	ldr	r0, [r7, #16]
 80033aa:	f000 feda 	bl	8004162 <uxQueueMessagesWaitingFromISR>
 80033ae:	6178      	str	r0, [r7, #20]
 80033b0:	e003      	b.n	80033ba <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 80033b2:	6938      	ldr	r0, [r7, #16]
 80033b4:	f000 feb6 	bl	8004124 <uxQueueMessagesWaiting>
 80033b8:	6178      	str	r0, [r7, #20]
  }

  return (count);
 80033ba:	697b      	ldr	r3, [r7, #20]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4a07      	ldr	r2, [pc, #28]	@ (80033f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80033d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4a06      	ldr	r2, [pc, #24]	@ (80033f4 <vApplicationGetIdleTaskMemory+0x30>)
 80033da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2280      	movs	r2, #128	@ 0x80
 80033e0:	601a      	str	r2, [r3, #0]
}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	20000120 	.word	0x20000120
 80033f4:	200001c8 	.word	0x200001c8

080033f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4a07      	ldr	r2, [pc, #28]	@ (8003424 <vApplicationGetTimerTaskMemory+0x2c>)
 8003408:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4a06      	ldr	r2, [pc, #24]	@ (8003428 <vApplicationGetTimerTaskMemory+0x30>)
 800340e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003416:	601a      	str	r2, [r3, #0]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	200003c8 	.word	0x200003c8
 8003428:	20000470 	.word	0x20000470

0800342c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f103 0208 	add.w	r2, r3, #8
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f04f 32ff 	mov.w	r2, #4294967295
 8003444:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f103 0208 	add.w	r2, r3, #8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f103 0208 	add.w	r2, r3, #8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003486:	b480      	push	{r7}
 8003488:	b085      	sub	sp, #20
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	601a      	str	r2, [r3, #0]
}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034ce:	b480      	push	{r7}
 80034d0:	b085      	sub	sp, #20
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d103      	bne.n	80034ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	e00c      	b.n	8003508 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3308      	adds	r3, #8
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	e002      	b.n	80034fc <vListInsert+0x2e>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	d2f6      	bcs.n	80034f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	601a      	str	r2, [r3, #0]
}
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6892      	ldr	r2, [r2, #8]
 8003556:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6852      	ldr	r2, [r2, #4]
 8003560:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	429a      	cmp	r2, r3
 800356a:	d103      	bne.n	8003574 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	1e5a      	subs	r2, r3, #1
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10b      	bne.n	80035c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035ba:	bf00      	nop
 80035bc:	bf00      	nop
 80035be:	e7fd      	b.n	80035bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80035c0:	f002 fc8a 	bl	8005ed8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035cc:	68f9      	ldr	r1, [r7, #12]
 80035ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
 80035d4:	441a      	add	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f0:	3b01      	subs	r3, #1
 80035f2:	68f9      	ldr	r1, [r7, #12]
 80035f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	441a      	add	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	22ff      	movs	r2, #255	@ 0xff
 8003604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	22ff      	movs	r2, #255	@ 0xff
 800360c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d114      	bne.n	8003640 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d01a      	beq.n	8003654 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3310      	adds	r3, #16
 8003622:	4618      	mov	r0, r3
 8003624:	f001 fc22 	bl	8004e6c <xTaskRemoveFromEventList>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d012      	beq.n	8003654 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800362e:	4b0d      	ldr	r3, [pc, #52]	@ (8003664 <xQueueGenericReset+0xd0>)
 8003630:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	e009      	b.n	8003654 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3310      	adds	r3, #16
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fef1 	bl	800342c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	3324      	adds	r3, #36	@ 0x24
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff feec 	bl	800342c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003654:	f002 fc72 	bl	8005f3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003658:	2301      	movs	r3, #1
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	e000ed04 	.word	0xe000ed04

08003668 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08e      	sub	sp, #56	@ 0x38
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10b      	bne.n	8003694 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800368e:	bf00      	nop
 8003690:	bf00      	nop
 8003692:	e7fd      	b.n	8003690 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10b      	bne.n	80036b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	e7fd      	b.n	80036ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <xQueueGenericCreateStatic+0x56>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <xQueueGenericCreateStatic+0x5a>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <xQueueGenericCreateStatic+0x5c>
 80036c2:	2300      	movs	r3, #0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10b      	bne.n	80036e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	623b      	str	r3, [r7, #32]
}
 80036da:	bf00      	nop
 80036dc:	bf00      	nop
 80036de:	e7fd      	b.n	80036dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d102      	bne.n	80036ec <xQueueGenericCreateStatic+0x84>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <xQueueGenericCreateStatic+0x88>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <xQueueGenericCreateStatic+0x8a>
 80036f0:	2300      	movs	r3, #0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10b      	bne.n	800370e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80036f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	61fb      	str	r3, [r7, #28]
}
 8003708:	bf00      	nop
 800370a:	bf00      	nop
 800370c:	e7fd      	b.n	800370a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800370e:	2350      	movs	r3, #80	@ 0x50
 8003710:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b50      	cmp	r3, #80	@ 0x50
 8003716:	d00b      	beq.n	8003730 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	61bb      	str	r3, [r7, #24]
}
 800372a:	bf00      	nop
 800372c:	bf00      	nop
 800372e:	e7fd      	b.n	800372c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003730:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00d      	beq.n	8003758 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800373c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003744:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f840 	bl	80037d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800375a:	4618      	mov	r0, r3
 800375c:	3730      	adds	r7, #48	@ 0x30
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003762:	b580      	push	{r7, lr}
 8003764:	b08a      	sub	sp, #40	@ 0x28
 8003766:	af02      	add	r7, sp, #8
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	4613      	mov	r3, r2
 800376e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10b      	bne.n	800378e <xQueueGenericCreate+0x2c>
	__asm volatile
 8003776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	613b      	str	r3, [r7, #16]
}
 8003788:	bf00      	nop
 800378a:	bf00      	nop
 800378c:	e7fd      	b.n	800378a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	3350      	adds	r3, #80	@ 0x50
 800379c:	4618      	mov	r0, r3
 800379e:	f002 fcbd 	bl	800611c <pvPortMalloc>
 80037a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d011      	beq.n	80037ce <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	3350      	adds	r3, #80	@ 0x50
 80037b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037bc:	79fa      	ldrb	r2, [r7, #7]
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	4613      	mov	r3, r2
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	68b9      	ldr	r1, [r7, #8]
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f805 	bl	80037d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037ce:	69bb      	ldr	r3, [r7, #24]
	}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3720      	adds	r7, #32
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d103      	bne.n	80037f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e002      	b.n	80037fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003806:	2101      	movs	r1, #1
 8003808:	69b8      	ldr	r0, [r7, #24]
 800380a:	f7ff fec3 	bl	8003594 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800381e:	b580      	push	{r7, lr}
 8003820:	b08a      	sub	sp, #40	@ 0x28
 8003822:	af02      	add	r7, sp, #8
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10b      	bne.n	8003848 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	61bb      	str	r3, [r7, #24]
}
 8003842:	bf00      	nop
 8003844:	bf00      	nop
 8003846:	e7fd      	b.n	8003844 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	429a      	cmp	r2, r3
 800384e:	d90b      	bls.n	8003868 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	617b      	str	r3, [r7, #20]
}
 8003862:	bf00      	nop
 8003864:	bf00      	nop
 8003866:	e7fd      	b.n	8003864 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003868:	2302      	movs	r3, #2
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	2100      	movs	r1, #0
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7ff fef8 	bl	8003668 <xQueueGenericCreateStatic>
 8003878:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003886:	69fb      	ldr	r3, [r7, #28]
	}
 8003888:	4618      	mov	r0, r3
 800388a:	3720      	adds	r7, #32
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10b      	bne.n	80038b8 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80038a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	613b      	str	r3, [r7, #16]
}
 80038b2:	bf00      	nop
 80038b4:	bf00      	nop
 80038b6:	e7fd      	b.n	80038b4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d90b      	bls.n	80038d8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80038c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	60fb      	str	r3, [r7, #12]
}
 80038d2:	bf00      	nop
 80038d4:	bf00      	nop
 80038d6:	e7fd      	b.n	80038d4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80038d8:	2202      	movs	r2, #2
 80038da:	2100      	movs	r1, #0
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff ff40 	bl	8003762 <xQueueGenericCreate>
 80038e2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80038f0:	697b      	ldr	r3, [r7, #20]
	}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08e      	sub	sp, #56	@ 0x38
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800390a:	2300      	movs	r3, #0
 800390c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <xQueueGenericSend+0x34>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800392a:	bf00      	nop
 800392c:	bf00      	nop
 800392e:	e7fd      	b.n	800392c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d103      	bne.n	800393e <xQueueGenericSend+0x42>
 8003936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <xQueueGenericSend+0x46>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <xQueueGenericSend+0x48>
 8003942:	2300      	movs	r3, #0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10b      	bne.n	8003960 <xQueueGenericSend+0x64>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800395a:	bf00      	nop
 800395c:	bf00      	nop
 800395e:	e7fd      	b.n	800395c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d103      	bne.n	800396e <xQueueGenericSend+0x72>
 8003966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <xQueueGenericSend+0x76>
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <xQueueGenericSend+0x78>
 8003972:	2300      	movs	r3, #0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10b      	bne.n	8003990 <xQueueGenericSend+0x94>
	__asm volatile
 8003978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	623b      	str	r3, [r7, #32]
}
 800398a:	bf00      	nop
 800398c:	bf00      	nop
 800398e:	e7fd      	b.n	800398c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003990:	f001 fc32 	bl	80051f8 <xTaskGetSchedulerState>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <xQueueGenericSend+0xa4>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <xQueueGenericSend+0xa8>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <xQueueGenericSend+0xaa>
 80039a4:	2300      	movs	r3, #0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10b      	bne.n	80039c2 <xQueueGenericSend+0xc6>
	__asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	61fb      	str	r3, [r7, #28]
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	e7fd      	b.n	80039be <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039c2:	f002 fa89 	bl	8005ed8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d302      	bcc.n	80039d8 <xQueueGenericSend+0xdc>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d129      	bne.n	8003a2c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039de:	f000 fc1b 	bl	8004218 <prvCopyDataToQueue>
 80039e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d010      	beq.n	8003a0e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ee:	3324      	adds	r3, #36	@ 0x24
 80039f0:	4618      	mov	r0, r3
 80039f2:	f001 fa3b 	bl	8004e6c <xTaskRemoveFromEventList>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d013      	beq.n	8003a24 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039fc:	4b3f      	ldr	r3, [pc, #252]	@ (8003afc <xQueueGenericSend+0x200>)
 80039fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	e00a      	b.n	8003a24 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a14:	4b39      	ldr	r3, [pc, #228]	@ (8003afc <xQueueGenericSend+0x200>)
 8003a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a24:	f002 fa8a 	bl	8005f3c <vPortExitCritical>
				return pdPASS;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e063      	b.n	8003af4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d103      	bne.n	8003a3a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a32:	f002 fa83 	bl	8005f3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e05c      	b.n	8003af4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a40:	f107 0314 	add.w	r3, r7, #20
 8003a44:	4618      	mov	r0, r3
 8003a46:	f001 fa75 	bl	8004f34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a4e:	f002 fa75 	bl	8005f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a52:	f000 ffdd 	bl	8004a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a56:	f002 fa3f 	bl	8005ed8 <vPortEnterCritical>
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a60:	b25b      	sxtb	r3, r3
 8003a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a66:	d103      	bne.n	8003a70 <xQueueGenericSend+0x174>
 8003a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a76:	b25b      	sxtb	r3, r3
 8003a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7c:	d103      	bne.n	8003a86 <xQueueGenericSend+0x18a>
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a86:	f002 fa59 	bl	8005f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a8a:	1d3a      	adds	r2, r7, #4
 8003a8c:	f107 0314 	add.w	r3, r7, #20
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 fa64 	bl	8004f60 <xTaskCheckForTimeOut>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d124      	bne.n	8003ae8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003aa0:	f000 fcb2 	bl	8004408 <prvIsQueueFull>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d018      	beq.n	8003adc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aac:	3310      	adds	r3, #16
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f001 f988 	bl	8004dc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ab8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003aba:	f000 fc3d 	bl	8004338 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003abe:	f000 ffb5 	bl	8004a2c <xTaskResumeAll>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f47f af7c 	bne.w	80039c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003aca:	4b0c      	ldr	r3, [pc, #48]	@ (8003afc <xQueueGenericSend+0x200>)
 8003acc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	e772      	b.n	80039c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003adc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ade:	f000 fc2b 	bl	8004338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ae2:	f000 ffa3 	bl	8004a2c <xTaskResumeAll>
 8003ae6:	e76c      	b.n	80039c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ae8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003aea:	f000 fc25 	bl	8004338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003aee:	f000 ff9d 	bl	8004a2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003af2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3738      	adds	r7, #56	@ 0x38
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	e000ed04 	.word	0xe000ed04

08003b00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b090      	sub	sp, #64	@ 0x40
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b2a:	bf00      	nop
 8003b2c:	bf00      	nop
 8003b2e:	e7fd      	b.n	8003b2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d103      	bne.n	8003b3e <xQueueGenericSendFromISR+0x3e>
 8003b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <xQueueGenericSendFromISR+0x42>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <xQueueGenericSendFromISR+0x44>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10b      	bne.n	8003b60 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b5a:	bf00      	nop
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d103      	bne.n	8003b6e <xQueueGenericSendFromISR+0x6e>
 8003b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <xQueueGenericSendFromISR+0x72>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <xQueueGenericSendFromISR+0x74>
 8003b72:	2300      	movs	r3, #0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10b      	bne.n	8003b90 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	623b      	str	r3, [r7, #32]
}
 8003b8a:	bf00      	nop
 8003b8c:	bf00      	nop
 8003b8e:	e7fd      	b.n	8003b8c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b90:	f002 fa82 	bl	8006098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b94:	f3ef 8211 	mrs	r2, BASEPRI
 8003b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	61fa      	str	r2, [r7, #28]
 8003baa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003bac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d302      	bcc.n	8003bc2 <xQueueGenericSendFromISR+0xc2>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d12f      	bne.n	8003c22 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003bd8:	f000 fb1e 	bl	8004218 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bdc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d112      	bne.n	8003c0c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d016      	beq.n	8003c1c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf0:	3324      	adds	r3, #36	@ 0x24
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f001 f93a 	bl	8004e6c <xTaskRemoveFromEventList>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00e      	beq.n	8003c1c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00b      	beq.n	8003c1c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	e007      	b.n	8003c1c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003c10:	3301      	adds	r3, #1
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	b25a      	sxtb	r2, r3
 8003c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003c20:	e001      	b.n	8003c26 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c28:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3740      	adds	r7, #64	@ 0x40
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08c      	sub	sp, #48	@ 0x30
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10b      	bne.n	8003c6e <xQueueReceive+0x32>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	623b      	str	r3, [r7, #32]
}
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	e7fd      	b.n	8003c6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d103      	bne.n	8003c7c <xQueueReceive+0x40>
 8003c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <xQueueReceive+0x44>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <xQueueReceive+0x46>
 8003c80:	2300      	movs	r3, #0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10b      	bne.n	8003c9e <xQueueReceive+0x62>
	__asm volatile
 8003c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	61fb      	str	r3, [r7, #28]
}
 8003c98:	bf00      	nop
 8003c9a:	bf00      	nop
 8003c9c:	e7fd      	b.n	8003c9a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c9e:	f001 faab 	bl	80051f8 <xTaskGetSchedulerState>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d102      	bne.n	8003cae <xQueueReceive+0x72>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <xQueueReceive+0x76>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <xQueueReceive+0x78>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10b      	bne.n	8003cd0 <xQueueReceive+0x94>
	__asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	61bb      	str	r3, [r7, #24]
}
 8003cca:	bf00      	nop
 8003ccc:	bf00      	nop
 8003cce:	e7fd      	b.n	8003ccc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cd0:	f002 f902 	bl	8005ed8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01f      	beq.n	8003d20 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ce4:	f000 fb02 	bl	80042ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	1e5a      	subs	r2, r3, #1
 8003cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00f      	beq.n	8003d18 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfa:	3310      	adds	r3, #16
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 f8b5 	bl	8004e6c <xTaskRemoveFromEventList>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d007      	beq.n	8003d18 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d08:	4b3c      	ldr	r3, [pc, #240]	@ (8003dfc <xQueueReceive+0x1c0>)
 8003d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d18:	f002 f910 	bl	8005f3c <vPortExitCritical>
				return pdPASS;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e069      	b.n	8003df4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d103      	bne.n	8003d2e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d26:	f002 f909 	bl	8005f3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e062      	b.n	8003df4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d34:	f107 0310 	add.w	r3, r7, #16
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f001 f8fb 	bl	8004f34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d42:	f002 f8fb 	bl	8005f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d46:	f000 fe63 	bl	8004a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d4a:	f002 f8c5 	bl	8005ed8 <vPortEnterCritical>
 8003d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d54:	b25b      	sxtb	r3, r3
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	d103      	bne.n	8003d64 <xQueueReceive+0x128>
 8003d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d6a:	b25b      	sxtb	r3, r3
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d103      	bne.n	8003d7a <xQueueReceive+0x13e>
 8003d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d7a:	f002 f8df 	bl	8005f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d7e:	1d3a      	adds	r2, r7, #4
 8003d80:	f107 0310 	add.w	r3, r7, #16
 8003d84:	4611      	mov	r1, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f001 f8ea 	bl	8004f60 <xTaskCheckForTimeOut>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d123      	bne.n	8003dda <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d94:	f000 fb22 	bl	80043dc <prvIsQueueEmpty>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d017      	beq.n	8003dce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da0:	3324      	adds	r3, #36	@ 0x24
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	4611      	mov	r1, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f001 f80e 	bl	8004dc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003dac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dae:	f000 fac3 	bl	8004338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003db2:	f000 fe3b 	bl	8004a2c <xTaskResumeAll>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d189      	bne.n	8003cd0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003dfc <xQueueReceive+0x1c0>)
 8003dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	e780      	b.n	8003cd0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003dce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dd0:	f000 fab2 	bl	8004338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dd4:	f000 fe2a 	bl	8004a2c <xTaskResumeAll>
 8003dd8:	e77a      	b.n	8003cd0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003dda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ddc:	f000 faac 	bl	8004338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003de0:	f000 fe24 	bl	8004a2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003de4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003de6:	f000 faf9 	bl	80043dc <prvIsQueueEmpty>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f43f af6f 	beq.w	8003cd0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003df2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3730      	adds	r7, #48	@ 0x30
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	e000ed04 	.word	0xe000ed04

08003e00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08e      	sub	sp, #56	@ 0x38
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10b      	bne.n	8003e34 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	623b      	str	r3, [r7, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	bf00      	nop
 8003e32:	e7fd      	b.n	8003e30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00b      	beq.n	8003e54 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	61fb      	str	r3, [r7, #28]
}
 8003e4e:	bf00      	nop
 8003e50:	bf00      	nop
 8003e52:	e7fd      	b.n	8003e50 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e54:	f001 f9d0 	bl	80051f8 <xTaskGetSchedulerState>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d102      	bne.n	8003e64 <xQueueSemaphoreTake+0x64>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <xQueueSemaphoreTake+0x68>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <xQueueSemaphoreTake+0x6a>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10b      	bne.n	8003e86 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	61bb      	str	r3, [r7, #24]
}
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	e7fd      	b.n	8003e82 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e86:	f002 f827 	bl	8005ed8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d024      	beq.n	8003ee0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e98:	1e5a      	subs	r2, r3, #1
 8003e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d104      	bne.n	8003eb0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003ea6:	f001 fb21 	bl	80054ec <pvTaskIncrementMutexHeldCount>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00f      	beq.n	8003ed8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eba:	3310      	adds	r3, #16
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 ffd5 	bl	8004e6c <xTaskRemoveFromEventList>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ec8:	4b54      	ldr	r3, [pc, #336]	@ (800401c <xQueueSemaphoreTake+0x21c>)
 8003eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ed8:	f002 f830 	bl	8005f3c <vPortExitCritical>
				return pdPASS;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e098      	b.n	8004012 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d112      	bne.n	8003f0c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00b      	beq.n	8003f04 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	617b      	str	r3, [r7, #20]
}
 8003efe:	bf00      	nop
 8003f00:	bf00      	nop
 8003f02:	e7fd      	b.n	8003f00 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003f04:	f002 f81a 	bl	8005f3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e082      	b.n	8004012 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f12:	f107 030c 	add.w	r3, r7, #12
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 f80c 	bl	8004f34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f20:	f002 f80c 	bl	8005f3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f24:	f000 fd74 	bl	8004a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f28:	f001 ffd6 	bl	8005ed8 <vPortEnterCritical>
 8003f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f32:	b25b      	sxtb	r3, r3
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f38:	d103      	bne.n	8003f42 <xQueueSemaphoreTake+0x142>
 8003f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f48:	b25b      	sxtb	r3, r3
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4e:	d103      	bne.n	8003f58 <xQueueSemaphoreTake+0x158>
 8003f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f58:	f001 fff0 	bl	8005f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f5c:	463a      	mov	r2, r7
 8003f5e:	f107 030c 	add.w	r3, r7, #12
 8003f62:	4611      	mov	r1, r2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fffb 	bl	8004f60 <xTaskCheckForTimeOut>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d132      	bne.n	8003fd6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f72:	f000 fa33 	bl	80043dc <prvIsQueueEmpty>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d026      	beq.n	8003fca <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d109      	bne.n	8003f98 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003f84:	f001 ffa8 	bl	8005ed8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f001 f951 	bl	8005234 <xTaskPriorityInherit>
 8003f92:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003f94:	f001 ffd2 	bl	8005f3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9a:	3324      	adds	r3, #36	@ 0x24
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 ff11 	bl	8004dc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fa6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fa8:	f000 f9c6 	bl	8004338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fac:	f000 fd3e 	bl	8004a2c <xTaskResumeAll>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f47f af67 	bne.w	8003e86 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003fb8:	4b18      	ldr	r3, [pc, #96]	@ (800401c <xQueueSemaphoreTake+0x21c>)
 8003fba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	e75d      	b.n	8003e86 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003fca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fcc:	f000 f9b4 	bl	8004338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fd0:	f000 fd2c 	bl	8004a2c <xTaskResumeAll>
 8003fd4:	e757      	b.n	8003e86 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003fd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fd8:	f000 f9ae 	bl	8004338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fdc:	f000 fd26 	bl	8004a2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fe0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fe2:	f000 f9fb 	bl	80043dc <prvIsQueueEmpty>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f43f af4c 	beq.w	8003e86 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00d      	beq.n	8004010 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003ff4:	f001 ff70 	bl	8005ed8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003ff8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ffa:	f000 f8f5 	bl	80041e8 <prvGetDisinheritPriorityAfterTimeout>
 8003ffe:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004006:	4618      	mov	r0, r3
 8004008:	f001 f9ec 	bl	80053e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800400c:	f001 ff96 	bl	8005f3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004010:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004012:	4618      	mov	r0, r3
 8004014:	3738      	adds	r7, #56	@ 0x38
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	e000ed04 	.word	0xe000ed04

08004020 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08e      	sub	sp, #56	@ 0x38
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10b      	bne.n	800404e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	623b      	str	r3, [r7, #32]
}
 8004048:	bf00      	nop
 800404a:	bf00      	nop
 800404c:	e7fd      	b.n	800404a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d103      	bne.n	800405c <xQueueReceiveFromISR+0x3c>
 8004054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <xQueueReceiveFromISR+0x40>
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <xQueueReceiveFromISR+0x42>
 8004060:	2300      	movs	r3, #0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10b      	bne.n	800407e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	61fb      	str	r3, [r7, #28]
}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	e7fd      	b.n	800407a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800407e:	f002 f80b 	bl	8006098 <vPortValidateInterruptPriority>
	__asm volatile
 8004082:	f3ef 8211 	mrs	r2, BASEPRI
 8004086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	61ba      	str	r2, [r7, #24]
 8004098:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800409a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800409c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d02f      	beq.n	800410a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80040aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040b8:	f000 f918 	bl	80042ec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040be:	1e5a      	subs	r2, r3, #1
 80040c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80040c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d112      	bne.n	80040f4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d016      	beq.n	8004104 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d8:	3310      	adds	r3, #16
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fec6 	bl	8004e6c <xTaskRemoveFromEventList>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00e      	beq.n	8004104 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00b      	beq.n	8004104 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	e007      	b.n	8004104 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80040f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040f8:	3301      	adds	r3, #1
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	b25a      	sxtb	r2, r3
 80040fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004104:	2301      	movs	r3, #1
 8004106:	637b      	str	r3, [r7, #52]	@ 0x34
 8004108:	e001      	b.n	800410e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800410a:	2300      	movs	r3, #0
 800410c:	637b      	str	r3, [r7, #52]	@ 0x34
 800410e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004110:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f383 8811 	msr	BASEPRI, r3
}
 8004118:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800411a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800411c:	4618      	mov	r0, r3
 800411e:	3738      	adds	r7, #56	@ 0x38
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10b      	bne.n	800414a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	60bb      	str	r3, [r7, #8]
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	e7fd      	b.n	8004146 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800414a:	f001 fec5 	bl	8005ed8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004152:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004154:	f001 fef2 	bl	8005f3c <vPortExitCritical>

	return uxReturn;
 8004158:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004162:	b480      	push	{r7}
 8004164:	b087      	sub	sp, #28
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	60fb      	str	r3, [r7, #12]
}
 8004186:	bf00      	nop
 8004188:	bf00      	nop
 800418a:	e7fd      	b.n	8004188 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004190:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8004192:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004194:	4618      	mov	r0, r3
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10b      	bne.n	80041ca <vQueueDelete+0x2a>
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	60bb      	str	r3, [r7, #8]
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop
 80041c8:	e7fd      	b.n	80041c6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f95e 	bl	800448c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d102      	bne.n	80041e0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f002 f86c 	bl	80062b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d006      	beq.n	8004206 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e001      	b.n	800420a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800420a:	68fb      	ldr	r3, [r7, #12]
	}
 800420c:	4618      	mov	r0, r3
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10d      	bne.n	8004252 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d14d      	bne.n	80042da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	4618      	mov	r0, r3
 8004244:	f001 f85e 	bl	8005304 <xTaskPriorityDisinherit>
 8004248:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	e043      	b.n	80042da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d119      	bne.n	800428c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6858      	ldr	r0, [r3, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004260:	461a      	mov	r2, r3
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	f002 f9d4 	bl	8006610 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004270:	441a      	add	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	d32b      	bcc.n	80042da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	e026      	b.n	80042da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	68d8      	ldr	r0, [r3, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004294:	461a      	mov	r2, r3
 8004296:	68b9      	ldr	r1, [r7, #8]
 8004298:	f002 f9ba 	bl	8006610 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a4:	425b      	negs	r3, r3
 80042a6:	441a      	add	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d207      	bcs.n	80042c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	425b      	negs	r3, r3
 80042c2:	441a      	add	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d105      	bne.n	80042da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80042e2:	697b      	ldr	r3, [r7, #20]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d018      	beq.n	8004330 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	441a      	add	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	429a      	cmp	r2, r3
 8004316:	d303      	bcc.n	8004320 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68d9      	ldr	r1, [r3, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	461a      	mov	r2, r3
 800432a:	6838      	ldr	r0, [r7, #0]
 800432c:	f002 f970 	bl	8006610 <memcpy>
	}
}
 8004330:	bf00      	nop
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004340:	f001 fdca 	bl	8005ed8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800434a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800434c:	e011      	b.n	8004372 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004352:	2b00      	cmp	r3, #0
 8004354:	d012      	beq.n	800437c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3324      	adds	r3, #36	@ 0x24
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fd86 	bl	8004e6c <xTaskRemoveFromEventList>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004366:	f000 fe5f 	bl	8005028 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	3b01      	subs	r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004376:	2b00      	cmp	r3, #0
 8004378:	dce9      	bgt.n	800434e <prvUnlockQueue+0x16>
 800437a:	e000      	b.n	800437e <prvUnlockQueue+0x46>
					break;
 800437c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	22ff      	movs	r2, #255	@ 0xff
 8004382:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004386:	f001 fdd9 	bl	8005f3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800438a:	f001 fda5 	bl	8005ed8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004394:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004396:	e011      	b.n	80043bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d012      	beq.n	80043c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3310      	adds	r3, #16
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fd61 	bl	8004e6c <xTaskRemoveFromEventList>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80043b0:	f000 fe3a 	bl	8005028 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80043b4:	7bbb      	ldrb	r3, [r7, #14]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	dce9      	bgt.n	8004398 <prvUnlockQueue+0x60>
 80043c4:	e000      	b.n	80043c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80043c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	22ff      	movs	r2, #255	@ 0xff
 80043cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80043d0:	f001 fdb4 	bl	8005f3c <vPortExitCritical>
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043e4:	f001 fd78 	bl	8005ed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80043f0:	2301      	movs	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	e001      	b.n	80043fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043fa:	f001 fd9f 	bl	8005f3c <vPortExitCritical>

	return xReturn;
 80043fe:	68fb      	ldr	r3, [r7, #12]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004410:	f001 fd62 	bl	8005ed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441c:	429a      	cmp	r2, r3
 800441e:	d102      	bne.n	8004426 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004420:	2301      	movs	r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e001      	b.n	800442a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800442a:	f001 fd87 	bl	8005f3c <vPortExitCritical>

	return xReturn;
 800442e:	68fb      	ldr	r3, [r7, #12]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	e014      	b.n	8004472 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004448:	4a0f      	ldr	r2, [pc, #60]	@ (8004488 <vQueueAddToRegistry+0x50>)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10b      	bne.n	800446c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004454:	490c      	ldr	r1, [pc, #48]	@ (8004488 <vQueueAddToRegistry+0x50>)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800445e:	4a0a      	ldr	r2, [pc, #40]	@ (8004488 <vQueueAddToRegistry+0x50>)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4413      	add	r3, r2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800446a:	e006      	b.n	800447a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3301      	adds	r3, #1
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b07      	cmp	r3, #7
 8004476:	d9e7      	bls.n	8004448 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000870 	.word	0x20000870

0800448c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	e016      	b.n	80044c8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800449a:	4a10      	ldr	r2, [pc, #64]	@ (80044dc <vQueueUnregisterQueue+0x50>)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4413      	add	r3, r2
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d10b      	bne.n	80044c2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80044aa:	4a0c      	ldr	r2, [pc, #48]	@ (80044dc <vQueueUnregisterQueue+0x50>)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2100      	movs	r1, #0
 80044b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80044b4:	4a09      	ldr	r2, [pc, #36]	@ (80044dc <vQueueUnregisterQueue+0x50>)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4413      	add	r3, r2
 80044bc:	2200      	movs	r2, #0
 80044be:	605a      	str	r2, [r3, #4]
				break;
 80044c0:	e006      	b.n	80044d0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3301      	adds	r3, #1
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b07      	cmp	r3, #7
 80044cc:	d9e5      	bls.n	800449a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80044ce:	bf00      	nop
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	20000870 	.word	0x20000870

080044e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80044f0:	f001 fcf2 	bl	8005ed8 <vPortEnterCritical>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044fa:	b25b      	sxtb	r3, r3
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d103      	bne.n	800450a <vQueueWaitForMessageRestricted+0x2a>
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004510:	b25b      	sxtb	r3, r3
 8004512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004516:	d103      	bne.n	8004520 <vQueueWaitForMessageRestricted+0x40>
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004520:	f001 fd0c 	bl	8005f3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004528:	2b00      	cmp	r3, #0
 800452a:	d106      	bne.n	800453a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	3324      	adds	r3, #36	@ 0x24
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fc6d 	bl	8004e14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800453a:	6978      	ldr	r0, [r7, #20]
 800453c:	f7ff fefc 	bl	8004338 <prvUnlockQueue>
	}
 8004540:	bf00      	nop
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08e      	sub	sp, #56	@ 0x38
 800454c:	af04      	add	r7, sp, #16
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10b      	bne.n	8004574 <xTaskCreateStatic+0x2c>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	623b      	str	r3, [r7, #32]
}
 800456e:	bf00      	nop
 8004570:	bf00      	nop
 8004572:	e7fd      	b.n	8004570 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10b      	bne.n	8004592 <xTaskCreateStatic+0x4a>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	61fb      	str	r3, [r7, #28]
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	e7fd      	b.n	800458e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004592:	23a8      	movs	r3, #168	@ 0xa8
 8004594:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2ba8      	cmp	r3, #168	@ 0xa8
 800459a:	d00b      	beq.n	80045b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	61bb      	str	r3, [r7, #24]
}
 80045ae:	bf00      	nop
 80045b0:	bf00      	nop
 80045b2:	e7fd      	b.n	80045b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80045b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01e      	beq.n	80045fa <xTaskCreateStatic+0xb2>
 80045bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d01b      	beq.n	80045fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045d4:	2300      	movs	r3, #0
 80045d6:	9303      	str	r3, [sp, #12]
 80045d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045da:	9302      	str	r3, [sp, #8]
 80045dc:	f107 0314 	add.w	r3, r7, #20
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	68b9      	ldr	r1, [r7, #8]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f851 	bl	8004694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80045f4:	f000 f8f6 	bl	80047e4 <prvAddNewTaskToReadyList>
 80045f8:	e001      	b.n	80045fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80045fe:	697b      	ldr	r3, [r7, #20]
	}
 8004600:	4618      	mov	r0, r3
 8004602:	3728      	adds	r7, #40	@ 0x28
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08c      	sub	sp, #48	@ 0x30
 800460c:	af04      	add	r7, sp, #16
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	4613      	mov	r3, r2
 8004616:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4618      	mov	r0, r3
 800461e:	f001 fd7d 	bl	800611c <pvPortMalloc>
 8004622:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00e      	beq.n	8004648 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800462a:	20a8      	movs	r0, #168	@ 0xa8
 800462c:	f001 fd76 	bl	800611c <pvPortMalloc>
 8004630:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	631a      	str	r2, [r3, #48]	@ 0x30
 800463e:	e005      	b.n	800464c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004640:	6978      	ldr	r0, [r7, #20]
 8004642:	f001 fe39 	bl	80062b8 <vPortFree>
 8004646:	e001      	b.n	800464c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004648:	2300      	movs	r3, #0
 800464a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d017      	beq.n	8004682 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800465a:	88fa      	ldrh	r2, [r7, #6]
 800465c:	2300      	movs	r3, #0
 800465e:	9303      	str	r3, [sp, #12]
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	9302      	str	r3, [sp, #8]
 8004664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	68b9      	ldr	r1, [r7, #8]
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f80f 	bl	8004694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004676:	69f8      	ldr	r0, [r7, #28]
 8004678:	f000 f8b4 	bl	80047e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800467c:	2301      	movs	r3, #1
 800467e:	61bb      	str	r3, [r7, #24]
 8004680:	e002      	b.n	8004688 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004688:	69bb      	ldr	r3, [r7, #24]
	}
 800468a:	4618      	mov	r0, r3
 800468c:	3720      	adds	r7, #32
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80046a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	461a      	mov	r2, r3
 80046ac:	21a5      	movs	r1, #165	@ 0xa5
 80046ae:	f001 ff23 	bl	80064f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80046b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046bc:	3b01      	subs	r3, #1
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	f023 0307 	bic.w	r3, r3, #7
 80046ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00b      	beq.n	80046ee <prvInitialiseNewTask+0x5a>
	__asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	617b      	str	r3, [r7, #20]
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	e7fd      	b.n	80046ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01f      	beq.n	8004734 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046f4:	2300      	movs	r3, #0
 80046f6:	61fb      	str	r3, [r7, #28]
 80046f8:	e012      	b.n	8004720 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	4413      	add	r3, r2
 8004700:	7819      	ldrb	r1, [r3, #0]
 8004702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	4413      	add	r3, r2
 8004708:	3334      	adds	r3, #52	@ 0x34
 800470a:	460a      	mov	r2, r1
 800470c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	4413      	add	r3, r2
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d006      	beq.n	8004728 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	3301      	adds	r3, #1
 800471e:	61fb      	str	r3, [r7, #28]
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	2b0f      	cmp	r3, #15
 8004724:	d9e9      	bls.n	80046fa <prvInitialiseNewTask+0x66>
 8004726:	e000      	b.n	800472a <prvInitialiseNewTask+0x96>
			{
				break;
 8004728:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800472a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004732:	e003      	b.n	800473c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800473c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473e:	2b37      	cmp	r3, #55	@ 0x37
 8004740:	d901      	bls.n	8004746 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004742:	2337      	movs	r3, #55	@ 0x37
 8004744:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004748:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800474a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800474c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004750:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004754:	2200      	movs	r2, #0
 8004756:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475a:	3304      	adds	r3, #4
 800475c:	4618      	mov	r0, r3
 800475e:	f7fe fe85 	bl	800346c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004764:	3318      	adds	r3, #24
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fe80 	bl	800346c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800476c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004770:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004774:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800477c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004780:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004784:	2200      	movs	r2, #0
 8004786:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800478a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478c:	2200      	movs	r2, #0
 800478e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004794:	3354      	adds	r3, #84	@ 0x54
 8004796:	224c      	movs	r2, #76	@ 0x4c
 8004798:	2100      	movs	r1, #0
 800479a:	4618      	mov	r0, r3
 800479c:	f001 feac 	bl	80064f8 <memset>
 80047a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a2:	4a0d      	ldr	r2, [pc, #52]	@ (80047d8 <prvInitialiseNewTask+0x144>)
 80047a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	4a0c      	ldr	r2, [pc, #48]	@ (80047dc <prvInitialiseNewTask+0x148>)
 80047aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ae:	4a0c      	ldr	r2, [pc, #48]	@ (80047e0 <prvInitialiseNewTask+0x14c>)
 80047b0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	68f9      	ldr	r1, [r7, #12]
 80047b6:	69b8      	ldr	r0, [r7, #24]
 80047b8:	f001 fa5a 	bl	8005c70 <pxPortInitialiseStack>
 80047bc:	4602      	mov	r2, r0
 80047be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047ce:	bf00      	nop
 80047d0:	3720      	adds	r7, #32
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20004b04 	.word	0x20004b04
 80047dc:	20004b6c 	.word	0x20004b6c
 80047e0:	20004bd4 	.word	0x20004bd4

080047e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047ec:	f001 fb74 	bl	8005ed8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047f0:	4b2d      	ldr	r3, [pc, #180]	@ (80048a8 <prvAddNewTaskToReadyList+0xc4>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3301      	adds	r3, #1
 80047f6:	4a2c      	ldr	r2, [pc, #176]	@ (80048a8 <prvAddNewTaskToReadyList+0xc4>)
 80047f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047fa:	4b2c      	ldr	r3, [pc, #176]	@ (80048ac <prvAddNewTaskToReadyList+0xc8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004802:	4a2a      	ldr	r2, [pc, #168]	@ (80048ac <prvAddNewTaskToReadyList+0xc8>)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004808:	4b27      	ldr	r3, [pc, #156]	@ (80048a8 <prvAddNewTaskToReadyList+0xc4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d110      	bne.n	8004832 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004810:	f000 fc2e 	bl	8005070 <prvInitialiseTaskLists>
 8004814:	e00d      	b.n	8004832 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004816:	4b26      	ldr	r3, [pc, #152]	@ (80048b0 <prvAddNewTaskToReadyList+0xcc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800481e:	4b23      	ldr	r3, [pc, #140]	@ (80048ac <prvAddNewTaskToReadyList+0xc8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004828:	429a      	cmp	r2, r3
 800482a:	d802      	bhi.n	8004832 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800482c:	4a1f      	ldr	r2, [pc, #124]	@ (80048ac <prvAddNewTaskToReadyList+0xc8>)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004832:	4b20      	ldr	r3, [pc, #128]	@ (80048b4 <prvAddNewTaskToReadyList+0xd0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3301      	adds	r3, #1
 8004838:	4a1e      	ldr	r2, [pc, #120]	@ (80048b4 <prvAddNewTaskToReadyList+0xd0>)
 800483a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800483c:	4b1d      	ldr	r3, [pc, #116]	@ (80048b4 <prvAddNewTaskToReadyList+0xd0>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004848:	4b1b      	ldr	r3, [pc, #108]	@ (80048b8 <prvAddNewTaskToReadyList+0xd4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d903      	bls.n	8004858 <prvAddNewTaskToReadyList+0x74>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004854:	4a18      	ldr	r2, [pc, #96]	@ (80048b8 <prvAddNewTaskToReadyList+0xd4>)
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4a15      	ldr	r2, [pc, #84]	@ (80048bc <prvAddNewTaskToReadyList+0xd8>)
 8004866:	441a      	add	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3304      	adds	r3, #4
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f7fe fe09 	bl	8003486 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004874:	f001 fb62 	bl	8005f3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004878:	4b0d      	ldr	r3, [pc, #52]	@ (80048b0 <prvAddNewTaskToReadyList+0xcc>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00e      	beq.n	800489e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004880:	4b0a      	ldr	r3, [pc, #40]	@ (80048ac <prvAddNewTaskToReadyList+0xc8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488a:	429a      	cmp	r2, r3
 800488c:	d207      	bcs.n	800489e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800488e:	4b0c      	ldr	r3, [pc, #48]	@ (80048c0 <prvAddNewTaskToReadyList+0xdc>)
 8004890:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000d84 	.word	0x20000d84
 80048ac:	200008b0 	.word	0x200008b0
 80048b0:	20000d90 	.word	0x20000d90
 80048b4:	20000da0 	.word	0x20000da0
 80048b8:	20000d8c 	.word	0x20000d8c
 80048bc:	200008b4 	.word	0x200008b4
 80048c0:	e000ed04 	.word	0xe000ed04

080048c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d018      	beq.n	8004908 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048d6:	4b14      	ldr	r3, [pc, #80]	@ (8004928 <vTaskDelay+0x64>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <vTaskDelay+0x32>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	60bb      	str	r3, [r7, #8]
}
 80048f0:	bf00      	nop
 80048f2:	bf00      	nop
 80048f4:	e7fd      	b.n	80048f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80048f6:	f000 f88b 	bl	8004a10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048fa:	2100      	movs	r1, #0
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fe09 	bl	8005514 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004902:	f000 f893 	bl	8004a2c <xTaskResumeAll>
 8004906:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d107      	bne.n	800491e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800490e:	4b07      	ldr	r3, [pc, #28]	@ (800492c <vTaskDelay+0x68>)
 8004910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000dac 	.word	0x20000dac
 800492c:	e000ed04 	.word	0xe000ed04

08004930 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08a      	sub	sp, #40	@ 0x28
 8004934:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004936:	2300      	movs	r3, #0
 8004938:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800493e:	463a      	mov	r2, r7
 8004940:	1d39      	adds	r1, r7, #4
 8004942:	f107 0308 	add.w	r3, r7, #8
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe fd3c 	bl	80033c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800494c:	6839      	ldr	r1, [r7, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	9202      	str	r2, [sp, #8]
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	2300      	movs	r3, #0
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	2300      	movs	r3, #0
 800495c:	460a      	mov	r2, r1
 800495e:	4924      	ldr	r1, [pc, #144]	@ (80049f0 <vTaskStartScheduler+0xc0>)
 8004960:	4824      	ldr	r0, [pc, #144]	@ (80049f4 <vTaskStartScheduler+0xc4>)
 8004962:	f7ff fdf1 	bl	8004548 <xTaskCreateStatic>
 8004966:	4603      	mov	r3, r0
 8004968:	4a23      	ldr	r2, [pc, #140]	@ (80049f8 <vTaskStartScheduler+0xc8>)
 800496a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800496c:	4b22      	ldr	r3, [pc, #136]	@ (80049f8 <vTaskStartScheduler+0xc8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004974:	2301      	movs	r3, #1
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	e001      	b.n	800497e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d102      	bne.n	800498a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004984:	f000 fe1a 	bl	80055bc <xTimerCreateTimerTask>
 8004988:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d11b      	bne.n	80049c8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	613b      	str	r3, [r7, #16]
}
 80049a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80049a4:	4b15      	ldr	r3, [pc, #84]	@ (80049fc <vTaskStartScheduler+0xcc>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3354      	adds	r3, #84	@ 0x54
 80049aa:	4a15      	ldr	r2, [pc, #84]	@ (8004a00 <vTaskStartScheduler+0xd0>)
 80049ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049ae:	4b15      	ldr	r3, [pc, #84]	@ (8004a04 <vTaskStartScheduler+0xd4>)
 80049b0:	f04f 32ff 	mov.w	r2, #4294967295
 80049b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049b6:	4b14      	ldr	r3, [pc, #80]	@ (8004a08 <vTaskStartScheduler+0xd8>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049bc:	4b13      	ldr	r3, [pc, #76]	@ (8004a0c <vTaskStartScheduler+0xdc>)
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049c2:	f001 f9e5 	bl	8005d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049c6:	e00f      	b.n	80049e8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ce:	d10b      	bne.n	80049e8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	60fb      	str	r3, [r7, #12]
}
 80049e2:	bf00      	nop
 80049e4:	bf00      	nop
 80049e6:	e7fd      	b.n	80049e4 <vTaskStartScheduler+0xb4>
}
 80049e8:	bf00      	nop
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	0800676c 	.word	0x0800676c
 80049f4:	08005041 	.word	0x08005041
 80049f8:	20000da8 	.word	0x20000da8
 80049fc:	200008b0 	.word	0x200008b0
 8004a00:	20000010 	.word	0x20000010
 8004a04:	20000da4 	.word	0x20000da4
 8004a08:	20000d90 	.word	0x20000d90
 8004a0c:	20000d88 	.word	0x20000d88

08004a10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a14:	4b04      	ldr	r3, [pc, #16]	@ (8004a28 <vTaskSuspendAll+0x18>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	4a03      	ldr	r2, [pc, #12]	@ (8004a28 <vTaskSuspendAll+0x18>)
 8004a1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a1e:	bf00      	nop
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	20000dac 	.word	0x20000dac

08004a2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a3a:	4b42      	ldr	r3, [pc, #264]	@ (8004b44 <xTaskResumeAll+0x118>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10b      	bne.n	8004a5a <xTaskResumeAll+0x2e>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	603b      	str	r3, [r7, #0]
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	e7fd      	b.n	8004a56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a5a:	f001 fa3d 	bl	8005ed8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a5e:	4b39      	ldr	r3, [pc, #228]	@ (8004b44 <xTaskResumeAll+0x118>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	4a37      	ldr	r2, [pc, #220]	@ (8004b44 <xTaskResumeAll+0x118>)
 8004a66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a68:	4b36      	ldr	r3, [pc, #216]	@ (8004b44 <xTaskResumeAll+0x118>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d162      	bne.n	8004b36 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a70:	4b35      	ldr	r3, [pc, #212]	@ (8004b48 <xTaskResumeAll+0x11c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d05e      	beq.n	8004b36 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a78:	e02f      	b.n	8004ada <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a7a:	4b34      	ldr	r3, [pc, #208]	@ (8004b4c <xTaskResumeAll+0x120>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3318      	adds	r3, #24
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fe fd5a 	bl	8003540 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fe fd55 	bl	8003540 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004b50 <xTaskResumeAll+0x124>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d903      	bls.n	8004aaa <xTaskResumeAll+0x7e>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8004b50 <xTaskResumeAll+0x124>)
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4a27      	ldr	r2, [pc, #156]	@ (8004b54 <xTaskResumeAll+0x128>)
 8004ab8:	441a      	add	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f7fe fce0 	bl	8003486 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aca:	4b23      	ldr	r3, [pc, #140]	@ (8004b58 <xTaskResumeAll+0x12c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d302      	bcc.n	8004ada <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004ad4:	4b21      	ldr	r3, [pc, #132]	@ (8004b5c <xTaskResumeAll+0x130>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ada:	4b1c      	ldr	r3, [pc, #112]	@ (8004b4c <xTaskResumeAll+0x120>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1cb      	bne.n	8004a7a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ae8:	f000 fb66 	bl	80051b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004aec:	4b1c      	ldr	r3, [pc, #112]	@ (8004b60 <xTaskResumeAll+0x134>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d010      	beq.n	8004b1a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004af8:	f000 f846 	bl	8004b88 <xTaskIncrementTick>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004b02:	4b16      	ldr	r3, [pc, #88]	@ (8004b5c <xTaskResumeAll+0x130>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1f1      	bne.n	8004af8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004b14:	4b12      	ldr	r3, [pc, #72]	@ (8004b60 <xTaskResumeAll+0x134>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b1a:	4b10      	ldr	r3, [pc, #64]	@ (8004b5c <xTaskResumeAll+0x130>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b22:	2301      	movs	r3, #1
 8004b24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b26:	4b0f      	ldr	r3, [pc, #60]	@ (8004b64 <xTaskResumeAll+0x138>)
 8004b28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b36:	f001 fa01 	bl	8005f3c <vPortExitCritical>

	return xAlreadyYielded;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000dac 	.word	0x20000dac
 8004b48:	20000d84 	.word	0x20000d84
 8004b4c:	20000d44 	.word	0x20000d44
 8004b50:	20000d8c 	.word	0x20000d8c
 8004b54:	200008b4 	.word	0x200008b4
 8004b58:	200008b0 	.word	0x200008b0
 8004b5c:	20000d98 	.word	0x20000d98
 8004b60:	20000d94 	.word	0x20000d94
 8004b64:	e000ed04 	.word	0xe000ed04

08004b68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b6e:	4b05      	ldr	r3, [pc, #20]	@ (8004b84 <xTaskGetTickCount+0x1c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b74:	687b      	ldr	r3, [r7, #4]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000d88 	.word	0x20000d88

08004b88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b92:	4b4f      	ldr	r3, [pc, #316]	@ (8004cd0 <xTaskIncrementTick+0x148>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f040 8090 	bne.w	8004cbc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8004cd4 <xTaskIncrementTick+0x14c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ba4:	4a4b      	ldr	r2, [pc, #300]	@ (8004cd4 <xTaskIncrementTick+0x14c>)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d121      	bne.n	8004bf4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bb0:	4b49      	ldr	r3, [pc, #292]	@ (8004cd8 <xTaskIncrementTick+0x150>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00b      	beq.n	8004bd2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	603b      	str	r3, [r7, #0]
}
 8004bcc:	bf00      	nop
 8004bce:	bf00      	nop
 8004bd0:	e7fd      	b.n	8004bce <xTaskIncrementTick+0x46>
 8004bd2:	4b41      	ldr	r3, [pc, #260]	@ (8004cd8 <xTaskIncrementTick+0x150>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	4b40      	ldr	r3, [pc, #256]	@ (8004cdc <xTaskIncrementTick+0x154>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a3e      	ldr	r2, [pc, #248]	@ (8004cd8 <xTaskIncrementTick+0x150>)
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	4a3e      	ldr	r2, [pc, #248]	@ (8004cdc <xTaskIncrementTick+0x154>)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ce0 <xTaskIncrementTick+0x158>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3301      	adds	r3, #1
 8004bec:	4a3c      	ldr	r2, [pc, #240]	@ (8004ce0 <xTaskIncrementTick+0x158>)
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	f000 fae2 	bl	80051b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bf4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ce4 <xTaskIncrementTick+0x15c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d349      	bcc.n	8004c92 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bfe:	4b36      	ldr	r3, [pc, #216]	@ (8004cd8 <xTaskIncrementTick+0x150>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c08:	4b36      	ldr	r3, [pc, #216]	@ (8004ce4 <xTaskIncrementTick+0x15c>)
 8004c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0e:	601a      	str	r2, [r3, #0]
					break;
 8004c10:	e03f      	b.n	8004c92 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c12:	4b31      	ldr	r3, [pc, #196]	@ (8004cd8 <xTaskIncrementTick+0x150>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d203      	bcs.n	8004c32 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c2a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ce4 <xTaskIncrementTick+0x15c>)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c30:	e02f      	b.n	8004c92 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	3304      	adds	r3, #4
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe fc82 	bl	8003540 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d004      	beq.n	8004c4e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	3318      	adds	r3, #24
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fe fc79 	bl	8003540 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c52:	4b25      	ldr	r3, [pc, #148]	@ (8004ce8 <xTaskIncrementTick+0x160>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d903      	bls.n	8004c62 <xTaskIncrementTick+0xda>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5e:	4a22      	ldr	r2, [pc, #136]	@ (8004ce8 <xTaskIncrementTick+0x160>)
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004cec <xTaskIncrementTick+0x164>)
 8004c70:	441a      	add	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	3304      	adds	r3, #4
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f7fe fc04 	bl	8003486 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c82:	4b1b      	ldr	r3, [pc, #108]	@ (8004cf0 <xTaskIncrementTick+0x168>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d3b8      	bcc.n	8004bfe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c90:	e7b5      	b.n	8004bfe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c92:	4b17      	ldr	r3, [pc, #92]	@ (8004cf0 <xTaskIncrementTick+0x168>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c98:	4914      	ldr	r1, [pc, #80]	@ (8004cec <xTaskIncrementTick+0x164>)
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d901      	bls.n	8004cae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004caa:	2301      	movs	r3, #1
 8004cac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004cae:	4b11      	ldr	r3, [pc, #68]	@ (8004cf4 <xTaskIncrementTick+0x16c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d007      	beq.n	8004cc6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	e004      	b.n	8004cc6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf8 <xTaskIncrementTick+0x170>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	4a0d      	ldr	r2, [pc, #52]	@ (8004cf8 <xTaskIncrementTick+0x170>)
 8004cc4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004cc6:	697b      	ldr	r3, [r7, #20]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000dac 	.word	0x20000dac
 8004cd4:	20000d88 	.word	0x20000d88
 8004cd8:	20000d3c 	.word	0x20000d3c
 8004cdc:	20000d40 	.word	0x20000d40
 8004ce0:	20000d9c 	.word	0x20000d9c
 8004ce4:	20000da4 	.word	0x20000da4
 8004ce8:	20000d8c 	.word	0x20000d8c
 8004cec:	200008b4 	.word	0x200008b4
 8004cf0:	200008b0 	.word	0x200008b0
 8004cf4:	20000d98 	.word	0x20000d98
 8004cf8:	20000d94 	.word	0x20000d94

08004cfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d02:	4b2b      	ldr	r3, [pc, #172]	@ (8004db0 <vTaskSwitchContext+0xb4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004db4 <vTaskSwitchContext+0xb8>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d10:	e047      	b.n	8004da2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004d12:	4b28      	ldr	r3, [pc, #160]	@ (8004db4 <vTaskSwitchContext+0xb8>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d18:	4b27      	ldr	r3, [pc, #156]	@ (8004db8 <vTaskSwitchContext+0xbc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	e011      	b.n	8004d44 <vTaskSwitchContext+0x48>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <vTaskSwitchContext+0x42>
	__asm volatile
 8004d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	607b      	str	r3, [r7, #4]
}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	e7fd      	b.n	8004d3a <vTaskSwitchContext+0x3e>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	491d      	ldr	r1, [pc, #116]	@ (8004dbc <vTaskSwitchContext+0xc0>)
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0e3      	beq.n	8004d20 <vTaskSwitchContext+0x24>
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4a16      	ldr	r2, [pc, #88]	@ (8004dbc <vTaskSwitchContext+0xc0>)
 8004d64:	4413      	add	r3, r2
 8004d66:	60bb      	str	r3, [r7, #8]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	605a      	str	r2, [r3, #4]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	3308      	adds	r3, #8
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d104      	bne.n	8004d88 <vTaskSwitchContext+0x8c>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	605a      	str	r2, [r3, #4]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8004dc0 <vTaskSwitchContext+0xc4>)
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	4a09      	ldr	r2, [pc, #36]	@ (8004db8 <vTaskSwitchContext+0xbc>)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d98:	4b09      	ldr	r3, [pc, #36]	@ (8004dc0 <vTaskSwitchContext+0xc4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3354      	adds	r3, #84	@ 0x54
 8004d9e:	4a09      	ldr	r2, [pc, #36]	@ (8004dc4 <vTaskSwitchContext+0xc8>)
 8004da0:	6013      	str	r3, [r2, #0]
}
 8004da2:	bf00      	nop
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20000dac 	.word	0x20000dac
 8004db4:	20000d98 	.word	0x20000d98
 8004db8:	20000d8c 	.word	0x20000d8c
 8004dbc:	200008b4 	.word	0x200008b4
 8004dc0:	200008b0 	.word	0x200008b0
 8004dc4:	20000010 	.word	0x20000010

08004dc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10b      	bne.n	8004df0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	60fb      	str	r3, [r7, #12]
}
 8004dea:	bf00      	nop
 8004dec:	bf00      	nop
 8004dee:	e7fd      	b.n	8004dec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004df0:	4b07      	ldr	r3, [pc, #28]	@ (8004e10 <vTaskPlaceOnEventList+0x48>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3318      	adds	r3, #24
 8004df6:	4619      	mov	r1, r3
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7fe fb68 	bl	80034ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dfe:	2101      	movs	r1, #1
 8004e00:	6838      	ldr	r0, [r7, #0]
 8004e02:	f000 fb87 	bl	8005514 <prvAddCurrentTaskToDelayedList>
}
 8004e06:	bf00      	nop
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	200008b0 	.word	0x200008b0

08004e14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10b      	bne.n	8004e3e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	617b      	str	r3, [r7, #20]
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	e7fd      	b.n	8004e3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e68 <vTaskPlaceOnEventListRestricted+0x54>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3318      	adds	r3, #24
 8004e44:	4619      	mov	r1, r3
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f7fe fb1d 	bl	8003486 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004e52:	f04f 33ff 	mov.w	r3, #4294967295
 8004e56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	68b8      	ldr	r0, [r7, #8]
 8004e5c:	f000 fb5a 	bl	8005514 <prvAddCurrentTaskToDelayedList>
	}
 8004e60:	bf00      	nop
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	200008b0 	.word	0x200008b0

08004e6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10b      	bne.n	8004e9a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	60fb      	str	r3, [r7, #12]
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
 8004e98:	e7fd      	b.n	8004e96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	3318      	adds	r3, #24
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe fb4e 	bl	8003540 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f1c <xTaskRemoveFromEventList+0xb0>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d11d      	bne.n	8004ee8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fe fb45 	bl	8003540 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eba:	4b19      	ldr	r3, [pc, #100]	@ (8004f20 <xTaskRemoveFromEventList+0xb4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d903      	bls.n	8004eca <xTaskRemoveFromEventList+0x5e>
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec6:	4a16      	ldr	r2, [pc, #88]	@ (8004f20 <xTaskRemoveFromEventList+0xb4>)
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4a13      	ldr	r2, [pc, #76]	@ (8004f24 <xTaskRemoveFromEventList+0xb8>)
 8004ed8:	441a      	add	r2, r3
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	3304      	adds	r3, #4
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	f7fe fad0 	bl	8003486 <vListInsertEnd>
 8004ee6:	e005      	b.n	8004ef4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	3318      	adds	r3, #24
 8004eec:	4619      	mov	r1, r3
 8004eee:	480e      	ldr	r0, [pc, #56]	@ (8004f28 <xTaskRemoveFromEventList+0xbc>)
 8004ef0:	f7fe fac9 	bl	8003486 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f2c <xTaskRemoveFromEventList+0xc0>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d905      	bls.n	8004f0e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f02:	2301      	movs	r3, #1
 8004f04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f06:	4b0a      	ldr	r3, [pc, #40]	@ (8004f30 <xTaskRemoveFromEventList+0xc4>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	e001      	b.n	8004f12 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f12:	697b      	ldr	r3, [r7, #20]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000dac 	.word	0x20000dac
 8004f20:	20000d8c 	.word	0x20000d8c
 8004f24:	200008b4 	.word	0x200008b4
 8004f28:	20000d44 	.word	0x20000d44
 8004f2c:	200008b0 	.word	0x200008b0
 8004f30:	20000d98 	.word	0x20000d98

08004f34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f3c:	4b06      	ldr	r3, [pc, #24]	@ (8004f58 <vTaskInternalSetTimeOutState+0x24>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f44:	4b05      	ldr	r3, [pc, #20]	@ (8004f5c <vTaskInternalSetTimeOutState+0x28>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	605a      	str	r2, [r3, #4]
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	20000d9c 	.word	0x20000d9c
 8004f5c:	20000d88 	.word	0x20000d88

08004f60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b088      	sub	sp, #32
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10b      	bne.n	8004f88 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	613b      	str	r3, [r7, #16]
}
 8004f82:	bf00      	nop
 8004f84:	bf00      	nop
 8004f86:	e7fd      	b.n	8004f84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10b      	bne.n	8004fa6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	60fb      	str	r3, [r7, #12]
}
 8004fa0:	bf00      	nop
 8004fa2:	bf00      	nop
 8004fa4:	e7fd      	b.n	8004fa2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004fa6:	f000 ff97 	bl	8005ed8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004faa:	4b1d      	ldr	r3, [pc, #116]	@ (8005020 <xTaskCheckForTimeOut+0xc0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc2:	d102      	bne.n	8004fca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	61fb      	str	r3, [r7, #28]
 8004fc8:	e023      	b.n	8005012 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4b15      	ldr	r3, [pc, #84]	@ (8005024 <xTaskCheckForTimeOut+0xc4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d007      	beq.n	8004fe6 <xTaskCheckForTimeOut+0x86>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d302      	bcc.n	8004fe6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	61fb      	str	r3, [r7, #28]
 8004fe4:	e015      	b.n	8005012 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d20b      	bcs.n	8005008 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	1ad2      	subs	r2, r2, r3
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff ff99 	bl	8004f34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
 8005006:	e004      	b.n	8005012 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800500e:	2301      	movs	r3, #1
 8005010:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005012:	f000 ff93 	bl	8005f3c <vPortExitCritical>

	return xReturn;
 8005016:	69fb      	ldr	r3, [r7, #28]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3720      	adds	r7, #32
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20000d88 	.word	0x20000d88
 8005024:	20000d9c 	.word	0x20000d9c

08005028 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800502c:	4b03      	ldr	r3, [pc, #12]	@ (800503c <vTaskMissedYield+0x14>)
 800502e:	2201      	movs	r2, #1
 8005030:	601a      	str	r2, [r3, #0]
}
 8005032:	bf00      	nop
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	20000d98 	.word	0x20000d98

08005040 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005048:	f000 f852 	bl	80050f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800504c:	4b06      	ldr	r3, [pc, #24]	@ (8005068 <prvIdleTask+0x28>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d9f9      	bls.n	8005048 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005054:	4b05      	ldr	r3, [pc, #20]	@ (800506c <prvIdleTask+0x2c>)
 8005056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005064:	e7f0      	b.n	8005048 <prvIdleTask+0x8>
 8005066:	bf00      	nop
 8005068:	200008b4 	.word	0x200008b4
 800506c:	e000ed04 	.word	0xe000ed04

08005070 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005076:	2300      	movs	r3, #0
 8005078:	607b      	str	r3, [r7, #4]
 800507a:	e00c      	b.n	8005096 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4a12      	ldr	r2, [pc, #72]	@ (80050d0 <prvInitialiseTaskLists+0x60>)
 8005088:	4413      	add	r3, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f7fe f9ce 	bl	800342c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3301      	adds	r3, #1
 8005094:	607b      	str	r3, [r7, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b37      	cmp	r3, #55	@ 0x37
 800509a:	d9ef      	bls.n	800507c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800509c:	480d      	ldr	r0, [pc, #52]	@ (80050d4 <prvInitialiseTaskLists+0x64>)
 800509e:	f7fe f9c5 	bl	800342c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050a2:	480d      	ldr	r0, [pc, #52]	@ (80050d8 <prvInitialiseTaskLists+0x68>)
 80050a4:	f7fe f9c2 	bl	800342c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050a8:	480c      	ldr	r0, [pc, #48]	@ (80050dc <prvInitialiseTaskLists+0x6c>)
 80050aa:	f7fe f9bf 	bl	800342c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050ae:	480c      	ldr	r0, [pc, #48]	@ (80050e0 <prvInitialiseTaskLists+0x70>)
 80050b0:	f7fe f9bc 	bl	800342c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050b4:	480b      	ldr	r0, [pc, #44]	@ (80050e4 <prvInitialiseTaskLists+0x74>)
 80050b6:	f7fe f9b9 	bl	800342c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050ba:	4b0b      	ldr	r3, [pc, #44]	@ (80050e8 <prvInitialiseTaskLists+0x78>)
 80050bc:	4a05      	ldr	r2, [pc, #20]	@ (80050d4 <prvInitialiseTaskLists+0x64>)
 80050be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050c0:	4b0a      	ldr	r3, [pc, #40]	@ (80050ec <prvInitialiseTaskLists+0x7c>)
 80050c2:	4a05      	ldr	r2, [pc, #20]	@ (80050d8 <prvInitialiseTaskLists+0x68>)
 80050c4:	601a      	str	r2, [r3, #0]
}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	200008b4 	.word	0x200008b4
 80050d4:	20000d14 	.word	0x20000d14
 80050d8:	20000d28 	.word	0x20000d28
 80050dc:	20000d44 	.word	0x20000d44
 80050e0:	20000d58 	.word	0x20000d58
 80050e4:	20000d70 	.word	0x20000d70
 80050e8:	20000d3c 	.word	0x20000d3c
 80050ec:	20000d40 	.word	0x20000d40

080050f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050f6:	e019      	b.n	800512c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050f8:	f000 feee 	bl	8005ed8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050fc:	4b10      	ldr	r3, [pc, #64]	@ (8005140 <prvCheckTasksWaitingTermination+0x50>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3304      	adds	r3, #4
 8005108:	4618      	mov	r0, r3
 800510a:	f7fe fa19 	bl	8003540 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800510e:	4b0d      	ldr	r3, [pc, #52]	@ (8005144 <prvCheckTasksWaitingTermination+0x54>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3b01      	subs	r3, #1
 8005114:	4a0b      	ldr	r2, [pc, #44]	@ (8005144 <prvCheckTasksWaitingTermination+0x54>)
 8005116:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005118:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <prvCheckTasksWaitingTermination+0x58>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3b01      	subs	r3, #1
 800511e:	4a0a      	ldr	r2, [pc, #40]	@ (8005148 <prvCheckTasksWaitingTermination+0x58>)
 8005120:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005122:	f000 ff0b 	bl	8005f3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f810 	bl	800514c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800512c:	4b06      	ldr	r3, [pc, #24]	@ (8005148 <prvCheckTasksWaitingTermination+0x58>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e1      	bne.n	80050f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000d58 	.word	0x20000d58
 8005144:	20000d84 	.word	0x20000d84
 8005148:	20000d6c 	.word	0x20000d6c

0800514c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3354      	adds	r3, #84	@ 0x54
 8005158:	4618      	mov	r0, r3
 800515a:	f001 f9d5 	bl	8006508 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005164:	2b00      	cmp	r3, #0
 8005166:	d108      	bne.n	800517a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516c:	4618      	mov	r0, r3
 800516e:	f001 f8a3 	bl	80062b8 <vPortFree>
				vPortFree( pxTCB );
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f001 f8a0 	bl	80062b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005178:	e019      	b.n	80051ae <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005180:	2b01      	cmp	r3, #1
 8005182:	d103      	bne.n	800518c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f001 f897 	bl	80062b8 <vPortFree>
	}
 800518a:	e010      	b.n	80051ae <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005192:	2b02      	cmp	r3, #2
 8005194:	d00b      	beq.n	80051ae <prvDeleteTCB+0x62>
	__asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	60fb      	str	r3, [r7, #12]
}
 80051a8:	bf00      	nop
 80051aa:	bf00      	nop
 80051ac:	e7fd      	b.n	80051aa <prvDeleteTCB+0x5e>
	}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051be:	4b0c      	ldr	r3, [pc, #48]	@ (80051f0 <prvResetNextTaskUnblockTime+0x38>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d104      	bne.n	80051d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051c8:	4b0a      	ldr	r3, [pc, #40]	@ (80051f4 <prvResetNextTaskUnblockTime+0x3c>)
 80051ca:	f04f 32ff 	mov.w	r2, #4294967295
 80051ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051d0:	e008      	b.n	80051e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051d2:	4b07      	ldr	r3, [pc, #28]	@ (80051f0 <prvResetNextTaskUnblockTime+0x38>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4a04      	ldr	r2, [pc, #16]	@ (80051f4 <prvResetNextTaskUnblockTime+0x3c>)
 80051e2:	6013      	str	r3, [r2, #0]
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	20000d3c 	.word	0x20000d3c
 80051f4:	20000da4 	.word	0x20000da4

080051f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051fe:	4b0b      	ldr	r3, [pc, #44]	@ (800522c <xTaskGetSchedulerState+0x34>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d102      	bne.n	800520c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005206:	2301      	movs	r3, #1
 8005208:	607b      	str	r3, [r7, #4]
 800520a:	e008      	b.n	800521e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800520c:	4b08      	ldr	r3, [pc, #32]	@ (8005230 <xTaskGetSchedulerState+0x38>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d102      	bne.n	800521a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005214:	2302      	movs	r3, #2
 8005216:	607b      	str	r3, [r7, #4]
 8005218:	e001      	b.n	800521e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800521a:	2300      	movs	r3, #0
 800521c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800521e:	687b      	ldr	r3, [r7, #4]
	}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	20000d90 	.word	0x20000d90
 8005230:	20000dac 	.word	0x20000dac

08005234 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d051      	beq.n	80052ee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800524e:	4b2a      	ldr	r3, [pc, #168]	@ (80052f8 <xTaskPriorityInherit+0xc4>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005254:	429a      	cmp	r2, r3
 8005256:	d241      	bcs.n	80052dc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	2b00      	cmp	r3, #0
 800525e:	db06      	blt.n	800526e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005260:	4b25      	ldr	r3, [pc, #148]	@ (80052f8 <xTaskPriorityInherit+0xc4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005266:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	6959      	ldr	r1, [r3, #20]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4a1f      	ldr	r2, [pc, #124]	@ (80052fc <xTaskPriorityInherit+0xc8>)
 8005280:	4413      	add	r3, r2
 8005282:	4299      	cmp	r1, r3
 8005284:	d122      	bne.n	80052cc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	3304      	adds	r3, #4
 800528a:	4618      	mov	r0, r3
 800528c:	f7fe f958 	bl	8003540 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005290:	4b19      	ldr	r3, [pc, #100]	@ (80052f8 <xTaskPriorityInherit+0xc4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800529e:	4b18      	ldr	r3, [pc, #96]	@ (8005300 <xTaskPriorityInherit+0xcc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d903      	bls.n	80052ae <xTaskPriorityInherit+0x7a>
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052aa:	4a15      	ldr	r2, [pc, #84]	@ (8005300 <xTaskPriorityInherit+0xcc>)
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4a10      	ldr	r2, [pc, #64]	@ (80052fc <xTaskPriorityInherit+0xc8>)
 80052bc:	441a      	add	r2, r3
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	3304      	adds	r3, #4
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f7fe f8de 	bl	8003486 <vListInsertEnd>
 80052ca:	e004      	b.n	80052d6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052cc:	4b0a      	ldr	r3, [pc, #40]	@ (80052f8 <xTaskPriorityInherit+0xc4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80052d6:	2301      	movs	r3, #1
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	e008      	b.n	80052ee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052e0:	4b05      	ldr	r3, [pc, #20]	@ (80052f8 <xTaskPriorityInherit+0xc4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d201      	bcs.n	80052ee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80052ea:	2301      	movs	r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052ee:	68fb      	ldr	r3, [r7, #12]
	}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	200008b0 	.word	0x200008b0
 80052fc:	200008b4 	.word	0x200008b4
 8005300:	20000d8c 	.word	0x20000d8c

08005304 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d058      	beq.n	80053cc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800531a:	4b2f      	ldr	r3, [pc, #188]	@ (80053d8 <xTaskPriorityDisinherit+0xd4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	429a      	cmp	r2, r3
 8005322:	d00b      	beq.n	800533c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	60fb      	str	r3, [r7, #12]
}
 8005336:	bf00      	nop
 8005338:	bf00      	nop
 800533a:	e7fd      	b.n	8005338 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10b      	bne.n	800535c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	60bb      	str	r3, [r7, #8]
}
 8005356:	bf00      	nop
 8005358:	bf00      	nop
 800535a:	e7fd      	b.n	8005358 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005360:	1e5a      	subs	r2, r3, #1
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800536e:	429a      	cmp	r2, r3
 8005370:	d02c      	beq.n	80053cc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005376:	2b00      	cmp	r3, #0
 8005378:	d128      	bne.n	80053cc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	3304      	adds	r3, #4
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe f8de 	bl	8003540 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005390:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800539c:	4b0f      	ldr	r3, [pc, #60]	@ (80053dc <xTaskPriorityDisinherit+0xd8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d903      	bls.n	80053ac <xTaskPriorityDisinherit+0xa8>
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a8:	4a0c      	ldr	r2, [pc, #48]	@ (80053dc <xTaskPriorityDisinherit+0xd8>)
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4a09      	ldr	r2, [pc, #36]	@ (80053e0 <xTaskPriorityDisinherit+0xdc>)
 80053ba:	441a      	add	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	3304      	adds	r3, #4
 80053c0:	4619      	mov	r1, r3
 80053c2:	4610      	mov	r0, r2
 80053c4:	f7fe f85f 	bl	8003486 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80053c8:	2301      	movs	r3, #1
 80053ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053cc:	697b      	ldr	r3, [r7, #20]
	}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	200008b0 	.word	0x200008b0
 80053dc:	20000d8c 	.word	0x20000d8c
 80053e0:	200008b4 	.word	0x200008b4

080053e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b088      	sub	sp, #32
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80053f2:	2301      	movs	r3, #1
 80053f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d06c      	beq.n	80054d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	60fb      	str	r3, [r7, #12]
}
 8005416:	bf00      	nop
 8005418:	bf00      	nop
 800541a:	e7fd      	b.n	8005418 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d902      	bls.n	800542c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	61fb      	str	r3, [r7, #28]
 800542a:	e002      	b.n	8005432 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005430:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	429a      	cmp	r2, r3
 800543a:	d04c      	beq.n	80054d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	429a      	cmp	r2, r3
 8005444:	d147      	bne.n	80054d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005446:	4b26      	ldr	r3, [pc, #152]	@ (80054e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	429a      	cmp	r2, r3
 800544e:	d10b      	bne.n	8005468 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	60bb      	str	r3, [r7, #8]
}
 8005462:	bf00      	nop
 8005464:	bf00      	nop
 8005466:	e7fd      	b.n	8005464 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	db04      	blt.n	8005486 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	6959      	ldr	r1, [r3, #20]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4a13      	ldr	r2, [pc, #76]	@ (80054e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005496:	4413      	add	r3, r2
 8005498:	4299      	cmp	r1, r3
 800549a:	d11c      	bne.n	80054d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	3304      	adds	r3, #4
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fe f84d 	bl	8003540 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054aa:	4b0f      	ldr	r3, [pc, #60]	@ (80054e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d903      	bls.n	80054ba <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b6:	4a0c      	ldr	r2, [pc, #48]	@ (80054e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054be:	4613      	mov	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4a07      	ldr	r2, [pc, #28]	@ (80054e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80054c8:	441a      	add	r2, r3
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	3304      	adds	r3, #4
 80054ce:	4619      	mov	r1, r3
 80054d0:	4610      	mov	r0, r2
 80054d2:	f7fd ffd8 	bl	8003486 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054d6:	bf00      	nop
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	200008b0 	.word	0x200008b0
 80054e4:	200008b4 	.word	0x200008b4
 80054e8:	20000d8c 	.word	0x20000d8c

080054ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80054f0:	4b07      	ldr	r3, [pc, #28]	@ (8005510 <pvTaskIncrementMutexHeldCount+0x24>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d004      	beq.n	8005502 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80054f8:	4b05      	ldr	r3, [pc, #20]	@ (8005510 <pvTaskIncrementMutexHeldCount+0x24>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054fe:	3201      	adds	r2, #1
 8005500:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005502:	4b03      	ldr	r3, [pc, #12]	@ (8005510 <pvTaskIncrementMutexHeldCount+0x24>)
 8005504:	681b      	ldr	r3, [r3, #0]
	}
 8005506:	4618      	mov	r0, r3
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	200008b0 	.word	0x200008b0

08005514 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800551e:	4b21      	ldr	r3, [pc, #132]	@ (80055a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005524:	4b20      	ldr	r3, [pc, #128]	@ (80055a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3304      	adds	r3, #4
 800552a:	4618      	mov	r0, r3
 800552c:	f7fe f808 	bl	8003540 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d10a      	bne.n	800554e <prvAddCurrentTaskToDelayedList+0x3a>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800553e:	4b1a      	ldr	r3, [pc, #104]	@ (80055a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3304      	adds	r3, #4
 8005544:	4619      	mov	r1, r3
 8005546:	4819      	ldr	r0, [pc, #100]	@ (80055ac <prvAddCurrentTaskToDelayedList+0x98>)
 8005548:	f7fd ff9d 	bl	8003486 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800554c:	e026      	b.n	800559c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4413      	add	r3, r2
 8005554:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005556:	4b14      	ldr	r3, [pc, #80]	@ (80055a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	429a      	cmp	r2, r3
 8005564:	d209      	bcs.n	800557a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005566:	4b12      	ldr	r3, [pc, #72]	@ (80055b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4b0f      	ldr	r3, [pc, #60]	@ (80055a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3304      	adds	r3, #4
 8005570:	4619      	mov	r1, r3
 8005572:	4610      	mov	r0, r2
 8005574:	f7fd ffab 	bl	80034ce <vListInsert>
}
 8005578:	e010      	b.n	800559c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800557a:	4b0e      	ldr	r3, [pc, #56]	@ (80055b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4b0a      	ldr	r3, [pc, #40]	@ (80055a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3304      	adds	r3, #4
 8005584:	4619      	mov	r1, r3
 8005586:	4610      	mov	r0, r2
 8005588:	f7fd ffa1 	bl	80034ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800558c:	4b0a      	ldr	r3, [pc, #40]	@ (80055b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	429a      	cmp	r2, r3
 8005594:	d202      	bcs.n	800559c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005596:	4a08      	ldr	r2, [pc, #32]	@ (80055b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	6013      	str	r3, [r2, #0]
}
 800559c:	bf00      	nop
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	20000d88 	.word	0x20000d88
 80055a8:	200008b0 	.word	0x200008b0
 80055ac:	20000d70 	.word	0x20000d70
 80055b0:	20000d40 	.word	0x20000d40
 80055b4:	20000d3c 	.word	0x20000d3c
 80055b8:	20000da4 	.word	0x20000da4

080055bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08a      	sub	sp, #40	@ 0x28
 80055c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80055c6:	f000 fb13 	bl	8005bf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80055ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005640 <xTimerCreateTimerTask+0x84>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d021      	beq.n	8005616 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80055da:	1d3a      	adds	r2, r7, #4
 80055dc:	f107 0108 	add.w	r1, r7, #8
 80055e0:	f107 030c 	add.w	r3, r7, #12
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fd ff07 	bl	80033f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	9202      	str	r2, [sp, #8]
 80055f2:	9301      	str	r3, [sp, #4]
 80055f4:	2302      	movs	r3, #2
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	2300      	movs	r3, #0
 80055fa:	460a      	mov	r2, r1
 80055fc:	4911      	ldr	r1, [pc, #68]	@ (8005644 <xTimerCreateTimerTask+0x88>)
 80055fe:	4812      	ldr	r0, [pc, #72]	@ (8005648 <xTimerCreateTimerTask+0x8c>)
 8005600:	f7fe ffa2 	bl	8004548 <xTaskCreateStatic>
 8005604:	4603      	mov	r3, r0
 8005606:	4a11      	ldr	r2, [pc, #68]	@ (800564c <xTimerCreateTimerTask+0x90>)
 8005608:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800560a:	4b10      	ldr	r3, [pc, #64]	@ (800564c <xTimerCreateTimerTask+0x90>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005612:	2301      	movs	r3, #1
 8005614:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10b      	bne.n	8005634 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	613b      	str	r3, [r7, #16]
}
 800562e:	bf00      	nop
 8005630:	bf00      	nop
 8005632:	e7fd      	b.n	8005630 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005634:	697b      	ldr	r3, [r7, #20]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	20000de0 	.word	0x20000de0
 8005644:	08006774 	.word	0x08006774
 8005648:	08005789 	.word	0x08005789
 800564c:	20000de4 	.word	0x20000de4

08005650 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08a      	sub	sp, #40	@ 0x28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800565e:	2300      	movs	r3, #0
 8005660:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <xTimerGenericCommand+0x30>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	623b      	str	r3, [r7, #32]
}
 800567a:	bf00      	nop
 800567c:	bf00      	nop
 800567e:	e7fd      	b.n	800567c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005680:	4b19      	ldr	r3, [pc, #100]	@ (80056e8 <xTimerGenericCommand+0x98>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d02a      	beq.n	80056de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b05      	cmp	r3, #5
 8005698:	dc18      	bgt.n	80056cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800569a:	f7ff fdad 	bl	80051f8 <xTaskGetSchedulerState>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d109      	bne.n	80056b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80056a4:	4b10      	ldr	r3, [pc, #64]	@ (80056e8 <xTimerGenericCommand+0x98>)
 80056a6:	6818      	ldr	r0, [r3, #0]
 80056a8:	f107 0110 	add.w	r1, r7, #16
 80056ac:	2300      	movs	r3, #0
 80056ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056b0:	f7fe f924 	bl	80038fc <xQueueGenericSend>
 80056b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80056b6:	e012      	b.n	80056de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80056b8:	4b0b      	ldr	r3, [pc, #44]	@ (80056e8 <xTimerGenericCommand+0x98>)
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	f107 0110 	add.w	r1, r7, #16
 80056c0:	2300      	movs	r3, #0
 80056c2:	2200      	movs	r2, #0
 80056c4:	f7fe f91a 	bl	80038fc <xQueueGenericSend>
 80056c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80056ca:	e008      	b.n	80056de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80056cc:	4b06      	ldr	r3, [pc, #24]	@ (80056e8 <xTimerGenericCommand+0x98>)
 80056ce:	6818      	ldr	r0, [r3, #0]
 80056d0:	f107 0110 	add.w	r1, r7, #16
 80056d4:	2300      	movs	r3, #0
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	f7fe fa12 	bl	8003b00 <xQueueGenericSendFromISR>
 80056dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3728      	adds	r7, #40	@ 0x28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20000de0 	.word	0x20000de0

080056ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af02      	add	r7, sp, #8
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056f6:	4b23      	ldr	r3, [pc, #140]	@ (8005784 <prvProcessExpiredTimer+0x98>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	3304      	adds	r3, #4
 8005704:	4618      	mov	r0, r3
 8005706:	f7fd ff1b 	bl	8003540 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d023      	beq.n	8005760 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	699a      	ldr	r2, [r3, #24]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	18d1      	adds	r1, r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	6978      	ldr	r0, [r7, #20]
 8005726:	f000 f8d5 	bl	80058d4 <prvInsertTimerInActiveList>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d020      	beq.n	8005772 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005730:	2300      	movs	r3, #0
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	2300      	movs	r3, #0
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	2100      	movs	r1, #0
 800573a:	6978      	ldr	r0, [r7, #20]
 800573c:	f7ff ff88 	bl	8005650 <xTimerGenericCommand>
 8005740:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d114      	bne.n	8005772 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	60fb      	str	r3, [r7, #12]
}
 800575a:	bf00      	nop
 800575c:	bf00      	nop
 800575e:	e7fd      	b.n	800575c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005766:	f023 0301 	bic.w	r3, r3, #1
 800576a:	b2da      	uxtb	r2, r3
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	6978      	ldr	r0, [r7, #20]
 8005778:	4798      	blx	r3
}
 800577a:	bf00      	nop
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20000dd8 	.word	0x20000dd8

08005788 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005790:	f107 0308 	add.w	r3, r7, #8
 8005794:	4618      	mov	r0, r3
 8005796:	f000 f859 	bl	800584c <prvGetNextExpireTime>
 800579a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4619      	mov	r1, r3
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 f805 	bl	80057b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80057a6:	f000 f8d7 	bl	8005958 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057aa:	bf00      	nop
 80057ac:	e7f0      	b.n	8005790 <prvTimerTask+0x8>
	...

080057b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80057ba:	f7ff f929 	bl	8004a10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057be:	f107 0308 	add.w	r3, r7, #8
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 f866 	bl	8005894 <prvSampleTimeNow>
 80057c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d130      	bne.n	8005832 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <prvProcessTimerOrBlockTask+0x3c>
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d806      	bhi.n	80057ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80057de:	f7ff f925 	bl	8004a2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80057e2:	68f9      	ldr	r1, [r7, #12]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff ff81 	bl	80056ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80057ea:	e024      	b.n	8005836 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d008      	beq.n	8005804 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80057f2:	4b13      	ldr	r3, [pc, #76]	@ (8005840 <prvProcessTimerOrBlockTask+0x90>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <prvProcessTimerOrBlockTask+0x50>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <prvProcessTimerOrBlockTask+0x52>
 8005800:	2300      	movs	r3, #0
 8005802:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005804:	4b0f      	ldr	r3, [pc, #60]	@ (8005844 <prvProcessTimerOrBlockTask+0x94>)
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	4619      	mov	r1, r3
 8005812:	f7fe fe65 	bl	80044e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005816:	f7ff f909 	bl	8004a2c <xTaskResumeAll>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005820:	4b09      	ldr	r3, [pc, #36]	@ (8005848 <prvProcessTimerOrBlockTask+0x98>)
 8005822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
}
 8005830:	e001      	b.n	8005836 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005832:	f7ff f8fb 	bl	8004a2c <xTaskResumeAll>
}
 8005836:	bf00      	nop
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000ddc 	.word	0x20000ddc
 8005844:	20000de0 	.word	0x20000de0
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005854:	4b0e      	ldr	r3, [pc, #56]	@ (8005890 <prvGetNextExpireTime+0x44>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <prvGetNextExpireTime+0x16>
 800585e:	2201      	movs	r2, #1
 8005860:	e000      	b.n	8005864 <prvGetNextExpireTime+0x18>
 8005862:	2200      	movs	r2, #0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d105      	bne.n	800587c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005870:	4b07      	ldr	r3, [pc, #28]	@ (8005890 <prvGetNextExpireTime+0x44>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	e001      	b.n	8005880 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005880:	68fb      	ldr	r3, [r7, #12]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	20000dd8 	.word	0x20000dd8

08005894 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800589c:	f7ff f964 	bl	8004b68 <xTaskGetTickCount>
 80058a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80058a2:	4b0b      	ldr	r3, [pc, #44]	@ (80058d0 <prvSampleTimeNow+0x3c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d205      	bcs.n	80058b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80058ac:	f000 f93a 	bl	8005b24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	e002      	b.n	80058be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80058be:	4a04      	ldr	r2, [pc, #16]	@ (80058d0 <prvSampleTimeNow+0x3c>)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80058c4:	68fb      	ldr	r3, [r7, #12]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000de8 	.word	0x20000de8

080058d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d812      	bhi.n	8005920 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	1ad2      	subs	r2, r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	429a      	cmp	r2, r3
 8005906:	d302      	bcc.n	800590e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005908:	2301      	movs	r3, #1
 800590a:	617b      	str	r3, [r7, #20]
 800590c:	e01b      	b.n	8005946 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800590e:	4b10      	ldr	r3, [pc, #64]	@ (8005950 <prvInsertTimerInActiveList+0x7c>)
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3304      	adds	r3, #4
 8005916:	4619      	mov	r1, r3
 8005918:	4610      	mov	r0, r2
 800591a:	f7fd fdd8 	bl	80034ce <vListInsert>
 800591e:	e012      	b.n	8005946 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d206      	bcs.n	8005936 <prvInsertTimerInActiveList+0x62>
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d302      	bcc.n	8005936 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005930:	2301      	movs	r3, #1
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	e007      	b.n	8005946 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005936:	4b07      	ldr	r3, [pc, #28]	@ (8005954 <prvInsertTimerInActiveList+0x80>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3304      	adds	r3, #4
 800593e:	4619      	mov	r1, r3
 8005940:	4610      	mov	r0, r2
 8005942:	f7fd fdc4 	bl	80034ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005946:	697b      	ldr	r3, [r7, #20]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20000ddc 	.word	0x20000ddc
 8005954:	20000dd8 	.word	0x20000dd8

08005958 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08e      	sub	sp, #56	@ 0x38
 800595c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800595e:	e0ce      	b.n	8005afe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	da19      	bge.n	800599a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005966:	1d3b      	adds	r3, r7, #4
 8005968:	3304      	adds	r3, #4
 800596a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800596c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10b      	bne.n	800598a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	61fb      	str	r3, [r7, #28]
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop
 8005988:	e7fd      	b.n	8005986 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800598a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005990:	6850      	ldr	r0, [r2, #4]
 8005992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005994:	6892      	ldr	r2, [r2, #8]
 8005996:	4611      	mov	r1, r2
 8005998:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	f2c0 80ae 	blt.w	8005afe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80059a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d004      	beq.n	80059b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b0:	3304      	adds	r3, #4
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fd fdc4 	bl	8003540 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059b8:	463b      	mov	r3, r7
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff ff6a 	bl	8005894 <prvSampleTimeNow>
 80059c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b09      	cmp	r3, #9
 80059c6:	f200 8097 	bhi.w	8005af8 <prvProcessReceivedCommands+0x1a0>
 80059ca:	a201      	add	r2, pc, #4	@ (adr r2, 80059d0 <prvProcessReceivedCommands+0x78>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	080059f9 	.word	0x080059f9
 80059d4:	080059f9 	.word	0x080059f9
 80059d8:	080059f9 	.word	0x080059f9
 80059dc:	08005a6f 	.word	0x08005a6f
 80059e0:	08005a83 	.word	0x08005a83
 80059e4:	08005acf 	.word	0x08005acf
 80059e8:	080059f9 	.word	0x080059f9
 80059ec:	080059f9 	.word	0x080059f9
 80059f0:	08005a6f 	.word	0x08005a6f
 80059f4:	08005a83 	.word	0x08005a83
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	18d1      	adds	r1, r2, r3
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a18:	f7ff ff5c 	bl	80058d4 <prvInsertTimerInActiveList>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d06c      	beq.n	8005afc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d061      	beq.n	8005afc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	441a      	add	r2, r3
 8005a40:	2300      	movs	r3, #0
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	2300      	movs	r3, #0
 8005a46:	2100      	movs	r1, #0
 8005a48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a4a:	f7ff fe01 	bl	8005650 <xTimerGenericCommand>
 8005a4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d152      	bne.n	8005afc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	61bb      	str	r3, [r7, #24]
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	e7fd      	b.n	8005a6a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a74:	f023 0301 	bic.w	r3, r3, #1
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005a80:	e03d      	b.n	8005afe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10b      	bne.n	8005aba <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	617b      	str	r3, [r7, #20]
}
 8005ab4:	bf00      	nop
 8005ab6:	bf00      	nop
 8005ab8:	e7fd      	b.n	8005ab6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abc:	699a      	ldr	r2, [r3, #24]
 8005abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac0:	18d1      	adds	r1, r2, r3
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ac8:	f7ff ff04 	bl	80058d4 <prvInsertTimerInActiveList>
					break;
 8005acc:	e017      	b.n	8005afe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d103      	bne.n	8005ae4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005adc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ade:	f000 fbeb 	bl	80062b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005ae2:	e00c      	b.n	8005afe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005aea:	f023 0301 	bic.w	r3, r3, #1
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005af6:	e002      	b.n	8005afe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005af8:	bf00      	nop
 8005afa:	e000      	b.n	8005afe <prvProcessReceivedCommands+0x1a6>
					break;
 8005afc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005afe:	4b08      	ldr	r3, [pc, #32]	@ (8005b20 <prvProcessReceivedCommands+0x1c8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	1d39      	adds	r1, r7, #4
 8005b04:	2200      	movs	r2, #0
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fe f898 	bl	8003c3c <xQueueReceive>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f47f af26 	bne.w	8005960 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
 8005b18:	3730      	adds	r7, #48	@ 0x30
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	20000de0 	.word	0x20000de0

08005b24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b088      	sub	sp, #32
 8005b28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b2a:	e049      	b.n	8005bc0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8005be8 <prvSwitchTimerLists+0xc4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b36:	4b2c      	ldr	r3, [pc, #176]	@ (8005be8 <prvSwitchTimerLists+0xc4>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3304      	adds	r3, #4
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fd fcfb 	bl	8003540 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d02f      	beq.n	8005bc0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4413      	add	r3, r2
 8005b68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d90e      	bls.n	8005b90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005be8 <prvSwitchTimerLists+0xc4>)
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3304      	adds	r3, #4
 8005b86:	4619      	mov	r1, r3
 8005b88:	4610      	mov	r0, r2
 8005b8a:	f7fd fca0 	bl	80034ce <vListInsert>
 8005b8e:	e017      	b.n	8005bc0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b90:	2300      	movs	r3, #0
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	2300      	movs	r3, #0
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	2100      	movs	r1, #0
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f7ff fd58 	bl	8005650 <xTimerGenericCommand>
 8005ba0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10b      	bne.n	8005bc0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	603b      	str	r3, [r7, #0]
}
 8005bba:	bf00      	nop
 8005bbc:	bf00      	nop
 8005bbe:	e7fd      	b.n	8005bbc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bc0:	4b09      	ldr	r3, [pc, #36]	@ (8005be8 <prvSwitchTimerLists+0xc4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1b0      	bne.n	8005b2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005bca:	4b07      	ldr	r3, [pc, #28]	@ (8005be8 <prvSwitchTimerLists+0xc4>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005bd0:	4b06      	ldr	r3, [pc, #24]	@ (8005bec <prvSwitchTimerLists+0xc8>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a04      	ldr	r2, [pc, #16]	@ (8005be8 <prvSwitchTimerLists+0xc4>)
 8005bd6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005bd8:	4a04      	ldr	r2, [pc, #16]	@ (8005bec <prvSwitchTimerLists+0xc8>)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	6013      	str	r3, [r2, #0]
}
 8005bde:	bf00      	nop
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000dd8 	.word	0x20000dd8
 8005bec:	20000ddc 	.word	0x20000ddc

08005bf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005bf6:	f000 f96f 	bl	8005ed8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005bfa:	4b15      	ldr	r3, [pc, #84]	@ (8005c50 <prvCheckForValidListAndQueue+0x60>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d120      	bne.n	8005c44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c02:	4814      	ldr	r0, [pc, #80]	@ (8005c54 <prvCheckForValidListAndQueue+0x64>)
 8005c04:	f7fd fc12 	bl	800342c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c08:	4813      	ldr	r0, [pc, #76]	@ (8005c58 <prvCheckForValidListAndQueue+0x68>)
 8005c0a:	f7fd fc0f 	bl	800342c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c0e:	4b13      	ldr	r3, [pc, #76]	@ (8005c5c <prvCheckForValidListAndQueue+0x6c>)
 8005c10:	4a10      	ldr	r2, [pc, #64]	@ (8005c54 <prvCheckForValidListAndQueue+0x64>)
 8005c12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c14:	4b12      	ldr	r3, [pc, #72]	@ (8005c60 <prvCheckForValidListAndQueue+0x70>)
 8005c16:	4a10      	ldr	r2, [pc, #64]	@ (8005c58 <prvCheckForValidListAndQueue+0x68>)
 8005c18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	4b11      	ldr	r3, [pc, #68]	@ (8005c64 <prvCheckForValidListAndQueue+0x74>)
 8005c20:	4a11      	ldr	r2, [pc, #68]	@ (8005c68 <prvCheckForValidListAndQueue+0x78>)
 8005c22:	2110      	movs	r1, #16
 8005c24:	200a      	movs	r0, #10
 8005c26:	f7fd fd1f 	bl	8003668 <xQueueGenericCreateStatic>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	4a08      	ldr	r2, [pc, #32]	@ (8005c50 <prvCheckForValidListAndQueue+0x60>)
 8005c2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c30:	4b07      	ldr	r3, [pc, #28]	@ (8005c50 <prvCheckForValidListAndQueue+0x60>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c38:	4b05      	ldr	r3, [pc, #20]	@ (8005c50 <prvCheckForValidListAndQueue+0x60>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	490b      	ldr	r1, [pc, #44]	@ (8005c6c <prvCheckForValidListAndQueue+0x7c>)
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fe fbfa 	bl	8004438 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c44:	f000 f97a 	bl	8005f3c <vPortExitCritical>
}
 8005c48:	bf00      	nop
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20000de0 	.word	0x20000de0
 8005c54:	20000db0 	.word	0x20000db0
 8005c58:	20000dc4 	.word	0x20000dc4
 8005c5c:	20000dd8 	.word	0x20000dd8
 8005c60:	20000ddc 	.word	0x20000ddc
 8005c64:	20000e8c 	.word	0x20000e8c
 8005c68:	20000dec 	.word	0x20000dec
 8005c6c:	0800677c 	.word	0x0800677c

08005c70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3b04      	subs	r3, #4
 8005c80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3b04      	subs	r3, #4
 8005c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f023 0201 	bic.w	r2, r3, #1
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3b04      	subs	r3, #4
 8005c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8005cd4 <pxPortInitialiseStack+0x64>)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3b14      	subs	r3, #20
 8005caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3b04      	subs	r3, #4
 8005cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f06f 0202 	mvn.w	r2, #2
 8005cbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3b20      	subs	r3, #32
 8005cc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	08005cd9 	.word	0x08005cd9

08005cd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ce2:	4b13      	ldr	r3, [pc, #76]	@ (8005d30 <prvTaskExitError+0x58>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cea:	d00b      	beq.n	8005d04 <prvTaskExitError+0x2c>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	60fb      	str	r3, [r7, #12]
}
 8005cfe:	bf00      	nop
 8005d00:	bf00      	nop
 8005d02:	e7fd      	b.n	8005d00 <prvTaskExitError+0x28>
	__asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	60bb      	str	r3, [r7, #8]
}
 8005d16:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d18:	bf00      	nop
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0fc      	beq.n	8005d1a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d20:	bf00      	nop
 8005d22:	bf00      	nop
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	2000000c 	.word	0x2000000c
	...

08005d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d40:	4b07      	ldr	r3, [pc, #28]	@ (8005d60 <pxCurrentTCBConst2>)
 8005d42:	6819      	ldr	r1, [r3, #0]
 8005d44:	6808      	ldr	r0, [r1, #0]
 8005d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4a:	f380 8809 	msr	PSP, r0
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f04f 0000 	mov.w	r0, #0
 8005d56:	f380 8811 	msr	BASEPRI, r0
 8005d5a:	4770      	bx	lr
 8005d5c:	f3af 8000 	nop.w

08005d60 <pxCurrentTCBConst2>:
 8005d60:	200008b0 	.word	0x200008b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop

08005d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d68:	4808      	ldr	r0, [pc, #32]	@ (8005d8c <prvPortStartFirstTask+0x24>)
 8005d6a:	6800      	ldr	r0, [r0, #0]
 8005d6c:	6800      	ldr	r0, [r0, #0]
 8005d6e:	f380 8808 	msr	MSP, r0
 8005d72:	f04f 0000 	mov.w	r0, #0
 8005d76:	f380 8814 	msr	CONTROL, r0
 8005d7a:	b662      	cpsie	i
 8005d7c:	b661      	cpsie	f
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	df00      	svc	0
 8005d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d8a:	bf00      	nop
 8005d8c:	e000ed08 	.word	0xe000ed08

08005d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d96:	4b47      	ldr	r3, [pc, #284]	@ (8005eb4 <xPortStartScheduler+0x124>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a47      	ldr	r2, [pc, #284]	@ (8005eb8 <xPortStartScheduler+0x128>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d10b      	bne.n	8005db8 <xPortStartScheduler+0x28>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	60fb      	str	r3, [r7, #12]
}
 8005db2:	bf00      	nop
 8005db4:	bf00      	nop
 8005db6:	e7fd      	b.n	8005db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005db8:	4b3e      	ldr	r3, [pc, #248]	@ (8005eb4 <xPortStartScheduler+0x124>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a3f      	ldr	r2, [pc, #252]	@ (8005ebc <xPortStartScheduler+0x12c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d10b      	bne.n	8005dda <xPortStartScheduler+0x4a>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	613b      	str	r3, [r7, #16]
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	e7fd      	b.n	8005dd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005dda:	4b39      	ldr	r3, [pc, #228]	@ (8005ec0 <xPortStartScheduler+0x130>)
 8005ddc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	22ff      	movs	r2, #255	@ 0xff
 8005dea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	4b31      	ldr	r3, [pc, #196]	@ (8005ec4 <xPortStartScheduler+0x134>)
 8005e00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e02:	4b31      	ldr	r3, [pc, #196]	@ (8005ec8 <xPortStartScheduler+0x138>)
 8005e04:	2207      	movs	r2, #7
 8005e06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e08:	e009      	b.n	8005e1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005ec8 <xPortStartScheduler+0x138>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	4a2d      	ldr	r2, [pc, #180]	@ (8005ec8 <xPortStartScheduler+0x138>)
 8005e12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e1e:	78fb      	ldrb	r3, [r7, #3]
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e26:	2b80      	cmp	r3, #128	@ 0x80
 8005e28:	d0ef      	beq.n	8005e0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e2a:	4b27      	ldr	r3, [pc, #156]	@ (8005ec8 <xPortStartScheduler+0x138>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f1c3 0307 	rsb	r3, r3, #7
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d00b      	beq.n	8005e4e <xPortStartScheduler+0xbe>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	60bb      	str	r3, [r7, #8]
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	e7fd      	b.n	8005e4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ec8 <xPortStartScheduler+0x138>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	4a1c      	ldr	r2, [pc, #112]	@ (8005ec8 <xPortStartScheduler+0x138>)
 8005e56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e58:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec8 <xPortStartScheduler+0x138>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e60:	4a19      	ldr	r2, [pc, #100]	@ (8005ec8 <xPortStartScheduler+0x138>)
 8005e62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e6c:	4b17      	ldr	r3, [pc, #92]	@ (8005ecc <xPortStartScheduler+0x13c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a16      	ldr	r2, [pc, #88]	@ (8005ecc <xPortStartScheduler+0x13c>)
 8005e72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e78:	4b14      	ldr	r3, [pc, #80]	@ (8005ecc <xPortStartScheduler+0x13c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a13      	ldr	r2, [pc, #76]	@ (8005ecc <xPortStartScheduler+0x13c>)
 8005e7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005e82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e84:	f000 f8da 	bl	800603c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e88:	4b11      	ldr	r3, [pc, #68]	@ (8005ed0 <xPortStartScheduler+0x140>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e8e:	f000 f8f9 	bl	8006084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e92:	4b10      	ldr	r3, [pc, #64]	@ (8005ed4 <xPortStartScheduler+0x144>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a0f      	ldr	r2, [pc, #60]	@ (8005ed4 <xPortStartScheduler+0x144>)
 8005e98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005e9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e9e:	f7ff ff63 	bl	8005d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ea2:	f7fe ff2b 	bl	8004cfc <vTaskSwitchContext>
	prvTaskExitError();
 8005ea6:	f7ff ff17 	bl	8005cd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	e000ed00 	.word	0xe000ed00
 8005eb8:	410fc271 	.word	0x410fc271
 8005ebc:	410fc270 	.word	0x410fc270
 8005ec0:	e000e400 	.word	0xe000e400
 8005ec4:	20000edc 	.word	0x20000edc
 8005ec8:	20000ee0 	.word	0x20000ee0
 8005ecc:	e000ed20 	.word	0xe000ed20
 8005ed0:	2000000c 	.word	0x2000000c
 8005ed4:	e000ef34 	.word	0xe000ef34

08005ed8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	607b      	str	r3, [r7, #4]
}
 8005ef0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ef2:	4b10      	ldr	r3, [pc, #64]	@ (8005f34 <vPortEnterCritical+0x5c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	4a0e      	ldr	r2, [pc, #56]	@ (8005f34 <vPortEnterCritical+0x5c>)
 8005efa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005efc:	4b0d      	ldr	r3, [pc, #52]	@ (8005f34 <vPortEnterCritical+0x5c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d110      	bne.n	8005f26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f04:	4b0c      	ldr	r3, [pc, #48]	@ (8005f38 <vPortEnterCritical+0x60>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <vPortEnterCritical+0x4e>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	603b      	str	r3, [r7, #0]
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	e7fd      	b.n	8005f22 <vPortEnterCritical+0x4a>
	}
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	2000000c 	.word	0x2000000c
 8005f38:	e000ed04 	.word	0xe000ed04

08005f3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f42:	4b12      	ldr	r3, [pc, #72]	@ (8005f8c <vPortExitCritical+0x50>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10b      	bne.n	8005f62 <vPortExitCritical+0x26>
	__asm volatile
 8005f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	607b      	str	r3, [r7, #4]
}
 8005f5c:	bf00      	nop
 8005f5e:	bf00      	nop
 8005f60:	e7fd      	b.n	8005f5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f62:	4b0a      	ldr	r3, [pc, #40]	@ (8005f8c <vPortExitCritical+0x50>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	4a08      	ldr	r2, [pc, #32]	@ (8005f8c <vPortExitCritical+0x50>)
 8005f6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f6c:	4b07      	ldr	r3, [pc, #28]	@ (8005f8c <vPortExitCritical+0x50>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d105      	bne.n	8005f80 <vPortExitCritical+0x44>
 8005f74:	2300      	movs	r3, #0
 8005f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	f383 8811 	msr	BASEPRI, r3
}
 8005f7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	2000000c 	.word	0x2000000c

08005f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f90:	f3ef 8009 	mrs	r0, PSP
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	4b15      	ldr	r3, [pc, #84]	@ (8005ff0 <pxCurrentTCBConst>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	f01e 0f10 	tst.w	lr, #16
 8005fa0:	bf08      	it	eq
 8005fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005faa:	6010      	str	r0, [r2, #0]
 8005fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005fb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005fb4:	f380 8811 	msr	BASEPRI, r0
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f7fe fe9c 	bl	8004cfc <vTaskSwitchContext>
 8005fc4:	f04f 0000 	mov.w	r0, #0
 8005fc8:	f380 8811 	msr	BASEPRI, r0
 8005fcc:	bc09      	pop	{r0, r3}
 8005fce:	6819      	ldr	r1, [r3, #0]
 8005fd0:	6808      	ldr	r0, [r1, #0]
 8005fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd6:	f01e 0f10 	tst.w	lr, #16
 8005fda:	bf08      	it	eq
 8005fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005fe0:	f380 8809 	msr	PSP, r0
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	f3af 8000 	nop.w

08005ff0 <pxCurrentTCBConst>:
 8005ff0:	200008b0 	.word	0x200008b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop

08005ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	607b      	str	r3, [r7, #4]
}
 8006010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006012:	f7fe fdb9 	bl	8004b88 <xTaskIncrementTick>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800601c:	4b06      	ldr	r3, [pc, #24]	@ (8006038 <xPortSysTickHandler+0x40>)
 800601e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	2300      	movs	r3, #0
 8006026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	f383 8811 	msr	BASEPRI, r3
}
 800602e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006030:	bf00      	nop
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	e000ed04 	.word	0xe000ed04

0800603c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006040:	4b0b      	ldr	r3, [pc, #44]	@ (8006070 <vPortSetupTimerInterrupt+0x34>)
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006046:	4b0b      	ldr	r3, [pc, #44]	@ (8006074 <vPortSetupTimerInterrupt+0x38>)
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800604c:	4b0a      	ldr	r3, [pc, #40]	@ (8006078 <vPortSetupTimerInterrupt+0x3c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a0a      	ldr	r2, [pc, #40]	@ (800607c <vPortSetupTimerInterrupt+0x40>)
 8006052:	fba2 2303 	umull	r2, r3, r2, r3
 8006056:	099b      	lsrs	r3, r3, #6
 8006058:	4a09      	ldr	r2, [pc, #36]	@ (8006080 <vPortSetupTimerInterrupt+0x44>)
 800605a:	3b01      	subs	r3, #1
 800605c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800605e:	4b04      	ldr	r3, [pc, #16]	@ (8006070 <vPortSetupTimerInterrupt+0x34>)
 8006060:	2207      	movs	r2, #7
 8006062:	601a      	str	r2, [r3, #0]
}
 8006064:	bf00      	nop
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	e000e010 	.word	0xe000e010
 8006074:	e000e018 	.word	0xe000e018
 8006078:	20000000 	.word	0x20000000
 800607c:	10624dd3 	.word	0x10624dd3
 8006080:	e000e014 	.word	0xe000e014

08006084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006084:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006094 <vPortEnableVFP+0x10>
 8006088:	6801      	ldr	r1, [r0, #0]
 800608a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800608e:	6001      	str	r1, [r0, #0]
 8006090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006092:	bf00      	nop
 8006094:	e000ed88 	.word	0xe000ed88

08006098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800609e:	f3ef 8305 	mrs	r3, IPSR
 80060a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b0f      	cmp	r3, #15
 80060a8:	d915      	bls.n	80060d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060aa:	4a18      	ldr	r2, [pc, #96]	@ (800610c <vPortValidateInterruptPriority+0x74>)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80060b4:	4b16      	ldr	r3, [pc, #88]	@ (8006110 <vPortValidateInterruptPriority+0x78>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	7afa      	ldrb	r2, [r7, #11]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d20b      	bcs.n	80060d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	607b      	str	r3, [r7, #4]
}
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	e7fd      	b.n	80060d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80060d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006114 <vPortValidateInterruptPriority+0x7c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80060de:	4b0e      	ldr	r3, [pc, #56]	@ (8006118 <vPortValidateInterruptPriority+0x80>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d90b      	bls.n	80060fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	603b      	str	r3, [r7, #0]
}
 80060f8:	bf00      	nop
 80060fa:	bf00      	nop
 80060fc:	e7fd      	b.n	80060fa <vPortValidateInterruptPriority+0x62>
	}
 80060fe:	bf00      	nop
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	e000e3f0 	.word	0xe000e3f0
 8006110:	20000edc 	.word	0x20000edc
 8006114:	e000ed0c 	.word	0xe000ed0c
 8006118:	20000ee0 	.word	0x20000ee0

0800611c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08a      	sub	sp, #40	@ 0x28
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006124:	2300      	movs	r3, #0
 8006126:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006128:	f7fe fc72 	bl	8004a10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800612c:	4b5c      	ldr	r3, [pc, #368]	@ (80062a0 <pvPortMalloc+0x184>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006134:	f000 f924 	bl	8006380 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006138:	4b5a      	ldr	r3, [pc, #360]	@ (80062a4 <pvPortMalloc+0x188>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4013      	ands	r3, r2
 8006140:	2b00      	cmp	r3, #0
 8006142:	f040 8095 	bne.w	8006270 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01e      	beq.n	800618a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800614c:	2208      	movs	r2, #8
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4413      	add	r3, r2
 8006152:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	2b00      	cmp	r3, #0
 800615c:	d015      	beq.n	800618a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f023 0307 	bic.w	r3, r3, #7
 8006164:	3308      	adds	r3, #8
 8006166:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00b      	beq.n	800618a <pvPortMalloc+0x6e>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	617b      	str	r3, [r7, #20]
}
 8006184:	bf00      	nop
 8006186:	bf00      	nop
 8006188:	e7fd      	b.n	8006186 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d06f      	beq.n	8006270 <pvPortMalloc+0x154>
 8006190:	4b45      	ldr	r3, [pc, #276]	@ (80062a8 <pvPortMalloc+0x18c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	429a      	cmp	r2, r3
 8006198:	d86a      	bhi.n	8006270 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800619a:	4b44      	ldr	r3, [pc, #272]	@ (80062ac <pvPortMalloc+0x190>)
 800619c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800619e:	4b43      	ldr	r3, [pc, #268]	@ (80062ac <pvPortMalloc+0x190>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061a4:	e004      	b.n	80061b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d903      	bls.n	80061c2 <pvPortMalloc+0xa6>
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1f1      	bne.n	80061a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061c2:	4b37      	ldr	r3, [pc, #220]	@ (80062a0 <pvPortMalloc+0x184>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d051      	beq.n	8006270 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2208      	movs	r2, #8
 80061d2:	4413      	add	r3, r2
 80061d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	1ad2      	subs	r2, r2, r3
 80061e6:	2308      	movs	r3, #8
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d920      	bls.n	8006230 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4413      	add	r3, r2
 80061f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00b      	beq.n	8006218 <pvPortMalloc+0xfc>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	613b      	str	r3, [r7, #16]
}
 8006212:	bf00      	nop
 8006214:	bf00      	nop
 8006216:	e7fd      	b.n	8006214 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	1ad2      	subs	r2, r2, r3
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800622a:	69b8      	ldr	r0, [r7, #24]
 800622c:	f000 f90a 	bl	8006444 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006230:	4b1d      	ldr	r3, [pc, #116]	@ (80062a8 <pvPortMalloc+0x18c>)
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	4a1b      	ldr	r2, [pc, #108]	@ (80062a8 <pvPortMalloc+0x18c>)
 800623c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800623e:	4b1a      	ldr	r3, [pc, #104]	@ (80062a8 <pvPortMalloc+0x18c>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4b1b      	ldr	r3, [pc, #108]	@ (80062b0 <pvPortMalloc+0x194>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d203      	bcs.n	8006252 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800624a:	4b17      	ldr	r3, [pc, #92]	@ (80062a8 <pvPortMalloc+0x18c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a18      	ldr	r2, [pc, #96]	@ (80062b0 <pvPortMalloc+0x194>)
 8006250:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	4b13      	ldr	r3, [pc, #76]	@ (80062a4 <pvPortMalloc+0x188>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	431a      	orrs	r2, r3
 800625c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006266:	4b13      	ldr	r3, [pc, #76]	@ (80062b4 <pvPortMalloc+0x198>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3301      	adds	r3, #1
 800626c:	4a11      	ldr	r2, [pc, #68]	@ (80062b4 <pvPortMalloc+0x198>)
 800626e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006270:	f7fe fbdc 	bl	8004a2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00b      	beq.n	8006296 <pvPortMalloc+0x17a>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	60fb      	str	r3, [r7, #12]
}
 8006290:	bf00      	nop
 8006292:	bf00      	nop
 8006294:	e7fd      	b.n	8006292 <pvPortMalloc+0x176>
	return pvReturn;
 8006296:	69fb      	ldr	r3, [r7, #28]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3728      	adds	r7, #40	@ 0x28
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	20004aec 	.word	0x20004aec
 80062a4:	20004b00 	.word	0x20004b00
 80062a8:	20004af0 	.word	0x20004af0
 80062ac:	20004ae4 	.word	0x20004ae4
 80062b0:	20004af4 	.word	0x20004af4
 80062b4:	20004af8 	.word	0x20004af8

080062b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d04f      	beq.n	800636a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062ca:	2308      	movs	r3, #8
 80062cc:	425b      	negs	r3, r3
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4413      	add	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	4b25      	ldr	r3, [pc, #148]	@ (8006374 <vPortFree+0xbc>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4013      	ands	r3, r2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10b      	bne.n	80062fe <vPortFree+0x46>
	__asm volatile
 80062e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	60fb      	str	r3, [r7, #12]
}
 80062f8:	bf00      	nop
 80062fa:	bf00      	nop
 80062fc:	e7fd      	b.n	80062fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00b      	beq.n	800631e <vPortFree+0x66>
	__asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	60bb      	str	r3, [r7, #8]
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	e7fd      	b.n	800631a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	4b14      	ldr	r3, [pc, #80]	@ (8006374 <vPortFree+0xbc>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4013      	ands	r3, r2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01e      	beq.n	800636a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d11a      	bne.n	800636a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	4b0e      	ldr	r3, [pc, #56]	@ (8006374 <vPortFree+0xbc>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	43db      	mvns	r3, r3
 800633e:	401a      	ands	r2, r3
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006344:	f7fe fb64 	bl	8004a10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	4b0a      	ldr	r3, [pc, #40]	@ (8006378 <vPortFree+0xc0>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4413      	add	r3, r2
 8006352:	4a09      	ldr	r2, [pc, #36]	@ (8006378 <vPortFree+0xc0>)
 8006354:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006356:	6938      	ldr	r0, [r7, #16]
 8006358:	f000 f874 	bl	8006444 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800635c:	4b07      	ldr	r3, [pc, #28]	@ (800637c <vPortFree+0xc4>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3301      	adds	r3, #1
 8006362:	4a06      	ldr	r2, [pc, #24]	@ (800637c <vPortFree+0xc4>)
 8006364:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006366:	f7fe fb61 	bl	8004a2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800636a:	bf00      	nop
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20004b00 	.word	0x20004b00
 8006378:	20004af0 	.word	0x20004af0
 800637c:	20004afc 	.word	0x20004afc

08006380 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006386:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800638a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800638c:	4b27      	ldr	r3, [pc, #156]	@ (800642c <prvHeapInit+0xac>)
 800638e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00c      	beq.n	80063b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3307      	adds	r3, #7
 800639e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0307 	bic.w	r3, r3, #7
 80063a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	4a1f      	ldr	r2, [pc, #124]	@ (800642c <prvHeapInit+0xac>)
 80063b0:	4413      	add	r3, r2
 80063b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006430 <prvHeapInit+0xb0>)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063be:	4b1c      	ldr	r3, [pc, #112]	@ (8006430 <prvHeapInit+0xb0>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	4413      	add	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063cc:	2208      	movs	r2, #8
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	1a9b      	subs	r3, r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0307 	bic.w	r3, r3, #7
 80063da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4a15      	ldr	r2, [pc, #84]	@ (8006434 <prvHeapInit+0xb4>)
 80063e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063e2:	4b14      	ldr	r3, [pc, #80]	@ (8006434 <prvHeapInit+0xb4>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2200      	movs	r2, #0
 80063e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063ea:	4b12      	ldr	r3, [pc, #72]	@ (8006434 <prvHeapInit+0xb4>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	1ad2      	subs	r2, r2, r3
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006400:	4b0c      	ldr	r3, [pc, #48]	@ (8006434 <prvHeapInit+0xb4>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	4a0a      	ldr	r2, [pc, #40]	@ (8006438 <prvHeapInit+0xb8>)
 800640e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	4a09      	ldr	r2, [pc, #36]	@ (800643c <prvHeapInit+0xbc>)
 8006416:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006418:	4b09      	ldr	r3, [pc, #36]	@ (8006440 <prvHeapInit+0xc0>)
 800641a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800641e:	601a      	str	r2, [r3, #0]
}
 8006420:	bf00      	nop
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	20000ee4 	.word	0x20000ee4
 8006430:	20004ae4 	.word	0x20004ae4
 8006434:	20004aec 	.word	0x20004aec
 8006438:	20004af4 	.word	0x20004af4
 800643c:	20004af0 	.word	0x20004af0
 8006440:	20004b00 	.word	0x20004b00

08006444 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800644c:	4b28      	ldr	r3, [pc, #160]	@ (80064f0 <prvInsertBlockIntoFreeList+0xac>)
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	e002      	b.n	8006458 <prvInsertBlockIntoFreeList+0x14>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	429a      	cmp	r2, r3
 8006460:	d8f7      	bhi.n	8006452 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	4413      	add	r3, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	429a      	cmp	r2, r3
 8006472:	d108      	bne.n	8006486 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	441a      	add	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	441a      	add	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	429a      	cmp	r2, r3
 8006498:	d118      	bne.n	80064cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	4b15      	ldr	r3, [pc, #84]	@ (80064f4 <prvInsertBlockIntoFreeList+0xb0>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d00d      	beq.n	80064c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	441a      	add	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	e008      	b.n	80064d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064c2:	4b0c      	ldr	r3, [pc, #48]	@ (80064f4 <prvInsertBlockIntoFreeList+0xb0>)
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	e003      	b.n	80064d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d002      	beq.n	80064e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064e2:	bf00      	nop
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	20004ae4 	.word	0x20004ae4
 80064f4:	20004aec 	.word	0x20004aec

080064f8 <memset>:
 80064f8:	4402      	add	r2, r0
 80064fa:	4603      	mov	r3, r0
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d100      	bne.n	8006502 <memset+0xa>
 8006500:	4770      	bx	lr
 8006502:	f803 1b01 	strb.w	r1, [r3], #1
 8006506:	e7f9      	b.n	80064fc <memset+0x4>

08006508 <_reclaim_reent>:
 8006508:	4b2d      	ldr	r3, [pc, #180]	@ (80065c0 <_reclaim_reent+0xb8>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4283      	cmp	r3, r0
 800650e:	b570      	push	{r4, r5, r6, lr}
 8006510:	4604      	mov	r4, r0
 8006512:	d053      	beq.n	80065bc <_reclaim_reent+0xb4>
 8006514:	69c3      	ldr	r3, [r0, #28]
 8006516:	b31b      	cbz	r3, 8006560 <_reclaim_reent+0x58>
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	b163      	cbz	r3, 8006536 <_reclaim_reent+0x2e>
 800651c:	2500      	movs	r5, #0
 800651e:	69e3      	ldr	r3, [r4, #28]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	5959      	ldr	r1, [r3, r5]
 8006524:	b9b1      	cbnz	r1, 8006554 <_reclaim_reent+0x4c>
 8006526:	3504      	adds	r5, #4
 8006528:	2d80      	cmp	r5, #128	@ 0x80
 800652a:	d1f8      	bne.n	800651e <_reclaim_reent+0x16>
 800652c:	69e3      	ldr	r3, [r4, #28]
 800652e:	4620      	mov	r0, r4
 8006530:	68d9      	ldr	r1, [r3, #12]
 8006532:	f000 f87b 	bl	800662c <_free_r>
 8006536:	69e3      	ldr	r3, [r4, #28]
 8006538:	6819      	ldr	r1, [r3, #0]
 800653a:	b111      	cbz	r1, 8006542 <_reclaim_reent+0x3a>
 800653c:	4620      	mov	r0, r4
 800653e:	f000 f875 	bl	800662c <_free_r>
 8006542:	69e3      	ldr	r3, [r4, #28]
 8006544:	689d      	ldr	r5, [r3, #8]
 8006546:	b15d      	cbz	r5, 8006560 <_reclaim_reent+0x58>
 8006548:	4629      	mov	r1, r5
 800654a:	4620      	mov	r0, r4
 800654c:	682d      	ldr	r5, [r5, #0]
 800654e:	f000 f86d 	bl	800662c <_free_r>
 8006552:	e7f8      	b.n	8006546 <_reclaim_reent+0x3e>
 8006554:	680e      	ldr	r6, [r1, #0]
 8006556:	4620      	mov	r0, r4
 8006558:	f000 f868 	bl	800662c <_free_r>
 800655c:	4631      	mov	r1, r6
 800655e:	e7e1      	b.n	8006524 <_reclaim_reent+0x1c>
 8006560:	6961      	ldr	r1, [r4, #20]
 8006562:	b111      	cbz	r1, 800656a <_reclaim_reent+0x62>
 8006564:	4620      	mov	r0, r4
 8006566:	f000 f861 	bl	800662c <_free_r>
 800656a:	69e1      	ldr	r1, [r4, #28]
 800656c:	b111      	cbz	r1, 8006574 <_reclaim_reent+0x6c>
 800656e:	4620      	mov	r0, r4
 8006570:	f000 f85c 	bl	800662c <_free_r>
 8006574:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006576:	b111      	cbz	r1, 800657e <_reclaim_reent+0x76>
 8006578:	4620      	mov	r0, r4
 800657a:	f000 f857 	bl	800662c <_free_r>
 800657e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006580:	b111      	cbz	r1, 8006588 <_reclaim_reent+0x80>
 8006582:	4620      	mov	r0, r4
 8006584:	f000 f852 	bl	800662c <_free_r>
 8006588:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800658a:	b111      	cbz	r1, 8006592 <_reclaim_reent+0x8a>
 800658c:	4620      	mov	r0, r4
 800658e:	f000 f84d 	bl	800662c <_free_r>
 8006592:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006594:	b111      	cbz	r1, 800659c <_reclaim_reent+0x94>
 8006596:	4620      	mov	r0, r4
 8006598:	f000 f848 	bl	800662c <_free_r>
 800659c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800659e:	b111      	cbz	r1, 80065a6 <_reclaim_reent+0x9e>
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 f843 	bl	800662c <_free_r>
 80065a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80065a8:	b111      	cbz	r1, 80065b0 <_reclaim_reent+0xa8>
 80065aa:	4620      	mov	r0, r4
 80065ac:	f000 f83e 	bl	800662c <_free_r>
 80065b0:	6a23      	ldr	r3, [r4, #32]
 80065b2:	b11b      	cbz	r3, 80065bc <_reclaim_reent+0xb4>
 80065b4:	4620      	mov	r0, r4
 80065b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065ba:	4718      	bx	r3
 80065bc:	bd70      	pop	{r4, r5, r6, pc}
 80065be:	bf00      	nop
 80065c0:	20000010 	.word	0x20000010

080065c4 <__libc_init_array>:
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	4d0d      	ldr	r5, [pc, #52]	@ (80065fc <__libc_init_array+0x38>)
 80065c8:	4c0d      	ldr	r4, [pc, #52]	@ (8006600 <__libc_init_array+0x3c>)
 80065ca:	1b64      	subs	r4, r4, r5
 80065cc:	10a4      	asrs	r4, r4, #2
 80065ce:	2600      	movs	r6, #0
 80065d0:	42a6      	cmp	r6, r4
 80065d2:	d109      	bne.n	80065e8 <__libc_init_array+0x24>
 80065d4:	4d0b      	ldr	r5, [pc, #44]	@ (8006604 <__libc_init_array+0x40>)
 80065d6:	4c0c      	ldr	r4, [pc, #48]	@ (8006608 <__libc_init_array+0x44>)
 80065d8:	f000 f87e 	bl	80066d8 <_init>
 80065dc:	1b64      	subs	r4, r4, r5
 80065de:	10a4      	asrs	r4, r4, #2
 80065e0:	2600      	movs	r6, #0
 80065e2:	42a6      	cmp	r6, r4
 80065e4:	d105      	bne.n	80065f2 <__libc_init_array+0x2e>
 80065e6:	bd70      	pop	{r4, r5, r6, pc}
 80065e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ec:	4798      	blx	r3
 80065ee:	3601      	adds	r6, #1
 80065f0:	e7ee      	b.n	80065d0 <__libc_init_array+0xc>
 80065f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f6:	4798      	blx	r3
 80065f8:	3601      	adds	r6, #1
 80065fa:	e7f2      	b.n	80065e2 <__libc_init_array+0x1e>
 80065fc:	08006820 	.word	0x08006820
 8006600:	08006820 	.word	0x08006820
 8006604:	08006820 	.word	0x08006820
 8006608:	08006824 	.word	0x08006824

0800660c <__retarget_lock_acquire_recursive>:
 800660c:	4770      	bx	lr

0800660e <__retarget_lock_release_recursive>:
 800660e:	4770      	bx	lr

08006610 <memcpy>:
 8006610:	440a      	add	r2, r1
 8006612:	4291      	cmp	r1, r2
 8006614:	f100 33ff 	add.w	r3, r0, #4294967295
 8006618:	d100      	bne.n	800661c <memcpy+0xc>
 800661a:	4770      	bx	lr
 800661c:	b510      	push	{r4, lr}
 800661e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006622:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006626:	4291      	cmp	r1, r2
 8006628:	d1f9      	bne.n	800661e <memcpy+0xe>
 800662a:	bd10      	pop	{r4, pc}

0800662c <_free_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4605      	mov	r5, r0
 8006630:	2900      	cmp	r1, #0
 8006632:	d041      	beq.n	80066b8 <_free_r+0x8c>
 8006634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006638:	1f0c      	subs	r4, r1, #4
 800663a:	2b00      	cmp	r3, #0
 800663c:	bfb8      	it	lt
 800663e:	18e4      	addlt	r4, r4, r3
 8006640:	f000 f83e 	bl	80066c0 <__malloc_lock>
 8006644:	4a1d      	ldr	r2, [pc, #116]	@ (80066bc <_free_r+0x90>)
 8006646:	6813      	ldr	r3, [r2, #0]
 8006648:	b933      	cbnz	r3, 8006658 <_free_r+0x2c>
 800664a:	6063      	str	r3, [r4, #4]
 800664c:	6014      	str	r4, [r2, #0]
 800664e:	4628      	mov	r0, r5
 8006650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006654:	f000 b83a 	b.w	80066cc <__malloc_unlock>
 8006658:	42a3      	cmp	r3, r4
 800665a:	d908      	bls.n	800666e <_free_r+0x42>
 800665c:	6820      	ldr	r0, [r4, #0]
 800665e:	1821      	adds	r1, r4, r0
 8006660:	428b      	cmp	r3, r1
 8006662:	bf01      	itttt	eq
 8006664:	6819      	ldreq	r1, [r3, #0]
 8006666:	685b      	ldreq	r3, [r3, #4]
 8006668:	1809      	addeq	r1, r1, r0
 800666a:	6021      	streq	r1, [r4, #0]
 800666c:	e7ed      	b.n	800664a <_free_r+0x1e>
 800666e:	461a      	mov	r2, r3
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	b10b      	cbz	r3, 8006678 <_free_r+0x4c>
 8006674:	42a3      	cmp	r3, r4
 8006676:	d9fa      	bls.n	800666e <_free_r+0x42>
 8006678:	6811      	ldr	r1, [r2, #0]
 800667a:	1850      	adds	r0, r2, r1
 800667c:	42a0      	cmp	r0, r4
 800667e:	d10b      	bne.n	8006698 <_free_r+0x6c>
 8006680:	6820      	ldr	r0, [r4, #0]
 8006682:	4401      	add	r1, r0
 8006684:	1850      	adds	r0, r2, r1
 8006686:	4283      	cmp	r3, r0
 8006688:	6011      	str	r1, [r2, #0]
 800668a:	d1e0      	bne.n	800664e <_free_r+0x22>
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	6053      	str	r3, [r2, #4]
 8006692:	4408      	add	r0, r1
 8006694:	6010      	str	r0, [r2, #0]
 8006696:	e7da      	b.n	800664e <_free_r+0x22>
 8006698:	d902      	bls.n	80066a0 <_free_r+0x74>
 800669a:	230c      	movs	r3, #12
 800669c:	602b      	str	r3, [r5, #0]
 800669e:	e7d6      	b.n	800664e <_free_r+0x22>
 80066a0:	6820      	ldr	r0, [r4, #0]
 80066a2:	1821      	adds	r1, r4, r0
 80066a4:	428b      	cmp	r3, r1
 80066a6:	bf04      	itt	eq
 80066a8:	6819      	ldreq	r1, [r3, #0]
 80066aa:	685b      	ldreq	r3, [r3, #4]
 80066ac:	6063      	str	r3, [r4, #4]
 80066ae:	bf04      	itt	eq
 80066b0:	1809      	addeq	r1, r1, r0
 80066b2:	6021      	streq	r1, [r4, #0]
 80066b4:	6054      	str	r4, [r2, #4]
 80066b6:	e7ca      	b.n	800664e <_free_r+0x22>
 80066b8:	bd38      	pop	{r3, r4, r5, pc}
 80066ba:	bf00      	nop
 80066bc:	20004c40 	.word	0x20004c40

080066c0 <__malloc_lock>:
 80066c0:	4801      	ldr	r0, [pc, #4]	@ (80066c8 <__malloc_lock+0x8>)
 80066c2:	f7ff bfa3 	b.w	800660c <__retarget_lock_acquire_recursive>
 80066c6:	bf00      	nop
 80066c8:	20004c3c 	.word	0x20004c3c

080066cc <__malloc_unlock>:
 80066cc:	4801      	ldr	r0, [pc, #4]	@ (80066d4 <__malloc_unlock+0x8>)
 80066ce:	f7ff bf9e 	b.w	800660e <__retarget_lock_release_recursive>
 80066d2:	bf00      	nop
 80066d4:	20004c3c 	.word	0x20004c3c

080066d8 <_init>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	bf00      	nop
 80066dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066de:	bc08      	pop	{r3}
 80066e0:	469e      	mov	lr, r3
 80066e2:	4770      	bx	lr

080066e4 <_fini>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	bf00      	nop
 80066e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ea:	bc08      	pop	{r3}
 80066ec:	469e      	mov	lr, r3
 80066ee:	4770      	bx	lr
