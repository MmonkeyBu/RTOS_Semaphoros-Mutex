
Atividade_RTOS-4.4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000671c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  080068ec  080068ec  000078ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a64  08006a64  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006a64  08006a64  00007a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a6c  08006a6c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a6c  08006a6c  00007a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a70  08006a70  00007a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006a74  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf0  20000060  08006ad4  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c50  08006ad4  00008c50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b84  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003580  00000000  00000000  00020c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  00024198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001041  00000000  00000000  00025688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036a6  00000000  00000000  000266c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177b1  00000000  00000000  00029d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db528  00000000  00000000  00041520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ca48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d20  00000000  00000000  0011ca8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001227ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080068d4 	.word	0x080068d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080068d4 	.word	0x080068d4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fb36 	bl	8000c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f830 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f8b8 	bl	800076c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f88c 	bl	8000718 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000600:	f002 fa80 	bl	8002b04 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MeuMutex */
  MeuMutexHandle = osMutexNew(&MeuMutex_attributes);
 8000604:	480c      	ldr	r0, [pc, #48]	@ (8000638 <main+0x4c>)
 8000606:	f002 fb74 	bl	8002cf2 <osMutexNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a0b      	ldr	r2, [pc, #44]	@ (800063c <main+0x50>)
 800060e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_1 */
  Task_1Handle = osThreadNew(StartTask1, NULL, &Task_1_attributes);
 8000610:	4a0b      	ldr	r2, [pc, #44]	@ (8000640 <main+0x54>)
 8000612:	2100      	movs	r1, #0
 8000614:	480b      	ldr	r0, [pc, #44]	@ (8000644 <main+0x58>)
 8000616:	f002 fabf 	bl	8002b98 <osThreadNew>
 800061a:	4603      	mov	r3, r0
 800061c:	4a0a      	ldr	r2, [pc, #40]	@ (8000648 <main+0x5c>)
 800061e:	6013      	str	r3, [r2, #0]

  /* creation of Task_2 */
  Task_2Handle = osThreadNew(StartTask2, NULL, &Task_2_attributes);
 8000620:	4a0a      	ldr	r2, [pc, #40]	@ (800064c <main+0x60>)
 8000622:	2100      	movs	r1, #0
 8000624:	480a      	ldr	r0, [pc, #40]	@ (8000650 <main+0x64>)
 8000626:	f002 fab7 	bl	8002b98 <osThreadNew>
 800062a:	4603      	mov	r3, r0
 800062c:	4a09      	ldr	r2, [pc, #36]	@ (8000654 <main+0x68>)
 800062e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000630:	f002 fa8c 	bl	8002b4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <main+0x48>
 8000638:	08006a08 	.word	0x08006a08
 800063c:	200000cc 	.word	0x200000cc
 8000640:	080069c0 	.word	0x080069c0
 8000644:	080007a1 	.word	0x080007a1
 8000648:	200000c4 	.word	0x200000c4
 800064c:	080069e4 	.word	0x080069e4
 8000650:	08000855 	.word	0x08000855
 8000654:	200000c8 	.word	0x200000c8

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	@ 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2234      	movs	r2, #52	@ 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f005 fc58 	bl	8005f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <SystemClock_Config+0xb8>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	4a22      	ldr	r2, [pc, #136]	@ (8000710 <SystemClock_Config+0xb8>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	@ 0x40
 800068c:	4b20      	ldr	r3, [pc, #128]	@ (8000710 <SystemClock_Config+0xb8>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000698:	2300      	movs	r3, #0
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	4b1d      	ldr	r3, [pc, #116]	@ (8000714 <SystemClock_Config+0xbc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000714 <SystemClock_Config+0xbc>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b19      	ldr	r3, [pc, #100]	@ (8000714 <SystemClock_Config+0xbc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f88f 	bl	80017f0 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006d8:	f000 f930 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 fd84 	bl	8001204 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000702:	f000 f91b 	bl	800093c <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	@ 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 800071e:	4a12      	ldr	r2, [pc, #72]	@ (8000768 <MX_USART2_UART_Init+0x50>)
 8000720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 8000724:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_USART2_UART_Init+0x4c>)
 8000750:	f001 fd88 	bl	8002264 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075a:	f000 f8ef 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000007c 	.word	0x2000007c
 8000768:	40004400 	.word	0x40004400

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_GPIO_Init+0x30>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a08      	ldr	r2, [pc, #32]	@ (800079c <MX_GPIO_Init+0x30>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <MX_GPIO_Init+0x30>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b09a      	sub	sp, #104	@ 0x68
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char str [] = "Pegando o Mutex sem soltar \n";
 80007a8:	4b25      	ldr	r3, [pc, #148]	@ (8000840 <StartTask1+0xa0>)
 80007aa:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 80007ae:	461d      	mov	r5, r3
 80007b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007b8:	c407      	stmia	r4!, {r0, r1, r2}
 80007ba:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint16_t *) str, strlen(str), HAL_MAX_DELAY);
 80007bc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fd25 	bl	8000210 <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	481c      	ldr	r0, [pc, #112]	@ (8000844 <StartTask1+0xa4>)
 80007d4:	f001 fd96 	bl	8002304 <HAL_UART_Transmit>

	osStatus_t status = osMutexAcquire(MeuMutexHandle, osWaitForever);
 80007d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <StartTask1+0xa8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f04f 31ff 	mov.w	r1, #4294967295
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 fb0c 	bl	8002dfe <osMutexAcquire>
 80007e6:	6678      	str	r0, [r7, #100]	@ 0x64
	if (status == osOK) {
 80007e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d10c      	bne.n	8000808 <StartTask1+0x68>
	    char str[] = "Task1: Mutex adquirido com sucesso!\n";
 80007ee:	4b17      	ldr	r3, [pc, #92]	@ (800084c <StartTask1+0xac>)
 80007f0:	f107 0408 	add.w	r4, r7, #8
 80007f4:	461d      	mov	r5, r3
 80007f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000802:	6020      	str	r0, [r4, #0]
 8000804:	3404      	adds	r4, #4
 8000806:	7021      	strb	r1, [r4, #0]
	}
  /* Infinite loop */
  for(;;)
  {
	char strRuning [] = "Ainda com o Mutex \n";
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <StartTask1+0xb0>)
 800080a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800080e:	461d      	mov	r5, r3
 8000810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000814:	682b      	ldr	r3, [r5, #0]
 8000816:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint16_t *) strRuning, strlen(strRuning), HAL_MAX_DELAY);
 8000818:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fcf7 	bl	8000210 <strlen>
 8000822:	4603      	mov	r3, r0
 8000824:	b29a      	uxth	r2, r3
 8000826:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <StartTask1+0xa4>)
 8000830:	f001 fd68 	bl	8002304 <HAL_UART_Transmit>
    osDelay(1000);
 8000834:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000838:	f002 fa40 	bl	8002cbc <osDelay>
  {
 800083c:	bf00      	nop
 800083e:	e7e3      	b.n	8000808 <StartTask1+0x68>
 8000840:	08006908 	.word	0x08006908
 8000844:	2000007c 	.word	0x2000007c
 8000848:	200000cc 	.word	0x200000cc
 800084c:	08006928 	.word	0x08006928
 8000850:	08006950 	.word	0x08006950

08000854 <StartTask2>:
* @brief Function implementing the Task_2 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument) {
 8000854:	b5b0      	push	{r4, r5, r7, lr}
 8000856:	b0a8      	sub	sp, #160	@ 0xa0
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask2 */
	char strInicio[] = "Task2: INICIADA com sucesso!\n";
 800085c:	4b29      	ldr	r3, [pc, #164]	@ (8000904 <StartTask2+0xb0>)
 800085e:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8000862:	461d      	mov	r5, r3
 8000864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000868:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800086c:	c407      	stmia	r4!, {r0, r1, r2}
 800086e:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) strInicio, strlen(strInicio),
 8000870:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fccb 	bl	8000210 <strlen>
 800087a:	4603      	mov	r3, r0
 800087c:	b29a      	uxth	r2, r3
 800087e:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	4820      	ldr	r0, [pc, #128]	@ (8000908 <StartTask2+0xb4>)
 8000888:	f001 fd3c 	bl	8002304 <HAL_UART_Transmit>
			HAL_MAX_DELAY);

	osStatus_t status;
	status = osMutexRelease(MeuMutexHandle);
 800088c:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <StartTask2+0xb8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f002 faff 	bl	8002e94 <osMutexRelease>
 8000896:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

	 char strStatus[100];
	    sprintf(strStatus, "Task2: Status = %d\n", (int)status);
 800089a:	f107 0318 	add.w	r3, r7, #24
 800089e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80008a2:	491b      	ldr	r1, [pc, #108]	@ (8000910 <StartTask2+0xbc>)
 80008a4:	4618      	mov	r0, r3
 80008a6:	f005 fb17 	bl	8005ed8 <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t *) strStatus, strlen(strStatus), HAL_MAX_DELAY);
 80008aa:	f107 0318 	add.w	r3, r7, #24
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fcae 	bl	8000210 <strlen>
 80008b4:	4603      	mov	r3, r0
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	f107 0118 	add.w	r1, r7, #24
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295
 80008c0:	4811      	ldr	r0, [pc, #68]	@ (8000908 <StartTask2+0xb4>)
 80008c2:	f001 fd1f 	bl	8002304 <HAL_UART_Transmit>

	    if(status == osErrorResource){
 80008c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80008ca:	f113 0f03 	cmn.w	r3, #3
 80008ce:	d113      	bne.n	80008f8 <StartTask2+0xa4>
	    	char strERRO[] = "Erro Resource";
 80008d0:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <StartTask2+0xc0>)
 80008d2:	f107 0408 	add.w	r4, r7, #8
 80008d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008d8:	c407      	stmia	r4!, {r0, r1, r2}
 80008da:	8023      	strh	r3, [r4, #0]
	    	HAL_UART_Transmit(&huart2, (uint8_t *) strERRO, strlen(strERRO), HAL_MAX_DELAY);
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fc95 	bl	8000210 <strlen>
 80008e6:	4603      	mov	r3, r0
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	f107 0108 	add.w	r1, r7, #8
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295
 80008f2:	4805      	ldr	r0, [pc, #20]	@ (8000908 <StartTask2+0xb4>)
 80008f4:	f001 fd06 	bl	8002304 <HAL_UART_Transmit>
	    }
	/* Infinite loop */
	for(;;)
		{
			osDelay(1000);
 80008f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008fc:	f002 f9de 	bl	8002cbc <osDelay>
 8000900:	e7fa      	b.n	80008f8 <StartTask2+0xa4>
 8000902:	bf00      	nop
 8000904:	08006978 	.word	0x08006978
 8000908:	2000007c 	.word	0x2000007c
 800090c:	200000cc 	.word	0x200000cc
 8000910:	08006964 	.word	0x08006964
 8000914:	08006998 	.word	0x08006998

08000918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d101      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800092a:	f000 f9bb 	bl	8000ca4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40010000 	.word	0x40010000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <Error_Handler+0x8>

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <HAL_MspInit+0x64>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000956:	4a15      	ldr	r2, [pc, #84]	@ (80009ac <HAL_MspInit+0x64>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800095c:	6453      	str	r3, [r2, #68]	@ 0x44
 800095e:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <HAL_MspInit+0x64>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <HAL_MspInit+0x64>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	4a0e      	ldr	r2, [pc, #56]	@ (80009ac <HAL_MspInit+0x64>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	@ 0x40
 800097a:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <HAL_MspInit+0x64>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	210f      	movs	r1, #15
 800098a:	f06f 0001 	mvn.w	r0, #1
 800098e:	f000 fa61 	bl	8000e54 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2105      	movs	r1, #5
 8000996:	2001      	movs	r0, #1
 8000998:	f000 fa5c 	bl	8000e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800099c:	2001      	movs	r0, #1
 800099e:	f000 fa75 	bl	8000e8c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	@ 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a19      	ldr	r2, [pc, #100]	@ (8000a34 <HAL_UART_MspInit+0x84>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d12b      	bne.n	8000a2a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <HAL_UART_MspInit+0x88>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	4a17      	ldr	r2, [pc, #92]	@ (8000a38 <HAL_UART_MspInit+0x88>)
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <HAL_UART_MspInit+0x88>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <HAL_UART_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a10      	ldr	r2, [pc, #64]	@ (8000a38 <HAL_UART_MspInit+0x88>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <HAL_UART_MspInit+0x88>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <HAL_UART_MspInit+0x8c>)
 8000a26:	f000 fa3f 	bl	8000ea8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	@ 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40004400 	.word	0x40004400
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020000 	.word	0x40020000

08000a40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	@ 0x30
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b2e      	ldr	r3, [pc, #184]	@ (8000b10 <HAL_InitTick+0xd0>)
 8000a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a58:	4a2d      	ldr	r2, [pc, #180]	@ (8000b10 <HAL_InitTick+0xd0>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a60:	4b2b      	ldr	r3, [pc, #172]	@ (8000b10 <HAL_InitTick+0xd0>)
 8000a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a6c:	f107 020c 	add.w	r2, r7, #12
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 fcde 	bl	8001438 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a7c:	f000 fcc8 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
 8000a80:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a84:	4a23      	ldr	r2, [pc, #140]	@ (8000b14 <HAL_InitTick+0xd4>)
 8000a86:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8a:	0c9b      	lsrs	r3, r3, #18
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a90:	4b21      	ldr	r3, [pc, #132]	@ (8000b18 <HAL_InitTick+0xd8>)
 8000a92:	4a22      	ldr	r2, [pc, #136]	@ (8000b1c <HAL_InitTick+0xdc>)
 8000a94:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a96:	4b20      	ldr	r3, [pc, #128]	@ (8000b18 <HAL_InitTick+0xd8>)
 8000a98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a9c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000b18 <HAL_InitTick+0xd8>)
 8000aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <HAL_InitTick+0xd8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <HAL_InitTick+0xd8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	@ (8000b18 <HAL_InitTick+0xd8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ab6:	4818      	ldr	r0, [pc, #96]	@ (8000b18 <HAL_InitTick+0xd8>)
 8000ab8:	f001 f938 	bl	8001d2c <HAL_TIM_Base_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d11b      	bne.n	8000b02 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000aca:	4813      	ldr	r0, [pc, #76]	@ (8000b18 <HAL_InitTick+0xd8>)
 8000acc:	f001 f988 	bl	8001de0 <HAL_TIM_Base_Start_IT>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d111      	bne.n	8000b02 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ade:	2019      	movs	r0, #25
 8000ae0:	f000 f9d4 	bl	8000e8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b0f      	cmp	r3, #15
 8000ae8:	d808      	bhi.n	8000afc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000aea:	2200      	movs	r2, #0
 8000aec:	6879      	ldr	r1, [r7, #4]
 8000aee:	2019      	movs	r0, #25
 8000af0:	f000 f9b0 	bl	8000e54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <HAL_InitTick+0xe0>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	e002      	b.n	8000b02 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3730      	adds	r7, #48	@ 0x30
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	431bde83 	.word	0x431bde83
 8000b18:	200000d0 	.word	0x200000d0
 8000b1c:	40010000 	.word	0x40010000
 8000b20:	20000004 	.word	0x20000004

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <NMI_Handler+0x4>

08000b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000b5e:	f000 fb37 	bl	80011d0 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b6c:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b6e:	f001 f9a7 	bl	8001ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000d0 	.word	0x200000d0

08000b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b84:	4a14      	ldr	r2, [pc, #80]	@ (8000bd8 <_sbrk+0x5c>)
 8000b86:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <_sbrk+0x60>)
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b90:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b98:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <_sbrk+0x64>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	@ (8000be4 <_sbrk+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d207      	bcs.n	8000bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bac:	f005 fa1c 	bl	8005fe8 <__errno>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	e009      	b.n	8000bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc2:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a05      	ldr	r2, [pc, #20]	@ (8000be0 <_sbrk+0x64>)
 8000bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20020000 	.word	0x20020000
 8000bdc:	00000400 	.word	0x00000400
 8000be0:	20000118 	.word	0x20000118
 8000be4:	20004c50 	.word	0x20004c50

08000be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <SystemInit+0x20>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bf2:	4a05      	ldr	r2, [pc, #20]	@ (8000c08 <SystemInit+0x20>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c10:	f7ff ffea 	bl	8000be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	@ (8000c4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f005 f9db 	bl	8005ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3e:	f7ff fcd5 	bl	80005ec <main>
  bx  lr    
 8000c42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c50:	08006a74 	.word	0x08006a74
  ldr r2, =_sbss
 8000c54:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c58:	20004c50 	.word	0x20004c50

08000c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC_IRQHandler>
	...

08000c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca0 <HAL_Init+0x40>)
 8000c6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <HAL_Init+0x40>)
 8000c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	@ (8000ca0 <HAL_Init+0x40>)
 8000c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 f8d8 	bl	8000e3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	200f      	movs	r0, #15
 8000c90:	f7ff fed6 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f7ff fe58 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023c00 	.word	0x40023c00

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	2000011c 	.word	0x2000011c

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	@ (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	2000011c 	.word	0x2000011c

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	@ (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	db0b      	blt.n	8000d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 021f 	and.w	r2, r3, #31
 8000d60:	4907      	ldr	r1, [pc, #28]	@ (8000d80 <__NVIC_EnableIRQ+0x38>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	2001      	movs	r0, #1
 8000d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db0a      	blt.n	8000dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	@ (8000dd0 <__NVIC_SetPriority+0x4c>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dac:	e00a      	b.n	8000dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4908      	ldr	r1, [pc, #32]	@ (8000dd4 <__NVIC_SetPriority+0x50>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	761a      	strb	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	@ 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f1c3 0307 	rsb	r3, r3, #7
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	bf28      	it	cs
 8000df6:	2304      	movcs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d902      	bls.n	8000e08 <NVIC_EncodePriority+0x30>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	e000      	b.n	8000e0a <NVIC_EncodePriority+0x32>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	4313      	orrs	r3, r2
         );
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3724      	adds	r7, #36	@ 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ff4c 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e66:	f7ff ff61 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000e6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	68b9      	ldr	r1, [r7, #8]
 8000e70:	6978      	ldr	r0, [r7, #20]
 8000e72:	f7ff ffb1 	bl	8000dd8 <NVIC_EncodePriority>
 8000e76:	4602      	mov	r2, r0
 8000e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff80 	bl	8000d84 <__NVIC_SetPriority>
}
 8000e84:	bf00      	nop
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ff54 	bl	8000d48 <__NVIC_EnableIRQ>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	@ 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
 8000ec2:	e165      	b.n	8001190 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	f040 8154 	bne.w	800118a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d005      	beq.n	8000efa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d130      	bne.n	8000f5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	68da      	ldr	r2, [r3, #12]
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f30:	2201      	movs	r2, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	f003 0201 	and.w	r2, r3, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d017      	beq.n	8000f98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d123      	bne.n	8000fec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	08da      	lsrs	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	69b9      	ldr	r1, [r7, #24]
 8000fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0203 	and.w	r2, r3, #3
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 80ae 	beq.w	800118a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b5d      	ldr	r3, [pc, #372]	@ (80011a8 <HAL_GPIO_Init+0x300>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001036:	4a5c      	ldr	r2, [pc, #368]	@ (80011a8 <HAL_GPIO_Init+0x300>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800103c:	6453      	str	r3, [r2, #68]	@ 0x44
 800103e:	4b5a      	ldr	r3, [pc, #360]	@ (80011a8 <HAL_GPIO_Init+0x300>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800104a:	4a58      	ldr	r2, [pc, #352]	@ (80011ac <HAL_GPIO_Init+0x304>)
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	3302      	adds	r3, #2
 8001052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	220f      	movs	r2, #15
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4f      	ldr	r2, [pc, #316]	@ (80011b0 <HAL_GPIO_Init+0x308>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d025      	beq.n	80010c2 <HAL_GPIO_Init+0x21a>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4e      	ldr	r2, [pc, #312]	@ (80011b4 <HAL_GPIO_Init+0x30c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d01f      	beq.n	80010be <HAL_GPIO_Init+0x216>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4d      	ldr	r2, [pc, #308]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d019      	beq.n	80010ba <HAL_GPIO_Init+0x212>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4c      	ldr	r2, [pc, #304]	@ (80011bc <HAL_GPIO_Init+0x314>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d013      	beq.n	80010b6 <HAL_GPIO_Init+0x20e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4b      	ldr	r2, [pc, #300]	@ (80011c0 <HAL_GPIO_Init+0x318>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d00d      	beq.n	80010b2 <HAL_GPIO_Init+0x20a>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4a      	ldr	r2, [pc, #296]	@ (80011c4 <HAL_GPIO_Init+0x31c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d007      	beq.n	80010ae <HAL_GPIO_Init+0x206>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a49      	ldr	r2, [pc, #292]	@ (80011c8 <HAL_GPIO_Init+0x320>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d101      	bne.n	80010aa <HAL_GPIO_Init+0x202>
 80010a6:	2306      	movs	r3, #6
 80010a8:	e00c      	b.n	80010c4 <HAL_GPIO_Init+0x21c>
 80010aa:	2307      	movs	r3, #7
 80010ac:	e00a      	b.n	80010c4 <HAL_GPIO_Init+0x21c>
 80010ae:	2305      	movs	r3, #5
 80010b0:	e008      	b.n	80010c4 <HAL_GPIO_Init+0x21c>
 80010b2:	2304      	movs	r3, #4
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_Init+0x21c>
 80010b6:	2303      	movs	r3, #3
 80010b8:	e004      	b.n	80010c4 <HAL_GPIO_Init+0x21c>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_Init+0x21c>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x21c>
 80010c2:	2300      	movs	r3, #0
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	f002 0203 	and.w	r2, r2, #3
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	4093      	lsls	r3, r2
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d4:	4935      	ldr	r1, [pc, #212]	@ (80011ac <HAL_GPIO_Init+0x304>)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e2:	4b3a      	ldr	r3, [pc, #232]	@ (80011cc <HAL_GPIO_Init+0x324>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001106:	4a31      	ldr	r2, [pc, #196]	@ (80011cc <HAL_GPIO_Init+0x324>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800110c:	4b2f      	ldr	r3, [pc, #188]	@ (80011cc <HAL_GPIO_Init+0x324>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001130:	4a26      	ldr	r2, [pc, #152]	@ (80011cc <HAL_GPIO_Init+0x324>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001136:	4b25      	ldr	r3, [pc, #148]	@ (80011cc <HAL_GPIO_Init+0x324>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800115a:	4a1c      	ldr	r2, [pc, #112]	@ (80011cc <HAL_GPIO_Init+0x324>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001160:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <HAL_GPIO_Init+0x324>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001184:	4a11      	ldr	r2, [pc, #68]	@ (80011cc <HAL_GPIO_Init+0x324>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3301      	adds	r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	2b0f      	cmp	r3, #15
 8001194:	f67f ae96 	bls.w	8000ec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3724      	adds	r7, #36	@ 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40013800 	.word	0x40013800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40021400 	.word	0x40021400
 80011c8:	40021800 	.word	0x40021800
 80011cc:	40013c00 	.word	0x40013c00

080011d0 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_PWR_PVD_IRQHandler+0x20>)
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80011e0:	f000 f808 	bl	80011f4 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80011e4:	4b02      	ldr	r3, [pc, #8]	@ (80011f0 <HAL_PWR_PVD_IRQHandler+0x20>)
 80011e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011ea:	615a      	str	r2, [r3, #20]
  }
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40013c00 	.word	0x40013c00

080011f4 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0cc      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001218:	4b68      	ldr	r3, [pc, #416]	@ (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 030f 	and.w	r3, r3, #15
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d90c      	bls.n	8001240 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001226:	4b65      	ldr	r3, [pc, #404]	@ (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800122e:	4b63      	ldr	r3, [pc, #396]	@ (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d001      	beq.n	8001240 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e0b8      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d020      	beq.n	800128e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001258:	4b59      	ldr	r3, [pc, #356]	@ (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4a58      	ldr	r2, [pc, #352]	@ (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 800125e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001262:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001270:	4b53      	ldr	r3, [pc, #332]	@ (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4a52      	ldr	r2, [pc, #328]	@ (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800127a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800127c:	4b50      	ldr	r3, [pc, #320]	@ (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	494d      	ldr	r1, [pc, #308]	@ (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	4313      	orrs	r3, r2
 800128c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d044      	beq.n	8001324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d107      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	4b47      	ldr	r3, [pc, #284]	@ (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d119      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e07f      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d003      	beq.n	80012c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d107      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c2:	4b3f      	ldr	r3, [pc, #252]	@ (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d109      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e06f      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d2:	4b3b      	ldr	r3, [pc, #236]	@ (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e067      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e2:	4b37      	ldr	r3, [pc, #220]	@ (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f023 0203 	bic.w	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4934      	ldr	r1, [pc, #208]	@ (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012f4:	f7ff fcea 	bl	8000ccc <HAL_GetTick>
 80012f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fa:	e00a      	b.n	8001312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012fc:	f7ff fce6 	bl	8000ccc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800130a:	4293      	cmp	r3, r2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e04f      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001312:	4b2b      	ldr	r3, [pc, #172]	@ (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 020c 	and.w	r2, r3, #12
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	429a      	cmp	r2, r3
 8001322:	d1eb      	bne.n	80012fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001324:	4b25      	ldr	r3, [pc, #148]	@ (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d20c      	bcs.n	800134c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001332:	4b22      	ldr	r3, [pc, #136]	@ (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800133a:	4b20      	ldr	r3, [pc, #128]	@ (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d001      	beq.n	800134c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e032      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	d008      	beq.n	800136a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001358:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4916      	ldr	r1, [pc, #88]	@ (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001366:	4313      	orrs	r3, r2
 8001368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d009      	beq.n	800138a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001376:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	490e      	ldr	r1, [pc, #56]	@ (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	4313      	orrs	r3, r2
 8001388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800138a:	f000 f887 	bl	800149c <HAL_RCC_GetSysClockFreq>
 800138e:	4602      	mov	r2, r0
 8001390:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	490a      	ldr	r1, [pc, #40]	@ (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 800139c:	5ccb      	ldrb	r3, [r1, r3]
 800139e:	fa22 f303 	lsr.w	r3, r2, r3
 80013a2:	4a09      	ldr	r2, [pc, #36]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80013a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <HAL_RCC_ClockConfig+0x1c8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fb48 	bl	8000a40 <HAL_InitTick>

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40023c00 	.word	0x40023c00
 80013c0:	40023800 	.word	0x40023800
 80013c4:	08006a18 	.word	0x08006a18
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000004 	.word	0x20000004

080013d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013d4:	4b03      	ldr	r3, [pc, #12]	@ (80013e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000000 	.word	0x20000000

080013e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013ec:	f7ff fff0 	bl	80013d0 <HAL_RCC_GetHCLKFreq>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	0a9b      	lsrs	r3, r3, #10
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	4903      	ldr	r1, [pc, #12]	@ (800140c <HAL_RCC_GetPCLK1Freq+0x24>)
 80013fe:	5ccb      	ldrb	r3, [r1, r3]
 8001400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001404:	4618      	mov	r0, r3
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800
 800140c:	08006a28 	.word	0x08006a28

08001410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001414:	f7ff ffdc 	bl	80013d0 <HAL_RCC_GetHCLKFreq>
 8001418:	4602      	mov	r2, r0
 800141a:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	0b5b      	lsrs	r3, r3, #13
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	4903      	ldr	r1, [pc, #12]	@ (8001434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001426:	5ccb      	ldrb	r3, [r1, r3]
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800142c:	4618      	mov	r0, r3
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	08006a28 	.word	0x08006a28

08001438 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	220f      	movs	r2, #15
 8001446:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <HAL_RCC_GetClockConfig+0x5c>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 0203 	and.w	r2, r3, #3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <HAL_RCC_GetClockConfig+0x5c>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <HAL_RCC_GetClockConfig+0x5c>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <HAL_RCC_GetClockConfig+0x5c>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	08db      	lsrs	r3, r3, #3
 8001472:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800147a:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <HAL_RCC_GetClockConfig+0x60>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 020f 	and.w	r2, r3, #15
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	601a      	str	r2, [r3, #0]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	40023c00 	.word	0x40023c00

0800149c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800149c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014a0:	b0a6      	sub	sp, #152	@ 0x98
 80014a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014c2:	4bc8      	ldr	r3, [pc, #800]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b0c      	cmp	r3, #12
 80014cc:	f200 817e 	bhi.w	80017cc <HAL_RCC_GetSysClockFreq+0x330>
 80014d0:	a201      	add	r2, pc, #4	@ (adr r2, 80014d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80014d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d6:	bf00      	nop
 80014d8:	0800150d 	.word	0x0800150d
 80014dc:	080017cd 	.word	0x080017cd
 80014e0:	080017cd 	.word	0x080017cd
 80014e4:	080017cd 	.word	0x080017cd
 80014e8:	08001515 	.word	0x08001515
 80014ec:	080017cd 	.word	0x080017cd
 80014f0:	080017cd 	.word	0x080017cd
 80014f4:	080017cd 	.word	0x080017cd
 80014f8:	0800151d 	.word	0x0800151d
 80014fc:	080017cd 	.word	0x080017cd
 8001500:	080017cd 	.word	0x080017cd
 8001504:	080017cd 	.word	0x080017cd
 8001508:	08001687 	.word	0x08001687
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800150c:	4bb6      	ldr	r3, [pc, #728]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800150e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001512:	e15f      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001514:	4bb5      	ldr	r3, [pc, #724]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x350>)
 8001516:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800151a:	e15b      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800151c:	4bb1      	ldr	r3, [pc, #708]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x348>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001524:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001528:	4bae      	ldr	r3, [pc, #696]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x348>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d031      	beq.n	8001598 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001534:	4bab      	ldr	r3, [pc, #684]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	099b      	lsrs	r3, r3, #6
 800153a:	2200      	movs	r2, #0
 800153c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800153e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001540:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001546:	663b      	str	r3, [r7, #96]	@ 0x60
 8001548:	2300      	movs	r3, #0
 800154a:	667b      	str	r3, [r7, #100]	@ 0x64
 800154c:	4ba7      	ldr	r3, [pc, #668]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x350>)
 800154e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001552:	462a      	mov	r2, r5
 8001554:	fb03 f202 	mul.w	r2, r3, r2
 8001558:	2300      	movs	r3, #0
 800155a:	4621      	mov	r1, r4
 800155c:	fb01 f303 	mul.w	r3, r1, r3
 8001560:	4413      	add	r3, r2
 8001562:	4aa2      	ldr	r2, [pc, #648]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x350>)
 8001564:	4621      	mov	r1, r4
 8001566:	fba1 1202 	umull	r1, r2, r1, r2
 800156a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800156c:	460a      	mov	r2, r1
 800156e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001570:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001572:	4413      	add	r3, r2
 8001574:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001576:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800157a:	2200      	movs	r2, #0
 800157c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800157e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001580:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001584:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001588:	f7fe fe9a 	bl	80002c0 <__aeabi_uldivmod>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4613      	mov	r3, r2
 8001592:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001596:	e064      	b.n	8001662 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001598:	4b92      	ldr	r3, [pc, #584]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x348>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	099b      	lsrs	r3, r3, #6
 800159e:	2200      	movs	r2, #0
 80015a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80015a2:	657a      	str	r2, [r7, #84]	@ 0x54
 80015a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80015a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015ac:	2300      	movs	r3, #0
 80015ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015b0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80015b4:	4622      	mov	r2, r4
 80015b6:	462b      	mov	r3, r5
 80015b8:	f04f 0000 	mov.w	r0, #0
 80015bc:	f04f 0100 	mov.w	r1, #0
 80015c0:	0159      	lsls	r1, r3, #5
 80015c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015c6:	0150      	lsls	r0, r2, #5
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4621      	mov	r1, r4
 80015ce:	1a51      	subs	r1, r2, r1
 80015d0:	6139      	str	r1, [r7, #16]
 80015d2:	4629      	mov	r1, r5
 80015d4:	eb63 0301 	sbc.w	r3, r3, r1
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80015e6:	4659      	mov	r1, fp
 80015e8:	018b      	lsls	r3, r1, #6
 80015ea:	4651      	mov	r1, sl
 80015ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015f0:	4651      	mov	r1, sl
 80015f2:	018a      	lsls	r2, r1, #6
 80015f4:	4651      	mov	r1, sl
 80015f6:	ebb2 0801 	subs.w	r8, r2, r1
 80015fa:	4659      	mov	r1, fp
 80015fc:	eb63 0901 	sbc.w	r9, r3, r1
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800160c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001610:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001614:	4690      	mov	r8, r2
 8001616:	4699      	mov	r9, r3
 8001618:	4623      	mov	r3, r4
 800161a:	eb18 0303 	adds.w	r3, r8, r3
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	462b      	mov	r3, r5
 8001622:	eb49 0303 	adc.w	r3, r9, r3
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001634:	4629      	mov	r1, r5
 8001636:	028b      	lsls	r3, r1, #10
 8001638:	4621      	mov	r1, r4
 800163a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800163e:	4621      	mov	r1, r4
 8001640:	028a      	lsls	r2, r1, #10
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800164a:	2200      	movs	r2, #0
 800164c:	643b      	str	r3, [r7, #64]	@ 0x40
 800164e:	647a      	str	r2, [r7, #68]	@ 0x44
 8001650:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001654:	f7fe fe34 	bl	80002c0 <__aeabi_uldivmod>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4613      	mov	r3, r2
 800165e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001662:	4b60      	ldr	r3, [pc, #384]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	0c1b      	lsrs	r3, r3, #16
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	3301      	adds	r3, #1
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001674:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001678:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800167c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001680:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001684:	e0a6      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001686:	4b57      	ldr	r3, [pc, #348]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800168e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001692:	4b54      	ldr	r3, [pc, #336]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d02a      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800169e:	4b51      	ldr	r3, [pc, #324]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	099b      	lsrs	r3, r3, #6
 80016a4:	2200      	movs	r2, #0
 80016a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80016aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016b0:	2100      	movs	r1, #0
 80016b2:	4b4e      	ldr	r3, [pc, #312]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x350>)
 80016b4:	fb03 f201 	mul.w	r2, r3, r1
 80016b8:	2300      	movs	r3, #0
 80016ba:	fb00 f303 	mul.w	r3, r0, r3
 80016be:	4413      	add	r3, r2
 80016c0:	4a4a      	ldr	r2, [pc, #296]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x350>)
 80016c2:	fba0 1202 	umull	r1, r2, r0, r2
 80016c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80016c8:	460a      	mov	r2, r1
 80016ca:	673a      	str	r2, [r7, #112]	@ 0x70
 80016cc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80016ce:	4413      	add	r3, r2
 80016d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80016d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016d6:	2200      	movs	r2, #0
 80016d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80016da:	637a      	str	r2, [r7, #52]	@ 0x34
 80016dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80016e0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80016e4:	f7fe fdec 	bl	80002c0 <__aeabi_uldivmod>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4613      	mov	r3, r2
 80016ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80016f2:	e05b      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f4:	4b3b      	ldr	r3, [pc, #236]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	099b      	lsrs	r3, r3, #6
 80016fa:	2200      	movs	r2, #0
 80016fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001706:	623b      	str	r3, [r7, #32]
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
 800170c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001710:	4642      	mov	r2, r8
 8001712:	464b      	mov	r3, r9
 8001714:	f04f 0000 	mov.w	r0, #0
 8001718:	f04f 0100 	mov.w	r1, #0
 800171c:	0159      	lsls	r1, r3, #5
 800171e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001722:	0150      	lsls	r0, r2, #5
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4641      	mov	r1, r8
 800172a:	ebb2 0a01 	subs.w	sl, r2, r1
 800172e:	4649      	mov	r1, r9
 8001730:	eb63 0b01 	sbc.w	fp, r3, r1
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001740:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001744:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001748:	ebb2 040a 	subs.w	r4, r2, sl
 800174c:	eb63 050b 	sbc.w	r5, r3, fp
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	00eb      	lsls	r3, r5, #3
 800175a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800175e:	00e2      	lsls	r2, r4, #3
 8001760:	4614      	mov	r4, r2
 8001762:	461d      	mov	r5, r3
 8001764:	4643      	mov	r3, r8
 8001766:	18e3      	adds	r3, r4, r3
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	464b      	mov	r3, r9
 800176c:	eb45 0303 	adc.w	r3, r5, r3
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800177e:	4629      	mov	r1, r5
 8001780:	028b      	lsls	r3, r1, #10
 8001782:	4621      	mov	r1, r4
 8001784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001788:	4621      	mov	r1, r4
 800178a:	028a      	lsls	r2, r1, #10
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001794:	2200      	movs	r2, #0
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	61fa      	str	r2, [r7, #28]
 800179a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800179e:	f7fe fd8f 	bl	80002c0 <__aeabi_uldivmod>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4613      	mov	r3, r2
 80017a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017ac:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	0f1b      	lsrs	r3, r3, #28
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80017ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80017be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80017ca:	e003      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80017ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80017d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3798      	adds	r7, #152	@ 0x98
 80017dc:	46bd      	mov	sp, r7
 80017de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	00f42400 	.word	0x00f42400
 80017ec:	017d7840 	.word	0x017d7840

080017f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e28d      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8083 	beq.w	8001916 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001810:	4b94      	ldr	r3, [pc, #592]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b04      	cmp	r3, #4
 800181a:	d019      	beq.n	8001850 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800181c:	4b91      	ldr	r3, [pc, #580]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 030c 	and.w	r3, r3, #12
        || \
 8001824:	2b08      	cmp	r3, #8
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001828:	4b8e      	ldr	r3, [pc, #568]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001830:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001834:	d00c      	beq.n	8001850 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001836:	4b8b      	ldr	r3, [pc, #556]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800183e:	2b0c      	cmp	r3, #12
 8001840:	d112      	bne.n	8001868 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001842:	4b88      	ldr	r3, [pc, #544]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800184a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800184e:	d10b      	bne.n	8001868 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	4b84      	ldr	r3, [pc, #528]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d05b      	beq.n	8001914 <HAL_RCC_OscConfig+0x124>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d157      	bne.n	8001914 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e25a      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001870:	d106      	bne.n	8001880 <HAL_RCC_OscConfig+0x90>
 8001872:	4b7c      	ldr	r3, [pc, #496]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a7b      	ldr	r2, [pc, #492]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e01d      	b.n	80018bc <HAL_RCC_OscConfig+0xcc>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001888:	d10c      	bne.n	80018a4 <HAL_RCC_OscConfig+0xb4>
 800188a:	4b76      	ldr	r3, [pc, #472]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a75      	ldr	r2, [pc, #468]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b73      	ldr	r3, [pc, #460]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a72      	ldr	r2, [pc, #456]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 800189c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e00b      	b.n	80018bc <HAL_RCC_OscConfig+0xcc>
 80018a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 80018aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	4b6c      	ldr	r3, [pc, #432]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a6b      	ldr	r2, [pc, #428]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 80018b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d013      	beq.n	80018ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff fa02 	bl	8000ccc <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff f9fe 	bl	8000ccc <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	@ 0x64
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e21f      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	4b61      	ldr	r3, [pc, #388]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0xdc>
 80018ea:	e014      	b.n	8001916 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff f9ee 	bl	8000ccc <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff f9ea 	bl	8000ccc <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	@ 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e20b      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001906:	4b57      	ldr	r3, [pc, #348]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x104>
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d06f      	beq.n	8001a02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001922:	4b50      	ldr	r3, [pc, #320]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b00      	cmp	r3, #0
 800192c:	d017      	beq.n	800195e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800192e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
        || \
 8001936:	2b08      	cmp	r3, #8
 8001938:	d105      	bne.n	8001946 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800193a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00b      	beq.n	800195e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001946:	4b47      	ldr	r3, [pc, #284]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d11c      	bne.n	800198c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001952:	4b44      	ldr	r3, [pc, #272]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d116      	bne.n	800198c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195e:	4b41      	ldr	r3, [pc, #260]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <HAL_RCC_OscConfig+0x186>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d001      	beq.n	8001976 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e1d3      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001976:	4b3b      	ldr	r3, [pc, #236]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4937      	ldr	r1, [pc, #220]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198a:	e03a      	b.n	8001a02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001994:	4b34      	ldr	r3, [pc, #208]	@ (8001a68 <HAL_RCC_OscConfig+0x278>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff f997 	bl	8000ccc <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a2:	f7ff f993 	bl	8000ccc <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e1b4      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c0:	4b28      	ldr	r3, [pc, #160]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4925      	ldr	r1, [pc, #148]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
 80019d4:	e015      	b.n	8001a02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d6:	4b24      	ldr	r3, [pc, #144]	@ (8001a68 <HAL_RCC_OscConfig+0x278>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff f976 	bl	8000ccc <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e4:	f7ff f972 	bl	8000ccc <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e193      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d036      	beq.n	8001a7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d016      	beq.n	8001a44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a16:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <HAL_RCC_OscConfig+0x27c>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1c:	f7ff f956 	bl	8000ccc <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a24:	f7ff f952 	bl	8000ccc <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e173      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a36:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x234>
 8001a42:	e01b      	b.n	8001a7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a44:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <HAL_RCC_OscConfig+0x27c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4a:	f7ff f93f 	bl	8000ccc <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a50:	e00e      	b.n	8001a70 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a52:	f7ff f93b 	bl	8000ccc <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d907      	bls.n	8001a70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e15c      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
 8001a64:	40023800 	.word	0x40023800
 8001a68:	42470000 	.word	0x42470000
 8001a6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a70:	4b8a      	ldr	r3, [pc, #552]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1ea      	bne.n	8001a52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 8097 	beq.w	8001bb8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8e:	4b83      	ldr	r3, [pc, #524]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10f      	bne.n	8001aba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	4a7e      	ldr	r2, [pc, #504]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aaa:	4b7c      	ldr	r3, [pc, #496]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aba:	4b79      	ldr	r3, [pc, #484]	@ (8001ca0 <HAL_RCC_OscConfig+0x4b0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d118      	bne.n	8001af8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac6:	4b76      	ldr	r3, [pc, #472]	@ (8001ca0 <HAL_RCC_OscConfig+0x4b0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a75      	ldr	r2, [pc, #468]	@ (8001ca0 <HAL_RCC_OscConfig+0x4b0>)
 8001acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff f8fb 	bl	8000ccc <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ada:	f7ff f8f7 	bl	8000ccc <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e118      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	4b6c      	ldr	r3, [pc, #432]	@ (8001ca0 <HAL_RCC_OscConfig+0x4b0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x31e>
 8001b00:	4b66      	ldr	r3, [pc, #408]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b04:	4a65      	ldr	r2, [pc, #404]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b0c:	e01c      	b.n	8001b48 <HAL_RCC_OscConfig+0x358>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b05      	cmp	r3, #5
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x340>
 8001b16:	4b61      	ldr	r3, [pc, #388]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b1a:	4a60      	ldr	r2, [pc, #384]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b22:	4b5e      	ldr	r3, [pc, #376]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b26:	4a5d      	ldr	r2, [pc, #372]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b2e:	e00b      	b.n	8001b48 <HAL_RCC_OscConfig+0x358>
 8001b30:	4b5a      	ldr	r3, [pc, #360]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b34:	4a59      	ldr	r2, [pc, #356]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b3c:	4b57      	ldr	r3, [pc, #348]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b40:	4a56      	ldr	r2, [pc, #344]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b42:	f023 0304 	bic.w	r3, r3, #4
 8001b46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d015      	beq.n	8001b7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b50:	f7ff f8bc 	bl	8000ccc <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f7ff f8b8 	bl	8000ccc <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e0d7      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0ee      	beq.n	8001b58 <HAL_RCC_OscConfig+0x368>
 8001b7a:	e014      	b.n	8001ba6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7c:	f7ff f8a6 	bl	8000ccc <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b84:	f7ff f8a2 	bl	8000ccc <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e0c1      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9a:	4b40      	ldr	r3, [pc, #256]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1ee      	bne.n	8001b84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d105      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bac:	4b3b      	ldr	r3, [pc, #236]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	4a3a      	ldr	r2, [pc, #232]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80ad 	beq.w	8001d1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bc2:	4b36      	ldr	r3, [pc, #216]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d060      	beq.n	8001c90 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d145      	bne.n	8001c62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd6:	4b33      	ldr	r3, [pc, #204]	@ (8001ca4 <HAL_RCC_OscConfig+0x4b4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f876 	bl	8000ccc <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff f872 	bl	8000ccc <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e093      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf6:	4b29      	ldr	r3, [pc, #164]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69da      	ldr	r2, [r3, #28]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c10:	019b      	lsls	r3, r3, #6
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c18:	085b      	lsrs	r3, r3, #1
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	041b      	lsls	r3, r3, #16
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c24:	061b      	lsls	r3, r3, #24
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2c:	071b      	lsls	r3, r3, #28
 8001c2e:	491b      	ldr	r1, [pc, #108]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca4 <HAL_RCC_OscConfig+0x4b4>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3a:	f7ff f847 	bl	8000ccc <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c42:	f7ff f843 	bl	8000ccc <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e064      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c54:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x452>
 8001c60:	e05c      	b.n	8001d1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <HAL_RCC_OscConfig+0x4b4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff f830 	bl	8000ccc <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff f82c 	bl	8000ccc <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e04d      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c82:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x480>
 8001c8e:	e045      	b.n	8001d1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d107      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e040      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d28 <HAL_RCC_OscConfig+0x538>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d030      	beq.n	8001d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d129      	bne.n	8001d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d122      	bne.n	8001d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cd8:	4013      	ands	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d119      	bne.n	8001d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cee:	085b      	lsrs	r3, r3, #1
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d10f      	bne.n	8001d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800

08001d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e041      	b.n	8001dc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f839 	bl	8001dca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3304      	adds	r3, #4
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	f000 f9c0 	bl	80020f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d001      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e04e      	b.n	8001e96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a23      	ldr	r2, [pc, #140]	@ (8001ea4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d022      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e22:	d01d      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d018      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1e      	ldr	r2, [pc, #120]	@ (8001eac <HAL_TIM_Base_Start_IT+0xcc>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d013      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00e      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d009      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a19      	ldr	r2, [pc, #100]	@ (8001eb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d004      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x80>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a18      	ldr	r2, [pc, #96]	@ (8001ebc <HAL_TIM_Base_Start_IT+0xdc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d111      	bne.n	8001e84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d010      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e82:	e007      	b.n	8001e94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	40000800 	.word	0x40000800
 8001eb0:	40000c00 	.word	0x40000c00
 8001eb4:	40010400 	.word	0x40010400
 8001eb8:	40014000 	.word	0x40014000
 8001ebc:	40001800 	.word	0x40001800

08001ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d020      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01b      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0202 	mvn.w	r2, #2
 8001ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f8d2 	bl	80020b4 <HAL_TIM_IC_CaptureCallback>
 8001f10:	e005      	b.n	8001f1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8c4 	bl	80020a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f8d5 	bl	80020c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d020      	beq.n	8001f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d01b      	beq.n	8001f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0204 	mvn.w	r2, #4
 8001f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2202      	movs	r2, #2
 8001f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f8ac 	bl	80020b4 <HAL_TIM_IC_CaptureCallback>
 8001f5c:	e005      	b.n	8001f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f89e 	bl	80020a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f8af 	bl	80020c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d020      	beq.n	8001fbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d01b      	beq.n	8001fbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0208 	mvn.w	r2, #8
 8001f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2204      	movs	r2, #4
 8001f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f886 	bl	80020b4 <HAL_TIM_IC_CaptureCallback>
 8001fa8:	e005      	b.n	8001fb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f878 	bl	80020a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f889 	bl	80020c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d020      	beq.n	8002008 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01b      	beq.n	8002008 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0210 	mvn.w	r2, #16
 8001fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2208      	movs	r2, #8
 8001fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f860 	bl	80020b4 <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e005      	b.n	8002002 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f852 	bl	80020a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f863 	bl	80020c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00c      	beq.n	800202c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d007      	beq.n	800202c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0201 	mvn.w	r2, #1
 8002024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fc76 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00c      	beq.n	8002050 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800203c:	2b00      	cmp	r3, #0
 800203e:	d007      	beq.n	8002050 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f900 	bl	8002250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00c      	beq.n	8002074 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002060:	2b00      	cmp	r3, #0
 8002062:	d007      	beq.n	8002074 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800206c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f834 	bl	80020dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00c      	beq.n	8002098 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f003 0320 	and.w	r3, r3, #32
 8002084:	2b00      	cmp	r3, #0
 8002086:	d007      	beq.n	8002098 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0220 	mvn.w	r2, #32
 8002090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8d2 	bl	800223c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a43      	ldr	r2, [pc, #268]	@ (8002210 <TIM_Base_SetConfig+0x120>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d013      	beq.n	8002130 <TIM_Base_SetConfig+0x40>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800210e:	d00f      	beq.n	8002130 <TIM_Base_SetConfig+0x40>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a40      	ldr	r2, [pc, #256]	@ (8002214 <TIM_Base_SetConfig+0x124>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d00b      	beq.n	8002130 <TIM_Base_SetConfig+0x40>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a3f      	ldr	r2, [pc, #252]	@ (8002218 <TIM_Base_SetConfig+0x128>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d007      	beq.n	8002130 <TIM_Base_SetConfig+0x40>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a3e      	ldr	r2, [pc, #248]	@ (800221c <TIM_Base_SetConfig+0x12c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d003      	beq.n	8002130 <TIM_Base_SetConfig+0x40>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a3d      	ldr	r2, [pc, #244]	@ (8002220 <TIM_Base_SetConfig+0x130>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d108      	bne.n	8002142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a32      	ldr	r2, [pc, #200]	@ (8002210 <TIM_Base_SetConfig+0x120>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d02b      	beq.n	80021a2 <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002150:	d027      	beq.n	80021a2 <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a2f      	ldr	r2, [pc, #188]	@ (8002214 <TIM_Base_SetConfig+0x124>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d023      	beq.n	80021a2 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a2e      	ldr	r2, [pc, #184]	@ (8002218 <TIM_Base_SetConfig+0x128>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01f      	beq.n	80021a2 <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a2d      	ldr	r2, [pc, #180]	@ (800221c <TIM_Base_SetConfig+0x12c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d01b      	beq.n	80021a2 <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a2c      	ldr	r2, [pc, #176]	@ (8002220 <TIM_Base_SetConfig+0x130>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d017      	beq.n	80021a2 <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2b      	ldr	r2, [pc, #172]	@ (8002224 <TIM_Base_SetConfig+0x134>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a2a      	ldr	r2, [pc, #168]	@ (8002228 <TIM_Base_SetConfig+0x138>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00f      	beq.n	80021a2 <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a29      	ldr	r2, [pc, #164]	@ (800222c <TIM_Base_SetConfig+0x13c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00b      	beq.n	80021a2 <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a28      	ldr	r2, [pc, #160]	@ (8002230 <TIM_Base_SetConfig+0x140>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d007      	beq.n	80021a2 <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a27      	ldr	r2, [pc, #156]	@ (8002234 <TIM_Base_SetConfig+0x144>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d003      	beq.n	80021a2 <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a26      	ldr	r2, [pc, #152]	@ (8002238 <TIM_Base_SetConfig+0x148>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d108      	bne.n	80021b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	4313      	orrs	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002210 <TIM_Base_SetConfig+0x120>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d003      	beq.n	80021e2 <TIM_Base_SetConfig+0xf2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a10      	ldr	r2, [pc, #64]	@ (8002220 <TIM_Base_SetConfig+0x130>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d103      	bne.n	80021ea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f043 0204 	orr.w	r2, r3, #4
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	601a      	str	r2, [r3, #0]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40010000 	.word	0x40010000
 8002214:	40000400 	.word	0x40000400
 8002218:	40000800 	.word	0x40000800
 800221c:	40000c00 	.word	0x40000c00
 8002220:	40010400 	.word	0x40010400
 8002224:	40014000 	.word	0x40014000
 8002228:	40014400 	.word	0x40014400
 800222c:	40014800 	.word	0x40014800
 8002230:	40001800 	.word	0x40001800
 8002234:	40001c00 	.word	0x40001c00
 8002238:	40002000 	.word	0x40002000

0800223c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e042      	b.n	80022fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fb90 	bl	80009b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2224      	movs	r2, #36	@ 0x24
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f973 	bl	8002594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	@ 0x28
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b20      	cmp	r3, #32
 8002322:	d175      	bne.n	8002410 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_UART_Transmit+0x2c>
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e06e      	b.n	8002412 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2221      	movs	r2, #33	@ 0x21
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002342:	f7fe fcc3 	bl	8000ccc <HAL_GetTick>
 8002346:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	88fa      	ldrh	r2, [r7, #6]
 800234c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	88fa      	ldrh	r2, [r7, #6]
 8002352:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800235c:	d108      	bne.n	8002370 <HAL_UART_Transmit+0x6c>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d104      	bne.n	8002370 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	e003      	b.n	8002378 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002374:	2300      	movs	r3, #0
 8002376:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002378:	e02e      	b.n	80023d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2200      	movs	r2, #0
 8002382:	2180      	movs	r1, #128	@ 0x80
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f848 	bl	800241a <UART_WaitOnFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e03a      	b.n	8002412 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10b      	bne.n	80023ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	3302      	adds	r3, #2
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	e007      	b.n	80023ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	3301      	adds	r3, #1
 80023c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1cb      	bne.n	800237a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2200      	movs	r2, #0
 80023ea:	2140      	movs	r1, #64	@ 0x40
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f814 	bl	800241a <UART_WaitOnFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e006      	b.n	8002412 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	603b      	str	r3, [r7, #0]
 8002426:	4613      	mov	r3, r2
 8002428:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800242a:	e03b      	b.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002432:	d037      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002434:	f7fe fc4a 	bl	8000ccc <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	6a3a      	ldr	r2, [r7, #32]
 8002440:	429a      	cmp	r2, r3
 8002442:	d302      	bcc.n	800244a <UART_WaitOnFlagUntilTimeout+0x30>
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e03a      	b.n	80024c4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d023      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b80      	cmp	r3, #128	@ 0x80
 8002460:	d020      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b40      	cmp	r3, #64	@ 0x40
 8002466:	d01d      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b08      	cmp	r3, #8
 8002474:	d116      	bne.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f81d 	bl	80024cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2208      	movs	r2, #8
 8002496:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e00f      	b.n	80024c4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	4013      	ands	r3, r2
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d0b4      	beq.n	800242c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b095      	sub	sp, #84	@ 0x54
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	330c      	adds	r3, #12
 80024da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024de:	e853 3f00 	ldrex	r3, [r3]
 80024e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80024e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	330c      	adds	r3, #12
 80024f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80024f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024fc:	e841 2300 	strex	r3, r2, [r1]
 8002500:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e5      	bne.n	80024d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3314      	adds	r3, #20
 800250e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	e853 3f00 	ldrex	r3, [r3]
 8002516:	61fb      	str	r3, [r7, #28]
   return(result);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3314      	adds	r3, #20
 8002526:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002528:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800252a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800252e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002530:	e841 2300 	strex	r3, r2, [r1]
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1e5      	bne.n	8002508 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	2b01      	cmp	r3, #1
 8002542:	d119      	bne.n	8002578 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	330c      	adds	r3, #12
 800254a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	e853 3f00 	ldrex	r3, [r3]
 8002552:	60bb      	str	r3, [r7, #8]
   return(result);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f023 0310 	bic.w	r3, r3, #16
 800255a:	647b      	str	r3, [r7, #68]	@ 0x44
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	330c      	adds	r3, #12
 8002562:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002564:	61ba      	str	r2, [r7, #24]
 8002566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002568:	6979      	ldr	r1, [r7, #20]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	e841 2300 	strex	r3, r2, [r1]
 8002570:	613b      	str	r3, [r7, #16]
   return(result);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1e5      	bne.n	8002544 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002586:	bf00      	nop
 8002588:	3754      	adds	r7, #84	@ 0x54
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002598:	b0c0      	sub	sp, #256	@ 0x100
 800259a:	af00      	add	r7, sp, #0
 800259c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80025ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b0:	68d9      	ldr	r1, [r3, #12]
 80025b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	ea40 0301 	orr.w	r3, r0, r1
 80025bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80025ec:	f021 010c 	bic.w	r1, r1, #12
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80025fa:	430b      	orrs	r3, r1
 80025fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800260a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800260e:	6999      	ldr	r1, [r3, #24]
 8002610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	ea40 0301 	orr.w	r3, r0, r1
 800261a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4b8f      	ldr	r3, [pc, #572]	@ (8002860 <UART_SetConfig+0x2cc>)
 8002624:	429a      	cmp	r2, r3
 8002626:	d005      	beq.n	8002634 <UART_SetConfig+0xa0>
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4b8d      	ldr	r3, [pc, #564]	@ (8002864 <UART_SetConfig+0x2d0>)
 8002630:	429a      	cmp	r2, r3
 8002632:	d104      	bne.n	800263e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002634:	f7fe feec 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
 8002638:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800263c:	e003      	b.n	8002646 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800263e:	f7fe fed3 	bl	80013e8 <HAL_RCC_GetPCLK1Freq>
 8002642:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002650:	f040 810c 	bne.w	800286c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002658:	2200      	movs	r2, #0
 800265a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800265e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002662:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002666:	4622      	mov	r2, r4
 8002668:	462b      	mov	r3, r5
 800266a:	1891      	adds	r1, r2, r2
 800266c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800266e:	415b      	adcs	r3, r3
 8002670:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002672:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002676:	4621      	mov	r1, r4
 8002678:	eb12 0801 	adds.w	r8, r2, r1
 800267c:	4629      	mov	r1, r5
 800267e:	eb43 0901 	adc.w	r9, r3, r1
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800268e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002696:	4690      	mov	r8, r2
 8002698:	4699      	mov	r9, r3
 800269a:	4623      	mov	r3, r4
 800269c:	eb18 0303 	adds.w	r3, r8, r3
 80026a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80026a4:	462b      	mov	r3, r5
 80026a6:	eb49 0303 	adc.w	r3, r9, r3
 80026aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80026ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80026ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80026be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80026c2:	460b      	mov	r3, r1
 80026c4:	18db      	adds	r3, r3, r3
 80026c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80026c8:	4613      	mov	r3, r2
 80026ca:	eb42 0303 	adc.w	r3, r2, r3
 80026ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80026d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80026d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80026d8:	f7fd fdf2 	bl	80002c0 <__aeabi_uldivmod>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4b61      	ldr	r3, [pc, #388]	@ (8002868 <UART_SetConfig+0x2d4>)
 80026e2:	fba3 2302 	umull	r2, r3, r3, r2
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	011c      	lsls	r4, r3, #4
 80026ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026ee:	2200      	movs	r2, #0
 80026f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80026f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80026fc:	4642      	mov	r2, r8
 80026fe:	464b      	mov	r3, r9
 8002700:	1891      	adds	r1, r2, r2
 8002702:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002704:	415b      	adcs	r3, r3
 8002706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002708:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800270c:	4641      	mov	r1, r8
 800270e:	eb12 0a01 	adds.w	sl, r2, r1
 8002712:	4649      	mov	r1, r9
 8002714:	eb43 0b01 	adc.w	fp, r3, r1
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002724:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800272c:	4692      	mov	sl, r2
 800272e:	469b      	mov	fp, r3
 8002730:	4643      	mov	r3, r8
 8002732:	eb1a 0303 	adds.w	r3, sl, r3
 8002736:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800273a:	464b      	mov	r3, r9
 800273c:	eb4b 0303 	adc.w	r3, fp, r3
 8002740:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002750:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002754:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002758:	460b      	mov	r3, r1
 800275a:	18db      	adds	r3, r3, r3
 800275c:	643b      	str	r3, [r7, #64]	@ 0x40
 800275e:	4613      	mov	r3, r2
 8002760:	eb42 0303 	adc.w	r3, r2, r3
 8002764:	647b      	str	r3, [r7, #68]	@ 0x44
 8002766:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800276a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800276e:	f7fd fda7 	bl	80002c0 <__aeabi_uldivmod>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4611      	mov	r1, r2
 8002778:	4b3b      	ldr	r3, [pc, #236]	@ (8002868 <UART_SetConfig+0x2d4>)
 800277a:	fba3 2301 	umull	r2, r3, r3, r1
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2264      	movs	r2, #100	@ 0x64
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	1acb      	subs	r3, r1, r3
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800278e:	4b36      	ldr	r3, [pc, #216]	@ (8002868 <UART_SetConfig+0x2d4>)
 8002790:	fba3 2302 	umull	r2, r3, r3, r2
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800279c:	441c      	add	r4, r3
 800279e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027a2:	2200      	movs	r2, #0
 80027a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80027ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80027b0:	4642      	mov	r2, r8
 80027b2:	464b      	mov	r3, r9
 80027b4:	1891      	adds	r1, r2, r2
 80027b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027b8:	415b      	adcs	r3, r3
 80027ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027c0:	4641      	mov	r1, r8
 80027c2:	1851      	adds	r1, r2, r1
 80027c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80027c6:	4649      	mov	r1, r9
 80027c8:	414b      	adcs	r3, r1
 80027ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80027d8:	4659      	mov	r1, fp
 80027da:	00cb      	lsls	r3, r1, #3
 80027dc:	4651      	mov	r1, sl
 80027de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027e2:	4651      	mov	r1, sl
 80027e4:	00ca      	lsls	r2, r1, #3
 80027e6:	4610      	mov	r0, r2
 80027e8:	4619      	mov	r1, r3
 80027ea:	4603      	mov	r3, r0
 80027ec:	4642      	mov	r2, r8
 80027ee:	189b      	adds	r3, r3, r2
 80027f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027f4:	464b      	mov	r3, r9
 80027f6:	460a      	mov	r2, r1
 80027f8:	eb42 0303 	adc.w	r3, r2, r3
 80027fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800280c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002810:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002814:	460b      	mov	r3, r1
 8002816:	18db      	adds	r3, r3, r3
 8002818:	62bb      	str	r3, [r7, #40]	@ 0x28
 800281a:	4613      	mov	r3, r2
 800281c:	eb42 0303 	adc.w	r3, r2, r3
 8002820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002822:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002826:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800282a:	f7fd fd49 	bl	80002c0 <__aeabi_uldivmod>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <UART_SetConfig+0x2d4>)
 8002834:	fba3 1302 	umull	r1, r3, r3, r2
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	2164      	movs	r1, #100	@ 0x64
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	3332      	adds	r3, #50	@ 0x32
 8002846:	4a08      	ldr	r2, [pc, #32]	@ (8002868 <UART_SetConfig+0x2d4>)
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	f003 0207 	and.w	r2, r3, #7
 8002852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4422      	add	r2, r4
 800285a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800285c:	e106      	b.n	8002a6c <UART_SetConfig+0x4d8>
 800285e:	bf00      	nop
 8002860:	40011000 	.word	0x40011000
 8002864:	40011400 	.word	0x40011400
 8002868:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800286c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002870:	2200      	movs	r2, #0
 8002872:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002876:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800287a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800287e:	4642      	mov	r2, r8
 8002880:	464b      	mov	r3, r9
 8002882:	1891      	adds	r1, r2, r2
 8002884:	6239      	str	r1, [r7, #32]
 8002886:	415b      	adcs	r3, r3
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
 800288a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800288e:	4641      	mov	r1, r8
 8002890:	1854      	adds	r4, r2, r1
 8002892:	4649      	mov	r1, r9
 8002894:	eb43 0501 	adc.w	r5, r3, r1
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	00eb      	lsls	r3, r5, #3
 80028a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028a6:	00e2      	lsls	r2, r4, #3
 80028a8:	4614      	mov	r4, r2
 80028aa:	461d      	mov	r5, r3
 80028ac:	4643      	mov	r3, r8
 80028ae:	18e3      	adds	r3, r4, r3
 80028b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028b4:	464b      	mov	r3, r9
 80028b6:	eb45 0303 	adc.w	r3, r5, r3
 80028ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028da:	4629      	mov	r1, r5
 80028dc:	008b      	lsls	r3, r1, #2
 80028de:	4621      	mov	r1, r4
 80028e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028e4:	4621      	mov	r1, r4
 80028e6:	008a      	lsls	r2, r1, #2
 80028e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80028ec:	f7fd fce8 	bl	80002c0 <__aeabi_uldivmod>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4b60      	ldr	r3, [pc, #384]	@ (8002a78 <UART_SetConfig+0x4e4>)
 80028f6:	fba3 2302 	umull	r2, r3, r3, r2
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	011c      	lsls	r4, r3, #4
 80028fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002902:	2200      	movs	r2, #0
 8002904:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002908:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800290c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002910:	4642      	mov	r2, r8
 8002912:	464b      	mov	r3, r9
 8002914:	1891      	adds	r1, r2, r2
 8002916:	61b9      	str	r1, [r7, #24]
 8002918:	415b      	adcs	r3, r3
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002920:	4641      	mov	r1, r8
 8002922:	1851      	adds	r1, r2, r1
 8002924:	6139      	str	r1, [r7, #16]
 8002926:	4649      	mov	r1, r9
 8002928:	414b      	adcs	r3, r1
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002938:	4659      	mov	r1, fp
 800293a:	00cb      	lsls	r3, r1, #3
 800293c:	4651      	mov	r1, sl
 800293e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002942:	4651      	mov	r1, sl
 8002944:	00ca      	lsls	r2, r1, #3
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	4603      	mov	r3, r0
 800294c:	4642      	mov	r2, r8
 800294e:	189b      	adds	r3, r3, r2
 8002950:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002954:	464b      	mov	r3, r9
 8002956:	460a      	mov	r2, r1
 8002958:	eb42 0303 	adc.w	r3, r2, r3
 800295c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	67bb      	str	r3, [r7, #120]	@ 0x78
 800296a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002978:	4649      	mov	r1, r9
 800297a:	008b      	lsls	r3, r1, #2
 800297c:	4641      	mov	r1, r8
 800297e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002982:	4641      	mov	r1, r8
 8002984:	008a      	lsls	r2, r1, #2
 8002986:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800298a:	f7fd fc99 	bl	80002c0 <__aeabi_uldivmod>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4611      	mov	r1, r2
 8002994:	4b38      	ldr	r3, [pc, #224]	@ (8002a78 <UART_SetConfig+0x4e4>)
 8002996:	fba3 2301 	umull	r2, r3, r3, r1
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2264      	movs	r2, #100	@ 0x64
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	1acb      	subs	r3, r1, r3
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	3332      	adds	r3, #50	@ 0x32
 80029a8:	4a33      	ldr	r2, [pc, #204]	@ (8002a78 <UART_SetConfig+0x4e4>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029b4:	441c      	add	r4, r3
 80029b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ba:	2200      	movs	r2, #0
 80029bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80029be:	677a      	str	r2, [r7, #116]	@ 0x74
 80029c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80029c4:	4642      	mov	r2, r8
 80029c6:	464b      	mov	r3, r9
 80029c8:	1891      	adds	r1, r2, r2
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	415b      	adcs	r3, r3
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029d4:	4641      	mov	r1, r8
 80029d6:	1851      	adds	r1, r2, r1
 80029d8:	6039      	str	r1, [r7, #0]
 80029da:	4649      	mov	r1, r9
 80029dc:	414b      	adcs	r3, r1
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029ec:	4659      	mov	r1, fp
 80029ee:	00cb      	lsls	r3, r1, #3
 80029f0:	4651      	mov	r1, sl
 80029f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029f6:	4651      	mov	r1, sl
 80029f8:	00ca      	lsls	r2, r1, #3
 80029fa:	4610      	mov	r0, r2
 80029fc:	4619      	mov	r1, r3
 80029fe:	4603      	mov	r3, r0
 8002a00:	4642      	mov	r2, r8
 8002a02:	189b      	adds	r3, r3, r2
 8002a04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a06:	464b      	mov	r3, r9
 8002a08:	460a      	mov	r2, r1
 8002a0a:	eb42 0303 	adc.w	r3, r2, r3
 8002a0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a28:	4649      	mov	r1, r9
 8002a2a:	008b      	lsls	r3, r1, #2
 8002a2c:	4641      	mov	r1, r8
 8002a2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a32:	4641      	mov	r1, r8
 8002a34:	008a      	lsls	r2, r1, #2
 8002a36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a3a:	f7fd fc41 	bl	80002c0 <__aeabi_uldivmod>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4b0d      	ldr	r3, [pc, #52]	@ (8002a78 <UART_SetConfig+0x4e4>)
 8002a44:	fba3 1302 	umull	r1, r3, r3, r2
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	2164      	movs	r1, #100	@ 0x64
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	3332      	adds	r3, #50	@ 0x32
 8002a56:	4a08      	ldr	r2, [pc, #32]	@ (8002a78 <UART_SetConfig+0x4e4>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	f003 020f 	and.w	r2, r3, #15
 8002a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4422      	add	r2, r4
 8002a6a:	609a      	str	r2, [r3, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a72:	46bd      	mov	sp, r7
 8002a74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a78:	51eb851f 	.word	0x51eb851f

08002a7c <__NVIC_SetPriority>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db0a      	blt.n	8002aa6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	490c      	ldr	r1, [pc, #48]	@ (8002ac8 <__NVIC_SetPriority+0x4c>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002aa4:	e00a      	b.n	8002abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4908      	ldr	r1, [pc, #32]	@ (8002acc <__NVIC_SetPriority+0x50>)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	440b      	add	r3, r1
 8002aba:	761a      	strb	r2, [r3, #24]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000e100 	.word	0xe000e100
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002ad4:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <SysTick_Handler+0x1c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002ad8:	f002 f880 	bl	8004bdc <xTaskGetSchedulerState>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d001      	beq.n	8002ae6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002ae2:	f002 ff79 	bl	80059d8 <xPortSysTickHandler>
  }
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	e000e010 	.word	0xe000e010

08002af0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002af4:	2100      	movs	r1, #0
 8002af6:	f06f 0004 	mvn.w	r0, #4
 8002afa:	f7ff ffbf 	bl	8002a7c <__NVIC_SetPriority>
#endif
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b0a:	f3ef 8305 	mrs	r3, IPSR
 8002b0e:	603b      	str	r3, [r7, #0]
  return(result);
 8002b10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002b16:	f06f 0305 	mvn.w	r3, #5
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	e00c      	b.n	8002b38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b48 <osKernelInitialize+0x44>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d105      	bne.n	8002b32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002b26:	4b08      	ldr	r3, [pc, #32]	@ (8002b48 <osKernelInitialize+0x44>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	607b      	str	r3, [r7, #4]
 8002b30:	e002      	b.n	8002b38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b38:	687b      	ldr	r3, [r7, #4]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000120 	.word	0x20000120

08002b4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b52:	f3ef 8305 	mrs	r3, IPSR
 8002b56:	603b      	str	r3, [r7, #0]
  return(result);
 8002b58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002b5e:	f06f 0305 	mvn.w	r3, #5
 8002b62:	607b      	str	r3, [r7, #4]
 8002b64:	e010      	b.n	8002b88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002b66:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <osKernelStart+0x48>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d109      	bne.n	8002b82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002b6e:	f7ff ffbf 	bl	8002af0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002b72:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <osKernelStart+0x48>)
 8002b74:	2202      	movs	r2, #2
 8002b76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002b78:	f001 fbbc 	bl	80042f4 <vTaskStartScheduler>
      stat = osOK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	607b      	str	r3, [r7, #4]
 8002b80:	e002      	b.n	8002b88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295
 8002b86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b88:	687b      	ldr	r3, [r7, #4]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000120 	.word	0x20000120

08002b98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08e      	sub	sp, #56	@ 0x38
 8002b9c:	af04      	add	r7, sp, #16
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ba8:	f3ef 8305 	mrs	r3, IPSR
 8002bac:	617b      	str	r3, [r7, #20]
  return(result);
 8002bae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d17e      	bne.n	8002cb2 <osThreadNew+0x11a>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d07b      	beq.n	8002cb2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002bba:	2380      	movs	r3, #128	@ 0x80
 8002bbc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002bbe:	2318      	movs	r3, #24
 8002bc0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d045      	beq.n	8002c5e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <osThreadNew+0x48>
        name = attr->name;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <osThreadNew+0x6e>
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	2b38      	cmp	r3, #56	@ 0x38
 8002bf8:	d805      	bhi.n	8002c06 <osThreadNew+0x6e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <osThreadNew+0x72>
        return (NULL);
 8002c06:	2300      	movs	r3, #0
 8002c08:	e054      	b.n	8002cb4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00e      	beq.n	8002c40 <osThreadNew+0xa8>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2ba7      	cmp	r3, #167	@ 0xa7
 8002c28:	d90a      	bls.n	8002c40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d006      	beq.n	8002c40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <osThreadNew+0xa8>
        mem = 1;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	e010      	b.n	8002c62 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10c      	bne.n	8002c62 <osThreadNew+0xca>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d108      	bne.n	8002c62 <osThreadNew+0xca>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d104      	bne.n	8002c62 <osThreadNew+0xca>
          mem = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	e001      	b.n	8002c62 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d110      	bne.n	8002c8a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c70:	9202      	str	r2, [sp, #8]
 8002c72:	9301      	str	r3, [sp, #4]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	6a3a      	ldr	r2, [r7, #32]
 8002c7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f001 f944 	bl	8003f0c <xTaskCreateStatic>
 8002c84:	4603      	mov	r3, r0
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	e013      	b.n	8002cb2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d110      	bne.n	8002cb2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	f107 0310 	add.w	r3, r7, #16
 8002c98:	9301      	str	r3, [sp, #4]
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f001 f992 	bl	8003fcc <xTaskCreate>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d001      	beq.n	8002cb2 <osThreadNew+0x11a>
            hTask = NULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002cb2:	693b      	ldr	r3, [r7, #16]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3728      	adds	r7, #40	@ 0x28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cc4:	f3ef 8305 	mrs	r3, IPSR
 8002cc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <osDelay+0x1c>
    stat = osErrorISR;
 8002cd0:	f06f 0305 	mvn.w	r3, #5
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	e007      	b.n	8002ce8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f001 fad0 	bl	8004288 <vTaskDelay>
    }
  }

  return (stat);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b088      	sub	sp, #32
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cfe:	f3ef 8305 	mrs	r3, IPSR
 8002d02:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d04:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d174      	bne.n	8002df4 <osMutexNew+0x102>
    if (attr != NULL) {
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <osMutexNew+0x26>
      type = attr->attr_bits;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	e001      	b.n	8002d1c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <osMutexNew+0x3a>
      rmtx = 1U;
 8002d26:	2301      	movs	r3, #1
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	e001      	b.n	8002d30 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d15c      	bne.n	8002df4 <osMutexNew+0x102>
      mem = -1;
 8002d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d015      	beq.n	8002d72 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d006      	beq.n	8002d5c <osMutexNew+0x6a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b4f      	cmp	r3, #79	@ 0x4f
 8002d54:	d902      	bls.n	8002d5c <osMutexNew+0x6a>
          mem = 1;
 8002d56:	2301      	movs	r3, #1
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	e00c      	b.n	8002d76 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d108      	bne.n	8002d76 <osMutexNew+0x84>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d104      	bne.n	8002d76 <osMutexNew+0x84>
            mem = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	e001      	b.n	8002d76 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d112      	bne.n	8002da2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	4619      	mov	r1, r3
 8002d88:	2004      	movs	r0, #4
 8002d8a:	f000 fb20 	bl	80033ce <xQueueCreateMutexStatic>
 8002d8e:	61f8      	str	r0, [r7, #28]
 8002d90:	e016      	b.n	8002dc0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	4619      	mov	r1, r3
 8002d98:	2001      	movs	r0, #1
 8002d9a:	f000 fb18 	bl	80033ce <xQueueCreateMutexStatic>
 8002d9e:	61f8      	str	r0, [r7, #28]
 8002da0:	e00e      	b.n	8002dc0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10b      	bne.n	8002dc0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d004      	beq.n	8002db8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8002dae:	2004      	movs	r0, #4
 8002db0:	f000 faf5 	bl	800339e <xQueueCreateMutex>
 8002db4:	61f8      	str	r0, [r7, #28]
 8002db6:	e003      	b.n	8002dc0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8002db8:	2001      	movs	r0, #1
 8002dba:	f000 faf0 	bl	800339e <xQueueCreateMutex>
 8002dbe:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00c      	beq.n	8002de0 <osMutexNew+0xee>
        if (attr != NULL) {
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <osMutexNew+0xe2>
          name = attr->name;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e001      	b.n	8002dd8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8002dd8:	68f9      	ldr	r1, [r7, #12]
 8002dda:	69f8      	ldr	r0, [r7, #28]
 8002ddc:	f001 f838 	bl	8003e50 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <osMutexNew+0x102>
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002df4:	69fb      	ldr	r3, [r7, #28]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e1c:	f3ef 8305 	mrs	r3, IPSR
 8002e20:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e22:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8002e28:	f06f 0305 	mvn.w	r3, #5
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e02c      	b.n	8002e8a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d103      	bne.n	8002e3e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8002e36:	f06f 0303 	mvn.w	r3, #3
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	e025      	b.n	8002e8a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d011      	beq.n	8002e68 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002e44:	6839      	ldr	r1, [r7, #0]
 8002e46:	6938      	ldr	r0, [r7, #16]
 8002e48:	f000 fb11 	bl	800346e <xQueueTakeMutexRecursive>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d01b      	beq.n	8002e8a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8002e58:	f06f 0301 	mvn.w	r3, #1
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	e014      	b.n	8002e8a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002e60:	f06f 0302 	mvn.w	r3, #2
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e010      	b.n	8002e8a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8002e68:	6839      	ldr	r1, [r7, #0]
 8002e6a:	6938      	ldr	r0, [r7, #16]
 8002e6c:	f000 fdb8 	bl	80039e0 <xQueueSemaphoreTake>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d009      	beq.n	8002e8a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8002e7c:	f06f 0301 	mvn.w	r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	e002      	b.n	8002e8a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002e84:	f06f 0302 	mvn.w	r3, #2
 8002e88:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8002e8a:	697b      	ldr	r3, [r7, #20]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eb0:	f3ef 8305 	mrs	r3, IPSR
 8002eb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002eb6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <osMutexRelease+0x30>
    stat = osErrorISR;
 8002ebc:	f06f 0305 	mvn.w	r3, #5
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	e01f      	b.n	8002f04 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8002eca:	f06f 0303 	mvn.w	r3, #3
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	e018      	b.n	8002f04 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d009      	beq.n	8002eec <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8002ed8:	6938      	ldr	r0, [r7, #16]
 8002eda:	f000 fa93 	bl	8003404 <xQueueGiveMutexRecursive>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d00f      	beq.n	8002f04 <osMutexRelease+0x70>
        stat = osErrorResource;
 8002ee4:	f06f 0302 	mvn.w	r3, #2
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e00b      	b.n	8002f04 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8002eec:	2300      	movs	r3, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	6938      	ldr	r0, [r7, #16]
 8002ef4:	f000 faf2 	bl	80034dc <xQueueGenericSend>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d002      	beq.n	8002f04 <osMutexRelease+0x70>
        stat = osErrorResource;
 8002efe:	f06f 0302 	mvn.w	r3, #2
 8002f02:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002f04:	697b      	ldr	r3, [r7, #20]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4a07      	ldr	r2, [pc, #28]	@ (8002f3c <vApplicationGetIdleTaskMemory+0x2c>)
 8002f20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	4a06      	ldr	r2, [pc, #24]	@ (8002f40 <vApplicationGetIdleTaskMemory+0x30>)
 8002f26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2280      	movs	r2, #128	@ 0x80
 8002f2c:	601a      	str	r2, [r3, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000124 	.word	0x20000124
 8002f40:	200001cc 	.word	0x200001cc

08002f44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a07      	ldr	r2, [pc, #28]	@ (8002f70 <vApplicationGetTimerTaskMemory+0x2c>)
 8002f54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4a06      	ldr	r2, [pc, #24]	@ (8002f74 <vApplicationGetTimerTaskMemory+0x30>)
 8002f5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f62:	601a      	str	r2, [r3, #0]
}
 8002f64:	bf00      	nop
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	200003cc 	.word	0x200003cc
 8002f74:	20000474 	.word	0x20000474

08002f78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f103 0208 	add.w	r2, r3, #8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f103 0208 	add.w	r2, r3, #8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f103 0208 	add.w	r2, r3, #8
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b085      	sub	sp, #20
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	601a      	str	r2, [r3, #0]
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003030:	d103      	bne.n	800303a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	e00c      	b.n	8003054 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3308      	adds	r3, #8
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e002      	b.n	8003048 <vListInsert+0x2e>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	429a      	cmp	r2, r3
 8003052:	d2f6      	bcs.n	8003042 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	601a      	str	r2, [r3, #0]
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6892      	ldr	r2, [r2, #8]
 80030a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6852      	ldr	r2, [r2, #4]
 80030ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d103      	bne.n	80030c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	1e5a      	subs	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10b      	bne.n	800310c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003106:	bf00      	nop
 8003108:	bf00      	nop
 800310a:	e7fd      	b.n	8003108 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800310c:	f002 fbd4 	bl	80058b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003118:	68f9      	ldr	r1, [r7, #12]
 800311a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	441a      	add	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800313c:	3b01      	subs	r3, #1
 800313e:	68f9      	ldr	r1, [r7, #12]
 8003140:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	441a      	add	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	22ff      	movs	r2, #255	@ 0xff
 8003150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	22ff      	movs	r2, #255	@ 0xff
 8003158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d114      	bne.n	800318c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01a      	beq.n	80031a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3310      	adds	r3, #16
 800316e:	4618      	mov	r0, r3
 8003170:	f001 fb5e 	bl	8004830 <xTaskRemoveFromEventList>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d012      	beq.n	80031a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800317a:	4b0d      	ldr	r3, [pc, #52]	@ (80031b0 <xQueueGenericReset+0xd0>)
 800317c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	e009      	b.n	80031a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3310      	adds	r3, #16
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fef1 	bl	8002f78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3324      	adds	r3, #36	@ 0x24
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff feec 	bl	8002f78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80031a0:	f002 fbbc 	bl	800591c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80031a4:	2301      	movs	r3, #1
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	e000ed04 	.word	0xe000ed04

080031b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08e      	sub	sp, #56	@ 0x38
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10b      	bne.n	80031e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80031c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80031da:	bf00      	nop
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10b      	bne.n	80031fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80031e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	e7fd      	b.n	80031fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <xQueueGenericCreateStatic+0x56>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <xQueueGenericCreateStatic+0x5a>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <xQueueGenericCreateStatic+0x5c>
 800320e:	2300      	movs	r3, #0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10b      	bne.n	800322c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	623b      	str	r3, [r7, #32]
}
 8003226:	bf00      	nop
 8003228:	bf00      	nop
 800322a:	e7fd      	b.n	8003228 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <xQueueGenericCreateStatic+0x84>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <xQueueGenericCreateStatic+0x88>
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <xQueueGenericCreateStatic+0x8a>
 800323c:	2300      	movs	r3, #0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10b      	bne.n	800325a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	61fb      	str	r3, [r7, #28]
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	e7fd      	b.n	8003256 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800325a:	2350      	movs	r3, #80	@ 0x50
 800325c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b50      	cmp	r3, #80	@ 0x50
 8003262:	d00b      	beq.n	800327c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	61bb      	str	r3, [r7, #24]
}
 8003276:	bf00      	nop
 8003278:	bf00      	nop
 800327a:	e7fd      	b.n	8003278 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800327c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00d      	beq.n	80032a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003290:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	4613      	mov	r3, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f840 	bl	8003324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80032a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3730      	adds	r7, #48	@ 0x30
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b08a      	sub	sp, #40	@ 0x28
 80032b2:	af02      	add	r7, sp, #8
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	4613      	mov	r3, r2
 80032ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <xQueueGenericCreate+0x2c>
	__asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	613b      	str	r3, [r7, #16]
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	e7fd      	b.n	80032d6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	3350      	adds	r3, #80	@ 0x50
 80032e8:	4618      	mov	r0, r3
 80032ea:	f002 fc07 	bl	8005afc <pvPortMalloc>
 80032ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d011      	beq.n	800331a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	3350      	adds	r3, #80	@ 0x50
 80032fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003308:	79fa      	ldrb	r2, [r7, #7]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	4613      	mov	r3, r2
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f805 	bl	8003324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800331a:	69bb      	ldr	r3, [r7, #24]
	}
 800331c:	4618      	mov	r0, r3
 800331e:	3720      	adds	r7, #32
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d103      	bne.n	8003340 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	e002      	b.n	8003346 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003352:	2101      	movs	r1, #1
 8003354:	69b8      	ldr	r0, [r7, #24]
 8003356:	f7ff fec3 	bl	80030e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003362:	bf00      	nop
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00e      	beq.n	8003396 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800338a:	2300      	movs	r3, #0
 800338c:	2200      	movs	r2, #0
 800338e:	2100      	movs	r1, #0
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f8a3 	bl	80034dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b086      	sub	sp, #24
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80033a8:	2301      	movs	r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	2300      	movs	r3, #0
 80033ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	461a      	mov	r2, r3
 80033b4:	6939      	ldr	r1, [r7, #16]
 80033b6:	6978      	ldr	r0, [r7, #20]
 80033b8:	f7ff ff79 	bl	80032ae <xQueueGenericCreate>
 80033bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f7ff ffd3 	bl	800336a <prvInitialiseMutex>

		return xNewQueue;
 80033c4:	68fb      	ldr	r3, [r7, #12]
	}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b088      	sub	sp, #32
 80033d2:	af02      	add	r7, sp, #8
 80033d4:	4603      	mov	r3, r0
 80033d6:	6039      	str	r1, [r7, #0]
 80033d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80033da:	2301      	movs	r3, #1
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2200      	movs	r2, #0
 80033ea:	6939      	ldr	r1, [r7, #16]
 80033ec:	6978      	ldr	r0, [r7, #20]
 80033ee:	f7ff fee1 	bl	80031b4 <xQueueGenericCreateStatic>
 80033f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f7ff ffb8 	bl	800336a <prvInitialiseMutex>

		return xNewQueue;
 80033fa:	68fb      	ldr	r3, [r7, #12]
	}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10b      	bne.n	800342e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8003416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341a:	f383 8811 	msr	BASEPRI, r3
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f3bf 8f4f 	dsb	sy
 8003426:	60fb      	str	r3, [r7, #12]
}
 8003428:	bf00      	nop
 800342a:	bf00      	nop
 800342c:	e7fd      	b.n	800342a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	689c      	ldr	r4, [r3, #8]
 8003432:	f001 fbc3 	bl	8004bbc <xTaskGetCurrentTaskHandle>
 8003436:	4603      	mov	r3, r0
 8003438:	429c      	cmp	r4, r3
 800343a:	d111      	bne.n	8003460 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	1e5a      	subs	r2, r3, #1
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d105      	bne.n	800345a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800344e:	2300      	movs	r3, #0
 8003450:	2200      	movs	r2, #0
 8003452:	2100      	movs	r1, #0
 8003454:	6938      	ldr	r0, [r7, #16]
 8003456:	f000 f841 	bl	80034dc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800345a:	2301      	movs	r3, #1
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	e001      	b.n	8003464 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8003464:	697b      	ldr	r3, [r7, #20]
	}
 8003466:	4618      	mov	r0, r3
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	bd90      	pop	{r4, r7, pc}

0800346e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800346e:	b590      	push	{r4, r7, lr}
 8003470:	b087      	sub	sp, #28
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10b      	bne.n	800349a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8003482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	60fb      	str	r3, [r7, #12]
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	e7fd      	b.n	8003496 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	689c      	ldr	r4, [r3, #8]
 800349e:	f001 fb8d 	bl	8004bbc <xTaskGetCurrentTaskHandle>
 80034a2:	4603      	mov	r3, r0
 80034a4:	429c      	cmp	r4, r3
 80034a6:	d107      	bne.n	80034b8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80034b2:	2301      	movs	r3, #1
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	e00c      	b.n	80034d2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80034b8:	6839      	ldr	r1, [r7, #0]
 80034ba:	6938      	ldr	r0, [r7, #16]
 80034bc:	f000 fa90 	bl	80039e0 <xQueueSemaphoreTake>
 80034c0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d004      	beq.n	80034d2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80034d2:	697b      	ldr	r3, [r7, #20]
	}
 80034d4:	4618      	mov	r0, r3
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd90      	pop	{r4, r7, pc}

080034dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08e      	sub	sp, #56	@ 0x38
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80034ea:	2300      	movs	r3, #0
 80034ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80034f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10b      	bne.n	8003510 <xQueueGenericSend+0x34>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800350a:	bf00      	nop
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <xQueueGenericSend+0x42>
 8003516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <xQueueGenericSend+0x46>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <xQueueGenericSend+0x48>
 8003522:	2300      	movs	r3, #0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <xQueueGenericSend+0x64>
	__asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800353a:	bf00      	nop
 800353c:	bf00      	nop
 800353e:	e7fd      	b.n	800353c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d103      	bne.n	800354e <xQueueGenericSend+0x72>
 8003546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <xQueueGenericSend+0x76>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <xQueueGenericSend+0x78>
 8003552:	2300      	movs	r3, #0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10b      	bne.n	8003570 <xQueueGenericSend+0x94>
	__asm volatile
 8003558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	623b      	str	r3, [r7, #32]
}
 800356a:	bf00      	nop
 800356c:	bf00      	nop
 800356e:	e7fd      	b.n	800356c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003570:	f001 fb34 	bl	8004bdc <xTaskGetSchedulerState>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d102      	bne.n	8003580 <xQueueGenericSend+0xa4>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <xQueueGenericSend+0xa8>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <xQueueGenericSend+0xaa>
 8003584:	2300      	movs	r3, #0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10b      	bne.n	80035a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	61fb      	str	r3, [r7, #28]
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	e7fd      	b.n	800359e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035a2:	f002 f989 	bl	80058b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <xQueueGenericSend+0xdc>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d129      	bne.n	800360c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035be:	f000 fb37 	bl	8003c30 <prvCopyDataToQueue>
 80035c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d010      	beq.n	80035ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ce:	3324      	adds	r3, #36	@ 0x24
 80035d0:	4618      	mov	r0, r3
 80035d2:	f001 f92d 	bl	8004830 <xTaskRemoveFromEventList>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d013      	beq.n	8003604 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80035dc:	4b3f      	ldr	r3, [pc, #252]	@ (80036dc <xQueueGenericSend+0x200>)
 80035de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	e00a      	b.n	8003604 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80035ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d007      	beq.n	8003604 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80035f4:	4b39      	ldr	r3, [pc, #228]	@ (80036dc <xQueueGenericSend+0x200>)
 80035f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003604:	f002 f98a 	bl	800591c <vPortExitCritical>
				return pdPASS;
 8003608:	2301      	movs	r3, #1
 800360a:	e063      	b.n	80036d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d103      	bne.n	800361a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003612:	f002 f983 	bl	800591c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003616:	2300      	movs	r3, #0
 8003618:	e05c      	b.n	80036d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800361a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361c:	2b00      	cmp	r3, #0
 800361e:	d106      	bne.n	800362e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	4618      	mov	r0, r3
 8003626:	f001 f967 	bl	80048f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800362a:	2301      	movs	r3, #1
 800362c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800362e:	f002 f975 	bl	800591c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003632:	f000 fecf 	bl	80043d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003636:	f002 f93f 	bl	80058b8 <vPortEnterCritical>
 800363a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003640:	b25b      	sxtb	r3, r3
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003646:	d103      	bne.n	8003650 <xQueueGenericSend+0x174>
 8003648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003652:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003656:	b25b      	sxtb	r3, r3
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d103      	bne.n	8003666 <xQueueGenericSend+0x18a>
 800365e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003666:	f002 f959 	bl	800591c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800366a:	1d3a      	adds	r2, r7, #4
 800366c:	f107 0314 	add.w	r3, r7, #20
 8003670:	4611      	mov	r1, r2
 8003672:	4618      	mov	r0, r3
 8003674:	f001 f956 	bl	8004924 <xTaskCheckForTimeOut>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d124      	bne.n	80036c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800367e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003680:	f000 fbce 	bl	8003e20 <prvIsQueueFull>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d018      	beq.n	80036bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800368a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368c:	3310      	adds	r3, #16
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4611      	mov	r1, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f001 f87a 	bl	800478c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003698:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800369a:	f000 fb59 	bl	8003d50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800369e:	f000 fea7 	bl	80043f0 <xTaskResumeAll>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f47f af7c 	bne.w	80035a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80036aa:	4b0c      	ldr	r3, [pc, #48]	@ (80036dc <xQueueGenericSend+0x200>)
 80036ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	e772      	b.n	80035a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80036bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036be:	f000 fb47 	bl	8003d50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036c2:	f000 fe95 	bl	80043f0 <xTaskResumeAll>
 80036c6:	e76c      	b.n	80035a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80036c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036ca:	f000 fb41 	bl	8003d50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036ce:	f000 fe8f 	bl	80043f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80036d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3738      	adds	r7, #56	@ 0x38
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	e000ed04 	.word	0xe000ed04

080036e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b090      	sub	sp, #64	@ 0x40
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80036f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800370a:	bf00      	nop
 800370c:	bf00      	nop
 800370e:	e7fd      	b.n	800370c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d103      	bne.n	800371e <xQueueGenericSendFromISR+0x3e>
 8003716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <xQueueGenericSendFromISR+0x42>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <xQueueGenericSendFromISR+0x44>
 8003722:	2300      	movs	r3, #0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10b      	bne.n	8003740 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800373a:	bf00      	nop
 800373c:	bf00      	nop
 800373e:	e7fd      	b.n	800373c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d103      	bne.n	800374e <xQueueGenericSendFromISR+0x6e>
 8003746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <xQueueGenericSendFromISR+0x72>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <xQueueGenericSendFromISR+0x74>
 8003752:	2300      	movs	r3, #0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10b      	bne.n	8003770 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	623b      	str	r3, [r7, #32]
}
 800376a:	bf00      	nop
 800376c:	bf00      	nop
 800376e:	e7fd      	b.n	800376c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003770:	f002 f982 	bl	8005a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003774:	f3ef 8211 	mrs	r2, BASEPRI
 8003778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	61fa      	str	r2, [r7, #28]
 800378a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800378c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800378e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003792:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003798:	429a      	cmp	r2, r3
 800379a:	d302      	bcc.n	80037a2 <xQueueGenericSendFromISR+0xc2>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d12f      	bne.n	8003802 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80037a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80037b8:	f000 fa3a 	bl	8003c30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80037bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d112      	bne.n	80037ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d016      	beq.n	80037fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d0:	3324      	adds	r3, #36	@ 0x24
 80037d2:	4618      	mov	r0, r3
 80037d4:	f001 f82c 	bl	8004830 <xTaskRemoveFromEventList>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00e      	beq.n	80037fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00b      	beq.n	80037fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e007      	b.n	80037fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80037ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80037f0:	3301      	adds	r3, #1
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	b25a      	sxtb	r2, r3
 80037f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80037fc:	2301      	movs	r3, #1
 80037fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003800:	e001      	b.n	8003806 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003802:	2300      	movs	r3, #0
 8003804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003808:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003810:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003814:	4618      	mov	r0, r3
 8003816:	3740      	adds	r7, #64	@ 0x40
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08c      	sub	sp, #48	@ 0x30
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003828:	2300      	movs	r3, #0
 800382a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10b      	bne.n	800384e <xQueueReceive+0x32>
	__asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	623b      	str	r3, [r7, #32]
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	e7fd      	b.n	800384a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d103      	bne.n	800385c <xQueueReceive+0x40>
 8003854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <xQueueReceive+0x44>
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <xQueueReceive+0x46>
 8003860:	2300      	movs	r3, #0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10b      	bne.n	800387e <xQueueReceive+0x62>
	__asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	61fb      	str	r3, [r7, #28]
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	e7fd      	b.n	800387a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800387e:	f001 f9ad 	bl	8004bdc <xTaskGetSchedulerState>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d102      	bne.n	800388e <xQueueReceive+0x72>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <xQueueReceive+0x76>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <xQueueReceive+0x78>
 8003892:	2300      	movs	r3, #0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10b      	bne.n	80038b0 <xQueueReceive+0x94>
	__asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	61bb      	str	r3, [r7, #24]
}
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	e7fd      	b.n	80038ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038b0:	f002 f802 	bl	80058b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d01f      	beq.n	8003900 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038c4:	f000 fa1e 	bl	8003d04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ca:	1e5a      	subs	r2, r3, #1
 80038cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00f      	beq.n	80038f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038da:	3310      	adds	r3, #16
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 ffa7 	bl	8004830 <xTaskRemoveFromEventList>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80038e8:	4b3c      	ldr	r3, [pc, #240]	@ (80039dc <xQueueReceive+0x1c0>)
 80038ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80038f8:	f002 f810 	bl	800591c <vPortExitCritical>
				return pdPASS;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e069      	b.n	80039d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d103      	bne.n	800390e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003906:	f002 f809 	bl	800591c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800390a:	2300      	movs	r3, #0
 800390c:	e062      	b.n	80039d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800390e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003910:	2b00      	cmp	r3, #0
 8003912:	d106      	bne.n	8003922 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003914:	f107 0310 	add.w	r3, r7, #16
 8003918:	4618      	mov	r0, r3
 800391a:	f000 ffed 	bl	80048f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800391e:	2301      	movs	r3, #1
 8003920:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003922:	f001 fffb 	bl	800591c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003926:	f000 fd55 	bl	80043d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800392a:	f001 ffc5 	bl	80058b8 <vPortEnterCritical>
 800392e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003930:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003934:	b25b      	sxtb	r3, r3
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393a:	d103      	bne.n	8003944 <xQueueReceive+0x128>
 800393c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003946:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800394a:	b25b      	sxtb	r3, r3
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d103      	bne.n	800395a <xQueueReceive+0x13e>
 8003952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800395a:	f001 ffdf 	bl	800591c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800395e:	1d3a      	adds	r2, r7, #4
 8003960:	f107 0310 	add.w	r3, r7, #16
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f000 ffdc 	bl	8004924 <xTaskCheckForTimeOut>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d123      	bne.n	80039ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003974:	f000 fa3e 	bl	8003df4 <prvIsQueueEmpty>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d017      	beq.n	80039ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800397e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003980:	3324      	adds	r3, #36	@ 0x24
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f000 ff00 	bl	800478c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800398c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800398e:	f000 f9df 	bl	8003d50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003992:	f000 fd2d 	bl	80043f0 <xTaskResumeAll>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d189      	bne.n	80038b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800399c:	4b0f      	ldr	r3, [pc, #60]	@ (80039dc <xQueueReceive+0x1c0>)
 800399e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	e780      	b.n	80038b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80039ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039b0:	f000 f9ce 	bl	8003d50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039b4:	f000 fd1c 	bl	80043f0 <xTaskResumeAll>
 80039b8:	e77a      	b.n	80038b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80039ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039bc:	f000 f9c8 	bl	8003d50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039c0:	f000 fd16 	bl	80043f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039c6:	f000 fa15 	bl	8003df4 <prvIsQueueEmpty>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f43f af6f 	beq.w	80038b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80039d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3730      	adds	r7, #48	@ 0x30
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	e000ed04 	.word	0xe000ed04

080039e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08e      	sub	sp, #56	@ 0x38
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80039f2:	2300      	movs	r3, #0
 80039f4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10b      	bne.n	8003a14 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	623b      	str	r3, [r7, #32]
}
 8003a0e:	bf00      	nop
 8003a10:	bf00      	nop
 8003a12:	e7fd      	b.n	8003a10 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00b      	beq.n	8003a34 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	61fb      	str	r3, [r7, #28]
}
 8003a2e:	bf00      	nop
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a34:	f001 f8d2 	bl	8004bdc <xTaskGetSchedulerState>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d102      	bne.n	8003a44 <xQueueSemaphoreTake+0x64>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <xQueueSemaphoreTake+0x68>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <xQueueSemaphoreTake+0x6a>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10b      	bne.n	8003a66 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	61bb      	str	r3, [r7, #24]
}
 8003a60:	bf00      	nop
 8003a62:	bf00      	nop
 8003a64:	e7fd      	b.n	8003a62 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a66:	f001 ff27 	bl	80058b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d024      	beq.n	8003ac0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a78:	1e5a      	subs	r2, r3, #1
 8003a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d104      	bne.n	8003a90 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003a86:	f001 fa23 	bl	8004ed0 <pvTaskIncrementMutexHeldCount>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a8e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00f      	beq.n	8003ab8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9a:	3310      	adds	r3, #16
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fec7 	bl	8004830 <xTaskRemoveFromEventList>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d007      	beq.n	8003ab8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003aa8:	4b54      	ldr	r3, [pc, #336]	@ (8003bfc <xQueueSemaphoreTake+0x21c>)
 8003aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ab8:	f001 ff30 	bl	800591c <vPortExitCritical>
				return pdPASS;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e098      	b.n	8003bf2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d112      	bne.n	8003aec <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00b      	beq.n	8003ae4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	617b      	str	r3, [r7, #20]
}
 8003ade:	bf00      	nop
 8003ae0:	bf00      	nop
 8003ae2:	e7fd      	b.n	8003ae0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003ae4:	f001 ff1a 	bl	800591c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e082      	b.n	8003bf2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003af2:	f107 030c 	add.w	r3, r7, #12
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fefe 	bl	80048f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003afc:	2301      	movs	r3, #1
 8003afe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b00:	f001 ff0c 	bl	800591c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b04:	f000 fc66 	bl	80043d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b08:	f001 fed6 	bl	80058b8 <vPortEnterCritical>
 8003b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b12:	b25b      	sxtb	r3, r3
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d103      	bne.n	8003b22 <xQueueSemaphoreTake+0x142>
 8003b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b28:	b25b      	sxtb	r3, r3
 8003b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2e:	d103      	bne.n	8003b38 <xQueueSemaphoreTake+0x158>
 8003b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b38:	f001 fef0 	bl	800591c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b3c:	463a      	mov	r2, r7
 8003b3e:	f107 030c 	add.w	r3, r7, #12
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 feed 	bl	8004924 <xTaskCheckForTimeOut>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d132      	bne.n	8003bb6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b52:	f000 f94f 	bl	8003df4 <prvIsQueueEmpty>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d026      	beq.n	8003baa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d109      	bne.n	8003b78 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003b64:	f001 fea8 	bl	80058b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 f853 	bl	8004c18 <xTaskPriorityInherit>
 8003b72:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003b74:	f001 fed2 	bl	800591c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7a:	3324      	adds	r3, #36	@ 0x24
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fe03 	bl	800478c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b88:	f000 f8e2 	bl	8003d50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b8c:	f000 fc30 	bl	80043f0 <xTaskResumeAll>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f47f af67 	bne.w	8003a66 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003b98:	4b18      	ldr	r3, [pc, #96]	@ (8003bfc <xQueueSemaphoreTake+0x21c>)
 8003b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	e75d      	b.n	8003a66 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003baa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003bac:	f000 f8d0 	bl	8003d50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bb0:	f000 fc1e 	bl	80043f0 <xTaskResumeAll>
 8003bb4:	e757      	b.n	8003a66 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003bb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003bb8:	f000 f8ca 	bl	8003d50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bbc:	f000 fc18 	bl	80043f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003bc2:	f000 f917 	bl	8003df4 <prvIsQueueEmpty>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f43f af4c 	beq.w	8003a66 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00d      	beq.n	8003bf0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003bd4:	f001 fe70 	bl	80058b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003bd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003bda:	f000 f811 	bl	8003c00 <prvGetDisinheritPriorityAfterTimeout>
 8003bde:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003be6:	4618      	mov	r0, r3
 8003be8:	f001 f8ee 	bl	8004dc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003bec:	f001 fe96 	bl	800591c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3738      	adds	r7, #56	@ 0x38
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	e000ed04 	.word	0xe000ed04

08003c00 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d006      	beq.n	8003c1e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e001      	b.n	8003c22 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003c22:	68fb      	ldr	r3, [r7, #12]
	}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10d      	bne.n	8003c6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d14d      	bne.n	8003cf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f001 f844 	bl	8004ce8 <xTaskPriorityDisinherit>
 8003c60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	e043      	b.n	8003cf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d119      	bne.n	8003ca4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6858      	ldr	r0, [r3, #4]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68b9      	ldr	r1, [r7, #8]
 8003c7c:	f002 f9e0 	bl	8006040 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	441a      	add	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d32b      	bcc.n	8003cf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	e026      	b.n	8003cf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	68d8      	ldr	r0, [r3, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cac:	461a      	mov	r2, r3
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	f002 f9c6 	bl	8006040 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbc:	425b      	negs	r3, r3
 8003cbe:	441a      	add	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d207      	bcs.n	8003ce0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd8:	425b      	negs	r3, r3
 8003cda:	441a      	add	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d105      	bne.n	8003cf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003cfa:	697b      	ldr	r3, [r7, #20]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d018      	beq.n	8003d48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	441a      	add	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d303      	bcc.n	8003d38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68d9      	ldr	r1, [r3, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d40:	461a      	mov	r2, r3
 8003d42:	6838      	ldr	r0, [r7, #0]
 8003d44:	f002 f97c 	bl	8006040 <memcpy>
	}
}
 8003d48:	bf00      	nop
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d58:	f001 fdae 	bl	80058b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d64:	e011      	b.n	8003d8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d012      	beq.n	8003d94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3324      	adds	r3, #36	@ 0x24
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fd5c 	bl	8004830 <xTaskRemoveFromEventList>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d7e:	f000 fe35 	bl	80049ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	dce9      	bgt.n	8003d66 <prvUnlockQueue+0x16>
 8003d92:	e000      	b.n	8003d96 <prvUnlockQueue+0x46>
					break;
 8003d94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	22ff      	movs	r2, #255	@ 0xff
 8003d9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003d9e:	f001 fdbd 	bl	800591c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003da2:	f001 fd89 	bl	80058b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003dae:	e011      	b.n	8003dd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d012      	beq.n	8003dde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3310      	adds	r3, #16
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fd37 	bl	8004830 <xTaskRemoveFromEventList>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003dc8:	f000 fe10 	bl	80049ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003dcc:	7bbb      	ldrb	r3, [r7, #14]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003dd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	dce9      	bgt.n	8003db0 <prvUnlockQueue+0x60>
 8003ddc:	e000      	b.n	8003de0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003dde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	22ff      	movs	r2, #255	@ 0xff
 8003de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003de8:	f001 fd98 	bl	800591c <vPortExitCritical>
}
 8003dec:	bf00      	nop
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dfc:	f001 fd5c 	bl	80058b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d102      	bne.n	8003e0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	e001      	b.n	8003e12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e12:	f001 fd83 	bl	800591c <vPortExitCritical>

	return xReturn;
 8003e16:	68fb      	ldr	r3, [r7, #12]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e28:	f001 fd46 	bl	80058b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d102      	bne.n	8003e3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	e001      	b.n	8003e42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e42:	f001 fd6b 	bl	800591c <vPortExitCritical>

	return xReturn;
 8003e46:	68fb      	ldr	r3, [r7, #12]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	e014      	b.n	8003e8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e60:	4a0f      	ldr	r2, [pc, #60]	@ (8003ea0 <vQueueAddToRegistry+0x50>)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10b      	bne.n	8003e84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e6c:	490c      	ldr	r1, [pc, #48]	@ (8003ea0 <vQueueAddToRegistry+0x50>)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e76:	4a0a      	ldr	r2, [pc, #40]	@ (8003ea0 <vQueueAddToRegistry+0x50>)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e82:	e006      	b.n	8003e92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3301      	adds	r3, #1
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b07      	cmp	r3, #7
 8003e8e:	d9e7      	bls.n	8003e60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000874 	.word	0x20000874

08003ea4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003eb4:	f001 fd00 	bl	80058b8 <vPortEnterCritical>
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ebe:	b25b      	sxtb	r3, r3
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d103      	bne.n	8003ece <vQueueWaitForMessageRestricted+0x2a>
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d103      	bne.n	8003ee4 <vQueueWaitForMessageRestricted+0x40>
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ee4:	f001 fd1a 	bl	800591c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	3324      	adds	r3, #36	@ 0x24
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fc6d 	bl	80047d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003efe:	6978      	ldr	r0, [r7, #20]
 8003f00:	f7ff ff26 	bl	8003d50 <prvUnlockQueue>
	}
 8003f04:	bf00      	nop
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08e      	sub	sp, #56	@ 0x38
 8003f10:	af04      	add	r7, sp, #16
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10b      	bne.n	8003f38 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	623b      	str	r3, [r7, #32]
}
 8003f32:	bf00      	nop
 8003f34:	bf00      	nop
 8003f36:	e7fd      	b.n	8003f34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10b      	bne.n	8003f56 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	61fb      	str	r3, [r7, #28]
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	e7fd      	b.n	8003f52 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f56:	23a8      	movs	r3, #168	@ 0xa8
 8003f58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2ba8      	cmp	r3, #168	@ 0xa8
 8003f5e:	d00b      	beq.n	8003f78 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	61bb      	str	r3, [r7, #24]
}
 8003f72:	bf00      	nop
 8003f74:	bf00      	nop
 8003f76:	e7fd      	b.n	8003f74 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01e      	beq.n	8003fbe <xTaskCreateStatic+0xb2>
 8003f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d01b      	beq.n	8003fbe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f88:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f8e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f98:	2300      	movs	r3, #0
 8003f9a:	9303      	str	r3, [sp, #12]
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9e:	9302      	str	r3, [sp, #8]
 8003fa0:	f107 0314 	add.w	r3, r7, #20
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f851 	bl	8004058 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003fb8:	f000 f8f6 	bl	80041a8 <prvAddNewTaskToReadyList>
 8003fbc:	e001      	b.n	8003fc2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003fc2:	697b      	ldr	r3, [r7, #20]
	}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3728      	adds	r7, #40	@ 0x28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08c      	sub	sp, #48	@ 0x30
 8003fd0:	af04      	add	r7, sp, #16
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fdc:	88fb      	ldrh	r3, [r7, #6]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f001 fd8b 	bl	8005afc <pvPortMalloc>
 8003fe6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00e      	beq.n	800400c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fee:	20a8      	movs	r0, #168	@ 0xa8
 8003ff0:	f001 fd84 	bl	8005afc <pvPortMalloc>
 8003ff4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	631a      	str	r2, [r3, #48]	@ 0x30
 8004002:	e005      	b.n	8004010 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004004:	6978      	ldr	r0, [r7, #20]
 8004006:	f001 fe47 	bl	8005c98 <vPortFree>
 800400a:	e001      	b.n	8004010 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800400c:	2300      	movs	r3, #0
 800400e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d017      	beq.n	8004046 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800401e:	88fa      	ldrh	r2, [r7, #6]
 8004020:	2300      	movs	r3, #0
 8004022:	9303      	str	r3, [sp, #12]
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	9302      	str	r3, [sp, #8]
 8004028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402a:	9301      	str	r3, [sp, #4]
 800402c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f80f 	bl	8004058 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800403a:	69f8      	ldr	r0, [r7, #28]
 800403c:	f000 f8b4 	bl	80041a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004040:	2301      	movs	r3, #1
 8004042:	61bb      	str	r3, [r7, #24]
 8004044:	e002      	b.n	800404c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004046:	f04f 33ff 	mov.w	r3, #4294967295
 800404a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800404c:	69bb      	ldr	r3, [r7, #24]
	}
 800404e:	4618      	mov	r0, r3
 8004050:	3720      	adds	r7, #32
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004068:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	461a      	mov	r2, r3
 8004070:	21a5      	movs	r1, #165	@ 0xa5
 8004072:	f001 ff53 	bl	8005f1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004078:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004080:	3b01      	subs	r3, #1
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f023 0307 	bic.w	r3, r3, #7
 800408e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	617b      	str	r3, [r7, #20]
}
 80040ac:	bf00      	nop
 80040ae:	bf00      	nop
 80040b0:	e7fd      	b.n	80040ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01f      	beq.n	80040f8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	e012      	b.n	80040e4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	4413      	add	r3, r2
 80040c4:	7819      	ldrb	r1, [r3, #0]
 80040c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	4413      	add	r3, r2
 80040cc:	3334      	adds	r3, #52	@ 0x34
 80040ce:	460a      	mov	r2, r1
 80040d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	4413      	add	r3, r2
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d006      	beq.n	80040ec <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3301      	adds	r3, #1
 80040e2:	61fb      	str	r3, [r7, #28]
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	2b0f      	cmp	r3, #15
 80040e8:	d9e9      	bls.n	80040be <prvInitialiseNewTask+0x66>
 80040ea:	e000      	b.n	80040ee <prvInitialiseNewTask+0x96>
			{
				break;
 80040ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040f6:	e003      	b.n	8004100 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004102:	2b37      	cmp	r3, #55	@ 0x37
 8004104:	d901      	bls.n	800410a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004106:	2337      	movs	r3, #55	@ 0x37
 8004108:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800410a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800410e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004112:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004114:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004118:	2200      	movs	r2, #0
 800411a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800411c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411e:	3304      	adds	r3, #4
 8004120:	4618      	mov	r0, r3
 8004122:	f7fe ff49 	bl	8002fb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004128:	3318      	adds	r3, #24
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe ff44 	bl	8002fb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004134:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004138:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800413c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004144:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004148:	2200      	movs	r2, #0
 800414a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800414e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004150:	2200      	movs	r2, #0
 8004152:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004158:	3354      	adds	r3, #84	@ 0x54
 800415a:	224c      	movs	r2, #76	@ 0x4c
 800415c:	2100      	movs	r1, #0
 800415e:	4618      	mov	r0, r3
 8004160:	f001 fedc 	bl	8005f1c <memset>
 8004164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004166:	4a0d      	ldr	r2, [pc, #52]	@ (800419c <prvInitialiseNewTask+0x144>)
 8004168:	659a      	str	r2, [r3, #88]	@ 0x58
 800416a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416c:	4a0c      	ldr	r2, [pc, #48]	@ (80041a0 <prvInitialiseNewTask+0x148>)
 800416e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004172:	4a0c      	ldr	r2, [pc, #48]	@ (80041a4 <prvInitialiseNewTask+0x14c>)
 8004174:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	68f9      	ldr	r1, [r7, #12]
 800417a:	69b8      	ldr	r0, [r7, #24]
 800417c:	f001 fa6a 	bl	8005654 <pxPortInitialiseStack>
 8004180:	4602      	mov	r2, r0
 8004182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004184:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800418c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004190:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004192:	bf00      	nop
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20004b08 	.word	0x20004b08
 80041a0:	20004b70 	.word	0x20004b70
 80041a4:	20004bd8 	.word	0x20004bd8

080041a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041b0:	f001 fb82 	bl	80058b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041b4:	4b2d      	ldr	r3, [pc, #180]	@ (800426c <prvAddNewTaskToReadyList+0xc4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3301      	adds	r3, #1
 80041ba:	4a2c      	ldr	r2, [pc, #176]	@ (800426c <prvAddNewTaskToReadyList+0xc4>)
 80041bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041be:	4b2c      	ldr	r3, [pc, #176]	@ (8004270 <prvAddNewTaskToReadyList+0xc8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004270 <prvAddNewTaskToReadyList+0xc8>)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041cc:	4b27      	ldr	r3, [pc, #156]	@ (800426c <prvAddNewTaskToReadyList+0xc4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d110      	bne.n	80041f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041d4:	f000 fc2e 	bl	8004a34 <prvInitialiseTaskLists>
 80041d8:	e00d      	b.n	80041f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041da:	4b26      	ldr	r3, [pc, #152]	@ (8004274 <prvAddNewTaskToReadyList+0xcc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041e2:	4b23      	ldr	r3, [pc, #140]	@ (8004270 <prvAddNewTaskToReadyList+0xc8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d802      	bhi.n	80041f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004270 <prvAddNewTaskToReadyList+0xc8>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041f6:	4b20      	ldr	r3, [pc, #128]	@ (8004278 <prvAddNewTaskToReadyList+0xd0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3301      	adds	r3, #1
 80041fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004278 <prvAddNewTaskToReadyList+0xd0>)
 80041fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004200:	4b1d      	ldr	r3, [pc, #116]	@ (8004278 <prvAddNewTaskToReadyList+0xd0>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800420c:	4b1b      	ldr	r3, [pc, #108]	@ (800427c <prvAddNewTaskToReadyList+0xd4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d903      	bls.n	800421c <prvAddNewTaskToReadyList+0x74>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	4a18      	ldr	r2, [pc, #96]	@ (800427c <prvAddNewTaskToReadyList+0xd4>)
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4a15      	ldr	r2, [pc, #84]	@ (8004280 <prvAddNewTaskToReadyList+0xd8>)
 800422a:	441a      	add	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	4619      	mov	r1, r3
 8004232:	4610      	mov	r0, r2
 8004234:	f7fe fecd 	bl	8002fd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004238:	f001 fb70 	bl	800591c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800423c:	4b0d      	ldr	r3, [pc, #52]	@ (8004274 <prvAddNewTaskToReadyList+0xcc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00e      	beq.n	8004262 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004244:	4b0a      	ldr	r3, [pc, #40]	@ (8004270 <prvAddNewTaskToReadyList+0xc8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424e:	429a      	cmp	r2, r3
 8004250:	d207      	bcs.n	8004262 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004252:	4b0c      	ldr	r3, [pc, #48]	@ (8004284 <prvAddNewTaskToReadyList+0xdc>)
 8004254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20000d88 	.word	0x20000d88
 8004270:	200008b4 	.word	0x200008b4
 8004274:	20000d94 	.word	0x20000d94
 8004278:	20000da4 	.word	0x20000da4
 800427c:	20000d90 	.word	0x20000d90
 8004280:	200008b8 	.word	0x200008b8
 8004284:	e000ed04 	.word	0xe000ed04

08004288 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d018      	beq.n	80042cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800429a:	4b14      	ldr	r3, [pc, #80]	@ (80042ec <vTaskDelay+0x64>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00b      	beq.n	80042ba <vTaskDelay+0x32>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	60bb      	str	r3, [r7, #8]
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	e7fd      	b.n	80042b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042ba:	f000 f88b 	bl	80043d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042be:	2100      	movs	r1, #0
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fe19 	bl	8004ef8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042c6:	f000 f893 	bl	80043f0 <xTaskResumeAll>
 80042ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d107      	bne.n	80042e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80042d2:	4b07      	ldr	r3, [pc, #28]	@ (80042f0 <vTaskDelay+0x68>)
 80042d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000db0 	.word	0x20000db0
 80042f0:	e000ed04 	.word	0xe000ed04

080042f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	@ 0x28
 80042f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004302:	463a      	mov	r2, r7
 8004304:	1d39      	adds	r1, r7, #4
 8004306:	f107 0308 	add.w	r3, r7, #8
 800430a:	4618      	mov	r0, r3
 800430c:	f7fe fe00 	bl	8002f10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004310:	6839      	ldr	r1, [r7, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	9202      	str	r2, [sp, #8]
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	2300      	movs	r3, #0
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	2300      	movs	r3, #0
 8004320:	460a      	mov	r2, r1
 8004322:	4924      	ldr	r1, [pc, #144]	@ (80043b4 <vTaskStartScheduler+0xc0>)
 8004324:	4824      	ldr	r0, [pc, #144]	@ (80043b8 <vTaskStartScheduler+0xc4>)
 8004326:	f7ff fdf1 	bl	8003f0c <xTaskCreateStatic>
 800432a:	4603      	mov	r3, r0
 800432c:	4a23      	ldr	r2, [pc, #140]	@ (80043bc <vTaskStartScheduler+0xc8>)
 800432e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004330:	4b22      	ldr	r3, [pc, #136]	@ (80043bc <vTaskStartScheduler+0xc8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004338:	2301      	movs	r3, #1
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e001      	b.n	8004342 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d102      	bne.n	800434e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004348:	f000 fe2a 	bl	8004fa0 <xTimerCreateTimerTask>
 800434c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d11b      	bne.n	800438c <vTaskStartScheduler+0x98>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	613b      	str	r3, [r7, #16]
}
 8004366:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004368:	4b15      	ldr	r3, [pc, #84]	@ (80043c0 <vTaskStartScheduler+0xcc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3354      	adds	r3, #84	@ 0x54
 800436e:	4a15      	ldr	r2, [pc, #84]	@ (80043c4 <vTaskStartScheduler+0xd0>)
 8004370:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004372:	4b15      	ldr	r3, [pc, #84]	@ (80043c8 <vTaskStartScheduler+0xd4>)
 8004374:	f04f 32ff 	mov.w	r2, #4294967295
 8004378:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800437a:	4b14      	ldr	r3, [pc, #80]	@ (80043cc <vTaskStartScheduler+0xd8>)
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004380:	4b13      	ldr	r3, [pc, #76]	@ (80043d0 <vTaskStartScheduler+0xdc>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004386:	f001 f9f3 	bl	8005770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800438a:	e00f      	b.n	80043ac <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004392:	d10b      	bne.n	80043ac <vTaskStartScheduler+0xb8>
	__asm volatile
 8004394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	60fb      	str	r3, [r7, #12]
}
 80043a6:	bf00      	nop
 80043a8:	bf00      	nop
 80043aa:	e7fd      	b.n	80043a8 <vTaskStartScheduler+0xb4>
}
 80043ac:	bf00      	nop
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	080069a8 	.word	0x080069a8
 80043b8:	08004a05 	.word	0x08004a05
 80043bc:	20000dac 	.word	0x20000dac
 80043c0:	200008b4 	.word	0x200008b4
 80043c4:	20000010 	.word	0x20000010
 80043c8:	20000da8 	.word	0x20000da8
 80043cc:	20000d94 	.word	0x20000d94
 80043d0:	20000d8c 	.word	0x20000d8c

080043d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80043d8:	4b04      	ldr	r3, [pc, #16]	@ (80043ec <vTaskSuspendAll+0x18>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3301      	adds	r3, #1
 80043de:	4a03      	ldr	r2, [pc, #12]	@ (80043ec <vTaskSuspendAll+0x18>)
 80043e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80043e2:	bf00      	nop
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	20000db0 	.word	0x20000db0

080043f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043fe:	4b42      	ldr	r3, [pc, #264]	@ (8004508 <xTaskResumeAll+0x118>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10b      	bne.n	800441e <xTaskResumeAll+0x2e>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	603b      	str	r3, [r7, #0]
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	e7fd      	b.n	800441a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800441e:	f001 fa4b 	bl	80058b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004422:	4b39      	ldr	r3, [pc, #228]	@ (8004508 <xTaskResumeAll+0x118>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3b01      	subs	r3, #1
 8004428:	4a37      	ldr	r2, [pc, #220]	@ (8004508 <xTaskResumeAll+0x118>)
 800442a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800442c:	4b36      	ldr	r3, [pc, #216]	@ (8004508 <xTaskResumeAll+0x118>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d162      	bne.n	80044fa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004434:	4b35      	ldr	r3, [pc, #212]	@ (800450c <xTaskResumeAll+0x11c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d05e      	beq.n	80044fa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800443c:	e02f      	b.n	800449e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800443e:	4b34      	ldr	r3, [pc, #208]	@ (8004510 <xTaskResumeAll+0x120>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3318      	adds	r3, #24
 800444a:	4618      	mov	r0, r3
 800444c:	f7fe fe1e 	bl	800308c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3304      	adds	r3, #4
 8004454:	4618      	mov	r0, r3
 8004456:	f7fe fe19 	bl	800308c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800445e:	4b2d      	ldr	r3, [pc, #180]	@ (8004514 <xTaskResumeAll+0x124>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d903      	bls.n	800446e <xTaskResumeAll+0x7e>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446a:	4a2a      	ldr	r2, [pc, #168]	@ (8004514 <xTaskResumeAll+0x124>)
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4a27      	ldr	r2, [pc, #156]	@ (8004518 <xTaskResumeAll+0x128>)
 800447c:	441a      	add	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3304      	adds	r3, #4
 8004482:	4619      	mov	r1, r3
 8004484:	4610      	mov	r0, r2
 8004486:	f7fe fda4 	bl	8002fd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800448e:	4b23      	ldr	r3, [pc, #140]	@ (800451c <xTaskResumeAll+0x12c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004494:	429a      	cmp	r2, r3
 8004496:	d302      	bcc.n	800449e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004498:	4b21      	ldr	r3, [pc, #132]	@ (8004520 <xTaskResumeAll+0x130>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800449e:	4b1c      	ldr	r3, [pc, #112]	@ (8004510 <xTaskResumeAll+0x120>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1cb      	bne.n	800443e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044ac:	f000 fb66 	bl	8004b7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80044b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004524 <xTaskResumeAll+0x134>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d010      	beq.n	80044de <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044bc:	f000 f846 	bl	800454c <xTaskIncrementTick>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80044c6:	4b16      	ldr	r3, [pc, #88]	@ (8004520 <xTaskResumeAll+0x130>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f1      	bne.n	80044bc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80044d8:	4b12      	ldr	r3, [pc, #72]	@ (8004524 <xTaskResumeAll+0x134>)
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044de:	4b10      	ldr	r3, [pc, #64]	@ (8004520 <xTaskResumeAll+0x130>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044e6:	2301      	movs	r3, #1
 80044e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004528 <xTaskResumeAll+0x138>)
 80044ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044fa:	f001 fa0f 	bl	800591c <vPortExitCritical>

	return xAlreadyYielded;
 80044fe:	68bb      	ldr	r3, [r7, #8]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000db0 	.word	0x20000db0
 800450c:	20000d88 	.word	0x20000d88
 8004510:	20000d48 	.word	0x20000d48
 8004514:	20000d90 	.word	0x20000d90
 8004518:	200008b8 	.word	0x200008b8
 800451c:	200008b4 	.word	0x200008b4
 8004520:	20000d9c 	.word	0x20000d9c
 8004524:	20000d98 	.word	0x20000d98
 8004528:	e000ed04 	.word	0xe000ed04

0800452c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004532:	4b05      	ldr	r3, [pc, #20]	@ (8004548 <xTaskGetTickCount+0x1c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004538:	687b      	ldr	r3, [r7, #4]
}
 800453a:	4618      	mov	r0, r3
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	20000d8c 	.word	0x20000d8c

0800454c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004556:	4b4f      	ldr	r3, [pc, #316]	@ (8004694 <xTaskIncrementTick+0x148>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	f040 8090 	bne.w	8004680 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004560:	4b4d      	ldr	r3, [pc, #308]	@ (8004698 <xTaskIncrementTick+0x14c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3301      	adds	r3, #1
 8004566:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004568:	4a4b      	ldr	r2, [pc, #300]	@ (8004698 <xTaskIncrementTick+0x14c>)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d121      	bne.n	80045b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004574:	4b49      	ldr	r3, [pc, #292]	@ (800469c <xTaskIncrementTick+0x150>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <xTaskIncrementTick+0x4a>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	603b      	str	r3, [r7, #0]
}
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	e7fd      	b.n	8004592 <xTaskIncrementTick+0x46>
 8004596:	4b41      	ldr	r3, [pc, #260]	@ (800469c <xTaskIncrementTick+0x150>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	4b40      	ldr	r3, [pc, #256]	@ (80046a0 <xTaskIncrementTick+0x154>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a3e      	ldr	r2, [pc, #248]	@ (800469c <xTaskIncrementTick+0x150>)
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4a3e      	ldr	r2, [pc, #248]	@ (80046a0 <xTaskIncrementTick+0x154>)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	4b3e      	ldr	r3, [pc, #248]	@ (80046a4 <xTaskIncrementTick+0x158>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3301      	adds	r3, #1
 80045b0:	4a3c      	ldr	r2, [pc, #240]	@ (80046a4 <xTaskIncrementTick+0x158>)
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	f000 fae2 	bl	8004b7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045b8:	4b3b      	ldr	r3, [pc, #236]	@ (80046a8 <xTaskIncrementTick+0x15c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d349      	bcc.n	8004656 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045c2:	4b36      	ldr	r3, [pc, #216]	@ (800469c <xTaskIncrementTick+0x150>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d104      	bne.n	80045d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045cc:	4b36      	ldr	r3, [pc, #216]	@ (80046a8 <xTaskIncrementTick+0x15c>)
 80045ce:	f04f 32ff 	mov.w	r2, #4294967295
 80045d2:	601a      	str	r2, [r3, #0]
					break;
 80045d4:	e03f      	b.n	8004656 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d6:	4b31      	ldr	r3, [pc, #196]	@ (800469c <xTaskIncrementTick+0x150>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d203      	bcs.n	80045f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045ee:	4a2e      	ldr	r2, [pc, #184]	@ (80046a8 <xTaskIncrementTick+0x15c>)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045f4:	e02f      	b.n	8004656 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	3304      	adds	r3, #4
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe fd46 	bl	800308c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004604:	2b00      	cmp	r3, #0
 8004606:	d004      	beq.n	8004612 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	3318      	adds	r3, #24
 800460c:	4618      	mov	r0, r3
 800460e:	f7fe fd3d 	bl	800308c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004616:	4b25      	ldr	r3, [pc, #148]	@ (80046ac <xTaskIncrementTick+0x160>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d903      	bls.n	8004626 <xTaskIncrementTick+0xda>
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004622:	4a22      	ldr	r2, [pc, #136]	@ (80046ac <xTaskIncrementTick+0x160>)
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4a1f      	ldr	r2, [pc, #124]	@ (80046b0 <xTaskIncrementTick+0x164>)
 8004634:	441a      	add	r2, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	3304      	adds	r3, #4
 800463a:	4619      	mov	r1, r3
 800463c:	4610      	mov	r0, r2
 800463e:	f7fe fcc8 	bl	8002fd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004646:	4b1b      	ldr	r3, [pc, #108]	@ (80046b4 <xTaskIncrementTick+0x168>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464c:	429a      	cmp	r2, r3
 800464e:	d3b8      	bcc.n	80045c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004650:	2301      	movs	r3, #1
 8004652:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004654:	e7b5      	b.n	80045c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004656:	4b17      	ldr	r3, [pc, #92]	@ (80046b4 <xTaskIncrementTick+0x168>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800465c:	4914      	ldr	r1, [pc, #80]	@ (80046b0 <xTaskIncrementTick+0x164>)
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d901      	bls.n	8004672 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800466e:	2301      	movs	r3, #1
 8004670:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004672:	4b11      	ldr	r3, [pc, #68]	@ (80046b8 <xTaskIncrementTick+0x16c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d007      	beq.n	800468a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800467a:	2301      	movs	r3, #1
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	e004      	b.n	800468a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004680:	4b0e      	ldr	r3, [pc, #56]	@ (80046bc <xTaskIncrementTick+0x170>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3301      	adds	r3, #1
 8004686:	4a0d      	ldr	r2, [pc, #52]	@ (80046bc <xTaskIncrementTick+0x170>)
 8004688:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800468a:	697b      	ldr	r3, [r7, #20]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	20000db0 	.word	0x20000db0
 8004698:	20000d8c 	.word	0x20000d8c
 800469c:	20000d40 	.word	0x20000d40
 80046a0:	20000d44 	.word	0x20000d44
 80046a4:	20000da0 	.word	0x20000da0
 80046a8:	20000da8 	.word	0x20000da8
 80046ac:	20000d90 	.word	0x20000d90
 80046b0:	200008b8 	.word	0x200008b8
 80046b4:	200008b4 	.word	0x200008b4
 80046b8:	20000d9c 	.word	0x20000d9c
 80046bc:	20000d98 	.word	0x20000d98

080046c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004774 <vTaskSwitchContext+0xb4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004778 <vTaskSwitchContext+0xb8>)
 80046d0:	2201      	movs	r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046d4:	e047      	b.n	8004766 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80046d6:	4b28      	ldr	r3, [pc, #160]	@ (8004778 <vTaskSwitchContext+0xb8>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046dc:	4b27      	ldr	r3, [pc, #156]	@ (800477c <vTaskSwitchContext+0xbc>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e011      	b.n	8004708 <vTaskSwitchContext+0x48>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10b      	bne.n	8004702 <vTaskSwitchContext+0x42>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	607b      	str	r3, [r7, #4]
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	e7fd      	b.n	80046fe <vTaskSwitchContext+0x3e>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3b01      	subs	r3, #1
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	491d      	ldr	r1, [pc, #116]	@ (8004780 <vTaskSwitchContext+0xc0>)
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0e3      	beq.n	80046e4 <vTaskSwitchContext+0x24>
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4a16      	ldr	r2, [pc, #88]	@ (8004780 <vTaskSwitchContext+0xc0>)
 8004728:	4413      	add	r3, r2
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3308      	adds	r3, #8
 800473e:	429a      	cmp	r2, r3
 8004740:	d104      	bne.n	800474c <vTaskSwitchContext+0x8c>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	605a      	str	r2, [r3, #4]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	4a0c      	ldr	r2, [pc, #48]	@ (8004784 <vTaskSwitchContext+0xc4>)
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4a09      	ldr	r2, [pc, #36]	@ (800477c <vTaskSwitchContext+0xbc>)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800475c:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <vTaskSwitchContext+0xc4>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3354      	adds	r3, #84	@ 0x54
 8004762:	4a09      	ldr	r2, [pc, #36]	@ (8004788 <vTaskSwitchContext+0xc8>)
 8004764:	6013      	str	r3, [r2, #0]
}
 8004766:	bf00      	nop
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20000db0 	.word	0x20000db0
 8004778:	20000d9c 	.word	0x20000d9c
 800477c:	20000d90 	.word	0x20000d90
 8004780:	200008b8 	.word	0x200008b8
 8004784:	200008b4 	.word	0x200008b4
 8004788:	20000010 	.word	0x20000010

0800478c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10b      	bne.n	80047b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	60fb      	str	r3, [r7, #12]
}
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	e7fd      	b.n	80047b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047b4:	4b07      	ldr	r3, [pc, #28]	@ (80047d4 <vTaskPlaceOnEventList+0x48>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3318      	adds	r3, #24
 80047ba:	4619      	mov	r1, r3
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7fe fc2c 	bl	800301a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047c2:	2101      	movs	r1, #1
 80047c4:	6838      	ldr	r0, [r7, #0]
 80047c6:	f000 fb97 	bl	8004ef8 <prvAddCurrentTaskToDelayedList>
}
 80047ca:	bf00      	nop
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	200008b4 	.word	0x200008b4

080047d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10b      	bne.n	8004802 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	617b      	str	r3, [r7, #20]
}
 80047fc:	bf00      	nop
 80047fe:	bf00      	nop
 8004800:	e7fd      	b.n	80047fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004802:	4b0a      	ldr	r3, [pc, #40]	@ (800482c <vTaskPlaceOnEventListRestricted+0x54>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3318      	adds	r3, #24
 8004808:	4619      	mov	r1, r3
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7fe fbe1 	bl	8002fd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004816:	f04f 33ff 	mov.w	r3, #4294967295
 800481a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	68b8      	ldr	r0, [r7, #8]
 8004820:	f000 fb6a 	bl	8004ef8 <prvAddCurrentTaskToDelayedList>
	}
 8004824:	bf00      	nop
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	200008b4 	.word	0x200008b4

08004830 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10b      	bne.n	800485e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	60fb      	str	r3, [r7, #12]
}
 8004858:	bf00      	nop
 800485a:	bf00      	nop
 800485c:	e7fd      	b.n	800485a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	3318      	adds	r3, #24
 8004862:	4618      	mov	r0, r3
 8004864:	f7fe fc12 	bl	800308c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004868:	4b1d      	ldr	r3, [pc, #116]	@ (80048e0 <xTaskRemoveFromEventList+0xb0>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d11d      	bne.n	80048ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	3304      	adds	r3, #4
 8004874:	4618      	mov	r0, r3
 8004876:	f7fe fc09 	bl	800308c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800487e:	4b19      	ldr	r3, [pc, #100]	@ (80048e4 <xTaskRemoveFromEventList+0xb4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d903      	bls.n	800488e <xTaskRemoveFromEventList+0x5e>
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488a:	4a16      	ldr	r2, [pc, #88]	@ (80048e4 <xTaskRemoveFromEventList+0xb4>)
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4a13      	ldr	r2, [pc, #76]	@ (80048e8 <xTaskRemoveFromEventList+0xb8>)
 800489c:	441a      	add	r2, r3
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	3304      	adds	r3, #4
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f7fe fb94 	bl	8002fd2 <vListInsertEnd>
 80048aa:	e005      	b.n	80048b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	3318      	adds	r3, #24
 80048b0:	4619      	mov	r1, r3
 80048b2:	480e      	ldr	r0, [pc, #56]	@ (80048ec <xTaskRemoveFromEventList+0xbc>)
 80048b4:	f7fe fb8d 	bl	8002fd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048bc:	4b0c      	ldr	r3, [pc, #48]	@ (80048f0 <xTaskRemoveFromEventList+0xc0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d905      	bls.n	80048d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048c6:	2301      	movs	r3, #1
 80048c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048ca:	4b0a      	ldr	r3, [pc, #40]	@ (80048f4 <xTaskRemoveFromEventList+0xc4>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	e001      	b.n	80048d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80048d6:	697b      	ldr	r3, [r7, #20]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	20000db0 	.word	0x20000db0
 80048e4:	20000d90 	.word	0x20000d90
 80048e8:	200008b8 	.word	0x200008b8
 80048ec:	20000d48 	.word	0x20000d48
 80048f0:	200008b4 	.word	0x200008b4
 80048f4:	20000d9c 	.word	0x20000d9c

080048f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004900:	4b06      	ldr	r3, [pc, #24]	@ (800491c <vTaskInternalSetTimeOutState+0x24>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004908:	4b05      	ldr	r3, [pc, #20]	@ (8004920 <vTaskInternalSetTimeOutState+0x28>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	605a      	str	r2, [r3, #4]
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	20000da0 	.word	0x20000da0
 8004920:	20000d8c 	.word	0x20000d8c

08004924 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10b      	bne.n	800494c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	613b      	str	r3, [r7, #16]
}
 8004946:	bf00      	nop
 8004948:	bf00      	nop
 800494a:	e7fd      	b.n	8004948 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10b      	bne.n	800496a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	60fb      	str	r3, [r7, #12]
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	e7fd      	b.n	8004966 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800496a:	f000 ffa5 	bl	80058b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800496e:	4b1d      	ldr	r3, [pc, #116]	@ (80049e4 <xTaskCheckForTimeOut+0xc0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d102      	bne.n	800498e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004988:	2300      	movs	r3, #0
 800498a:	61fb      	str	r3, [r7, #28]
 800498c:	e023      	b.n	80049d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4b15      	ldr	r3, [pc, #84]	@ (80049e8 <xTaskCheckForTimeOut+0xc4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d007      	beq.n	80049aa <xTaskCheckForTimeOut+0x86>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d302      	bcc.n	80049aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049a4:	2301      	movs	r3, #1
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	e015      	b.n	80049d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d20b      	bcs.n	80049cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	1ad2      	subs	r2, r2, r3
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff ff99 	bl	80048f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
 80049ca:	e004      	b.n	80049d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049d2:	2301      	movs	r3, #1
 80049d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80049d6:	f000 ffa1 	bl	800591c <vPortExitCritical>

	return xReturn;
 80049da:	69fb      	ldr	r3, [r7, #28]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3720      	adds	r7, #32
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	20000d8c 	.word	0x20000d8c
 80049e8:	20000da0 	.word	0x20000da0

080049ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049f0:	4b03      	ldr	r3, [pc, #12]	@ (8004a00 <vTaskMissedYield+0x14>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
}
 80049f6:	bf00      	nop
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	20000d9c 	.word	0x20000d9c

08004a04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a0c:	f000 f852 	bl	8004ab4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a10:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <prvIdleTask+0x28>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d9f9      	bls.n	8004a0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a18:	4b05      	ldr	r3, [pc, #20]	@ (8004a30 <prvIdleTask+0x2c>)
 8004a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a28:	e7f0      	b.n	8004a0c <prvIdleTask+0x8>
 8004a2a:	bf00      	nop
 8004a2c:	200008b8 	.word	0x200008b8
 8004a30:	e000ed04 	.word	0xe000ed04

08004a34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	607b      	str	r3, [r7, #4]
 8004a3e:	e00c      	b.n	8004a5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4a12      	ldr	r2, [pc, #72]	@ (8004a94 <prvInitialiseTaskLists+0x60>)
 8004a4c:	4413      	add	r3, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fe fa92 	bl	8002f78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3301      	adds	r3, #1
 8004a58:	607b      	str	r3, [r7, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b37      	cmp	r3, #55	@ 0x37
 8004a5e:	d9ef      	bls.n	8004a40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a60:	480d      	ldr	r0, [pc, #52]	@ (8004a98 <prvInitialiseTaskLists+0x64>)
 8004a62:	f7fe fa89 	bl	8002f78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a66:	480d      	ldr	r0, [pc, #52]	@ (8004a9c <prvInitialiseTaskLists+0x68>)
 8004a68:	f7fe fa86 	bl	8002f78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a6c:	480c      	ldr	r0, [pc, #48]	@ (8004aa0 <prvInitialiseTaskLists+0x6c>)
 8004a6e:	f7fe fa83 	bl	8002f78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a72:	480c      	ldr	r0, [pc, #48]	@ (8004aa4 <prvInitialiseTaskLists+0x70>)
 8004a74:	f7fe fa80 	bl	8002f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a78:	480b      	ldr	r0, [pc, #44]	@ (8004aa8 <prvInitialiseTaskLists+0x74>)
 8004a7a:	f7fe fa7d 	bl	8002f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004aac <prvInitialiseTaskLists+0x78>)
 8004a80:	4a05      	ldr	r2, [pc, #20]	@ (8004a98 <prvInitialiseTaskLists+0x64>)
 8004a82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a84:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab0 <prvInitialiseTaskLists+0x7c>)
 8004a86:	4a05      	ldr	r2, [pc, #20]	@ (8004a9c <prvInitialiseTaskLists+0x68>)
 8004a88:	601a      	str	r2, [r3, #0]
}
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	200008b8 	.word	0x200008b8
 8004a98:	20000d18 	.word	0x20000d18
 8004a9c:	20000d2c 	.word	0x20000d2c
 8004aa0:	20000d48 	.word	0x20000d48
 8004aa4:	20000d5c 	.word	0x20000d5c
 8004aa8:	20000d74 	.word	0x20000d74
 8004aac:	20000d40 	.word	0x20000d40
 8004ab0:	20000d44 	.word	0x20000d44

08004ab4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aba:	e019      	b.n	8004af0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004abc:	f000 fefc 	bl	80058b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ac0:	4b10      	ldr	r3, [pc, #64]	@ (8004b04 <prvCheckTasksWaitingTermination+0x50>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3304      	adds	r3, #4
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fe fadd 	bl	800308c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b08 <prvCheckTasksWaitingTermination+0x54>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8004b08 <prvCheckTasksWaitingTermination+0x54>)
 8004ada:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004adc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <prvCheckTasksWaitingTermination+0x58>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8004b0c <prvCheckTasksWaitingTermination+0x58>)
 8004ae4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ae6:	f000 ff19 	bl	800591c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f810 	bl	8004b10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004af0:	4b06      	ldr	r3, [pc, #24]	@ (8004b0c <prvCheckTasksWaitingTermination+0x58>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e1      	bne.n	8004abc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004af8:	bf00      	nop
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000d5c 	.word	0x20000d5c
 8004b08:	20000d88 	.word	0x20000d88
 8004b0c:	20000d70 	.word	0x20000d70

08004b10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3354      	adds	r3, #84	@ 0x54
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f001 fa05 	bl	8005f2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d108      	bne.n	8004b3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b30:	4618      	mov	r0, r3
 8004b32:	f001 f8b1 	bl	8005c98 <vPortFree>
				vPortFree( pxTCB );
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f001 f8ae 	bl	8005c98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b3c:	e019      	b.n	8004b72 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d103      	bne.n	8004b50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f001 f8a5 	bl	8005c98 <vPortFree>
	}
 8004b4e:	e010      	b.n	8004b72 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d00b      	beq.n	8004b72 <prvDeleteTCB+0x62>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	60fb      	str	r3, [r7, #12]
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	e7fd      	b.n	8004b6e <prvDeleteTCB+0x5e>
	}
 8004b72:	bf00      	nop
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b82:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb4 <prvResetNextTaskUnblockTime+0x38>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d104      	bne.n	8004b96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb8 <prvResetNextTaskUnblockTime+0x3c>)
 8004b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b94:	e008      	b.n	8004ba8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b96:	4b07      	ldr	r3, [pc, #28]	@ (8004bb4 <prvResetNextTaskUnblockTime+0x38>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	4a04      	ldr	r2, [pc, #16]	@ (8004bb8 <prvResetNextTaskUnblockTime+0x3c>)
 8004ba6:	6013      	str	r3, [r2, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	20000d40 	.word	0x20000d40
 8004bb8:	20000da8 	.word	0x20000da8

08004bbc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004bc2:	4b05      	ldr	r3, [pc, #20]	@ (8004bd8 <xTaskGetCurrentTaskHandle+0x1c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004bc8:	687b      	ldr	r3, [r7, #4]
	}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	200008b4 	.word	0x200008b4

08004bdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004be2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <xTaskGetSchedulerState+0x34>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d102      	bne.n	8004bf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bea:	2301      	movs	r3, #1
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	e008      	b.n	8004c02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bf0:	4b08      	ldr	r3, [pc, #32]	@ (8004c14 <xTaskGetSchedulerState+0x38>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d102      	bne.n	8004bfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	607b      	str	r3, [r7, #4]
 8004bfc:	e001      	b.n	8004c02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c02:	687b      	ldr	r3, [r7, #4]
	}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	20000d94 	.word	0x20000d94
 8004c14:	20000db0 	.word	0x20000db0

08004c18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d051      	beq.n	8004cd2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c32:	4b2a      	ldr	r3, [pc, #168]	@ (8004cdc <xTaskPriorityInherit+0xc4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d241      	bcs.n	8004cc0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	db06      	blt.n	8004c52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c44:	4b25      	ldr	r3, [pc, #148]	@ (8004cdc <xTaskPriorityInherit+0xc4>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	6959      	ldr	r1, [r3, #20]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce0 <xTaskPriorityInherit+0xc8>)
 8004c64:	4413      	add	r3, r2
 8004c66:	4299      	cmp	r1, r3
 8004c68:	d122      	bne.n	8004cb0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe fa0c 	bl	800308c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c74:	4b19      	ldr	r3, [pc, #100]	@ (8004cdc <xTaskPriorityInherit+0xc4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c82:	4b18      	ldr	r3, [pc, #96]	@ (8004ce4 <xTaskPriorityInherit+0xcc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d903      	bls.n	8004c92 <xTaskPriorityInherit+0x7a>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8e:	4a15      	ldr	r2, [pc, #84]	@ (8004ce4 <xTaskPriorityInherit+0xcc>)
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4a10      	ldr	r2, [pc, #64]	@ (8004ce0 <xTaskPriorityInherit+0xc8>)
 8004ca0:	441a      	add	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f7fe f992 	bl	8002fd2 <vListInsertEnd>
 8004cae:	e004      	b.n	8004cba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004cdc <xTaskPriorityInherit+0xc4>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	e008      	b.n	8004cd2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004cc4:	4b05      	ldr	r3, [pc, #20]	@ (8004cdc <xTaskPriorityInherit+0xc4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d201      	bcs.n	8004cd2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
	}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	200008b4 	.word	0x200008b4
 8004ce0:	200008b8 	.word	0x200008b8
 8004ce4:	20000d90 	.word	0x20000d90

08004ce8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d058      	beq.n	8004db0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8004dbc <xTaskPriorityDisinherit+0xd4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d00b      	beq.n	8004d20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	60fb      	str	r3, [r7, #12]
}
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	e7fd      	b.n	8004d1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10b      	bne.n	8004d40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	60bb      	str	r3, [r7, #8]
}
 8004d3a:	bf00      	nop
 8004d3c:	bf00      	nop
 8004d3e:	e7fd      	b.n	8004d3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d44:	1e5a      	subs	r2, r3, #1
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d02c      	beq.n	8004db0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d128      	bne.n	8004db0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe f992 	bl	800308c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d80:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc0 <xTaskPriorityDisinherit+0xd8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d903      	bls.n	8004d90 <xTaskPriorityDisinherit+0xa8>
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8004dc0 <xTaskPriorityDisinherit+0xd8>)
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4a09      	ldr	r2, [pc, #36]	@ (8004dc4 <xTaskPriorityDisinherit+0xdc>)
 8004d9e:	441a      	add	r2, r3
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f7fe f913 	bl	8002fd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004dac:	2301      	movs	r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004db0:	697b      	ldr	r3, [r7, #20]
	}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	200008b4 	.word	0x200008b4
 8004dc0:	20000d90 	.word	0x20000d90
 8004dc4:	200008b8 	.word	0x200008b8

08004dc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d06c      	beq.n	8004eba <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	60fb      	str	r3, [r7, #12]
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	e7fd      	b.n	8004dfc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d902      	bls.n	8004e10 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	e002      	b.n	8004e16 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e14:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d04c      	beq.n	8004eba <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d147      	bne.n	8004eba <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004e2a:	4b26      	ldr	r3, [pc, #152]	@ (8004ec4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d10b      	bne.n	8004e4c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	60bb      	str	r3, [r7, #8]
}
 8004e46:	bf00      	nop
 8004e48:	bf00      	nop
 8004e4a:	e7fd      	b.n	8004e48 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	69fa      	ldr	r2, [r7, #28]
 8004e56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	db04      	blt.n	8004e6a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	6959      	ldr	r1, [r3, #20]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4a13      	ldr	r2, [pc, #76]	@ (8004ec8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004e7a:	4413      	add	r3, r2
 8004e7c:	4299      	cmp	r1, r3
 8004e7e:	d11c      	bne.n	8004eba <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	3304      	adds	r3, #4
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fe f901 	bl	800308c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ecc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d903      	bls.n	8004e9e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8004ecc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4a07      	ldr	r2, [pc, #28]	@ (8004ec8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004eac:	441a      	add	r2, r3
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f7fe f88c 	bl	8002fd2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004eba:	bf00      	nop
 8004ebc:	3720      	adds	r7, #32
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	200008b4 	.word	0x200008b4
 8004ec8:	200008b8 	.word	0x200008b8
 8004ecc:	20000d90 	.word	0x20000d90

08004ed0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004ed4:	4b07      	ldr	r3, [pc, #28]	@ (8004ef4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d004      	beq.n	8004ee6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004edc:	4b05      	ldr	r3, [pc, #20]	@ (8004ef4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ee2:	3201      	adds	r2, #1
 8004ee4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004ee6:	4b03      	ldr	r3, [pc, #12]	@ (8004ef4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
	}
 8004eea:	4618      	mov	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	200008b4 	.word	0x200008b4

08004ef8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f02:	4b21      	ldr	r3, [pc, #132]	@ (8004f88 <prvAddCurrentTaskToDelayedList+0x90>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f08:	4b20      	ldr	r3, [pc, #128]	@ (8004f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe f8bc 	bl	800308c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1a:	d10a      	bne.n	8004f32 <prvAddCurrentTaskToDelayedList+0x3a>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f22:	4b1a      	ldr	r3, [pc, #104]	@ (8004f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4819      	ldr	r0, [pc, #100]	@ (8004f90 <prvAddCurrentTaskToDelayedList+0x98>)
 8004f2c:	f7fe f851 	bl	8002fd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f30:	e026      	b.n	8004f80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4413      	add	r3, r2
 8004f38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f3a:	4b14      	ldr	r3, [pc, #80]	@ (8004f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d209      	bcs.n	8004f5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f4a:	4b12      	ldr	r3, [pc, #72]	@ (8004f94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3304      	adds	r3, #4
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f7fe f85f 	bl	800301a <vListInsert>
}
 8004f5c:	e010      	b.n	8004f80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b0a      	ldr	r3, [pc, #40]	@ (8004f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3304      	adds	r3, #4
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	f7fe f855 	bl	800301a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f70:	4b0a      	ldr	r3, [pc, #40]	@ (8004f9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d202      	bcs.n	8004f80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f7a:	4a08      	ldr	r2, [pc, #32]	@ (8004f9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	6013      	str	r3, [r2, #0]
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20000d8c 	.word	0x20000d8c
 8004f8c:	200008b4 	.word	0x200008b4
 8004f90:	20000d74 	.word	0x20000d74
 8004f94:	20000d44 	.word	0x20000d44
 8004f98:	20000d40 	.word	0x20000d40
 8004f9c:	20000da8 	.word	0x20000da8

08004fa0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08a      	sub	sp, #40	@ 0x28
 8004fa4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004faa:	f000 fb13 	bl	80055d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004fae:	4b1d      	ldr	r3, [pc, #116]	@ (8005024 <xTimerCreateTimerTask+0x84>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d021      	beq.n	8004ffa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004fbe:	1d3a      	adds	r2, r7, #4
 8004fc0:	f107 0108 	add.w	r1, r7, #8
 8004fc4:	f107 030c 	add.w	r3, r7, #12
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fd ffbb 	bl	8002f44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	9202      	str	r2, [sp, #8]
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	2302      	movs	r3, #2
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	460a      	mov	r2, r1
 8004fe0:	4911      	ldr	r1, [pc, #68]	@ (8005028 <xTimerCreateTimerTask+0x88>)
 8004fe2:	4812      	ldr	r0, [pc, #72]	@ (800502c <xTimerCreateTimerTask+0x8c>)
 8004fe4:	f7fe ff92 	bl	8003f0c <xTaskCreateStatic>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	4a11      	ldr	r2, [pc, #68]	@ (8005030 <xTimerCreateTimerTask+0x90>)
 8004fec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004fee:	4b10      	ldr	r3, [pc, #64]	@ (8005030 <xTimerCreateTimerTask+0x90>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10b      	bne.n	8005018 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	613b      	str	r3, [r7, #16]
}
 8005012:	bf00      	nop
 8005014:	bf00      	nop
 8005016:	e7fd      	b.n	8005014 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005018:	697b      	ldr	r3, [r7, #20]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20000de4 	.word	0x20000de4
 8005028:	080069b0 	.word	0x080069b0
 800502c:	0800516d 	.word	0x0800516d
 8005030:	20000de8 	.word	0x20000de8

08005034 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	@ 0x28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005042:	2300      	movs	r3, #0
 8005044:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10b      	bne.n	8005064 <xTimerGenericCommand+0x30>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	623b      	str	r3, [r7, #32]
}
 800505e:	bf00      	nop
 8005060:	bf00      	nop
 8005062:	e7fd      	b.n	8005060 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005064:	4b19      	ldr	r3, [pc, #100]	@ (80050cc <xTimerGenericCommand+0x98>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d02a      	beq.n	80050c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b05      	cmp	r3, #5
 800507c:	dc18      	bgt.n	80050b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800507e:	f7ff fdad 	bl	8004bdc <xTaskGetSchedulerState>
 8005082:	4603      	mov	r3, r0
 8005084:	2b02      	cmp	r3, #2
 8005086:	d109      	bne.n	800509c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005088:	4b10      	ldr	r3, [pc, #64]	@ (80050cc <xTimerGenericCommand+0x98>)
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	f107 0110 	add.w	r1, r7, #16
 8005090:	2300      	movs	r3, #0
 8005092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005094:	f7fe fa22 	bl	80034dc <xQueueGenericSend>
 8005098:	6278      	str	r0, [r7, #36]	@ 0x24
 800509a:	e012      	b.n	80050c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800509c:	4b0b      	ldr	r3, [pc, #44]	@ (80050cc <xTimerGenericCommand+0x98>)
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	f107 0110 	add.w	r1, r7, #16
 80050a4:	2300      	movs	r3, #0
 80050a6:	2200      	movs	r2, #0
 80050a8:	f7fe fa18 	bl	80034dc <xQueueGenericSend>
 80050ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80050ae:	e008      	b.n	80050c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80050b0:	4b06      	ldr	r3, [pc, #24]	@ (80050cc <xTimerGenericCommand+0x98>)
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	f107 0110 	add.w	r1, r7, #16
 80050b8:	2300      	movs	r3, #0
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	f7fe fb10 	bl	80036e0 <xQueueGenericSendFromISR>
 80050c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80050c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3728      	adds	r7, #40	@ 0x28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	20000de4 	.word	0x20000de4

080050d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050da:	4b23      	ldr	r3, [pc, #140]	@ (8005168 <prvProcessExpiredTimer+0x98>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	3304      	adds	r3, #4
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fd ffcf 	bl	800308c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d023      	beq.n	8005144 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	699a      	ldr	r2, [r3, #24]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	18d1      	adds	r1, r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	6978      	ldr	r0, [r7, #20]
 800510a:	f000 f8d5 	bl	80052b8 <prvInsertTimerInActiveList>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d020      	beq.n	8005156 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005114:	2300      	movs	r3, #0
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	2300      	movs	r3, #0
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	2100      	movs	r1, #0
 800511e:	6978      	ldr	r0, [r7, #20]
 8005120:	f7ff ff88 	bl	8005034 <xTimerGenericCommand>
 8005124:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d114      	bne.n	8005156 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	60fb      	str	r3, [r7, #12]
}
 800513e:	bf00      	nop
 8005140:	bf00      	nop
 8005142:	e7fd      	b.n	8005140 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800514a:	f023 0301 	bic.w	r3, r3, #1
 800514e:	b2da      	uxtb	r2, r3
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	6978      	ldr	r0, [r7, #20]
 800515c:	4798      	blx	r3
}
 800515e:	bf00      	nop
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000ddc 	.word	0x20000ddc

0800516c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005174:	f107 0308 	add.w	r3, r7, #8
 8005178:	4618      	mov	r0, r3
 800517a:	f000 f859 	bl	8005230 <prvGetNextExpireTime>
 800517e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4619      	mov	r1, r3
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f805 	bl	8005194 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800518a:	f000 f8d7 	bl	800533c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800518e:	bf00      	nop
 8005190:	e7f0      	b.n	8005174 <prvTimerTask+0x8>
	...

08005194 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800519e:	f7ff f919 	bl	80043d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051a2:	f107 0308 	add.w	r3, r7, #8
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 f866 	bl	8005278 <prvSampleTimeNow>
 80051ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d130      	bne.n	8005216 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10a      	bne.n	80051d0 <prvProcessTimerOrBlockTask+0x3c>
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d806      	bhi.n	80051d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80051c2:	f7ff f915 	bl	80043f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80051c6:	68f9      	ldr	r1, [r7, #12]
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff ff81 	bl	80050d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80051ce:	e024      	b.n	800521a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d008      	beq.n	80051e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80051d6:	4b13      	ldr	r3, [pc, #76]	@ (8005224 <prvProcessTimerOrBlockTask+0x90>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <prvProcessTimerOrBlockTask+0x50>
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <prvProcessTimerOrBlockTask+0x52>
 80051e4:	2300      	movs	r3, #0
 80051e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80051e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005228 <prvProcessTimerOrBlockTask+0x94>)
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	4619      	mov	r1, r3
 80051f6:	f7fe fe55 	bl	8003ea4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80051fa:	f7ff f8f9 	bl	80043f0 <xTaskResumeAll>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10a      	bne.n	800521a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005204:	4b09      	ldr	r3, [pc, #36]	@ (800522c <prvProcessTimerOrBlockTask+0x98>)
 8005206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	f3bf 8f6f 	isb	sy
}
 8005214:	e001      	b.n	800521a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005216:	f7ff f8eb 	bl	80043f0 <xTaskResumeAll>
}
 800521a:	bf00      	nop
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000de0 	.word	0x20000de0
 8005228:	20000de4 	.word	0x20000de4
 800522c:	e000ed04 	.word	0xe000ed04

08005230 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005238:	4b0e      	ldr	r3, [pc, #56]	@ (8005274 <prvGetNextExpireTime+0x44>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <prvGetNextExpireTime+0x16>
 8005242:	2201      	movs	r2, #1
 8005244:	e000      	b.n	8005248 <prvGetNextExpireTime+0x18>
 8005246:	2200      	movs	r2, #0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d105      	bne.n	8005260 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005254:	4b07      	ldr	r3, [pc, #28]	@ (8005274 <prvGetNextExpireTime+0x44>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	e001      	b.n	8005264 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005264:	68fb      	ldr	r3, [r7, #12]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20000ddc 	.word	0x20000ddc

08005278 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005280:	f7ff f954 	bl	800452c <xTaskGetTickCount>
 8005284:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005286:	4b0b      	ldr	r3, [pc, #44]	@ (80052b4 <prvSampleTimeNow+0x3c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	429a      	cmp	r2, r3
 800528e:	d205      	bcs.n	800529c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005290:	f000 f93a 	bl	8005508 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e002      	b.n	80052a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80052a2:	4a04      	ldr	r2, [pc, #16]	@ (80052b4 <prvSampleTimeNow+0x3c>)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80052a8:	68fb      	ldr	r3, [r7, #12]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20000dec 	.word	0x20000dec

080052b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d812      	bhi.n	8005304 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	1ad2      	subs	r2, r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d302      	bcc.n	80052f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80052ec:	2301      	movs	r3, #1
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e01b      	b.n	800532a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80052f2:	4b10      	ldr	r3, [pc, #64]	@ (8005334 <prvInsertTimerInActiveList+0x7c>)
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3304      	adds	r3, #4
 80052fa:	4619      	mov	r1, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	f7fd fe8c 	bl	800301a <vListInsert>
 8005302:	e012      	b.n	800532a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d206      	bcs.n	800531a <prvInsertTimerInActiveList+0x62>
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d302      	bcc.n	800531a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005314:	2301      	movs	r3, #1
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e007      	b.n	800532a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800531a:	4b07      	ldr	r3, [pc, #28]	@ (8005338 <prvInsertTimerInActiveList+0x80>)
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3304      	adds	r3, #4
 8005322:	4619      	mov	r1, r3
 8005324:	4610      	mov	r0, r2
 8005326:	f7fd fe78 	bl	800301a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800532a:	697b      	ldr	r3, [r7, #20]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000de0 	.word	0x20000de0
 8005338:	20000ddc 	.word	0x20000ddc

0800533c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b08e      	sub	sp, #56	@ 0x38
 8005340:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005342:	e0ce      	b.n	80054e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	da19      	bge.n	800537e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800534a:	1d3b      	adds	r3, r7, #4
 800534c:	3304      	adds	r3, #4
 800534e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10b      	bne.n	800536e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	61fb      	str	r3, [r7, #28]
}
 8005368:	bf00      	nop
 800536a:	bf00      	nop
 800536c:	e7fd      	b.n	800536a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800536e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005374:	6850      	ldr	r0, [r2, #4]
 8005376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005378:	6892      	ldr	r2, [r2, #8]
 800537a:	4611      	mov	r1, r2
 800537c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	f2c0 80ae 	blt.w	80054e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800538a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d004      	beq.n	800539c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005394:	3304      	adds	r3, #4
 8005396:	4618      	mov	r0, r3
 8005398:	f7fd fe78 	bl	800308c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800539c:	463b      	mov	r3, r7
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff ff6a 	bl	8005278 <prvSampleTimeNow>
 80053a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b09      	cmp	r3, #9
 80053aa:	f200 8097 	bhi.w	80054dc <prvProcessReceivedCommands+0x1a0>
 80053ae:	a201      	add	r2, pc, #4	@ (adr r2, 80053b4 <prvProcessReceivedCommands+0x78>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080053dd 	.word	0x080053dd
 80053b8:	080053dd 	.word	0x080053dd
 80053bc:	080053dd 	.word	0x080053dd
 80053c0:	08005453 	.word	0x08005453
 80053c4:	08005467 	.word	0x08005467
 80053c8:	080054b3 	.word	0x080054b3
 80053cc:	080053dd 	.word	0x080053dd
 80053d0:	080053dd 	.word	0x080053dd
 80053d4:	08005453 	.word	0x08005453
 80053d8:	08005467 	.word	0x08005467
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	18d1      	adds	r1, r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053fc:	f7ff ff5c 	bl	80052b8 <prvInsertTimerInActiveList>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d06c      	beq.n	80054e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800540c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800540e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005410:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d061      	beq.n	80054e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	441a      	add	r2, r3
 8005424:	2300      	movs	r3, #0
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	2300      	movs	r3, #0
 800542a:	2100      	movs	r1, #0
 800542c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800542e:	f7ff fe01 	bl	8005034 <xTimerGenericCommand>
 8005432:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d152      	bne.n	80054e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	61bb      	str	r3, [r7, #24]
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	e7fd      	b.n	800544e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005458:	f023 0301 	bic.w	r3, r3, #1
 800545c:	b2da      	uxtb	r2, r3
 800545e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005460:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005464:	e03d      	b.n	80054e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005468:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800546c:	f043 0301 	orr.w	r3, r3, #1
 8005470:	b2da      	uxtb	r2, r3
 8005472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005474:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800547e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10b      	bne.n	800549e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	617b      	str	r3, [r7, #20]
}
 8005498:	bf00      	nop
 800549a:	bf00      	nop
 800549c:	e7fd      	b.n	800549a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800549e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a4:	18d1      	adds	r1, r2, r3
 80054a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054ac:	f7ff ff04 	bl	80052b8 <prvInsertTimerInActiveList>
					break;
 80054b0:	e017      	b.n	80054e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80054b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d103      	bne.n	80054c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80054c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054c2:	f000 fbe9 	bl	8005c98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80054c6:	e00c      	b.n	80054e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80054da:	e002      	b.n	80054e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80054dc:	bf00      	nop
 80054de:	e000      	b.n	80054e2 <prvProcessReceivedCommands+0x1a6>
					break;
 80054e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054e2:	4b08      	ldr	r3, [pc, #32]	@ (8005504 <prvProcessReceivedCommands+0x1c8>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	1d39      	adds	r1, r7, #4
 80054e8:	2200      	movs	r2, #0
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe f996 	bl	800381c <xQueueReceive>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f47f af26 	bne.w	8005344 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	3730      	adds	r7, #48	@ 0x30
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20000de4 	.word	0x20000de4

08005508 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800550e:	e049      	b.n	80055a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005510:	4b2e      	ldr	r3, [pc, #184]	@ (80055cc <prvSwitchTimerLists+0xc4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800551a:	4b2c      	ldr	r3, [pc, #176]	@ (80055cc <prvSwitchTimerLists+0xc4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3304      	adds	r3, #4
 8005528:	4618      	mov	r0, r3
 800552a:	f7fd fdaf 	bl	800308c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d02f      	beq.n	80055a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	4413      	add	r3, r2
 800554c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	429a      	cmp	r2, r3
 8005554:	d90e      	bls.n	8005574 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005562:	4b1a      	ldr	r3, [pc, #104]	@ (80055cc <prvSwitchTimerLists+0xc4>)
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3304      	adds	r3, #4
 800556a:	4619      	mov	r1, r3
 800556c:	4610      	mov	r0, r2
 800556e:	f7fd fd54 	bl	800301a <vListInsert>
 8005572:	e017      	b.n	80055a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005574:	2300      	movs	r3, #0
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	2300      	movs	r3, #0
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	2100      	movs	r1, #0
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f7ff fd58 	bl	8005034 <xTimerGenericCommand>
 8005584:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10b      	bne.n	80055a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	603b      	str	r3, [r7, #0]
}
 800559e:	bf00      	nop
 80055a0:	bf00      	nop
 80055a2:	e7fd      	b.n	80055a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055a4:	4b09      	ldr	r3, [pc, #36]	@ (80055cc <prvSwitchTimerLists+0xc4>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1b0      	bne.n	8005510 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80055ae:	4b07      	ldr	r3, [pc, #28]	@ (80055cc <prvSwitchTimerLists+0xc4>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80055b4:	4b06      	ldr	r3, [pc, #24]	@ (80055d0 <prvSwitchTimerLists+0xc8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a04      	ldr	r2, [pc, #16]	@ (80055cc <prvSwitchTimerLists+0xc4>)
 80055ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80055bc:	4a04      	ldr	r2, [pc, #16]	@ (80055d0 <prvSwitchTimerLists+0xc8>)
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	6013      	str	r3, [r2, #0]
}
 80055c2:	bf00      	nop
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000ddc 	.word	0x20000ddc
 80055d0:	20000de0 	.word	0x20000de0

080055d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80055da:	f000 f96d 	bl	80058b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80055de:	4b15      	ldr	r3, [pc, #84]	@ (8005634 <prvCheckForValidListAndQueue+0x60>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d120      	bne.n	8005628 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80055e6:	4814      	ldr	r0, [pc, #80]	@ (8005638 <prvCheckForValidListAndQueue+0x64>)
 80055e8:	f7fd fcc6 	bl	8002f78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80055ec:	4813      	ldr	r0, [pc, #76]	@ (800563c <prvCheckForValidListAndQueue+0x68>)
 80055ee:	f7fd fcc3 	bl	8002f78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80055f2:	4b13      	ldr	r3, [pc, #76]	@ (8005640 <prvCheckForValidListAndQueue+0x6c>)
 80055f4:	4a10      	ldr	r2, [pc, #64]	@ (8005638 <prvCheckForValidListAndQueue+0x64>)
 80055f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80055f8:	4b12      	ldr	r3, [pc, #72]	@ (8005644 <prvCheckForValidListAndQueue+0x70>)
 80055fa:	4a10      	ldr	r2, [pc, #64]	@ (800563c <prvCheckForValidListAndQueue+0x68>)
 80055fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80055fe:	2300      	movs	r3, #0
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	4b11      	ldr	r3, [pc, #68]	@ (8005648 <prvCheckForValidListAndQueue+0x74>)
 8005604:	4a11      	ldr	r2, [pc, #68]	@ (800564c <prvCheckForValidListAndQueue+0x78>)
 8005606:	2110      	movs	r1, #16
 8005608:	200a      	movs	r0, #10
 800560a:	f7fd fdd3 	bl	80031b4 <xQueueGenericCreateStatic>
 800560e:	4603      	mov	r3, r0
 8005610:	4a08      	ldr	r2, [pc, #32]	@ (8005634 <prvCheckForValidListAndQueue+0x60>)
 8005612:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005614:	4b07      	ldr	r3, [pc, #28]	@ (8005634 <prvCheckForValidListAndQueue+0x60>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d005      	beq.n	8005628 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800561c:	4b05      	ldr	r3, [pc, #20]	@ (8005634 <prvCheckForValidListAndQueue+0x60>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	490b      	ldr	r1, [pc, #44]	@ (8005650 <prvCheckForValidListAndQueue+0x7c>)
 8005622:	4618      	mov	r0, r3
 8005624:	f7fe fc14 	bl	8003e50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005628:	f000 f978 	bl	800591c <vPortExitCritical>
}
 800562c:	bf00      	nop
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20000de4 	.word	0x20000de4
 8005638:	20000db4 	.word	0x20000db4
 800563c:	20000dc8 	.word	0x20000dc8
 8005640:	20000ddc 	.word	0x20000ddc
 8005644:	20000de0 	.word	0x20000de0
 8005648:	20000e90 	.word	0x20000e90
 800564c:	20000df0 	.word	0x20000df0
 8005650:	080069b8 	.word	0x080069b8

08005654 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3b04      	subs	r3, #4
 8005664:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800566c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3b04      	subs	r3, #4
 8005672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f023 0201 	bic.w	r2, r3, #1
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3b04      	subs	r3, #4
 8005682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005684:	4a0c      	ldr	r2, [pc, #48]	@ (80056b8 <pxPortInitialiseStack+0x64>)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3b14      	subs	r3, #20
 800568e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3b04      	subs	r3, #4
 800569a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f06f 0202 	mvn.w	r2, #2
 80056a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3b20      	subs	r3, #32
 80056a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056aa:	68fb      	ldr	r3, [r7, #12]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	080056bd 	.word	0x080056bd

080056bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056c2:	2300      	movs	r3, #0
 80056c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056c6:	4b13      	ldr	r3, [pc, #76]	@ (8005714 <prvTaskExitError+0x58>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ce:	d00b      	beq.n	80056e8 <prvTaskExitError+0x2c>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	60fb      	str	r3, [r7, #12]
}
 80056e2:	bf00      	nop
 80056e4:	bf00      	nop
 80056e6:	e7fd      	b.n	80056e4 <prvTaskExitError+0x28>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	60bb      	str	r3, [r7, #8]
}
 80056fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056fc:	bf00      	nop
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0fc      	beq.n	80056fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	2000000c 	.word	0x2000000c
	...

08005720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005720:	4b07      	ldr	r3, [pc, #28]	@ (8005740 <pxCurrentTCBConst2>)
 8005722:	6819      	ldr	r1, [r3, #0]
 8005724:	6808      	ldr	r0, [r1, #0]
 8005726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572a:	f380 8809 	msr	PSP, r0
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f04f 0000 	mov.w	r0, #0
 8005736:	f380 8811 	msr	BASEPRI, r0
 800573a:	4770      	bx	lr
 800573c:	f3af 8000 	nop.w

08005740 <pxCurrentTCBConst2>:
 8005740:	200008b4 	.word	0x200008b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop

08005748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005748:	4808      	ldr	r0, [pc, #32]	@ (800576c <prvPortStartFirstTask+0x24>)
 800574a:	6800      	ldr	r0, [r0, #0]
 800574c:	6800      	ldr	r0, [r0, #0]
 800574e:	f380 8808 	msr	MSP, r0
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f380 8814 	msr	CONTROL, r0
 800575a:	b662      	cpsie	i
 800575c:	b661      	cpsie	f
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	df00      	svc	0
 8005768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800576a:	bf00      	nop
 800576c:	e000ed08 	.word	0xe000ed08

08005770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005776:	4b47      	ldr	r3, [pc, #284]	@ (8005894 <xPortStartScheduler+0x124>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a47      	ldr	r2, [pc, #284]	@ (8005898 <xPortStartScheduler+0x128>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d10b      	bne.n	8005798 <xPortStartScheduler+0x28>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	60fb      	str	r3, [r7, #12]
}
 8005792:	bf00      	nop
 8005794:	bf00      	nop
 8005796:	e7fd      	b.n	8005794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005798:	4b3e      	ldr	r3, [pc, #248]	@ (8005894 <xPortStartScheduler+0x124>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a3f      	ldr	r2, [pc, #252]	@ (800589c <xPortStartScheduler+0x12c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d10b      	bne.n	80057ba <xPortStartScheduler+0x4a>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	613b      	str	r3, [r7, #16]
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	e7fd      	b.n	80057b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057ba:	4b39      	ldr	r3, [pc, #228]	@ (80058a0 <xPortStartScheduler+0x130>)
 80057bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	22ff      	movs	r2, #255	@ 0xff
 80057ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	4b31      	ldr	r3, [pc, #196]	@ (80058a4 <xPortStartScheduler+0x134>)
 80057e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057e2:	4b31      	ldr	r3, [pc, #196]	@ (80058a8 <xPortStartScheduler+0x138>)
 80057e4:	2207      	movs	r2, #7
 80057e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057e8:	e009      	b.n	80057fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80057ea:	4b2f      	ldr	r3, [pc, #188]	@ (80058a8 <xPortStartScheduler+0x138>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	4a2d      	ldr	r2, [pc, #180]	@ (80058a8 <xPortStartScheduler+0x138>)
 80057f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057f4:	78fb      	ldrb	r3, [r7, #3]
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005806:	2b80      	cmp	r3, #128	@ 0x80
 8005808:	d0ef      	beq.n	80057ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800580a:	4b27      	ldr	r3, [pc, #156]	@ (80058a8 <xPortStartScheduler+0x138>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f1c3 0307 	rsb	r3, r3, #7
 8005812:	2b04      	cmp	r3, #4
 8005814:	d00b      	beq.n	800582e <xPortStartScheduler+0xbe>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	60bb      	str	r3, [r7, #8]
}
 8005828:	bf00      	nop
 800582a:	bf00      	nop
 800582c:	e7fd      	b.n	800582a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800582e:	4b1e      	ldr	r3, [pc, #120]	@ (80058a8 <xPortStartScheduler+0x138>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	4a1c      	ldr	r2, [pc, #112]	@ (80058a8 <xPortStartScheduler+0x138>)
 8005836:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005838:	4b1b      	ldr	r3, [pc, #108]	@ (80058a8 <xPortStartScheduler+0x138>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005840:	4a19      	ldr	r2, [pc, #100]	@ (80058a8 <xPortStartScheduler+0x138>)
 8005842:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	b2da      	uxtb	r2, r3
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800584c:	4b17      	ldr	r3, [pc, #92]	@ (80058ac <xPortStartScheduler+0x13c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a16      	ldr	r2, [pc, #88]	@ (80058ac <xPortStartScheduler+0x13c>)
 8005852:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005856:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005858:	4b14      	ldr	r3, [pc, #80]	@ (80058ac <xPortStartScheduler+0x13c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a13      	ldr	r2, [pc, #76]	@ (80058ac <xPortStartScheduler+0x13c>)
 800585e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005862:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005864:	f000 f8da 	bl	8005a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005868:	4b11      	ldr	r3, [pc, #68]	@ (80058b0 <xPortStartScheduler+0x140>)
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800586e:	f000 f8f9 	bl	8005a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005872:	4b10      	ldr	r3, [pc, #64]	@ (80058b4 <xPortStartScheduler+0x144>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a0f      	ldr	r2, [pc, #60]	@ (80058b4 <xPortStartScheduler+0x144>)
 8005878:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800587c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800587e:	f7ff ff63 	bl	8005748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005882:	f7fe ff1d 	bl	80046c0 <vTaskSwitchContext>
	prvTaskExitError();
 8005886:	f7ff ff19 	bl	80056bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	e000ed00 	.word	0xe000ed00
 8005898:	410fc271 	.word	0x410fc271
 800589c:	410fc270 	.word	0x410fc270
 80058a0:	e000e400 	.word	0xe000e400
 80058a4:	20000ee0 	.word	0x20000ee0
 80058a8:	20000ee4 	.word	0x20000ee4
 80058ac:	e000ed20 	.word	0xe000ed20
 80058b0:	2000000c 	.word	0x2000000c
 80058b4:	e000ef34 	.word	0xe000ef34

080058b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	607b      	str	r3, [r7, #4]
}
 80058d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058d2:	4b10      	ldr	r3, [pc, #64]	@ (8005914 <vPortEnterCritical+0x5c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3301      	adds	r3, #1
 80058d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005914 <vPortEnterCritical+0x5c>)
 80058da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <vPortEnterCritical+0x5c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d110      	bne.n	8005906 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005918 <vPortEnterCritical+0x60>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00b      	beq.n	8005906 <vPortEnterCritical+0x4e>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	603b      	str	r3, [r7, #0]
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	e7fd      	b.n	8005902 <vPortEnterCritical+0x4a>
	}
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	2000000c 	.word	0x2000000c
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005922:	4b12      	ldr	r3, [pc, #72]	@ (800596c <vPortExitCritical+0x50>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10b      	bne.n	8005942 <vPortExitCritical+0x26>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	607b      	str	r3, [r7, #4]
}
 800593c:	bf00      	nop
 800593e:	bf00      	nop
 8005940:	e7fd      	b.n	800593e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005942:	4b0a      	ldr	r3, [pc, #40]	@ (800596c <vPortExitCritical+0x50>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3b01      	subs	r3, #1
 8005948:	4a08      	ldr	r2, [pc, #32]	@ (800596c <vPortExitCritical+0x50>)
 800594a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800594c:	4b07      	ldr	r3, [pc, #28]	@ (800596c <vPortExitCritical+0x50>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d105      	bne.n	8005960 <vPortExitCritical+0x44>
 8005954:	2300      	movs	r3, #0
 8005956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	f383 8811 	msr	BASEPRI, r3
}
 800595e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	2000000c 	.word	0x2000000c

08005970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005970:	f3ef 8009 	mrs	r0, PSP
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	4b15      	ldr	r3, [pc, #84]	@ (80059d0 <pxCurrentTCBConst>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	f01e 0f10 	tst.w	lr, #16
 8005980:	bf08      	it	eq
 8005982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598a:	6010      	str	r0, [r2, #0]
 800598c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005990:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005994:	f380 8811 	msr	BASEPRI, r0
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f7fe fe8e 	bl	80046c0 <vTaskSwitchContext>
 80059a4:	f04f 0000 	mov.w	r0, #0
 80059a8:	f380 8811 	msr	BASEPRI, r0
 80059ac:	bc09      	pop	{r0, r3}
 80059ae:	6819      	ldr	r1, [r3, #0]
 80059b0:	6808      	ldr	r0, [r1, #0]
 80059b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b6:	f01e 0f10 	tst.w	lr, #16
 80059ba:	bf08      	it	eq
 80059bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059c0:	f380 8809 	msr	PSP, r0
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	f3af 8000 	nop.w

080059d0 <pxCurrentTCBConst>:
 80059d0:	200008b4 	.word	0x200008b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop

080059d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	607b      	str	r3, [r7, #4]
}
 80059f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059f2:	f7fe fdab 	bl	800454c <xTaskIncrementTick>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059fc:	4b06      	ldr	r3, [pc, #24]	@ (8005a18 <xPortSysTickHandler+0x40>)
 80059fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	2300      	movs	r3, #0
 8005a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	f383 8811 	msr	BASEPRI, r3
}
 8005a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	e000ed04 	.word	0xe000ed04

08005a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a20:	4b0b      	ldr	r3, [pc, #44]	@ (8005a50 <vPortSetupTimerInterrupt+0x34>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a26:	4b0b      	ldr	r3, [pc, #44]	@ (8005a54 <vPortSetupTimerInterrupt+0x38>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a58 <vPortSetupTimerInterrupt+0x3c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0a      	ldr	r2, [pc, #40]	@ (8005a5c <vPortSetupTimerInterrupt+0x40>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	099b      	lsrs	r3, r3, #6
 8005a38:	4a09      	ldr	r2, [pc, #36]	@ (8005a60 <vPortSetupTimerInterrupt+0x44>)
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a3e:	4b04      	ldr	r3, [pc, #16]	@ (8005a50 <vPortSetupTimerInterrupt+0x34>)
 8005a40:	2207      	movs	r2, #7
 8005a42:	601a      	str	r2, [r3, #0]
}
 8005a44:	bf00      	nop
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	e000e010 	.word	0xe000e010
 8005a54:	e000e018 	.word	0xe000e018
 8005a58:	20000000 	.word	0x20000000
 8005a5c:	10624dd3 	.word	0x10624dd3
 8005a60:	e000e014 	.word	0xe000e014

08005a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005a74 <vPortEnableVFP+0x10>
 8005a68:	6801      	ldr	r1, [r0, #0]
 8005a6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005a6e:	6001      	str	r1, [r0, #0]
 8005a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a72:	bf00      	nop
 8005a74:	e000ed88 	.word	0xe000ed88

08005a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a7e:	f3ef 8305 	mrs	r3, IPSR
 8005a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2b0f      	cmp	r3, #15
 8005a88:	d915      	bls.n	8005ab6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a8a:	4a18      	ldr	r2, [pc, #96]	@ (8005aec <vPortValidateInterruptPriority+0x74>)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a94:	4b16      	ldr	r3, [pc, #88]	@ (8005af0 <vPortValidateInterruptPriority+0x78>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	7afa      	ldrb	r2, [r7, #11]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d20b      	bcs.n	8005ab6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	607b      	str	r3, [r7, #4]
}
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	e7fd      	b.n	8005ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8005af4 <vPortValidateInterruptPriority+0x7c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005abe:	4b0e      	ldr	r3, [pc, #56]	@ (8005af8 <vPortValidateInterruptPriority+0x80>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d90b      	bls.n	8005ade <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	603b      	str	r3, [r7, #0]
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	e7fd      	b.n	8005ada <vPortValidateInterruptPriority+0x62>
	}
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	e000e3f0 	.word	0xe000e3f0
 8005af0:	20000ee0 	.word	0x20000ee0
 8005af4:	e000ed0c 	.word	0xe000ed0c
 8005af8:	20000ee4 	.word	0x20000ee4

08005afc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	@ 0x28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b08:	f7fe fc64 	bl	80043d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b0c:	4b5c      	ldr	r3, [pc, #368]	@ (8005c80 <pvPortMalloc+0x184>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b14:	f000 f924 	bl	8005d60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b18:	4b5a      	ldr	r3, [pc, #360]	@ (8005c84 <pvPortMalloc+0x188>)
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f040 8095 	bne.w	8005c50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01e      	beq.n	8005b6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4413      	add	r3, r2
 8005b32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d015      	beq.n	8005b6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f023 0307 	bic.w	r3, r3, #7
 8005b44:	3308      	adds	r3, #8
 8005b46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00b      	beq.n	8005b6a <pvPortMalloc+0x6e>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	617b      	str	r3, [r7, #20]
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop
 8005b68:	e7fd      	b.n	8005b66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d06f      	beq.n	8005c50 <pvPortMalloc+0x154>
 8005b70:	4b45      	ldr	r3, [pc, #276]	@ (8005c88 <pvPortMalloc+0x18c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d86a      	bhi.n	8005c50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b7a:	4b44      	ldr	r3, [pc, #272]	@ (8005c8c <pvPortMalloc+0x190>)
 8005b7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b7e:	4b43      	ldr	r3, [pc, #268]	@ (8005c8c <pvPortMalloc+0x190>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b84:	e004      	b.n	8005b90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d903      	bls.n	8005ba2 <pvPortMalloc+0xa6>
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1f1      	bne.n	8005b86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ba2:	4b37      	ldr	r3, [pc, #220]	@ (8005c80 <pvPortMalloc+0x184>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d051      	beq.n	8005c50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	4413      	add	r3, r2
 8005bb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	1ad2      	subs	r2, r2, r3
 8005bc6:	2308      	movs	r3, #8
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d920      	bls.n	8005c10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00b      	beq.n	8005bf8 <pvPortMalloc+0xfc>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	613b      	str	r3, [r7, #16]
}
 8005bf2:	bf00      	nop
 8005bf4:	bf00      	nop
 8005bf6:	e7fd      	b.n	8005bf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	1ad2      	subs	r2, r2, r3
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c0a:	69b8      	ldr	r0, [r7, #24]
 8005c0c:	f000 f90a 	bl	8005e24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c10:	4b1d      	ldr	r3, [pc, #116]	@ (8005c88 <pvPortMalloc+0x18c>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8005c88 <pvPortMalloc+0x18c>)
 8005c1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8005c88 <pvPortMalloc+0x18c>)
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	4b1b      	ldr	r3, [pc, #108]	@ (8005c90 <pvPortMalloc+0x194>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d203      	bcs.n	8005c32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c2a:	4b17      	ldr	r3, [pc, #92]	@ (8005c88 <pvPortMalloc+0x18c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a18      	ldr	r2, [pc, #96]	@ (8005c90 <pvPortMalloc+0x194>)
 8005c30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	4b13      	ldr	r3, [pc, #76]	@ (8005c84 <pvPortMalloc+0x188>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c46:	4b13      	ldr	r3, [pc, #76]	@ (8005c94 <pvPortMalloc+0x198>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	4a11      	ldr	r2, [pc, #68]	@ (8005c94 <pvPortMalloc+0x198>)
 8005c4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c50:	f7fe fbce 	bl	80043f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <pvPortMalloc+0x17a>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	60fb      	str	r3, [r7, #12]
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	e7fd      	b.n	8005c72 <pvPortMalloc+0x176>
	return pvReturn;
 8005c76:	69fb      	ldr	r3, [r7, #28]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3728      	adds	r7, #40	@ 0x28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20004af0 	.word	0x20004af0
 8005c84:	20004b04 	.word	0x20004b04
 8005c88:	20004af4 	.word	0x20004af4
 8005c8c:	20004ae8 	.word	0x20004ae8
 8005c90:	20004af8 	.word	0x20004af8
 8005c94:	20004afc 	.word	0x20004afc

08005c98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d04f      	beq.n	8005d4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005caa:	2308      	movs	r3, #8
 8005cac:	425b      	negs	r3, r3
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	4b25      	ldr	r3, [pc, #148]	@ (8005d54 <vPortFree+0xbc>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10b      	bne.n	8005cde <vPortFree+0x46>
	__asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	60fb      	str	r3, [r7, #12]
}
 8005cd8:	bf00      	nop
 8005cda:	bf00      	nop
 8005cdc:	e7fd      	b.n	8005cda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00b      	beq.n	8005cfe <vPortFree+0x66>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	60bb      	str	r3, [r7, #8]
}
 8005cf8:	bf00      	nop
 8005cfa:	bf00      	nop
 8005cfc:	e7fd      	b.n	8005cfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	4b14      	ldr	r3, [pc, #80]	@ (8005d54 <vPortFree+0xbc>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4013      	ands	r3, r2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01e      	beq.n	8005d4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d11a      	bne.n	8005d4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	4b0e      	ldr	r3, [pc, #56]	@ (8005d54 <vPortFree+0xbc>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	401a      	ands	r2, r3
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d24:	f7fe fb56 	bl	80043d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d58 <vPortFree+0xc0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4413      	add	r3, r2
 8005d32:	4a09      	ldr	r2, [pc, #36]	@ (8005d58 <vPortFree+0xc0>)
 8005d34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d36:	6938      	ldr	r0, [r7, #16]
 8005d38:	f000 f874 	bl	8005e24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d3c:	4b07      	ldr	r3, [pc, #28]	@ (8005d5c <vPortFree+0xc4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3301      	adds	r3, #1
 8005d42:	4a06      	ldr	r2, [pc, #24]	@ (8005d5c <vPortFree+0xc4>)
 8005d44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d46:	f7fe fb53 	bl	80043f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d4a:	bf00      	nop
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20004b04 	.word	0x20004b04
 8005d58:	20004af4 	.word	0x20004af4
 8005d5c:	20004b00 	.word	0x20004b00

08005d60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005d6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d6c:	4b27      	ldr	r3, [pc, #156]	@ (8005e0c <prvHeapInit+0xac>)
 8005d6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00c      	beq.n	8005d94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3307      	adds	r3, #7
 8005d7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0307 	bic.w	r3, r3, #7
 8005d86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8005e0c <prvHeapInit+0xac>)
 8005d90:	4413      	add	r3, r2
 8005d92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d98:	4a1d      	ldr	r2, [pc, #116]	@ (8005e10 <prvHeapInit+0xb0>)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8005e10 <prvHeapInit+0xb0>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	4413      	add	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005dac:	2208      	movs	r2, #8
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0307 	bic.w	r3, r3, #7
 8005dba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4a15      	ldr	r2, [pc, #84]	@ (8005e14 <prvHeapInit+0xb4>)
 8005dc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005dc2:	4b14      	ldr	r3, [pc, #80]	@ (8005e14 <prvHeapInit+0xb4>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dca:	4b12      	ldr	r3, [pc, #72]	@ (8005e14 <prvHeapInit+0xb4>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	1ad2      	subs	r2, r2, r3
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005de0:	4b0c      	ldr	r3, [pc, #48]	@ (8005e14 <prvHeapInit+0xb4>)
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	4a0a      	ldr	r2, [pc, #40]	@ (8005e18 <prvHeapInit+0xb8>)
 8005dee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	4a09      	ldr	r2, [pc, #36]	@ (8005e1c <prvHeapInit+0xbc>)
 8005df6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005df8:	4b09      	ldr	r3, [pc, #36]	@ (8005e20 <prvHeapInit+0xc0>)
 8005dfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005dfe:	601a      	str	r2, [r3, #0]
}
 8005e00:	bf00      	nop
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	20000ee8 	.word	0x20000ee8
 8005e10:	20004ae8 	.word	0x20004ae8
 8005e14:	20004af0 	.word	0x20004af0
 8005e18:	20004af8 	.word	0x20004af8
 8005e1c:	20004af4 	.word	0x20004af4
 8005e20:	20004b04 	.word	0x20004b04

08005e24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e2c:	4b28      	ldr	r3, [pc, #160]	@ (8005ed0 <prvInsertBlockIntoFreeList+0xac>)
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e002      	b.n	8005e38 <prvInsertBlockIntoFreeList+0x14>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d8f7      	bhi.n	8005e32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d108      	bne.n	8005e66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	441a      	add	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	441a      	add	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d118      	bne.n	8005eac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b15      	ldr	r3, [pc, #84]	@ (8005ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d00d      	beq.n	8005ea2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	441a      	add	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	e008      	b.n	8005eb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	e003      	b.n	8005eb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d002      	beq.n	8005ec2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ec2:	bf00      	nop
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	20004ae8 	.word	0x20004ae8
 8005ed4:	20004af0 	.word	0x20004af0

08005ed8 <siprintf>:
 8005ed8:	b40e      	push	{r1, r2, r3}
 8005eda:	b510      	push	{r4, lr}
 8005edc:	b09d      	sub	sp, #116	@ 0x74
 8005ede:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005ee0:	9002      	str	r0, [sp, #8]
 8005ee2:	9006      	str	r0, [sp, #24]
 8005ee4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ee8:	480a      	ldr	r0, [pc, #40]	@ (8005f14 <siprintf+0x3c>)
 8005eea:	9107      	str	r1, [sp, #28]
 8005eec:	9104      	str	r1, [sp, #16]
 8005eee:	490a      	ldr	r1, [pc, #40]	@ (8005f18 <siprintf+0x40>)
 8005ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ef4:	9105      	str	r1, [sp, #20]
 8005ef6:	2400      	movs	r4, #0
 8005ef8:	a902      	add	r1, sp, #8
 8005efa:	6800      	ldr	r0, [r0, #0]
 8005efc:	9301      	str	r3, [sp, #4]
 8005efe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005f00:	f000 fa00 	bl	8006304 <_svfiprintf_r>
 8005f04:	9b02      	ldr	r3, [sp, #8]
 8005f06:	701c      	strb	r4, [r3, #0]
 8005f08:	b01d      	add	sp, #116	@ 0x74
 8005f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f0e:	b003      	add	sp, #12
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	20000010 	.word	0x20000010
 8005f18:	ffff0208 	.word	0xffff0208

08005f1c <memset>:
 8005f1c:	4402      	add	r2, r0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d100      	bne.n	8005f26 <memset+0xa>
 8005f24:	4770      	bx	lr
 8005f26:	f803 1b01 	strb.w	r1, [r3], #1
 8005f2a:	e7f9      	b.n	8005f20 <memset+0x4>

08005f2c <_reclaim_reent>:
 8005f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8005fe4 <_reclaim_reent+0xb8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4283      	cmp	r3, r0
 8005f32:	b570      	push	{r4, r5, r6, lr}
 8005f34:	4604      	mov	r4, r0
 8005f36:	d053      	beq.n	8005fe0 <_reclaim_reent+0xb4>
 8005f38:	69c3      	ldr	r3, [r0, #28]
 8005f3a:	b31b      	cbz	r3, 8005f84 <_reclaim_reent+0x58>
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	b163      	cbz	r3, 8005f5a <_reclaim_reent+0x2e>
 8005f40:	2500      	movs	r5, #0
 8005f42:	69e3      	ldr	r3, [r4, #28]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	5959      	ldr	r1, [r3, r5]
 8005f48:	b9b1      	cbnz	r1, 8005f78 <_reclaim_reent+0x4c>
 8005f4a:	3504      	adds	r5, #4
 8005f4c:	2d80      	cmp	r5, #128	@ 0x80
 8005f4e:	d1f8      	bne.n	8005f42 <_reclaim_reent+0x16>
 8005f50:	69e3      	ldr	r3, [r4, #28]
 8005f52:	4620      	mov	r0, r4
 8005f54:	68d9      	ldr	r1, [r3, #12]
 8005f56:	f000 f881 	bl	800605c <_free_r>
 8005f5a:	69e3      	ldr	r3, [r4, #28]
 8005f5c:	6819      	ldr	r1, [r3, #0]
 8005f5e:	b111      	cbz	r1, 8005f66 <_reclaim_reent+0x3a>
 8005f60:	4620      	mov	r0, r4
 8005f62:	f000 f87b 	bl	800605c <_free_r>
 8005f66:	69e3      	ldr	r3, [r4, #28]
 8005f68:	689d      	ldr	r5, [r3, #8]
 8005f6a:	b15d      	cbz	r5, 8005f84 <_reclaim_reent+0x58>
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	4620      	mov	r0, r4
 8005f70:	682d      	ldr	r5, [r5, #0]
 8005f72:	f000 f873 	bl	800605c <_free_r>
 8005f76:	e7f8      	b.n	8005f6a <_reclaim_reent+0x3e>
 8005f78:	680e      	ldr	r6, [r1, #0]
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	f000 f86e 	bl	800605c <_free_r>
 8005f80:	4631      	mov	r1, r6
 8005f82:	e7e1      	b.n	8005f48 <_reclaim_reent+0x1c>
 8005f84:	6961      	ldr	r1, [r4, #20]
 8005f86:	b111      	cbz	r1, 8005f8e <_reclaim_reent+0x62>
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f000 f867 	bl	800605c <_free_r>
 8005f8e:	69e1      	ldr	r1, [r4, #28]
 8005f90:	b111      	cbz	r1, 8005f98 <_reclaim_reent+0x6c>
 8005f92:	4620      	mov	r0, r4
 8005f94:	f000 f862 	bl	800605c <_free_r>
 8005f98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005f9a:	b111      	cbz	r1, 8005fa2 <_reclaim_reent+0x76>
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f000 f85d 	bl	800605c <_free_r>
 8005fa2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fa4:	b111      	cbz	r1, 8005fac <_reclaim_reent+0x80>
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f000 f858 	bl	800605c <_free_r>
 8005fac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005fae:	b111      	cbz	r1, 8005fb6 <_reclaim_reent+0x8a>
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f000 f853 	bl	800605c <_free_r>
 8005fb6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005fb8:	b111      	cbz	r1, 8005fc0 <_reclaim_reent+0x94>
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 f84e 	bl	800605c <_free_r>
 8005fc0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005fc2:	b111      	cbz	r1, 8005fca <_reclaim_reent+0x9e>
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f000 f849 	bl	800605c <_free_r>
 8005fca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005fcc:	b111      	cbz	r1, 8005fd4 <_reclaim_reent+0xa8>
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f000 f844 	bl	800605c <_free_r>
 8005fd4:	6a23      	ldr	r3, [r4, #32]
 8005fd6:	b11b      	cbz	r3, 8005fe0 <_reclaim_reent+0xb4>
 8005fd8:	4620      	mov	r0, r4
 8005fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005fde:	4718      	bx	r3
 8005fe0:	bd70      	pop	{r4, r5, r6, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000010 	.word	0x20000010

08005fe8 <__errno>:
 8005fe8:	4b01      	ldr	r3, [pc, #4]	@ (8005ff0 <__errno+0x8>)
 8005fea:	6818      	ldr	r0, [r3, #0]
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20000010 	.word	0x20000010

08005ff4 <__libc_init_array>:
 8005ff4:	b570      	push	{r4, r5, r6, lr}
 8005ff6:	4d0d      	ldr	r5, [pc, #52]	@ (800602c <__libc_init_array+0x38>)
 8005ff8:	4c0d      	ldr	r4, [pc, #52]	@ (8006030 <__libc_init_array+0x3c>)
 8005ffa:	1b64      	subs	r4, r4, r5
 8005ffc:	10a4      	asrs	r4, r4, #2
 8005ffe:	2600      	movs	r6, #0
 8006000:	42a6      	cmp	r6, r4
 8006002:	d109      	bne.n	8006018 <__libc_init_array+0x24>
 8006004:	4d0b      	ldr	r5, [pc, #44]	@ (8006034 <__libc_init_array+0x40>)
 8006006:	4c0c      	ldr	r4, [pc, #48]	@ (8006038 <__libc_init_array+0x44>)
 8006008:	f000 fc64 	bl	80068d4 <_init>
 800600c:	1b64      	subs	r4, r4, r5
 800600e:	10a4      	asrs	r4, r4, #2
 8006010:	2600      	movs	r6, #0
 8006012:	42a6      	cmp	r6, r4
 8006014:	d105      	bne.n	8006022 <__libc_init_array+0x2e>
 8006016:	bd70      	pop	{r4, r5, r6, pc}
 8006018:	f855 3b04 	ldr.w	r3, [r5], #4
 800601c:	4798      	blx	r3
 800601e:	3601      	adds	r6, #1
 8006020:	e7ee      	b.n	8006000 <__libc_init_array+0xc>
 8006022:	f855 3b04 	ldr.w	r3, [r5], #4
 8006026:	4798      	blx	r3
 8006028:	3601      	adds	r6, #1
 800602a:	e7f2      	b.n	8006012 <__libc_init_array+0x1e>
 800602c:	08006a6c 	.word	0x08006a6c
 8006030:	08006a6c 	.word	0x08006a6c
 8006034:	08006a6c 	.word	0x08006a6c
 8006038:	08006a70 	.word	0x08006a70

0800603c <__retarget_lock_acquire_recursive>:
 800603c:	4770      	bx	lr

0800603e <__retarget_lock_release_recursive>:
 800603e:	4770      	bx	lr

08006040 <memcpy>:
 8006040:	440a      	add	r2, r1
 8006042:	4291      	cmp	r1, r2
 8006044:	f100 33ff 	add.w	r3, r0, #4294967295
 8006048:	d100      	bne.n	800604c <memcpy+0xc>
 800604a:	4770      	bx	lr
 800604c:	b510      	push	{r4, lr}
 800604e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006056:	4291      	cmp	r1, r2
 8006058:	d1f9      	bne.n	800604e <memcpy+0xe>
 800605a:	bd10      	pop	{r4, pc}

0800605c <_free_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	4605      	mov	r5, r0
 8006060:	2900      	cmp	r1, #0
 8006062:	d041      	beq.n	80060e8 <_free_r+0x8c>
 8006064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006068:	1f0c      	subs	r4, r1, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	bfb8      	it	lt
 800606e:	18e4      	addlt	r4, r4, r3
 8006070:	f000 f8e0 	bl	8006234 <__malloc_lock>
 8006074:	4a1d      	ldr	r2, [pc, #116]	@ (80060ec <_free_r+0x90>)
 8006076:	6813      	ldr	r3, [r2, #0]
 8006078:	b933      	cbnz	r3, 8006088 <_free_r+0x2c>
 800607a:	6063      	str	r3, [r4, #4]
 800607c:	6014      	str	r4, [r2, #0]
 800607e:	4628      	mov	r0, r5
 8006080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006084:	f000 b8dc 	b.w	8006240 <__malloc_unlock>
 8006088:	42a3      	cmp	r3, r4
 800608a:	d908      	bls.n	800609e <_free_r+0x42>
 800608c:	6820      	ldr	r0, [r4, #0]
 800608e:	1821      	adds	r1, r4, r0
 8006090:	428b      	cmp	r3, r1
 8006092:	bf01      	itttt	eq
 8006094:	6819      	ldreq	r1, [r3, #0]
 8006096:	685b      	ldreq	r3, [r3, #4]
 8006098:	1809      	addeq	r1, r1, r0
 800609a:	6021      	streq	r1, [r4, #0]
 800609c:	e7ed      	b.n	800607a <_free_r+0x1e>
 800609e:	461a      	mov	r2, r3
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	b10b      	cbz	r3, 80060a8 <_free_r+0x4c>
 80060a4:	42a3      	cmp	r3, r4
 80060a6:	d9fa      	bls.n	800609e <_free_r+0x42>
 80060a8:	6811      	ldr	r1, [r2, #0]
 80060aa:	1850      	adds	r0, r2, r1
 80060ac:	42a0      	cmp	r0, r4
 80060ae:	d10b      	bne.n	80060c8 <_free_r+0x6c>
 80060b0:	6820      	ldr	r0, [r4, #0]
 80060b2:	4401      	add	r1, r0
 80060b4:	1850      	adds	r0, r2, r1
 80060b6:	4283      	cmp	r3, r0
 80060b8:	6011      	str	r1, [r2, #0]
 80060ba:	d1e0      	bne.n	800607e <_free_r+0x22>
 80060bc:	6818      	ldr	r0, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	6053      	str	r3, [r2, #4]
 80060c2:	4408      	add	r0, r1
 80060c4:	6010      	str	r0, [r2, #0]
 80060c6:	e7da      	b.n	800607e <_free_r+0x22>
 80060c8:	d902      	bls.n	80060d0 <_free_r+0x74>
 80060ca:	230c      	movs	r3, #12
 80060cc:	602b      	str	r3, [r5, #0]
 80060ce:	e7d6      	b.n	800607e <_free_r+0x22>
 80060d0:	6820      	ldr	r0, [r4, #0]
 80060d2:	1821      	adds	r1, r4, r0
 80060d4:	428b      	cmp	r3, r1
 80060d6:	bf04      	itt	eq
 80060d8:	6819      	ldreq	r1, [r3, #0]
 80060da:	685b      	ldreq	r3, [r3, #4]
 80060dc:	6063      	str	r3, [r4, #4]
 80060de:	bf04      	itt	eq
 80060e0:	1809      	addeq	r1, r1, r0
 80060e2:	6021      	streq	r1, [r4, #0]
 80060e4:	6054      	str	r4, [r2, #4]
 80060e6:	e7ca      	b.n	800607e <_free_r+0x22>
 80060e8:	bd38      	pop	{r3, r4, r5, pc}
 80060ea:	bf00      	nop
 80060ec:	20004c4c 	.word	0x20004c4c

080060f0 <sbrk_aligned>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	4e0f      	ldr	r6, [pc, #60]	@ (8006130 <sbrk_aligned+0x40>)
 80060f4:	460c      	mov	r4, r1
 80060f6:	6831      	ldr	r1, [r6, #0]
 80060f8:	4605      	mov	r5, r0
 80060fa:	b911      	cbnz	r1, 8006102 <sbrk_aligned+0x12>
 80060fc:	f000 fba4 	bl	8006848 <_sbrk_r>
 8006100:	6030      	str	r0, [r6, #0]
 8006102:	4621      	mov	r1, r4
 8006104:	4628      	mov	r0, r5
 8006106:	f000 fb9f 	bl	8006848 <_sbrk_r>
 800610a:	1c43      	adds	r3, r0, #1
 800610c:	d103      	bne.n	8006116 <sbrk_aligned+0x26>
 800610e:	f04f 34ff 	mov.w	r4, #4294967295
 8006112:	4620      	mov	r0, r4
 8006114:	bd70      	pop	{r4, r5, r6, pc}
 8006116:	1cc4      	adds	r4, r0, #3
 8006118:	f024 0403 	bic.w	r4, r4, #3
 800611c:	42a0      	cmp	r0, r4
 800611e:	d0f8      	beq.n	8006112 <sbrk_aligned+0x22>
 8006120:	1a21      	subs	r1, r4, r0
 8006122:	4628      	mov	r0, r5
 8006124:	f000 fb90 	bl	8006848 <_sbrk_r>
 8006128:	3001      	adds	r0, #1
 800612a:	d1f2      	bne.n	8006112 <sbrk_aligned+0x22>
 800612c:	e7ef      	b.n	800610e <sbrk_aligned+0x1e>
 800612e:	bf00      	nop
 8006130:	20004c48 	.word	0x20004c48

08006134 <_malloc_r>:
 8006134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006138:	1ccd      	adds	r5, r1, #3
 800613a:	f025 0503 	bic.w	r5, r5, #3
 800613e:	3508      	adds	r5, #8
 8006140:	2d0c      	cmp	r5, #12
 8006142:	bf38      	it	cc
 8006144:	250c      	movcc	r5, #12
 8006146:	2d00      	cmp	r5, #0
 8006148:	4606      	mov	r6, r0
 800614a:	db01      	blt.n	8006150 <_malloc_r+0x1c>
 800614c:	42a9      	cmp	r1, r5
 800614e:	d904      	bls.n	800615a <_malloc_r+0x26>
 8006150:	230c      	movs	r3, #12
 8006152:	6033      	str	r3, [r6, #0]
 8006154:	2000      	movs	r0, #0
 8006156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800615a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006230 <_malloc_r+0xfc>
 800615e:	f000 f869 	bl	8006234 <__malloc_lock>
 8006162:	f8d8 3000 	ldr.w	r3, [r8]
 8006166:	461c      	mov	r4, r3
 8006168:	bb44      	cbnz	r4, 80061bc <_malloc_r+0x88>
 800616a:	4629      	mov	r1, r5
 800616c:	4630      	mov	r0, r6
 800616e:	f7ff ffbf 	bl	80060f0 <sbrk_aligned>
 8006172:	1c43      	adds	r3, r0, #1
 8006174:	4604      	mov	r4, r0
 8006176:	d158      	bne.n	800622a <_malloc_r+0xf6>
 8006178:	f8d8 4000 	ldr.w	r4, [r8]
 800617c:	4627      	mov	r7, r4
 800617e:	2f00      	cmp	r7, #0
 8006180:	d143      	bne.n	800620a <_malloc_r+0xd6>
 8006182:	2c00      	cmp	r4, #0
 8006184:	d04b      	beq.n	800621e <_malloc_r+0xea>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	4639      	mov	r1, r7
 800618a:	4630      	mov	r0, r6
 800618c:	eb04 0903 	add.w	r9, r4, r3
 8006190:	f000 fb5a 	bl	8006848 <_sbrk_r>
 8006194:	4581      	cmp	r9, r0
 8006196:	d142      	bne.n	800621e <_malloc_r+0xea>
 8006198:	6821      	ldr	r1, [r4, #0]
 800619a:	1a6d      	subs	r5, r5, r1
 800619c:	4629      	mov	r1, r5
 800619e:	4630      	mov	r0, r6
 80061a0:	f7ff ffa6 	bl	80060f0 <sbrk_aligned>
 80061a4:	3001      	adds	r0, #1
 80061a6:	d03a      	beq.n	800621e <_malloc_r+0xea>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	442b      	add	r3, r5
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	f8d8 3000 	ldr.w	r3, [r8]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	bb62      	cbnz	r2, 8006210 <_malloc_r+0xdc>
 80061b6:	f8c8 7000 	str.w	r7, [r8]
 80061ba:	e00f      	b.n	80061dc <_malloc_r+0xa8>
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	1b52      	subs	r2, r2, r5
 80061c0:	d420      	bmi.n	8006204 <_malloc_r+0xd0>
 80061c2:	2a0b      	cmp	r2, #11
 80061c4:	d917      	bls.n	80061f6 <_malloc_r+0xc2>
 80061c6:	1961      	adds	r1, r4, r5
 80061c8:	42a3      	cmp	r3, r4
 80061ca:	6025      	str	r5, [r4, #0]
 80061cc:	bf18      	it	ne
 80061ce:	6059      	strne	r1, [r3, #4]
 80061d0:	6863      	ldr	r3, [r4, #4]
 80061d2:	bf08      	it	eq
 80061d4:	f8c8 1000 	streq.w	r1, [r8]
 80061d8:	5162      	str	r2, [r4, r5]
 80061da:	604b      	str	r3, [r1, #4]
 80061dc:	4630      	mov	r0, r6
 80061de:	f000 f82f 	bl	8006240 <__malloc_unlock>
 80061e2:	f104 000b 	add.w	r0, r4, #11
 80061e6:	1d23      	adds	r3, r4, #4
 80061e8:	f020 0007 	bic.w	r0, r0, #7
 80061ec:	1ac2      	subs	r2, r0, r3
 80061ee:	bf1c      	itt	ne
 80061f0:	1a1b      	subne	r3, r3, r0
 80061f2:	50a3      	strne	r3, [r4, r2]
 80061f4:	e7af      	b.n	8006156 <_malloc_r+0x22>
 80061f6:	6862      	ldr	r2, [r4, #4]
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	bf0c      	ite	eq
 80061fc:	f8c8 2000 	streq.w	r2, [r8]
 8006200:	605a      	strne	r2, [r3, #4]
 8006202:	e7eb      	b.n	80061dc <_malloc_r+0xa8>
 8006204:	4623      	mov	r3, r4
 8006206:	6864      	ldr	r4, [r4, #4]
 8006208:	e7ae      	b.n	8006168 <_malloc_r+0x34>
 800620a:	463c      	mov	r4, r7
 800620c:	687f      	ldr	r7, [r7, #4]
 800620e:	e7b6      	b.n	800617e <_malloc_r+0x4a>
 8006210:	461a      	mov	r2, r3
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	42a3      	cmp	r3, r4
 8006216:	d1fb      	bne.n	8006210 <_malloc_r+0xdc>
 8006218:	2300      	movs	r3, #0
 800621a:	6053      	str	r3, [r2, #4]
 800621c:	e7de      	b.n	80061dc <_malloc_r+0xa8>
 800621e:	230c      	movs	r3, #12
 8006220:	6033      	str	r3, [r6, #0]
 8006222:	4630      	mov	r0, r6
 8006224:	f000 f80c 	bl	8006240 <__malloc_unlock>
 8006228:	e794      	b.n	8006154 <_malloc_r+0x20>
 800622a:	6005      	str	r5, [r0, #0]
 800622c:	e7d6      	b.n	80061dc <_malloc_r+0xa8>
 800622e:	bf00      	nop
 8006230:	20004c4c 	.word	0x20004c4c

08006234 <__malloc_lock>:
 8006234:	4801      	ldr	r0, [pc, #4]	@ (800623c <__malloc_lock+0x8>)
 8006236:	f7ff bf01 	b.w	800603c <__retarget_lock_acquire_recursive>
 800623a:	bf00      	nop
 800623c:	20004c44 	.word	0x20004c44

08006240 <__malloc_unlock>:
 8006240:	4801      	ldr	r0, [pc, #4]	@ (8006248 <__malloc_unlock+0x8>)
 8006242:	f7ff befc 	b.w	800603e <__retarget_lock_release_recursive>
 8006246:	bf00      	nop
 8006248:	20004c44 	.word	0x20004c44

0800624c <__ssputs_r>:
 800624c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006250:	688e      	ldr	r6, [r1, #8]
 8006252:	461f      	mov	r7, r3
 8006254:	42be      	cmp	r6, r7
 8006256:	680b      	ldr	r3, [r1, #0]
 8006258:	4682      	mov	sl, r0
 800625a:	460c      	mov	r4, r1
 800625c:	4690      	mov	r8, r2
 800625e:	d82d      	bhi.n	80062bc <__ssputs_r+0x70>
 8006260:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006264:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006268:	d026      	beq.n	80062b8 <__ssputs_r+0x6c>
 800626a:	6965      	ldr	r5, [r4, #20]
 800626c:	6909      	ldr	r1, [r1, #16]
 800626e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006272:	eba3 0901 	sub.w	r9, r3, r1
 8006276:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800627a:	1c7b      	adds	r3, r7, #1
 800627c:	444b      	add	r3, r9
 800627e:	106d      	asrs	r5, r5, #1
 8006280:	429d      	cmp	r5, r3
 8006282:	bf38      	it	cc
 8006284:	461d      	movcc	r5, r3
 8006286:	0553      	lsls	r3, r2, #21
 8006288:	d527      	bpl.n	80062da <__ssputs_r+0x8e>
 800628a:	4629      	mov	r1, r5
 800628c:	f7ff ff52 	bl	8006134 <_malloc_r>
 8006290:	4606      	mov	r6, r0
 8006292:	b360      	cbz	r0, 80062ee <__ssputs_r+0xa2>
 8006294:	6921      	ldr	r1, [r4, #16]
 8006296:	464a      	mov	r2, r9
 8006298:	f7ff fed2 	bl	8006040 <memcpy>
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80062a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062a6:	81a3      	strh	r3, [r4, #12]
 80062a8:	6126      	str	r6, [r4, #16]
 80062aa:	6165      	str	r5, [r4, #20]
 80062ac:	444e      	add	r6, r9
 80062ae:	eba5 0509 	sub.w	r5, r5, r9
 80062b2:	6026      	str	r6, [r4, #0]
 80062b4:	60a5      	str	r5, [r4, #8]
 80062b6:	463e      	mov	r6, r7
 80062b8:	42be      	cmp	r6, r7
 80062ba:	d900      	bls.n	80062be <__ssputs_r+0x72>
 80062bc:	463e      	mov	r6, r7
 80062be:	6820      	ldr	r0, [r4, #0]
 80062c0:	4632      	mov	r2, r6
 80062c2:	4641      	mov	r1, r8
 80062c4:	f000 faa6 	bl	8006814 <memmove>
 80062c8:	68a3      	ldr	r3, [r4, #8]
 80062ca:	1b9b      	subs	r3, r3, r6
 80062cc:	60a3      	str	r3, [r4, #8]
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	4433      	add	r3, r6
 80062d2:	6023      	str	r3, [r4, #0]
 80062d4:	2000      	movs	r0, #0
 80062d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062da:	462a      	mov	r2, r5
 80062dc:	f000 fac4 	bl	8006868 <_realloc_r>
 80062e0:	4606      	mov	r6, r0
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d1e0      	bne.n	80062a8 <__ssputs_r+0x5c>
 80062e6:	6921      	ldr	r1, [r4, #16]
 80062e8:	4650      	mov	r0, sl
 80062ea:	f7ff feb7 	bl	800605c <_free_r>
 80062ee:	230c      	movs	r3, #12
 80062f0:	f8ca 3000 	str.w	r3, [sl]
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062fa:	81a3      	strh	r3, [r4, #12]
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	e7e9      	b.n	80062d6 <__ssputs_r+0x8a>
	...

08006304 <_svfiprintf_r>:
 8006304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006308:	4698      	mov	r8, r3
 800630a:	898b      	ldrh	r3, [r1, #12]
 800630c:	061b      	lsls	r3, r3, #24
 800630e:	b09d      	sub	sp, #116	@ 0x74
 8006310:	4607      	mov	r7, r0
 8006312:	460d      	mov	r5, r1
 8006314:	4614      	mov	r4, r2
 8006316:	d510      	bpl.n	800633a <_svfiprintf_r+0x36>
 8006318:	690b      	ldr	r3, [r1, #16]
 800631a:	b973      	cbnz	r3, 800633a <_svfiprintf_r+0x36>
 800631c:	2140      	movs	r1, #64	@ 0x40
 800631e:	f7ff ff09 	bl	8006134 <_malloc_r>
 8006322:	6028      	str	r0, [r5, #0]
 8006324:	6128      	str	r0, [r5, #16]
 8006326:	b930      	cbnz	r0, 8006336 <_svfiprintf_r+0x32>
 8006328:	230c      	movs	r3, #12
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	f04f 30ff 	mov.w	r0, #4294967295
 8006330:	b01d      	add	sp, #116	@ 0x74
 8006332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006336:	2340      	movs	r3, #64	@ 0x40
 8006338:	616b      	str	r3, [r5, #20]
 800633a:	2300      	movs	r3, #0
 800633c:	9309      	str	r3, [sp, #36]	@ 0x24
 800633e:	2320      	movs	r3, #32
 8006340:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006344:	f8cd 800c 	str.w	r8, [sp, #12]
 8006348:	2330      	movs	r3, #48	@ 0x30
 800634a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80064e8 <_svfiprintf_r+0x1e4>
 800634e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006352:	f04f 0901 	mov.w	r9, #1
 8006356:	4623      	mov	r3, r4
 8006358:	469a      	mov	sl, r3
 800635a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800635e:	b10a      	cbz	r2, 8006364 <_svfiprintf_r+0x60>
 8006360:	2a25      	cmp	r2, #37	@ 0x25
 8006362:	d1f9      	bne.n	8006358 <_svfiprintf_r+0x54>
 8006364:	ebba 0b04 	subs.w	fp, sl, r4
 8006368:	d00b      	beq.n	8006382 <_svfiprintf_r+0x7e>
 800636a:	465b      	mov	r3, fp
 800636c:	4622      	mov	r2, r4
 800636e:	4629      	mov	r1, r5
 8006370:	4638      	mov	r0, r7
 8006372:	f7ff ff6b 	bl	800624c <__ssputs_r>
 8006376:	3001      	adds	r0, #1
 8006378:	f000 80a7 	beq.w	80064ca <_svfiprintf_r+0x1c6>
 800637c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800637e:	445a      	add	r2, fp
 8006380:	9209      	str	r2, [sp, #36]	@ 0x24
 8006382:	f89a 3000 	ldrb.w	r3, [sl]
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 809f 	beq.w	80064ca <_svfiprintf_r+0x1c6>
 800638c:	2300      	movs	r3, #0
 800638e:	f04f 32ff 	mov.w	r2, #4294967295
 8006392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006396:	f10a 0a01 	add.w	sl, sl, #1
 800639a:	9304      	str	r3, [sp, #16]
 800639c:	9307      	str	r3, [sp, #28]
 800639e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80063a4:	4654      	mov	r4, sl
 80063a6:	2205      	movs	r2, #5
 80063a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ac:	484e      	ldr	r0, [pc, #312]	@ (80064e8 <_svfiprintf_r+0x1e4>)
 80063ae:	f7f9 ff37 	bl	8000220 <memchr>
 80063b2:	9a04      	ldr	r2, [sp, #16]
 80063b4:	b9d8      	cbnz	r0, 80063ee <_svfiprintf_r+0xea>
 80063b6:	06d0      	lsls	r0, r2, #27
 80063b8:	bf44      	itt	mi
 80063ba:	2320      	movmi	r3, #32
 80063bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063c0:	0711      	lsls	r1, r2, #28
 80063c2:	bf44      	itt	mi
 80063c4:	232b      	movmi	r3, #43	@ 0x2b
 80063c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063ca:	f89a 3000 	ldrb.w	r3, [sl]
 80063ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80063d0:	d015      	beq.n	80063fe <_svfiprintf_r+0xfa>
 80063d2:	9a07      	ldr	r2, [sp, #28]
 80063d4:	4654      	mov	r4, sl
 80063d6:	2000      	movs	r0, #0
 80063d8:	f04f 0c0a 	mov.w	ip, #10
 80063dc:	4621      	mov	r1, r4
 80063de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063e2:	3b30      	subs	r3, #48	@ 0x30
 80063e4:	2b09      	cmp	r3, #9
 80063e6:	d94b      	bls.n	8006480 <_svfiprintf_r+0x17c>
 80063e8:	b1b0      	cbz	r0, 8006418 <_svfiprintf_r+0x114>
 80063ea:	9207      	str	r2, [sp, #28]
 80063ec:	e014      	b.n	8006418 <_svfiprintf_r+0x114>
 80063ee:	eba0 0308 	sub.w	r3, r0, r8
 80063f2:	fa09 f303 	lsl.w	r3, r9, r3
 80063f6:	4313      	orrs	r3, r2
 80063f8:	9304      	str	r3, [sp, #16]
 80063fa:	46a2      	mov	sl, r4
 80063fc:	e7d2      	b.n	80063a4 <_svfiprintf_r+0xa0>
 80063fe:	9b03      	ldr	r3, [sp, #12]
 8006400:	1d19      	adds	r1, r3, #4
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	9103      	str	r1, [sp, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	bfbb      	ittet	lt
 800640a:	425b      	neglt	r3, r3
 800640c:	f042 0202 	orrlt.w	r2, r2, #2
 8006410:	9307      	strge	r3, [sp, #28]
 8006412:	9307      	strlt	r3, [sp, #28]
 8006414:	bfb8      	it	lt
 8006416:	9204      	strlt	r2, [sp, #16]
 8006418:	7823      	ldrb	r3, [r4, #0]
 800641a:	2b2e      	cmp	r3, #46	@ 0x2e
 800641c:	d10a      	bne.n	8006434 <_svfiprintf_r+0x130>
 800641e:	7863      	ldrb	r3, [r4, #1]
 8006420:	2b2a      	cmp	r3, #42	@ 0x2a
 8006422:	d132      	bne.n	800648a <_svfiprintf_r+0x186>
 8006424:	9b03      	ldr	r3, [sp, #12]
 8006426:	1d1a      	adds	r2, r3, #4
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	9203      	str	r2, [sp, #12]
 800642c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006430:	3402      	adds	r4, #2
 8006432:	9305      	str	r3, [sp, #20]
 8006434:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80064f8 <_svfiprintf_r+0x1f4>
 8006438:	7821      	ldrb	r1, [r4, #0]
 800643a:	2203      	movs	r2, #3
 800643c:	4650      	mov	r0, sl
 800643e:	f7f9 feef 	bl	8000220 <memchr>
 8006442:	b138      	cbz	r0, 8006454 <_svfiprintf_r+0x150>
 8006444:	9b04      	ldr	r3, [sp, #16]
 8006446:	eba0 000a 	sub.w	r0, r0, sl
 800644a:	2240      	movs	r2, #64	@ 0x40
 800644c:	4082      	lsls	r2, r0
 800644e:	4313      	orrs	r3, r2
 8006450:	3401      	adds	r4, #1
 8006452:	9304      	str	r3, [sp, #16]
 8006454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006458:	4824      	ldr	r0, [pc, #144]	@ (80064ec <_svfiprintf_r+0x1e8>)
 800645a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800645e:	2206      	movs	r2, #6
 8006460:	f7f9 fede 	bl	8000220 <memchr>
 8006464:	2800      	cmp	r0, #0
 8006466:	d036      	beq.n	80064d6 <_svfiprintf_r+0x1d2>
 8006468:	4b21      	ldr	r3, [pc, #132]	@ (80064f0 <_svfiprintf_r+0x1ec>)
 800646a:	bb1b      	cbnz	r3, 80064b4 <_svfiprintf_r+0x1b0>
 800646c:	9b03      	ldr	r3, [sp, #12]
 800646e:	3307      	adds	r3, #7
 8006470:	f023 0307 	bic.w	r3, r3, #7
 8006474:	3308      	adds	r3, #8
 8006476:	9303      	str	r3, [sp, #12]
 8006478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800647a:	4433      	add	r3, r6
 800647c:	9309      	str	r3, [sp, #36]	@ 0x24
 800647e:	e76a      	b.n	8006356 <_svfiprintf_r+0x52>
 8006480:	fb0c 3202 	mla	r2, ip, r2, r3
 8006484:	460c      	mov	r4, r1
 8006486:	2001      	movs	r0, #1
 8006488:	e7a8      	b.n	80063dc <_svfiprintf_r+0xd8>
 800648a:	2300      	movs	r3, #0
 800648c:	3401      	adds	r4, #1
 800648e:	9305      	str	r3, [sp, #20]
 8006490:	4619      	mov	r1, r3
 8006492:	f04f 0c0a 	mov.w	ip, #10
 8006496:	4620      	mov	r0, r4
 8006498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800649c:	3a30      	subs	r2, #48	@ 0x30
 800649e:	2a09      	cmp	r2, #9
 80064a0:	d903      	bls.n	80064aa <_svfiprintf_r+0x1a6>
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0c6      	beq.n	8006434 <_svfiprintf_r+0x130>
 80064a6:	9105      	str	r1, [sp, #20]
 80064a8:	e7c4      	b.n	8006434 <_svfiprintf_r+0x130>
 80064aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80064ae:	4604      	mov	r4, r0
 80064b0:	2301      	movs	r3, #1
 80064b2:	e7f0      	b.n	8006496 <_svfiprintf_r+0x192>
 80064b4:	ab03      	add	r3, sp, #12
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	462a      	mov	r2, r5
 80064ba:	4b0e      	ldr	r3, [pc, #56]	@ (80064f4 <_svfiprintf_r+0x1f0>)
 80064bc:	a904      	add	r1, sp, #16
 80064be:	4638      	mov	r0, r7
 80064c0:	f3af 8000 	nop.w
 80064c4:	1c42      	adds	r2, r0, #1
 80064c6:	4606      	mov	r6, r0
 80064c8:	d1d6      	bne.n	8006478 <_svfiprintf_r+0x174>
 80064ca:	89ab      	ldrh	r3, [r5, #12]
 80064cc:	065b      	lsls	r3, r3, #25
 80064ce:	f53f af2d 	bmi.w	800632c <_svfiprintf_r+0x28>
 80064d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064d4:	e72c      	b.n	8006330 <_svfiprintf_r+0x2c>
 80064d6:	ab03      	add	r3, sp, #12
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	462a      	mov	r2, r5
 80064dc:	4b05      	ldr	r3, [pc, #20]	@ (80064f4 <_svfiprintf_r+0x1f0>)
 80064de:	a904      	add	r1, sp, #16
 80064e0:	4638      	mov	r0, r7
 80064e2:	f000 f879 	bl	80065d8 <_printf_i>
 80064e6:	e7ed      	b.n	80064c4 <_svfiprintf_r+0x1c0>
 80064e8:	08006a30 	.word	0x08006a30
 80064ec:	08006a3a 	.word	0x08006a3a
 80064f0:	00000000 	.word	0x00000000
 80064f4:	0800624d 	.word	0x0800624d
 80064f8:	08006a36 	.word	0x08006a36

080064fc <_printf_common>:
 80064fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006500:	4616      	mov	r6, r2
 8006502:	4698      	mov	r8, r3
 8006504:	688a      	ldr	r2, [r1, #8]
 8006506:	690b      	ldr	r3, [r1, #16]
 8006508:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800650c:	4293      	cmp	r3, r2
 800650e:	bfb8      	it	lt
 8006510:	4613      	movlt	r3, r2
 8006512:	6033      	str	r3, [r6, #0]
 8006514:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006518:	4607      	mov	r7, r0
 800651a:	460c      	mov	r4, r1
 800651c:	b10a      	cbz	r2, 8006522 <_printf_common+0x26>
 800651e:	3301      	adds	r3, #1
 8006520:	6033      	str	r3, [r6, #0]
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	0699      	lsls	r1, r3, #26
 8006526:	bf42      	ittt	mi
 8006528:	6833      	ldrmi	r3, [r6, #0]
 800652a:	3302      	addmi	r3, #2
 800652c:	6033      	strmi	r3, [r6, #0]
 800652e:	6825      	ldr	r5, [r4, #0]
 8006530:	f015 0506 	ands.w	r5, r5, #6
 8006534:	d106      	bne.n	8006544 <_printf_common+0x48>
 8006536:	f104 0a19 	add.w	sl, r4, #25
 800653a:	68e3      	ldr	r3, [r4, #12]
 800653c:	6832      	ldr	r2, [r6, #0]
 800653e:	1a9b      	subs	r3, r3, r2
 8006540:	42ab      	cmp	r3, r5
 8006542:	dc26      	bgt.n	8006592 <_printf_common+0x96>
 8006544:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006548:	6822      	ldr	r2, [r4, #0]
 800654a:	3b00      	subs	r3, #0
 800654c:	bf18      	it	ne
 800654e:	2301      	movne	r3, #1
 8006550:	0692      	lsls	r2, r2, #26
 8006552:	d42b      	bmi.n	80065ac <_printf_common+0xb0>
 8006554:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006558:	4641      	mov	r1, r8
 800655a:	4638      	mov	r0, r7
 800655c:	47c8      	blx	r9
 800655e:	3001      	adds	r0, #1
 8006560:	d01e      	beq.n	80065a0 <_printf_common+0xa4>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	6922      	ldr	r2, [r4, #16]
 8006566:	f003 0306 	and.w	r3, r3, #6
 800656a:	2b04      	cmp	r3, #4
 800656c:	bf02      	ittt	eq
 800656e:	68e5      	ldreq	r5, [r4, #12]
 8006570:	6833      	ldreq	r3, [r6, #0]
 8006572:	1aed      	subeq	r5, r5, r3
 8006574:	68a3      	ldr	r3, [r4, #8]
 8006576:	bf0c      	ite	eq
 8006578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800657c:	2500      	movne	r5, #0
 800657e:	4293      	cmp	r3, r2
 8006580:	bfc4      	itt	gt
 8006582:	1a9b      	subgt	r3, r3, r2
 8006584:	18ed      	addgt	r5, r5, r3
 8006586:	2600      	movs	r6, #0
 8006588:	341a      	adds	r4, #26
 800658a:	42b5      	cmp	r5, r6
 800658c:	d11a      	bne.n	80065c4 <_printf_common+0xc8>
 800658e:	2000      	movs	r0, #0
 8006590:	e008      	b.n	80065a4 <_printf_common+0xa8>
 8006592:	2301      	movs	r3, #1
 8006594:	4652      	mov	r2, sl
 8006596:	4641      	mov	r1, r8
 8006598:	4638      	mov	r0, r7
 800659a:	47c8      	blx	r9
 800659c:	3001      	adds	r0, #1
 800659e:	d103      	bne.n	80065a8 <_printf_common+0xac>
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295
 80065a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a8:	3501      	adds	r5, #1
 80065aa:	e7c6      	b.n	800653a <_printf_common+0x3e>
 80065ac:	18e1      	adds	r1, r4, r3
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	2030      	movs	r0, #48	@ 0x30
 80065b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065b6:	4422      	add	r2, r4
 80065b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065c0:	3302      	adds	r3, #2
 80065c2:	e7c7      	b.n	8006554 <_printf_common+0x58>
 80065c4:	2301      	movs	r3, #1
 80065c6:	4622      	mov	r2, r4
 80065c8:	4641      	mov	r1, r8
 80065ca:	4638      	mov	r0, r7
 80065cc:	47c8      	blx	r9
 80065ce:	3001      	adds	r0, #1
 80065d0:	d0e6      	beq.n	80065a0 <_printf_common+0xa4>
 80065d2:	3601      	adds	r6, #1
 80065d4:	e7d9      	b.n	800658a <_printf_common+0x8e>
	...

080065d8 <_printf_i>:
 80065d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065dc:	7e0f      	ldrb	r7, [r1, #24]
 80065de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065e0:	2f78      	cmp	r7, #120	@ 0x78
 80065e2:	4691      	mov	r9, r2
 80065e4:	4680      	mov	r8, r0
 80065e6:	460c      	mov	r4, r1
 80065e8:	469a      	mov	sl, r3
 80065ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065ee:	d807      	bhi.n	8006600 <_printf_i+0x28>
 80065f0:	2f62      	cmp	r7, #98	@ 0x62
 80065f2:	d80a      	bhi.n	800660a <_printf_i+0x32>
 80065f4:	2f00      	cmp	r7, #0
 80065f6:	f000 80d1 	beq.w	800679c <_printf_i+0x1c4>
 80065fa:	2f58      	cmp	r7, #88	@ 0x58
 80065fc:	f000 80b8 	beq.w	8006770 <_printf_i+0x198>
 8006600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006604:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006608:	e03a      	b.n	8006680 <_printf_i+0xa8>
 800660a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800660e:	2b15      	cmp	r3, #21
 8006610:	d8f6      	bhi.n	8006600 <_printf_i+0x28>
 8006612:	a101      	add	r1, pc, #4	@ (adr r1, 8006618 <_printf_i+0x40>)
 8006614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006618:	08006671 	.word	0x08006671
 800661c:	08006685 	.word	0x08006685
 8006620:	08006601 	.word	0x08006601
 8006624:	08006601 	.word	0x08006601
 8006628:	08006601 	.word	0x08006601
 800662c:	08006601 	.word	0x08006601
 8006630:	08006685 	.word	0x08006685
 8006634:	08006601 	.word	0x08006601
 8006638:	08006601 	.word	0x08006601
 800663c:	08006601 	.word	0x08006601
 8006640:	08006601 	.word	0x08006601
 8006644:	08006783 	.word	0x08006783
 8006648:	080066af 	.word	0x080066af
 800664c:	0800673d 	.word	0x0800673d
 8006650:	08006601 	.word	0x08006601
 8006654:	08006601 	.word	0x08006601
 8006658:	080067a5 	.word	0x080067a5
 800665c:	08006601 	.word	0x08006601
 8006660:	080066af 	.word	0x080066af
 8006664:	08006601 	.word	0x08006601
 8006668:	08006601 	.word	0x08006601
 800666c:	08006745 	.word	0x08006745
 8006670:	6833      	ldr	r3, [r6, #0]
 8006672:	1d1a      	adds	r2, r3, #4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6032      	str	r2, [r6, #0]
 8006678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800667c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006680:	2301      	movs	r3, #1
 8006682:	e09c      	b.n	80067be <_printf_i+0x1e6>
 8006684:	6833      	ldr	r3, [r6, #0]
 8006686:	6820      	ldr	r0, [r4, #0]
 8006688:	1d19      	adds	r1, r3, #4
 800668a:	6031      	str	r1, [r6, #0]
 800668c:	0606      	lsls	r6, r0, #24
 800668e:	d501      	bpl.n	8006694 <_printf_i+0xbc>
 8006690:	681d      	ldr	r5, [r3, #0]
 8006692:	e003      	b.n	800669c <_printf_i+0xc4>
 8006694:	0645      	lsls	r5, r0, #25
 8006696:	d5fb      	bpl.n	8006690 <_printf_i+0xb8>
 8006698:	f9b3 5000 	ldrsh.w	r5, [r3]
 800669c:	2d00      	cmp	r5, #0
 800669e:	da03      	bge.n	80066a8 <_printf_i+0xd0>
 80066a0:	232d      	movs	r3, #45	@ 0x2d
 80066a2:	426d      	negs	r5, r5
 80066a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066a8:	4858      	ldr	r0, [pc, #352]	@ (800680c <_printf_i+0x234>)
 80066aa:	230a      	movs	r3, #10
 80066ac:	e011      	b.n	80066d2 <_printf_i+0xfa>
 80066ae:	6821      	ldr	r1, [r4, #0]
 80066b0:	6833      	ldr	r3, [r6, #0]
 80066b2:	0608      	lsls	r0, r1, #24
 80066b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80066b8:	d402      	bmi.n	80066c0 <_printf_i+0xe8>
 80066ba:	0649      	lsls	r1, r1, #25
 80066bc:	bf48      	it	mi
 80066be:	b2ad      	uxthmi	r5, r5
 80066c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80066c2:	4852      	ldr	r0, [pc, #328]	@ (800680c <_printf_i+0x234>)
 80066c4:	6033      	str	r3, [r6, #0]
 80066c6:	bf14      	ite	ne
 80066c8:	230a      	movne	r3, #10
 80066ca:	2308      	moveq	r3, #8
 80066cc:	2100      	movs	r1, #0
 80066ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066d2:	6866      	ldr	r6, [r4, #4]
 80066d4:	60a6      	str	r6, [r4, #8]
 80066d6:	2e00      	cmp	r6, #0
 80066d8:	db05      	blt.n	80066e6 <_printf_i+0x10e>
 80066da:	6821      	ldr	r1, [r4, #0]
 80066dc:	432e      	orrs	r6, r5
 80066de:	f021 0104 	bic.w	r1, r1, #4
 80066e2:	6021      	str	r1, [r4, #0]
 80066e4:	d04b      	beq.n	800677e <_printf_i+0x1a6>
 80066e6:	4616      	mov	r6, r2
 80066e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80066ec:	fb03 5711 	mls	r7, r3, r1, r5
 80066f0:	5dc7      	ldrb	r7, [r0, r7]
 80066f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066f6:	462f      	mov	r7, r5
 80066f8:	42bb      	cmp	r3, r7
 80066fa:	460d      	mov	r5, r1
 80066fc:	d9f4      	bls.n	80066e8 <_printf_i+0x110>
 80066fe:	2b08      	cmp	r3, #8
 8006700:	d10b      	bne.n	800671a <_printf_i+0x142>
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	07df      	lsls	r7, r3, #31
 8006706:	d508      	bpl.n	800671a <_printf_i+0x142>
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	6861      	ldr	r1, [r4, #4]
 800670c:	4299      	cmp	r1, r3
 800670e:	bfde      	ittt	le
 8006710:	2330      	movle	r3, #48	@ 0x30
 8006712:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006716:	f106 36ff 	addle.w	r6, r6, #4294967295
 800671a:	1b92      	subs	r2, r2, r6
 800671c:	6122      	str	r2, [r4, #16]
 800671e:	f8cd a000 	str.w	sl, [sp]
 8006722:	464b      	mov	r3, r9
 8006724:	aa03      	add	r2, sp, #12
 8006726:	4621      	mov	r1, r4
 8006728:	4640      	mov	r0, r8
 800672a:	f7ff fee7 	bl	80064fc <_printf_common>
 800672e:	3001      	adds	r0, #1
 8006730:	d14a      	bne.n	80067c8 <_printf_i+0x1f0>
 8006732:	f04f 30ff 	mov.w	r0, #4294967295
 8006736:	b004      	add	sp, #16
 8006738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	f043 0320 	orr.w	r3, r3, #32
 8006742:	6023      	str	r3, [r4, #0]
 8006744:	4832      	ldr	r0, [pc, #200]	@ (8006810 <_printf_i+0x238>)
 8006746:	2778      	movs	r7, #120	@ 0x78
 8006748:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	6831      	ldr	r1, [r6, #0]
 8006750:	061f      	lsls	r7, r3, #24
 8006752:	f851 5b04 	ldr.w	r5, [r1], #4
 8006756:	d402      	bmi.n	800675e <_printf_i+0x186>
 8006758:	065f      	lsls	r7, r3, #25
 800675a:	bf48      	it	mi
 800675c:	b2ad      	uxthmi	r5, r5
 800675e:	6031      	str	r1, [r6, #0]
 8006760:	07d9      	lsls	r1, r3, #31
 8006762:	bf44      	itt	mi
 8006764:	f043 0320 	orrmi.w	r3, r3, #32
 8006768:	6023      	strmi	r3, [r4, #0]
 800676a:	b11d      	cbz	r5, 8006774 <_printf_i+0x19c>
 800676c:	2310      	movs	r3, #16
 800676e:	e7ad      	b.n	80066cc <_printf_i+0xf4>
 8006770:	4826      	ldr	r0, [pc, #152]	@ (800680c <_printf_i+0x234>)
 8006772:	e7e9      	b.n	8006748 <_printf_i+0x170>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	f023 0320 	bic.w	r3, r3, #32
 800677a:	6023      	str	r3, [r4, #0]
 800677c:	e7f6      	b.n	800676c <_printf_i+0x194>
 800677e:	4616      	mov	r6, r2
 8006780:	e7bd      	b.n	80066fe <_printf_i+0x126>
 8006782:	6833      	ldr	r3, [r6, #0]
 8006784:	6825      	ldr	r5, [r4, #0]
 8006786:	6961      	ldr	r1, [r4, #20]
 8006788:	1d18      	adds	r0, r3, #4
 800678a:	6030      	str	r0, [r6, #0]
 800678c:	062e      	lsls	r6, r5, #24
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	d501      	bpl.n	8006796 <_printf_i+0x1be>
 8006792:	6019      	str	r1, [r3, #0]
 8006794:	e002      	b.n	800679c <_printf_i+0x1c4>
 8006796:	0668      	lsls	r0, r5, #25
 8006798:	d5fb      	bpl.n	8006792 <_printf_i+0x1ba>
 800679a:	8019      	strh	r1, [r3, #0]
 800679c:	2300      	movs	r3, #0
 800679e:	6123      	str	r3, [r4, #16]
 80067a0:	4616      	mov	r6, r2
 80067a2:	e7bc      	b.n	800671e <_printf_i+0x146>
 80067a4:	6833      	ldr	r3, [r6, #0]
 80067a6:	1d1a      	adds	r2, r3, #4
 80067a8:	6032      	str	r2, [r6, #0]
 80067aa:	681e      	ldr	r6, [r3, #0]
 80067ac:	6862      	ldr	r2, [r4, #4]
 80067ae:	2100      	movs	r1, #0
 80067b0:	4630      	mov	r0, r6
 80067b2:	f7f9 fd35 	bl	8000220 <memchr>
 80067b6:	b108      	cbz	r0, 80067bc <_printf_i+0x1e4>
 80067b8:	1b80      	subs	r0, r0, r6
 80067ba:	6060      	str	r0, [r4, #4]
 80067bc:	6863      	ldr	r3, [r4, #4]
 80067be:	6123      	str	r3, [r4, #16]
 80067c0:	2300      	movs	r3, #0
 80067c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067c6:	e7aa      	b.n	800671e <_printf_i+0x146>
 80067c8:	6923      	ldr	r3, [r4, #16]
 80067ca:	4632      	mov	r2, r6
 80067cc:	4649      	mov	r1, r9
 80067ce:	4640      	mov	r0, r8
 80067d0:	47d0      	blx	sl
 80067d2:	3001      	adds	r0, #1
 80067d4:	d0ad      	beq.n	8006732 <_printf_i+0x15a>
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	079b      	lsls	r3, r3, #30
 80067da:	d413      	bmi.n	8006804 <_printf_i+0x22c>
 80067dc:	68e0      	ldr	r0, [r4, #12]
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	4298      	cmp	r0, r3
 80067e2:	bfb8      	it	lt
 80067e4:	4618      	movlt	r0, r3
 80067e6:	e7a6      	b.n	8006736 <_printf_i+0x15e>
 80067e8:	2301      	movs	r3, #1
 80067ea:	4632      	mov	r2, r6
 80067ec:	4649      	mov	r1, r9
 80067ee:	4640      	mov	r0, r8
 80067f0:	47d0      	blx	sl
 80067f2:	3001      	adds	r0, #1
 80067f4:	d09d      	beq.n	8006732 <_printf_i+0x15a>
 80067f6:	3501      	adds	r5, #1
 80067f8:	68e3      	ldr	r3, [r4, #12]
 80067fa:	9903      	ldr	r1, [sp, #12]
 80067fc:	1a5b      	subs	r3, r3, r1
 80067fe:	42ab      	cmp	r3, r5
 8006800:	dcf2      	bgt.n	80067e8 <_printf_i+0x210>
 8006802:	e7eb      	b.n	80067dc <_printf_i+0x204>
 8006804:	2500      	movs	r5, #0
 8006806:	f104 0619 	add.w	r6, r4, #25
 800680a:	e7f5      	b.n	80067f8 <_printf_i+0x220>
 800680c:	08006a41 	.word	0x08006a41
 8006810:	08006a52 	.word	0x08006a52

08006814 <memmove>:
 8006814:	4288      	cmp	r0, r1
 8006816:	b510      	push	{r4, lr}
 8006818:	eb01 0402 	add.w	r4, r1, r2
 800681c:	d902      	bls.n	8006824 <memmove+0x10>
 800681e:	4284      	cmp	r4, r0
 8006820:	4623      	mov	r3, r4
 8006822:	d807      	bhi.n	8006834 <memmove+0x20>
 8006824:	1e43      	subs	r3, r0, #1
 8006826:	42a1      	cmp	r1, r4
 8006828:	d008      	beq.n	800683c <memmove+0x28>
 800682a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800682e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006832:	e7f8      	b.n	8006826 <memmove+0x12>
 8006834:	4402      	add	r2, r0
 8006836:	4601      	mov	r1, r0
 8006838:	428a      	cmp	r2, r1
 800683a:	d100      	bne.n	800683e <memmove+0x2a>
 800683c:	bd10      	pop	{r4, pc}
 800683e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006846:	e7f7      	b.n	8006838 <memmove+0x24>

08006848 <_sbrk_r>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	4d06      	ldr	r5, [pc, #24]	@ (8006864 <_sbrk_r+0x1c>)
 800684c:	2300      	movs	r3, #0
 800684e:	4604      	mov	r4, r0
 8006850:	4608      	mov	r0, r1
 8006852:	602b      	str	r3, [r5, #0]
 8006854:	f7fa f992 	bl	8000b7c <_sbrk>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	d102      	bne.n	8006862 <_sbrk_r+0x1a>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	b103      	cbz	r3, 8006862 <_sbrk_r+0x1a>
 8006860:	6023      	str	r3, [r4, #0]
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	20004c40 	.word	0x20004c40

08006868 <_realloc_r>:
 8006868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800686c:	4607      	mov	r7, r0
 800686e:	4614      	mov	r4, r2
 8006870:	460d      	mov	r5, r1
 8006872:	b921      	cbnz	r1, 800687e <_realloc_r+0x16>
 8006874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006878:	4611      	mov	r1, r2
 800687a:	f7ff bc5b 	b.w	8006134 <_malloc_r>
 800687e:	b92a      	cbnz	r2, 800688c <_realloc_r+0x24>
 8006880:	f7ff fbec 	bl	800605c <_free_r>
 8006884:	4625      	mov	r5, r4
 8006886:	4628      	mov	r0, r5
 8006888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800688c:	f000 f81a 	bl	80068c4 <_malloc_usable_size_r>
 8006890:	4284      	cmp	r4, r0
 8006892:	4606      	mov	r6, r0
 8006894:	d802      	bhi.n	800689c <_realloc_r+0x34>
 8006896:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800689a:	d8f4      	bhi.n	8006886 <_realloc_r+0x1e>
 800689c:	4621      	mov	r1, r4
 800689e:	4638      	mov	r0, r7
 80068a0:	f7ff fc48 	bl	8006134 <_malloc_r>
 80068a4:	4680      	mov	r8, r0
 80068a6:	b908      	cbnz	r0, 80068ac <_realloc_r+0x44>
 80068a8:	4645      	mov	r5, r8
 80068aa:	e7ec      	b.n	8006886 <_realloc_r+0x1e>
 80068ac:	42b4      	cmp	r4, r6
 80068ae:	4622      	mov	r2, r4
 80068b0:	4629      	mov	r1, r5
 80068b2:	bf28      	it	cs
 80068b4:	4632      	movcs	r2, r6
 80068b6:	f7ff fbc3 	bl	8006040 <memcpy>
 80068ba:	4629      	mov	r1, r5
 80068bc:	4638      	mov	r0, r7
 80068be:	f7ff fbcd 	bl	800605c <_free_r>
 80068c2:	e7f1      	b.n	80068a8 <_realloc_r+0x40>

080068c4 <_malloc_usable_size_r>:
 80068c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068c8:	1f18      	subs	r0, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	bfbc      	itt	lt
 80068ce:	580b      	ldrlt	r3, [r1, r0]
 80068d0:	18c0      	addlt	r0, r0, r3
 80068d2:	4770      	bx	lr

080068d4 <_init>:
 80068d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d6:	bf00      	nop
 80068d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068da:	bc08      	pop	{r3}
 80068dc:	469e      	mov	lr, r3
 80068de:	4770      	bx	lr

080068e0 <_fini>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	bf00      	nop
 80068e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e6:	bc08      	pop	{r3}
 80068e8:	469e      	mov	lr, r3
 80068ea:	4770      	bx	lr
