
Atividade_RTOS-4.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006530  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08006700  08006700  00007700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a2c  08006a2c  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006a2c  08006a2c  00007a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a34  08006a34  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a34  08006a34  00007a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a38  08006a38  00007a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006a3c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bec  20000060  08006a9c  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c4c  08006a9c  00008c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187d1  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003373  00000000  00000000  00020861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  00023bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd0  00000000  00000000  00025020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000031a2  00000000  00000000  00025ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a24  00000000  00000000  00029192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dafdf  00000000  00000000  0003fbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ab95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058c0  00000000  00000000  0011abd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00120498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080066e8 	.word	0x080066e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080066e8 	.word	0x080066e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <HAL_GPIO_EXTI_Callback>:
void StartTask2(void *argument);
void StartTask3(void *argument);
void StartTask4(void *argument);

/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t PC13){
 800054c:	b5b0      	push	{r4, r5, r7, lr}
 800054e:	b08c      	sub	sp, #48	@ 0x30
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	80fb      	strh	r3, [r7, #6]
	osSemaphoreRelease(MeuSemaforoContadorHandle);
 8000556:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4618      	mov	r0, r3
 800055c:	f002 fe48 	bl	80031f0 <osSemaphoreRelease>
	char str [] = "Botao apertado, liberando semaforo \n";
 8000560:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000562:	f107 0408 	add.w	r4, r7, #8
 8000566:	461d      	mov	r5, r3
 8000568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000570:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000574:	6020      	str	r0, [r4, #0]
 8000576:	3404      	adds	r4, #4
 8000578:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fe46 	bl	8000210 <strlen>
 8000584:	4603      	mov	r3, r0
 8000586:	b29a      	uxth	r2, r3
 8000588:	f107 0108 	add.w	r1, r7, #8
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000592:	f002 f85b 	bl	800264c <HAL_UART_Transmit>
}
 8000596:	bf00      	nop
 8000598:	3730      	adds	r7, #48	@ 0x30
 800059a:	46bd      	mov	sp, r7
 800059c:	bdb0      	pop	{r4, r5, r7, pc}
 800059e:	bf00      	nop
 80005a0:	200000d4 	.word	0x200000d4
 80005a4:	08006734 	.word	0x08006734
 80005a8:	2000007c 	.word	0x2000007c

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fcfc 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f84e 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f8d6 	bl	8000768 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005bc:	f000 f8aa 	bl	8000714 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c0:	f002 fc44 	bl	8002e4c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of MeuSemaforoContador */
  MeuSemaforoContadorHandle = osSemaphoreNew(2, 0, &MeuSemaforoContador_attributes);
 80005c4:	4a15      	ldr	r2, [pc, #84]	@ (800061c <main+0x70>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	2002      	movs	r0, #2
 80005ca:	f002 fd36 	bl	800303a <osSemaphoreNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a13      	ldr	r2, [pc, #76]	@ (8000620 <main+0x74>)
 80005d2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_1 */
  Task_1Handle = osThreadNew(StartTask1, NULL, &Task_1_attributes);
 80005d4:	4a13      	ldr	r2, [pc, #76]	@ (8000624 <main+0x78>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4813      	ldr	r0, [pc, #76]	@ (8000628 <main+0x7c>)
 80005da:	f002 fc81 	bl	8002ee0 <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a12      	ldr	r2, [pc, #72]	@ (800062c <main+0x80>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* creation of Task_2 */
  Task_2Handle = osThreadNew(StartTask2, NULL, &Task_2_attributes);
 80005e4:	4a12      	ldr	r2, [pc, #72]	@ (8000630 <main+0x84>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4812      	ldr	r0, [pc, #72]	@ (8000634 <main+0x88>)
 80005ea:	f002 fc79 	bl	8002ee0 <osThreadNew>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a11      	ldr	r2, [pc, #68]	@ (8000638 <main+0x8c>)
 80005f2:	6013      	str	r3, [r2, #0]

  /* creation of Task_3 */
  Task_3Handle = osThreadNew(StartTask3, NULL, &Task_3_attributes);
 80005f4:	4a11      	ldr	r2, [pc, #68]	@ (800063c <main+0x90>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4811      	ldr	r0, [pc, #68]	@ (8000640 <main+0x94>)
 80005fa:	f002 fc71 	bl	8002ee0 <osThreadNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a10      	ldr	r2, [pc, #64]	@ (8000644 <main+0x98>)
 8000602:	6013      	str	r3, [r2, #0]

  /* creation of Task_4 */
  Task_4Handle = osThreadNew(StartTask4, NULL, &Task_4_attributes);
 8000604:	4a10      	ldr	r2, [pc, #64]	@ (8000648 <main+0x9c>)
 8000606:	2100      	movs	r1, #0
 8000608:	4810      	ldr	r0, [pc, #64]	@ (800064c <main+0xa0>)
 800060a:	f002 fc69 	bl	8002ee0 <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a0f      	ldr	r2, [pc, #60]	@ (8000650 <main+0xa4>)
 8000612:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f002 fc3e 	bl	8002e94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <main+0x6c>
 800061c:	08006a04 	.word	0x08006a04
 8000620:	200000d4 	.word	0x200000d4
 8000624:	08006974 	.word	0x08006974
 8000628:	080007f5 	.word	0x080007f5
 800062c:	200000c4 	.word	0x200000c4
 8000630:	08006998 	.word	0x08006998
 8000634:	08000929 	.word	0x08000929
 8000638:	200000c8 	.word	0x200000c8
 800063c:	080069bc 	.word	0x080069bc
 8000640:	08000a65 	.word	0x08000a65
 8000644:	200000cc 	.word	0x200000cc
 8000648:	080069e0 	.word	0x080069e0
 800064c:	08000ba1 	.word	0x08000ba1
 8000650:	200000d0 	.word	0x200000d0

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	@ 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	2234      	movs	r2, #52	@ 0x34
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f005 ff50 	bl	8006508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b23      	ldr	r3, [pc, #140]	@ (800070c <SystemClock_Config+0xb8>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	4a22      	ldr	r2, [pc, #136]	@ (800070c <SystemClock_Config+0xb8>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	@ 0x40
 8000688:	4b20      	ldr	r3, [pc, #128]	@ (800070c <SystemClock_Config+0xb8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000694:	2300      	movs	r3, #0
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <SystemClock_Config+0xbc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000710 <SystemClock_Config+0xbc>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <SystemClock_Config+0xbc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fa35 	bl	8001b38 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006d4:	f000 fb14 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 ff2a 	bl	800154c <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006fe:	f000 faff 	bl	8000d00 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	@ 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000718:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_USART2_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <MX_USART2_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <MX_USART2_UART_Init+0x4c>)
 8000720:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_USART2_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_USART2_UART_Init+0x4c>)
 800074c:	f001 ff2e 	bl	80025ac <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 fad3 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000007c 	.word	0x2000007c
 8000764:	40004400 	.word	0x40004400

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_GPIO_Init+0x84>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a19      	ldr	r2, [pc, #100]	@ (80007ec <MX_GPIO_Init+0x84>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_GPIO_Init+0x84>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <MX_GPIO_Init+0x84>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a12      	ldr	r2, [pc, #72]	@ (80007ec <MX_GPIO_Init+0x84>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <MX_GPIO_Init+0x84>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4619      	mov	r1, r3
 80007cc:	4808      	ldr	r0, [pc, #32]	@ (80007f0 <MX_GPIO_Init+0x88>)
 80007ce:	f000 fd11 	bl	80011f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2028      	movs	r0, #40	@ 0x28
 80007d8:	f000 fce2 	bl	80011a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007dc:	2028      	movs	r0, #40	@ 0x28
 80007de:	f000 fcfb 	bl	80011d8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007e2:	bf00      	nop
 80007e4:	3720      	adds	r7, #32
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020800 	.word	0x40020800

080007f4 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80007f4:	b5b0      	push	{r4, r5, r7, lr}
 80007f6:	b0a2      	sub	sp, #136	@ 0x88
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    char msg[] = "Task 1: Testando semaforo\n";
 80007fc:	4b44      	ldr	r3, [pc, #272]	@ (8000910 <StartTask1+0x11c>)
 80007fe:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8000802:	461d      	mov	r5, r3
 8000804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000808:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800080c:	c403      	stmia	r4!, {r0, r1}
 800080e:	8022      	strh	r2, [r4, #0]
 8000810:	3402      	adds	r4, #2
 8000812:	0c13      	lsrs	r3, r2, #16
 8000814:	7023      	strb	r3, [r4, #0]
    char disponivel[] = "Task 1: Semaforo disponivel - pegando\n";
 8000816:	4b3f      	ldr	r3, [pc, #252]	@ (8000914 <StartTask1+0x120>)
 8000818:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800081c:	461d      	mov	r5, r3
 800081e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000820:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000826:	e895 0003 	ldmia.w	r5, {r0, r1}
 800082a:	6020      	str	r0, [r4, #0]
 800082c:	3404      	adds	r4, #4
 800082e:	8021      	strh	r1, [r4, #0]
 8000830:	3402      	adds	r4, #2
 8000832:	0c0b      	lsrs	r3, r1, #16
 8000834:	7023      	strb	r3, [r4, #0]
    char indisponivel[] = "Task 1: Semaforo ocupado - liberando\n";
 8000836:	4b38      	ldr	r3, [pc, #224]	@ (8000918 <StartTask1+0x124>)
 8000838:	f107 041c 	add.w	r4, r7, #28
 800083c:	461d      	mov	r5, r3
 800083e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000846:	e895 0003 	ldmia.w	r5, {r0, r1}
 800084a:	6020      	str	r0, [r4, #0]
 800084c:	3404      	adds	r4, #4
 800084e:	8021      	strh	r1, [r4, #0]
    char executando[] = "Task 1: Executando\n";
 8000850:	4b32      	ldr	r3, [pc, #200]	@ (800091c <StartTask1+0x128>)
 8000852:	f107 0408 	add.w	r4, r7, #8
 8000856:	461d      	mov	r5, r3
 8000858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085c:	682b      	ldr	r3, [r5, #0]
 800085e:	6023      	str	r3, [r4, #0]

    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8000860:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fcd3 	bl	8000210 <strlen>
 800086a:	4603      	mov	r3, r0
 800086c:	b29a      	uxth	r2, r3
 800086e:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000872:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000876:	482a      	ldr	r0, [pc, #168]	@ (8000920 <StartTask1+0x12c>)
 8000878:	f001 fee8 	bl	800264c <HAL_UART_Transmit>

    // Testa se está disponível
    if(osSemaphoreGetCount(MeuSemaforoContadorHandle) > 0){
 800087c:	4b29      	ldr	r3, [pc, #164]	@ (8000924 <StartTask1+0x130>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f002 fcf9 	bl	8003278 <osSemaphoreGetCount>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d014      	beq.n	80008b6 <StartTask1+0xc2>
        // Está disponível - pega
        HAL_UART_Transmit(&huart2, (uint8_t*)disponivel, strlen(disponivel), 1000);
 800088c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fcbd 	bl	8000210 <strlen>
 8000896:	4603      	mov	r3, r0
 8000898:	b29a      	uxth	r2, r3
 800089a:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800089e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008a2:	481f      	ldr	r0, [pc, #124]	@ (8000920 <StartTask1+0x12c>)
 80008a4:	f001 fed2 	bl	800264c <HAL_UART_Transmit>
        osSemaphoreAcquire(MeuSemaforoContadorHandle, 0);
 80008a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000924 <StartTask1+0x130>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 fc4c 	bl	800314c <osSemaphoreAcquire>
 80008b4:	e018      	b.n	80008e8 <StartTask1+0xf4>
    } else {
        // Não está disponível - libera para poder pegar
        HAL_UART_Transmit(&huart2, (uint8_t*)indisponivel, strlen(indisponivel), 1000);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fca8 	bl	8000210 <strlen>
 80008c0:	4603      	mov	r3, r0
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f107 011c 	add.w	r1, r7, #28
 80008c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008cc:	4814      	ldr	r0, [pc, #80]	@ (8000920 <StartTask1+0x12c>)
 80008ce:	f001 febd 	bl	800264c <HAL_UART_Transmit>
        osSemaphoreRelease(MeuSemaforoContadorHandle);
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <StartTask1+0x130>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 fc8a 	bl	80031f0 <osSemaphoreRelease>
        osSemaphoreAcquire(MeuSemaforoContadorHandle, 0);
 80008dc:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <StartTask1+0x130>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 fc32 	bl	800314c <osSemaphoreAcquire>
    }

    /* Infinite loop */
    for(;;)
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)executando, strlen(executando), 1000);
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fc8f 	bl	8000210 <strlen>
 80008f2:	4603      	mov	r3, r0
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	f107 0108 	add.w	r1, r7, #8
 80008fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008fe:	4808      	ldr	r0, [pc, #32]	@ (8000920 <StartTask1+0x12c>)
 8000900:	f001 fea4 	bl	800264c <HAL_UART_Transmit>
        osDelay(500);
 8000904:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000908:	f002 fb7c 	bl	8003004 <osDelay>
        HAL_UART_Transmit(&huart2, (uint8_t*)executando, strlen(executando), 1000);
 800090c:	bf00      	nop
 800090e:	e7eb      	b.n	80008e8 <StartTask1+0xf4>
 8000910:	0800675c 	.word	0x0800675c
 8000914:	08006778 	.word	0x08006778
 8000918:	080067a0 	.word	0x080067a0
 800091c:	080067c8 	.word	0x080067c8
 8000920:	2000007c 	.word	0x2000007c
 8000924:	200000d4 	.word	0x200000d4

08000928 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000928:	b5b0      	push	{r4, r5, r7, lr}
 800092a:	b0a2      	sub	sp, #136	@ 0x88
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
    char msg[] = "Task 2: Testando semaforo\n";
 8000930:	4b46      	ldr	r3, [pc, #280]	@ (8000a4c <StartTask2+0x124>)
 8000932:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8000936:	461d      	mov	r5, r3
 8000938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000940:	c403      	stmia	r4!, {r0, r1}
 8000942:	8022      	strh	r2, [r4, #0]
 8000944:	3402      	adds	r4, #2
 8000946:	0c13      	lsrs	r3, r2, #16
 8000948:	7023      	strb	r3, [r4, #0]
    char disponivel[] = "Task 2: Semaforo disponivel - pegando\n";
 800094a:	4b41      	ldr	r3, [pc, #260]	@ (8000a50 <StartTask2+0x128>)
 800094c:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8000950:	461d      	mov	r5, r3
 8000952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800095e:	6020      	str	r0, [r4, #0]
 8000960:	3404      	adds	r4, #4
 8000962:	8021      	strh	r1, [r4, #0]
 8000964:	3402      	adds	r4, #2
 8000966:	0c0b      	lsrs	r3, r1, #16
 8000968:	7023      	strb	r3, [r4, #0]
    char indisponivel[] = "Task 2: Semaforo ocupado - liberando\n";
 800096a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a54 <StartTask2+0x12c>)
 800096c:	f107 041c 	add.w	r4, r7, #28
 8000970:	461d      	mov	r5, r3
 8000972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800097e:	6020      	str	r0, [r4, #0]
 8000980:	3404      	adds	r4, #4
 8000982:	8021      	strh	r1, [r4, #0]
    char executando[] = "Task 2: Executando\n";
 8000984:	4b34      	ldr	r3, [pc, #208]	@ (8000a58 <StartTask2+0x130>)
 8000986:	f107 0408 	add.w	r4, r7, #8
 800098a:	461d      	mov	r5, r3
 800098c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	6023      	str	r3, [r4, #0]

    osDelay(100); // Pequeno delay para evitar conflito
 8000994:	2064      	movs	r0, #100	@ 0x64
 8000996:	f002 fb35 	bl	8003004 <osDelay>

    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 800099a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fc36 	bl	8000210 <strlen>
 80009a4:	4603      	mov	r3, r0
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80009ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b0:	482a      	ldr	r0, [pc, #168]	@ (8000a5c <StartTask2+0x134>)
 80009b2:	f001 fe4b 	bl	800264c <HAL_UART_Transmit>

    // Testa se está disponível
    if(osSemaphoreGetCount(MeuSemaforoContadorHandle) > 0){
 80009b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a60 <StartTask2+0x138>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 fc5c 	bl	8003278 <osSemaphoreGetCount>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d014      	beq.n	80009f0 <StartTask2+0xc8>
        // Está disponível - pega
        HAL_UART_Transmit(&huart2, (uint8_t*)disponivel, strlen(disponivel), 1000);
 80009c6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fc20 	bl	8000210 <strlen>
 80009d0:	4603      	mov	r3, r0
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80009d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009dc:	481f      	ldr	r0, [pc, #124]	@ (8000a5c <StartTask2+0x134>)
 80009de:	f001 fe35 	bl	800264c <HAL_UART_Transmit>
        osSemaphoreAcquire(MeuSemaforoContadorHandle, 0);
 80009e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a60 <StartTask2+0x138>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f002 fbaf 	bl	800314c <osSemaphoreAcquire>
 80009ee:	e018      	b.n	8000a22 <StartTask2+0xfa>
    } else {
        // Não está disponível - libera para poder pegar
        HAL_UART_Transmit(&huart2, (uint8_t*)indisponivel, strlen(indisponivel), 1000);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fc0b 	bl	8000210 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	f107 011c 	add.w	r1, r7, #28
 8000a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a06:	4815      	ldr	r0, [pc, #84]	@ (8000a5c <StartTask2+0x134>)
 8000a08:	f001 fe20 	bl	800264c <HAL_UART_Transmit>
        osSemaphoreRelease(MeuSemaforoContadorHandle);
 8000a0c:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <StartTask2+0x138>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 fbed 	bl	80031f0 <osSemaphoreRelease>
        osSemaphoreAcquire(MeuSemaforoContadorHandle, 0);
 8000a16:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <StartTask2+0x138>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 fb95 	bl	800314c <osSemaphoreAcquire>
    }

    /* Infinite loop */
    for(;;)
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)executando, strlen(executando), 1000);
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fbf2 	bl	8000210 <strlen>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	f107 0108 	add.w	r1, r7, #8
 8000a34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a38:	4808      	ldr	r0, [pc, #32]	@ (8000a5c <StartTask2+0x134>)
 8000a3a:	f001 fe07 	bl	800264c <HAL_UART_Transmit>
        osDelay(500);
 8000a3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a42:	f002 fadf 	bl	8003004 <osDelay>
        HAL_UART_Transmit(&huart2, (uint8_t*)executando, strlen(executando), 1000);
 8000a46:	bf00      	nop
 8000a48:	e7eb      	b.n	8000a22 <StartTask2+0xfa>
 8000a4a:	bf00      	nop
 8000a4c:	080067dc 	.word	0x080067dc
 8000a50:	080067f8 	.word	0x080067f8
 8000a54:	08006820 	.word	0x08006820
 8000a58:	08006848 	.word	0x08006848
 8000a5c:	2000007c 	.word	0x2000007c
 8000a60:	200000d4 	.word	0x200000d4

08000a64 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000a64:	b5b0      	push	{r4, r5, r7, lr}
 8000a66:	b0a2      	sub	sp, #136	@ 0x88
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
    char msg[] = "Task 3: Testando semaforo\n";
 8000a6c:	4b46      	ldr	r3, [pc, #280]	@ (8000b88 <StartTask3+0x124>)
 8000a6e:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8000a72:	461d      	mov	r5, r3
 8000a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a7c:	c403      	stmia	r4!, {r0, r1}
 8000a7e:	8022      	strh	r2, [r4, #0]
 8000a80:	3402      	adds	r4, #2
 8000a82:	0c13      	lsrs	r3, r2, #16
 8000a84:	7023      	strb	r3, [r4, #0]
    char disponivel[] = "Task 3: Semaforo disponivel - pegando\n";
 8000a86:	4b41      	ldr	r3, [pc, #260]	@ (8000b8c <StartTask3+0x128>)
 8000a88:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8000a8c:	461d      	mov	r5, r3
 8000a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a9a:	6020      	str	r0, [r4, #0]
 8000a9c:	3404      	adds	r4, #4
 8000a9e:	8021      	strh	r1, [r4, #0]
 8000aa0:	3402      	adds	r4, #2
 8000aa2:	0c0b      	lsrs	r3, r1, #16
 8000aa4:	7023      	strb	r3, [r4, #0]
    char indisponivel[] = "Task 3: Semaforo ocupado - liberando\n";
 8000aa6:	4b3a      	ldr	r3, [pc, #232]	@ (8000b90 <StartTask3+0x12c>)
 8000aa8:	f107 041c 	add.w	r4, r7, #28
 8000aac:	461d      	mov	r5, r3
 8000aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000aba:	6020      	str	r0, [r4, #0]
 8000abc:	3404      	adds	r4, #4
 8000abe:	8021      	strh	r1, [r4, #0]
    char executando[] = "Task 3: Executando\n";
 8000ac0:	4b34      	ldr	r3, [pc, #208]	@ (8000b94 <StartTask3+0x130>)
 8000ac2:	f107 0408 	add.w	r4, r7, #8
 8000ac6:	461d      	mov	r5, r3
 8000ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000acc:	682b      	ldr	r3, [r5, #0]
 8000ace:	6023      	str	r3, [r4, #0]

    osDelay(200); // Delay maior para esta task
 8000ad0:	20c8      	movs	r0, #200	@ 0xc8
 8000ad2:	f002 fa97 	bl	8003004 <osDelay>

    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8000ad6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fb98 	bl	8000210 <strlen>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000ae8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aec:	482a      	ldr	r0, [pc, #168]	@ (8000b98 <StartTask3+0x134>)
 8000aee:	f001 fdad 	bl	800264c <HAL_UART_Transmit>

    // Testa se está disponível
    if(osSemaphoreGetCount(MeuSemaforoContadorHandle) > 0){
 8000af2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b9c <StartTask3+0x138>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f002 fbbe 	bl	8003278 <osSemaphoreGetCount>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d014      	beq.n	8000b2c <StartTask3+0xc8>
        // Está disponível - pega
        HAL_UART_Transmit(&huart2, (uint8_t*)disponivel, strlen(disponivel), 1000);
 8000b02:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fb82 	bl	8000210 <strlen>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000b14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b18:	481f      	ldr	r0, [pc, #124]	@ (8000b98 <StartTask3+0x134>)
 8000b1a:	f001 fd97 	bl	800264c <HAL_UART_Transmit>
        osSemaphoreAcquire(MeuSemaforoContadorHandle, 0);
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <StartTask3+0x138>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 fb11 	bl	800314c <osSemaphoreAcquire>
 8000b2a:	e018      	b.n	8000b5e <StartTask3+0xfa>
    } else {
        // Não está disponível - libera para poder pegar
        HAL_UART_Transmit(&huart2, (uint8_t*)indisponivel, strlen(indisponivel), 1000);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fb6d 	bl	8000210 <strlen>
 8000b36:	4603      	mov	r3, r0
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	f107 011c 	add.w	r1, r7, #28
 8000b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b42:	4815      	ldr	r0, [pc, #84]	@ (8000b98 <StartTask3+0x134>)
 8000b44:	f001 fd82 	bl	800264c <HAL_UART_Transmit>
        osSemaphoreRelease(MeuSemaforoContadorHandle);
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <StartTask3+0x138>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f002 fb4f 	bl	80031f0 <osSemaphoreRelease>
        osSemaphoreAcquire(MeuSemaforoContadorHandle, 0);
 8000b52:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <StartTask3+0x138>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f002 faf7 	bl	800314c <osSemaphoreAcquire>
    }

    /* Infinite loop */
    for(;;)
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)executando, strlen(executando), 1000);
 8000b5e:	f107 0308 	add.w	r3, r7, #8
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fb54 	bl	8000210 <strlen>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	f107 0108 	add.w	r1, r7, #8
 8000b70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b74:	4808      	ldr	r0, [pc, #32]	@ (8000b98 <StartTask3+0x134>)
 8000b76:	f001 fd69 	bl	800264c <HAL_UART_Transmit>
        osDelay(500);
 8000b7a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b7e:	f002 fa41 	bl	8003004 <osDelay>
        HAL_UART_Transmit(&huart2, (uint8_t*)executando, strlen(executando), 1000);
 8000b82:	bf00      	nop
 8000b84:	e7eb      	b.n	8000b5e <StartTask3+0xfa>
 8000b86:	bf00      	nop
 8000b88:	0800685c 	.word	0x0800685c
 8000b8c:	08006878 	.word	0x08006878
 8000b90:	080068a0 	.word	0x080068a0
 8000b94:	080068c8 	.word	0x080068c8
 8000b98:	2000007c 	.word	0x2000007c
 8000b9c:	200000d4 	.word	0x200000d4

08000ba0 <StartTask4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask4 */
void StartTask4(void *argument)
{
 8000ba0:	b5b0      	push	{r4, r5, r7, lr}
 8000ba2:	b0a2      	sub	sp, #136	@ 0x88
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	  /* USER CODE BEGIN StartTask4 */
	    char msg[] = "Task 4: Testando semaforo\n";
 8000ba8:	4b46      	ldr	r3, [pc, #280]	@ (8000cc4 <StartTask4+0x124>)
 8000baa:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8000bae:	461d      	mov	r5, r3
 8000bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb8:	c403      	stmia	r4!, {r0, r1}
 8000bba:	8022      	strh	r2, [r4, #0]
 8000bbc:	3402      	adds	r4, #2
 8000bbe:	0c13      	lsrs	r3, r2, #16
 8000bc0:	7023      	strb	r3, [r4, #0]
	    char disponivel[] = "Task 4: Semaforo disponivel - pegando\n";
 8000bc2:	4b41      	ldr	r3, [pc, #260]	@ (8000cc8 <StartTask4+0x128>)
 8000bc4:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8000bc8:	461d      	mov	r5, r3
 8000bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bd6:	6020      	str	r0, [r4, #0]
 8000bd8:	3404      	adds	r4, #4
 8000bda:	8021      	strh	r1, [r4, #0]
 8000bdc:	3402      	adds	r4, #2
 8000bde:	0c0b      	lsrs	r3, r1, #16
 8000be0:	7023      	strb	r3, [r4, #0]
	    char indisponivel[] = "Task 4: Semaforo ocupado - liberando\n";
 8000be2:	4b3a      	ldr	r3, [pc, #232]	@ (8000ccc <StartTask4+0x12c>)
 8000be4:	f107 041c 	add.w	r4, r7, #28
 8000be8:	461d      	mov	r5, r3
 8000bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bf6:	6020      	str	r0, [r4, #0]
 8000bf8:	3404      	adds	r4, #4
 8000bfa:	8021      	strh	r1, [r4, #0]
	    char executando[] = "Task 4: Executando\n";
 8000bfc:	4b34      	ldr	r3, [pc, #208]	@ (8000cd0 <StartTask4+0x130>)
 8000bfe:	f107 0408 	add.w	r4, r7, #8
 8000c02:	461d      	mov	r5, r3
 8000c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c08:	682b      	ldr	r3, [r5, #0]
 8000c0a:	6023      	str	r3, [r4, #0]

	    osDelay(200); // Delay maior para esta task
 8000c0c:	20c8      	movs	r0, #200	@ 0xc8
 8000c0e:	f002 f9f9 	bl	8003004 <osDelay>

	    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8000c12:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fafa 	bl	8000210 <strlen>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000c24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c28:	482a      	ldr	r0, [pc, #168]	@ (8000cd4 <StartTask4+0x134>)
 8000c2a:	f001 fd0f 	bl	800264c <HAL_UART_Transmit>

	    // Testa se está disponível
	    if(osSemaphoreGetCount(MeuSemaforoContadorHandle) > 0){
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd8 <StartTask4+0x138>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 fb20 	bl	8003278 <osSemaphoreGetCount>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d014      	beq.n	8000c68 <StartTask4+0xc8>
	        // Está disponível - pega
	        HAL_UART_Transmit(&huart2, (uint8_t*)disponivel, strlen(disponivel), 1000);
 8000c3e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fae4 	bl	8000210 <strlen>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000c50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c54:	481f      	ldr	r0, [pc, #124]	@ (8000cd4 <StartTask4+0x134>)
 8000c56:	f001 fcf9 	bl	800264c <HAL_UART_Transmit>
	        osSemaphoreAcquire(MeuSemaforoContadorHandle, 0);
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <StartTask4+0x138>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f002 fa73 	bl	800314c <osSemaphoreAcquire>
 8000c66:	e018      	b.n	8000c9a <StartTask4+0xfa>
	    } else {
	        // Não está disponível - libera para poder pegar
	        HAL_UART_Transmit(&huart2, (uint8_t*)indisponivel, strlen(indisponivel), 1000);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff facf 	bl	8000210 <strlen>
 8000c72:	4603      	mov	r3, r0
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	f107 011c 	add.w	r1, r7, #28
 8000c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7e:	4815      	ldr	r0, [pc, #84]	@ (8000cd4 <StartTask4+0x134>)
 8000c80:	f001 fce4 	bl	800264c <HAL_UART_Transmit>
	        osSemaphoreRelease(MeuSemaforoContadorHandle);
 8000c84:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <StartTask4+0x138>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 fab1 	bl	80031f0 <osSemaphoreRelease>
	        osSemaphoreAcquire(MeuSemaforoContadorHandle, 0);
 8000c8e:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <StartTask4+0x138>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 fa59 	bl	800314c <osSemaphoreAcquire>
	    }

	    /* Infinite loop */
	    for(;;)
	    {
	        HAL_UART_Transmit(&huart2, (uint8_t*)executando, strlen(executando), 1000);
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fab6 	bl	8000210 <strlen>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	f107 0108 	add.w	r1, r7, #8
 8000cac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb0:	4808      	ldr	r0, [pc, #32]	@ (8000cd4 <StartTask4+0x134>)
 8000cb2:	f001 fccb 	bl	800264c <HAL_UART_Transmit>
	        osDelay(500);
 8000cb6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cba:	f002 f9a3 	bl	8003004 <osDelay>
	        HAL_UART_Transmit(&huart2, (uint8_t*)executando, strlen(executando), 1000);
 8000cbe:	bf00      	nop
 8000cc0:	e7eb      	b.n	8000c9a <StartTask4+0xfa>
 8000cc2:	bf00      	nop
 8000cc4:	080068dc 	.word	0x080068dc
 8000cc8:	080068f8 	.word	0x080068f8
 8000ccc:	08006920 	.word	0x08006920
 8000cd0:	08006948 	.word	0x08006948
 8000cd4:	2000007c 	.word	0x2000007c
 8000cd8:	200000d4 	.word	0x200000d4

08000cdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d101      	bne.n	8000cf2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000cee:	f000 f97f 	bl	8000ff0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40010000 	.word	0x40010000

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <Error_Handler+0x8>

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <HAL_MspInit+0x54>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1a:	4a11      	ldr	r2, [pc, #68]	@ (8000d60 <HAL_MspInit+0x54>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <HAL_MspInit+0x54>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <HAL_MspInit+0x54>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <HAL_MspInit+0x54>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3e:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <HAL_MspInit+0x54>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	210f      	movs	r1, #15
 8000d4e:	f06f 0001 	mvn.w	r0, #1
 8000d52:	f000 fa25 	bl	80011a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800

08000d64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a19      	ldr	r2, [pc, #100]	@ (8000de8 <HAL_UART_MspInit+0x84>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d12b      	bne.n	8000dde <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	4a17      	ldr	r2, [pc, #92]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a10      	ldr	r2, [pc, #64]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <HAL_UART_MspInit+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dce:	2307      	movs	r3, #7
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <HAL_UART_MspInit+0x8c>)
 8000dda:	f000 fa0b 	bl	80011f4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	@ 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40004400 	.word	0x40004400
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000

08000df4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	@ 0x30
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec4 <HAL_InitTick+0xd0>)
 8000e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ec4 <HAL_InitTick+0xd0>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e14:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec4 <HAL_InitTick+0xd0>)
 8000e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e20:	f107 020c 	add.w	r2, r7, #12
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 fca8 	bl	8001780 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e30:	f000 fc92 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 8000e34:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e38:	4a23      	ldr	r2, [pc, #140]	@ (8000ec8 <HAL_InitTick+0xd4>)
 8000e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3e:	0c9b      	lsrs	r3, r3, #18
 8000e40:	3b01      	subs	r3, #1
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e44:	4b21      	ldr	r3, [pc, #132]	@ (8000ecc <HAL_InitTick+0xd8>)
 8000e46:	4a22      	ldr	r2, [pc, #136]	@ (8000ed0 <HAL_InitTick+0xdc>)
 8000e48:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e4a:	4b20      	ldr	r3, [pc, #128]	@ (8000ecc <HAL_InitTick+0xd8>)
 8000e4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e50:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e52:	4a1e      	ldr	r2, [pc, #120]	@ (8000ecc <HAL_InitTick+0xd8>)
 8000e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e56:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e58:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <HAL_InitTick+0xd8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ecc <HAL_InitTick+0xd8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e64:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <HAL_InitTick+0xd8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e6a:	4818      	ldr	r0, [pc, #96]	@ (8000ecc <HAL_InitTick+0xd8>)
 8000e6c:	f001 f902 	bl	8002074 <HAL_TIM_Base_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d11b      	bne.n	8000eb6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e7e:	4813      	ldr	r0, [pc, #76]	@ (8000ecc <HAL_InitTick+0xd8>)
 8000e80:	f001 f952 	bl	8002128 <HAL_TIM_Base_Start_IT>
 8000e84:	4603      	mov	r3, r0
 8000e86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d111      	bne.n	8000eb6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e92:	2019      	movs	r0, #25
 8000e94:	f000 f9a0 	bl	80011d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b0f      	cmp	r3, #15
 8000e9c:	d808      	bhi.n	8000eb0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	2019      	movs	r0, #25
 8000ea4:	f000 f97c 	bl	80011a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <HAL_InitTick+0xe0>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	e002      	b.n	8000eb6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000eb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3730      	adds	r7, #48	@ 0x30
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	431bde83 	.word	0x431bde83
 8000ecc:	200000d8 	.word	0x200000d8
 8000ed0:	40010000 	.word	0x40010000
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <NMI_Handler+0x4>

08000ee0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <MemManage_Handler+0x4>

08000ef0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <UsageFault_Handler+0x4>

08000f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f16:	f001 f977 	bl	8002208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200000d8 	.word	0x200000d8

08000f24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f28:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f2c:	f000 faf6 	bl	800151c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	@ (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f5c:	f7ff ffea 	bl	8000f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f60:	480c      	ldr	r0, [pc, #48]	@ (8000f94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f62:	490d      	ldr	r1, [pc, #52]	@ (8000f98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f64:	4a0d      	ldr	r2, [pc, #52]	@ (8000f9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f78:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f005 fb25 	bl	80065d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff fb0f 	bl	80005ac <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f9c:	08006a3c 	.word	0x08006a3c
  ldr r2, =_sbss
 8000fa0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000fa4:	20004c4c 	.word	0x20004c4c

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fec <HAL_Init+0x40>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <HAL_Init+0x40>)
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	@ (8000fec <HAL_Init+0x40>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 f8d8 	bl	800118a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f7ff ff0a 	bl	8000df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fe94 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008
 8001014:	20000120 	.word	0x20000120

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000120 	.word	0x20000120

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001058:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800105c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	@ (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	@ (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	@ (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	@ 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	@ 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ff4c 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b2:	f7ff ff61 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	68b9      	ldr	r1, [r7, #8]
 80011bc:	6978      	ldr	r0, [r7, #20]
 80011be:	f7ff ffb1 	bl	8001124 <NVIC_EncodePriority>
 80011c2:	4602      	mov	r2, r0
 80011c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c8:	4611      	mov	r1, r2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff80 	bl	80010d0 <__NVIC_SetPriority>
}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff54 	bl	8001094 <__NVIC_EnableIRQ>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	@ 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
 800120e:	e165      	b.n	80014dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001210:	2201      	movs	r2, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	429a      	cmp	r2, r3
 800122a:	f040 8154 	bne.w	80014d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	2b01      	cmp	r3, #1
 8001238:	d005      	beq.n	8001246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001242:	2b02      	cmp	r3, #2
 8001244:	d130      	bne.n	80012a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800127c:	2201      	movs	r2, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 0201 	and.w	r2, r3, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d017      	beq.n	80012e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d123      	bne.n	8001338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	08da      	lsrs	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	69b9      	ldr	r1, [r7, #24]
 8001334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0203 	and.w	r2, r3, #3
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80ae 	beq.w	80014d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b5d      	ldr	r3, [pc, #372]	@ (80014f4 <HAL_GPIO_Init+0x300>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001382:	4a5c      	ldr	r2, [pc, #368]	@ (80014f4 <HAL_GPIO_Init+0x300>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001388:	6453      	str	r3, [r2, #68]	@ 0x44
 800138a:	4b5a      	ldr	r3, [pc, #360]	@ (80014f4 <HAL_GPIO_Init+0x300>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001396:	4a58      	ldr	r2, [pc, #352]	@ (80014f8 <HAL_GPIO_Init+0x304>)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	220f      	movs	r2, #15
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4f      	ldr	r2, [pc, #316]	@ (80014fc <HAL_GPIO_Init+0x308>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d025      	beq.n	800140e <HAL_GPIO_Init+0x21a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001500 <HAL_GPIO_Init+0x30c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d01f      	beq.n	800140a <HAL_GPIO_Init+0x216>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001504 <HAL_GPIO_Init+0x310>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d019      	beq.n	8001406 <HAL_GPIO_Init+0x212>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001508 <HAL_GPIO_Init+0x314>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0x20e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4b      	ldr	r2, [pc, #300]	@ (800150c <HAL_GPIO_Init+0x318>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00d      	beq.n	80013fe <HAL_GPIO_Init+0x20a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001510 <HAL_GPIO_Init+0x31c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x206>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a49      	ldr	r2, [pc, #292]	@ (8001514 <HAL_GPIO_Init+0x320>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_GPIO_Init+0x202>
 80013f2:	2306      	movs	r3, #6
 80013f4:	e00c      	b.n	8001410 <HAL_GPIO_Init+0x21c>
 80013f6:	2307      	movs	r3, #7
 80013f8:	e00a      	b.n	8001410 <HAL_GPIO_Init+0x21c>
 80013fa:	2305      	movs	r3, #5
 80013fc:	e008      	b.n	8001410 <HAL_GPIO_Init+0x21c>
 80013fe:	2304      	movs	r3, #4
 8001400:	e006      	b.n	8001410 <HAL_GPIO_Init+0x21c>
 8001402:	2303      	movs	r3, #3
 8001404:	e004      	b.n	8001410 <HAL_GPIO_Init+0x21c>
 8001406:	2302      	movs	r3, #2
 8001408:	e002      	b.n	8001410 <HAL_GPIO_Init+0x21c>
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <HAL_GPIO_Init+0x21c>
 800140e:	2300      	movs	r3, #0
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	f002 0203 	and.w	r2, r2, #3
 8001416:	0092      	lsls	r2, r2, #2
 8001418:	4093      	lsls	r3, r2
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001420:	4935      	ldr	r1, [pc, #212]	@ (80014f8 <HAL_GPIO_Init+0x304>)
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	3302      	adds	r3, #2
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142e:	4b3a      	ldr	r3, [pc, #232]	@ (8001518 <HAL_GPIO_Init+0x324>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001452:	4a31      	ldr	r2, [pc, #196]	@ (8001518 <HAL_GPIO_Init+0x324>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001458:	4b2f      	ldr	r3, [pc, #188]	@ (8001518 <HAL_GPIO_Init+0x324>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800147c:	4a26      	ldr	r2, [pc, #152]	@ (8001518 <HAL_GPIO_Init+0x324>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001482:	4b25      	ldr	r3, [pc, #148]	@ (8001518 <HAL_GPIO_Init+0x324>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001518 <HAL_GPIO_Init+0x324>)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <HAL_GPIO_Init+0x324>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d0:	4a11      	ldr	r2, [pc, #68]	@ (8001518 <HAL_GPIO_Init+0x324>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3301      	adds	r3, #1
 80014da:	61fb      	str	r3, [r7, #28]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	2b0f      	cmp	r3, #15
 80014e0:	f67f ae96 	bls.w	8001210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3724      	adds	r7, #36	@ 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40013800 	.word	0x40013800
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020400 	.word	0x40020400
 8001504:	40020800 	.word	0x40020800
 8001508:	40020c00 	.word	0x40020c00
 800150c:	40021000 	.word	0x40021000
 8001510:	40021400 	.word	0x40021400
 8001514:	40021800 	.word	0x40021800
 8001518:	40013c00 	.word	0x40013c00

0800151c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001526:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001532:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f806 	bl	800054c <HAL_GPIO_EXTI_Callback>
  }
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40013c00 	.word	0x40013c00

0800154c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0cc      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001560:	4b68      	ldr	r3, [pc, #416]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 030f 	and.w	r3, r3, #15
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d90c      	bls.n	8001588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b65      	ldr	r3, [pc, #404]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001576:	4b63      	ldr	r3, [pc, #396]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0b8      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d020      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a0:	4b59      	ldr	r3, [pc, #356]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4a58      	ldr	r2, [pc, #352]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b8:	4b53      	ldr	r3, [pc, #332]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	4a52      	ldr	r2, [pc, #328]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c4:	4b50      	ldr	r3, [pc, #320]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	494d      	ldr	r1, [pc, #308]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d044      	beq.n	800166c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4b47      	ldr	r3, [pc, #284]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d119      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e07f      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d003      	beq.n	800160a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001606:	2b03      	cmp	r3, #3
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160a:	4b3f      	ldr	r3, [pc, #252]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e06f      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161a:	4b3b      	ldr	r3, [pc, #236]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e067      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162a:	4b37      	ldr	r3, [pc, #220]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f023 0203 	bic.w	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4934      	ldr	r1, [pc, #208]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	4313      	orrs	r3, r2
 800163a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800163c:	f7ff fcec 	bl	8001018 <HAL_GetTick>
 8001640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	e00a      	b.n	800165a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001644:	f7ff fce8 	bl	8001018 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e04f      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	4b2b      	ldr	r3, [pc, #172]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 020c 	and.w	r2, r3, #12
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	429a      	cmp	r2, r3
 800166a:	d1eb      	bne.n	8001644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800166c:	4b25      	ldr	r3, [pc, #148]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d20c      	bcs.n	8001694 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b22      	ldr	r3, [pc, #136]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e032      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d008      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a0:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4916      	ldr	r1, [pc, #88]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d009      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016be:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	490e      	ldr	r1, [pc, #56]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016d2:	f000 f887 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 80016d6:	4602      	mov	r2, r0
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	490a      	ldr	r1, [pc, #40]	@ (800170c <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	5ccb      	ldrb	r3, [r1, r3]
 80016e6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ea:	4a09      	ldr	r2, [pc, #36]	@ (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016ee:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fb7e 	bl	8000df4 <HAL_InitTick>

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023c00 	.word	0x40023c00
 8001708:	40023800 	.word	0x40023800
 800170c:	08006a14 	.word	0x08006a14
 8001710:	20000000 	.word	0x20000000
 8001714:	20000004 	.word	0x20000004

08001718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800171c:	4b03      	ldr	r3, [pc, #12]	@ (800172c <HAL_RCC_GetHCLKFreq+0x14>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000000 	.word	0x20000000

08001730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001734:	f7ff fff0 	bl	8001718 <HAL_RCC_GetHCLKFreq>
 8001738:	4602      	mov	r2, r0
 800173a:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	0a9b      	lsrs	r3, r3, #10
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	4903      	ldr	r1, [pc, #12]	@ (8001754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001746:	5ccb      	ldrb	r3, [r1, r3]
 8001748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800174c:	4618      	mov	r0, r3
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40023800 	.word	0x40023800
 8001754:	08006a24 	.word	0x08006a24

08001758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800175c:	f7ff ffdc 	bl	8001718 <HAL_RCC_GetHCLKFreq>
 8001760:	4602      	mov	r2, r0
 8001762:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	0b5b      	lsrs	r3, r3, #13
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	4903      	ldr	r1, [pc, #12]	@ (800177c <HAL_RCC_GetPCLK2Freq+0x24>)
 800176e:	5ccb      	ldrb	r3, [r1, r3]
 8001770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001774:	4618      	mov	r0, r3
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800
 800177c:	08006a24 	.word	0x08006a24

08001780 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	220f      	movs	r2, #15
 800178e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <HAL_RCC_GetClockConfig+0x5c>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 0203 	and.w	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800179c:	4b0f      	ldr	r3, [pc, #60]	@ (80017dc <HAL_RCC_GetClockConfig+0x5c>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017a8:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <HAL_RCC_GetClockConfig+0x5c>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017b4:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <HAL_RCC_GetClockConfig+0x5c>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	08db      	lsrs	r3, r3, #3
 80017ba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <HAL_RCC_GetClockConfig+0x60>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 020f 	and.w	r2, r3, #15
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	601a      	str	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40023c00 	.word	0x40023c00

080017e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e8:	b0a6      	sub	sp, #152	@ 0x98
 80017ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800180a:	4bc8      	ldr	r3, [pc, #800]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b0c      	cmp	r3, #12
 8001814:	f200 817e 	bhi.w	8001b14 <HAL_RCC_GetSysClockFreq+0x330>
 8001818:	a201      	add	r2, pc, #4	@ (adr r2, 8001820 <HAL_RCC_GetSysClockFreq+0x3c>)
 800181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181e:	bf00      	nop
 8001820:	08001855 	.word	0x08001855
 8001824:	08001b15 	.word	0x08001b15
 8001828:	08001b15 	.word	0x08001b15
 800182c:	08001b15 	.word	0x08001b15
 8001830:	0800185d 	.word	0x0800185d
 8001834:	08001b15 	.word	0x08001b15
 8001838:	08001b15 	.word	0x08001b15
 800183c:	08001b15 	.word	0x08001b15
 8001840:	08001865 	.word	0x08001865
 8001844:	08001b15 	.word	0x08001b15
 8001848:	08001b15 	.word	0x08001b15
 800184c:	08001b15 	.word	0x08001b15
 8001850:	080019cf 	.word	0x080019cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001854:	4bb6      	ldr	r3, [pc, #728]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001856:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800185a:	e15f      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800185c:	4bb5      	ldr	r3, [pc, #724]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x350>)
 800185e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001862:	e15b      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001864:	4bb1      	ldr	r3, [pc, #708]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800186c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001870:	4bae      	ldr	r3, [pc, #696]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d031      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187c:	4bab      	ldr	r3, [pc, #684]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	099b      	lsrs	r3, r3, #6
 8001882:	2200      	movs	r2, #0
 8001884:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001886:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001888:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800188a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800188e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001890:	2300      	movs	r3, #0
 8001892:	667b      	str	r3, [r7, #100]	@ 0x64
 8001894:	4ba7      	ldr	r3, [pc, #668]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x350>)
 8001896:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800189a:	462a      	mov	r2, r5
 800189c:	fb03 f202 	mul.w	r2, r3, r2
 80018a0:	2300      	movs	r3, #0
 80018a2:	4621      	mov	r1, r4
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	4aa2      	ldr	r2, [pc, #648]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x350>)
 80018ac:	4621      	mov	r1, r4
 80018ae:	fba1 1202 	umull	r1, r2, r1, r2
 80018b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80018b4:	460a      	mov	r2, r1
 80018b6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80018b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80018ba:	4413      	add	r3, r2
 80018bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018c2:	2200      	movs	r2, #0
 80018c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80018c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80018cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80018d0:	f7fe fca6 	bl	8000220 <__aeabi_uldivmod>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4613      	mov	r3, r2
 80018da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80018de:	e064      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e0:	4b92      	ldr	r3, [pc, #584]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	099b      	lsrs	r3, r3, #6
 80018e6:	2200      	movs	r2, #0
 80018e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80018ea:	657a      	str	r2, [r7, #84]	@ 0x54
 80018ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018f4:	2300      	movs	r3, #0
 80018f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018f8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80018fc:	4622      	mov	r2, r4
 80018fe:	462b      	mov	r3, r5
 8001900:	f04f 0000 	mov.w	r0, #0
 8001904:	f04f 0100 	mov.w	r1, #0
 8001908:	0159      	lsls	r1, r3, #5
 800190a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800190e:	0150      	lsls	r0, r2, #5
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4621      	mov	r1, r4
 8001916:	1a51      	subs	r1, r2, r1
 8001918:	6139      	str	r1, [r7, #16]
 800191a:	4629      	mov	r1, r5
 800191c:	eb63 0301 	sbc.w	r3, r3, r1
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800192e:	4659      	mov	r1, fp
 8001930:	018b      	lsls	r3, r1, #6
 8001932:	4651      	mov	r1, sl
 8001934:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001938:	4651      	mov	r1, sl
 800193a:	018a      	lsls	r2, r1, #6
 800193c:	4651      	mov	r1, sl
 800193e:	ebb2 0801 	subs.w	r8, r2, r1
 8001942:	4659      	mov	r1, fp
 8001944:	eb63 0901 	sbc.w	r9, r3, r1
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001954:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001958:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800195c:	4690      	mov	r8, r2
 800195e:	4699      	mov	r9, r3
 8001960:	4623      	mov	r3, r4
 8001962:	eb18 0303 	adds.w	r3, r8, r3
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	462b      	mov	r3, r5
 800196a:	eb49 0303 	adc.w	r3, r9, r3
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800197c:	4629      	mov	r1, r5
 800197e:	028b      	lsls	r3, r1, #10
 8001980:	4621      	mov	r1, r4
 8001982:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001986:	4621      	mov	r1, r4
 8001988:	028a      	lsls	r2, r1, #10
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001992:	2200      	movs	r2, #0
 8001994:	643b      	str	r3, [r7, #64]	@ 0x40
 8001996:	647a      	str	r2, [r7, #68]	@ 0x44
 8001998:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800199c:	f7fe fc40 	bl	8000220 <__aeabi_uldivmod>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4613      	mov	r3, r2
 80019a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019aa:	4b60      	ldr	r3, [pc, #384]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	0c1b      	lsrs	r3, r3, #16
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	3301      	adds	r3, #1
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80019bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80019c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80019cc:	e0a6      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019ce:	4b57      	ldr	r3, [pc, #348]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019da:	4b54      	ldr	r3, [pc, #336]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d02a      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e6:	4b51      	ldr	r3, [pc, #324]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	099b      	lsrs	r3, r3, #6
 80019ec:	2200      	movs	r2, #0
 80019ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019f8:	2100      	movs	r1, #0
 80019fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x350>)
 80019fc:	fb03 f201 	mul.w	r2, r3, r1
 8001a00:	2300      	movs	r3, #0
 8001a02:	fb00 f303 	mul.w	r3, r0, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	4a4a      	ldr	r2, [pc, #296]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a0a:	fba0 1202 	umull	r1, r2, r0, r2
 8001a0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001a10:	460a      	mov	r2, r1
 8001a12:	673a      	str	r2, [r7, #112]	@ 0x70
 8001a14:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001a16:	4413      	add	r3, r2
 8001a18:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a1e:	2200      	movs	r2, #0
 8001a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a22:	637a      	str	r2, [r7, #52]	@ 0x34
 8001a24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a28:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001a2c:	f7fe fbf8 	bl	8000220 <__aeabi_uldivmod>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4613      	mov	r3, r2
 8001a36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a3a:	e05b      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	099b      	lsrs	r3, r3, #6
 8001a42:	2200      	movs	r2, #0
 8001a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a4e:	623b      	str	r3, [r7, #32]
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a58:	4642      	mov	r2, r8
 8001a5a:	464b      	mov	r3, r9
 8001a5c:	f04f 0000 	mov.w	r0, #0
 8001a60:	f04f 0100 	mov.w	r1, #0
 8001a64:	0159      	lsls	r1, r3, #5
 8001a66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a6a:	0150      	lsls	r0, r2, #5
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4641      	mov	r1, r8
 8001a72:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a76:	4649      	mov	r1, r9
 8001a78:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a90:	ebb2 040a 	subs.w	r4, r2, sl
 8001a94:	eb63 050b 	sbc.w	r5, r3, fp
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	00eb      	lsls	r3, r5, #3
 8001aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aa6:	00e2      	lsls	r2, r4, #3
 8001aa8:	4614      	mov	r4, r2
 8001aaa:	461d      	mov	r5, r3
 8001aac:	4643      	mov	r3, r8
 8001aae:	18e3      	adds	r3, r4, r3
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	464b      	mov	r3, r9
 8001ab4:	eb45 0303 	adc.w	r3, r5, r3
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	028b      	lsls	r3, r1, #10
 8001aca:	4621      	mov	r1, r4
 8001acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	028a      	lsls	r2, r1, #10
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001adc:	2200      	movs	r2, #0
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	61fa      	str	r2, [r7, #28]
 8001ae2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae6:	f7fe fb9b 	bl	8000220 <__aeabi_uldivmod>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4613      	mov	r3, r2
 8001af0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001af4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	0f1b      	lsrs	r3, r3, #28
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001b02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b12:	e003      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001b16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3798      	adds	r7, #152	@ 0x98
 8001b24:	46bd      	mov	sp, r7
 8001b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	017d7840 	.word	0x017d7840

08001b38 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e28d      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8083 	beq.w	8001c5e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b58:	4b94      	ldr	r3, [pc, #592]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d019      	beq.n	8001b98 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b64:	4b91      	ldr	r3, [pc, #580]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b70:	4b8e      	ldr	r3, [pc, #568]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b7c:	d00c      	beq.n	8001b98 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7e:	4b8b      	ldr	r3, [pc, #556]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b86:	2b0c      	cmp	r3, #12
 8001b88:	d112      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b8a:	4b88      	ldr	r3, [pc, #544]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b96:	d10b      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b98:	4b84      	ldr	r3, [pc, #528]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d05b      	beq.n	8001c5c <HAL_RCC_OscConfig+0x124>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d157      	bne.n	8001c5c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e25a      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bb8:	d106      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x90>
 8001bba:	4b7c      	ldr	r3, [pc, #496]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a7b      	ldr	r2, [pc, #492]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e01d      	b.n	8001c04 <HAL_RCC_OscConfig+0xcc>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0xb4>
 8001bd2:	4b76      	ldr	r3, [pc, #472]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a75      	ldr	r2, [pc, #468]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	4b73      	ldr	r3, [pc, #460]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a72      	ldr	r2, [pc, #456]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0xcc>
 8001bec:	4b6f      	ldr	r3, [pc, #444]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a6e      	ldr	r2, [pc, #440]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b6c      	ldr	r3, [pc, #432]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a6b      	ldr	r2, [pc, #428]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d013      	beq.n	8001c34 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fa04 	bl	8001018 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff fa00 	bl	8001018 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	@ 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e21f      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	4b61      	ldr	r3, [pc, #388]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0xdc>
 8001c32:	e014      	b.n	8001c5e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7ff f9f0 	bl	8001018 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff f9ec 	bl	8001018 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	@ 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e20b      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	4b57      	ldr	r3, [pc, #348]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x104>
 8001c5a:	e000      	b.n	8001c5e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d06f      	beq.n	8001d4a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c6a:	4b50      	ldr	r3, [pc, #320]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d017      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c76:	4b4d      	ldr	r3, [pc, #308]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d105      	bne.n	8001c8e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c82:	4b4a      	ldr	r3, [pc, #296]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00b      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8e:	4b47      	ldr	r3, [pc, #284]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c96:	2b0c      	cmp	r3, #12
 8001c98:	d11c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9a:	4b44      	ldr	r3, [pc, #272]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d116      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca6:	4b41      	ldr	r3, [pc, #260]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_RCC_OscConfig+0x186>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d001      	beq.n	8001cbe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e1d3      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4937      	ldr	r1, [pc, #220]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd2:	e03a      	b.n	8001d4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d020      	beq.n	8001d1e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cdc:	4b34      	ldr	r3, [pc, #208]	@ (8001db0 <HAL_RCC_OscConfig+0x278>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce2:	f7ff f999 	bl	8001018 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cea:	f7ff f995 	bl	8001018 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e1b4      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d08:	4b28      	ldr	r3, [pc, #160]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4925      	ldr	r1, [pc, #148]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]
 8001d1c:	e015      	b.n	8001d4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1e:	4b24      	ldr	r3, [pc, #144]	@ (8001db0 <HAL_RCC_OscConfig+0x278>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7ff f978 	bl	8001018 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2c:	f7ff f974 	bl	8001018 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e193      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d036      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d016      	beq.n	8001d8c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5e:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <HAL_RCC_OscConfig+0x27c>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7ff f958 	bl	8001018 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6c:	f7ff f954 	bl	8001018 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e173      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x234>
 8001d8a:	e01b      	b.n	8001dc4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8c:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <HAL_RCC_OscConfig+0x27c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d92:	f7ff f941 	bl	8001018 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d98:	e00e      	b.n	8001db8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9a:	f7ff f93d 	bl	8001018 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d907      	bls.n	8001db8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e15c      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
 8001dac:	40023800 	.word	0x40023800
 8001db0:	42470000 	.word	0x42470000
 8001db4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db8:	4b8a      	ldr	r3, [pc, #552]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1ea      	bne.n	8001d9a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 8097 	beq.w	8001f00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd6:	4b83      	ldr	r3, [pc, #524]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10f      	bne.n	8001e02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	4b7f      	ldr	r3, [pc, #508]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	4a7e      	ldr	r2, [pc, #504]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df2:	4b7c      	ldr	r3, [pc, #496]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e02:	4b79      	ldr	r3, [pc, #484]	@ (8001fe8 <HAL_RCC_OscConfig+0x4b0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d118      	bne.n	8001e40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0e:	4b76      	ldr	r3, [pc, #472]	@ (8001fe8 <HAL_RCC_OscConfig+0x4b0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a75      	ldr	r2, [pc, #468]	@ (8001fe8 <HAL_RCC_OscConfig+0x4b0>)
 8001e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff f8fd 	bl	8001018 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e22:	f7ff f8f9 	bl	8001018 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e118      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e34:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe8 <HAL_RCC_OscConfig+0x4b0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x31e>
 8001e48:	4b66      	ldr	r3, [pc, #408]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4c:	4a65      	ldr	r2, [pc, #404]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e54:	e01c      	b.n	8001e90 <HAL_RCC_OscConfig+0x358>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b05      	cmp	r3, #5
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x340>
 8001e5e:	4b61      	ldr	r3, [pc, #388]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e62:	4a60      	ldr	r2, [pc, #384]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e6a:	4b5e      	ldr	r3, [pc, #376]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6e:	4a5d      	ldr	r2, [pc, #372]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0x358>
 8001e78:	4b5a      	ldr	r3, [pc, #360]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7c:	4a59      	ldr	r2, [pc, #356]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e84:	4b57      	ldr	r3, [pc, #348]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e88:	4a56      	ldr	r2, [pc, #344]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e8a:	f023 0304 	bic.w	r3, r3, #4
 8001e8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d015      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7ff f8be 	bl	8001018 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea0:	f7ff f8ba 	bl	8001018 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e0d7      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0ee      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x368>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec4:	f7ff f8a8 	bl	8001018 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f8a4 	bl	8001018 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e0c1      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee2:	4b40      	ldr	r3, [pc, #256]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1ee      	bne.n	8001ecc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eee:	7dfb      	ldrb	r3, [r7, #23]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d105      	bne.n	8001f00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	4a3a      	ldr	r2, [pc, #232]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001efe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 80ad 	beq.w	8002064 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f0a:	4b36      	ldr	r3, [pc, #216]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d060      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d145      	bne.n	8001faa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1e:	4b33      	ldr	r3, [pc, #204]	@ (8001fec <HAL_RCC_OscConfig+0x4b4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7ff f878 	bl	8001018 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7ff f874 	bl	8001018 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e093      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3e:	4b29      	ldr	r3, [pc, #164]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69da      	ldr	r2, [r3, #28]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f58:	019b      	lsls	r3, r3, #6
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	041b      	lsls	r3, r3, #16
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6c:	061b      	lsls	r3, r3, #24
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f74:	071b      	lsls	r3, r3, #28
 8001f76:	491b      	ldr	r1, [pc, #108]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fec <HAL_RCC_OscConfig+0x4b4>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7ff f849 	bl	8001018 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7ff f845 	bl	8001018 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e064      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9c:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x452>
 8001fa8:	e05c      	b.n	8002064 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <HAL_RCC_OscConfig+0x4b4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f832 	bl	8001018 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff f82e 	bl	8001018 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e04d      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x480>
 8001fd6:	e045      	b.n	8002064 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d107      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e040      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8002070 <HAL_RCC_OscConfig+0x538>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d030      	beq.n	8002060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d129      	bne.n	8002060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d122      	bne.n	8002060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002020:	4013      	ands	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002028:	4293      	cmp	r3, r2
 800202a:	d119      	bne.n	8002060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	3b01      	subs	r3, #1
 800203a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800203c:	429a      	cmp	r2, r3
 800203e:	d10f      	bne.n	8002060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d107      	bne.n	8002060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800

08002074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e041      	b.n	800210a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f839 	bl	8002112 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3304      	adds	r3, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	4610      	mov	r0, r2
 80020b4:	f000 f9c0 	bl	8002438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b01      	cmp	r3, #1
 800213a:	d001      	beq.n	8002140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e04e      	b.n	80021de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a23      	ldr	r2, [pc, #140]	@ (80021ec <HAL_TIM_Base_Start_IT+0xc4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d022      	beq.n	80021a8 <HAL_TIM_Base_Start_IT+0x80>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800216a:	d01d      	beq.n	80021a8 <HAL_TIM_Base_Start_IT+0x80>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1f      	ldr	r2, [pc, #124]	@ (80021f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d018      	beq.n	80021a8 <HAL_TIM_Base_Start_IT+0x80>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1e      	ldr	r2, [pc, #120]	@ (80021f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d013      	beq.n	80021a8 <HAL_TIM_Base_Start_IT+0x80>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1c      	ldr	r2, [pc, #112]	@ (80021f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00e      	beq.n	80021a8 <HAL_TIM_Base_Start_IT+0x80>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1b      	ldr	r2, [pc, #108]	@ (80021fc <HAL_TIM_Base_Start_IT+0xd4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d009      	beq.n	80021a8 <HAL_TIM_Base_Start_IT+0x80>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a19      	ldr	r2, [pc, #100]	@ (8002200 <HAL_TIM_Base_Start_IT+0xd8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d004      	beq.n	80021a8 <HAL_TIM_Base_Start_IT+0x80>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a18      	ldr	r2, [pc, #96]	@ (8002204 <HAL_TIM_Base_Start_IT+0xdc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d111      	bne.n	80021cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d010      	beq.n	80021dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 0201 	orr.w	r2, r2, #1
 80021c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ca:	e007      	b.n	80021dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40010000 	.word	0x40010000
 80021f0:	40000400 	.word	0x40000400
 80021f4:	40000800 	.word	0x40000800
 80021f8:	40000c00 	.word	0x40000c00
 80021fc:	40010400 	.word	0x40010400
 8002200:	40014000 	.word	0x40014000
 8002204:	40001800 	.word	0x40001800

08002208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d020      	beq.n	800226c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01b      	beq.n	800226c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0202 	mvn.w	r2, #2
 800223c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f8d2 	bl	80023fc <HAL_TIM_IC_CaptureCallback>
 8002258:	e005      	b.n	8002266 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f8c4 	bl	80023e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f8d5 	bl	8002410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d020      	beq.n	80022b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01b      	beq.n	80022b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0204 	mvn.w	r2, #4
 8002288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2202      	movs	r2, #2
 800228e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f8ac 	bl	80023fc <HAL_TIM_IC_CaptureCallback>
 80022a4:	e005      	b.n	80022b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f89e 	bl	80023e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f8af 	bl	8002410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d020      	beq.n	8002304 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01b      	beq.n	8002304 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0208 	mvn.w	r2, #8
 80022d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2204      	movs	r2, #4
 80022da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f886 	bl	80023fc <HAL_TIM_IC_CaptureCallback>
 80022f0:	e005      	b.n	80022fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f878 	bl	80023e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f889 	bl	8002410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	d020      	beq.n	8002350 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01b      	beq.n	8002350 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0210 	mvn.w	r2, #16
 8002320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2208      	movs	r2, #8
 8002326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f860 	bl	80023fc <HAL_TIM_IC_CaptureCallback>
 800233c:	e005      	b.n	800234a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f852 	bl	80023e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f863 	bl	8002410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00c      	beq.n	8002374 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0201 	mvn.w	r2, #1
 800236c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fcb4 	bl	8000cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00c      	beq.n	8002398 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f900 	bl	8002598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00c      	beq.n	80023bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f834 	bl	8002424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00c      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0220 	mvn.w	r2, #32
 80023d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f8d2 	bl	8002584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a43      	ldr	r2, [pc, #268]	@ (8002558 <TIM_Base_SetConfig+0x120>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d013      	beq.n	8002478 <TIM_Base_SetConfig+0x40>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002456:	d00f      	beq.n	8002478 <TIM_Base_SetConfig+0x40>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a40      	ldr	r2, [pc, #256]	@ (800255c <TIM_Base_SetConfig+0x124>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00b      	beq.n	8002478 <TIM_Base_SetConfig+0x40>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a3f      	ldr	r2, [pc, #252]	@ (8002560 <TIM_Base_SetConfig+0x128>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d007      	beq.n	8002478 <TIM_Base_SetConfig+0x40>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a3e      	ldr	r2, [pc, #248]	@ (8002564 <TIM_Base_SetConfig+0x12c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d003      	beq.n	8002478 <TIM_Base_SetConfig+0x40>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a3d      	ldr	r2, [pc, #244]	@ (8002568 <TIM_Base_SetConfig+0x130>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d108      	bne.n	800248a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800247e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a32      	ldr	r2, [pc, #200]	@ (8002558 <TIM_Base_SetConfig+0x120>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d02b      	beq.n	80024ea <TIM_Base_SetConfig+0xb2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002498:	d027      	beq.n	80024ea <TIM_Base_SetConfig+0xb2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a2f      	ldr	r2, [pc, #188]	@ (800255c <TIM_Base_SetConfig+0x124>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d023      	beq.n	80024ea <TIM_Base_SetConfig+0xb2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002560 <TIM_Base_SetConfig+0x128>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d01f      	beq.n	80024ea <TIM_Base_SetConfig+0xb2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002564 <TIM_Base_SetConfig+0x12c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d01b      	beq.n	80024ea <TIM_Base_SetConfig+0xb2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002568 <TIM_Base_SetConfig+0x130>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d017      	beq.n	80024ea <TIM_Base_SetConfig+0xb2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a2b      	ldr	r2, [pc, #172]	@ (800256c <TIM_Base_SetConfig+0x134>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d013      	beq.n	80024ea <TIM_Base_SetConfig+0xb2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002570 <TIM_Base_SetConfig+0x138>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00f      	beq.n	80024ea <TIM_Base_SetConfig+0xb2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a29      	ldr	r2, [pc, #164]	@ (8002574 <TIM_Base_SetConfig+0x13c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d00b      	beq.n	80024ea <TIM_Base_SetConfig+0xb2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a28      	ldr	r2, [pc, #160]	@ (8002578 <TIM_Base_SetConfig+0x140>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d007      	beq.n	80024ea <TIM_Base_SetConfig+0xb2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a27      	ldr	r2, [pc, #156]	@ (800257c <TIM_Base_SetConfig+0x144>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d003      	beq.n	80024ea <TIM_Base_SetConfig+0xb2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a26      	ldr	r2, [pc, #152]	@ (8002580 <TIM_Base_SetConfig+0x148>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d108      	bne.n	80024fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	4313      	orrs	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a0e      	ldr	r2, [pc, #56]	@ (8002558 <TIM_Base_SetConfig+0x120>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d003      	beq.n	800252a <TIM_Base_SetConfig+0xf2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a10      	ldr	r2, [pc, #64]	@ (8002568 <TIM_Base_SetConfig+0x130>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d103      	bne.n	8002532 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f043 0204 	orr.w	r2, r3, #4
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	601a      	str	r2, [r3, #0]
}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40010000 	.word	0x40010000
 800255c:	40000400 	.word	0x40000400
 8002560:	40000800 	.word	0x40000800
 8002564:	40000c00 	.word	0x40000c00
 8002568:	40010400 	.word	0x40010400
 800256c:	40014000 	.word	0x40014000
 8002570:	40014400 	.word	0x40014400
 8002574:	40014800 	.word	0x40014800
 8002578:	40001800 	.word	0x40001800
 800257c:	40001c00 	.word	0x40001c00
 8002580:	40002000 	.word	0x40002000

08002584 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e042      	b.n	8002644 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe fbc6 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2224      	movs	r2, #36	@ 0x24
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f973 	bl	80028dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002604:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002614:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002624:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	@ 0x28
 8002650:	af02      	add	r7, sp, #8
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	4613      	mov	r3, r2
 800265a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b20      	cmp	r3, #32
 800266a:	d175      	bne.n	8002758 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_UART_Transmit+0x2c>
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e06e      	b.n	800275a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2221      	movs	r2, #33	@ 0x21
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800268a:	f7fe fcc5 	bl	8001018 <HAL_GetTick>
 800268e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	88fa      	ldrh	r2, [r7, #6]
 8002694:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	88fa      	ldrh	r2, [r7, #6]
 800269a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026a4:	d108      	bne.n	80026b8 <HAL_UART_Transmit+0x6c>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d104      	bne.n	80026b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	61bb      	str	r3, [r7, #24]
 80026b6:	e003      	b.n	80026c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026c0:	e02e      	b.n	8002720 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2200      	movs	r2, #0
 80026ca:	2180      	movs	r1, #128	@ 0x80
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f848 	bl	8002762 <UART_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e03a      	b.n	800275a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10b      	bne.n	8002702 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	3302      	adds	r3, #2
 80026fe:	61bb      	str	r3, [r7, #24]
 8002700:	e007      	b.n	8002712 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	781a      	ldrb	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	3301      	adds	r3, #1
 8002710:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1cb      	bne.n	80026c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2200      	movs	r2, #0
 8002732:	2140      	movs	r1, #64	@ 0x40
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f814 	bl	8002762 <UART_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e006      	b.n	800275a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	e000      	b.n	800275a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002758:	2302      	movs	r3, #2
  }
}
 800275a:	4618      	mov	r0, r3
 800275c:	3720      	adds	r7, #32
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	4613      	mov	r3, r2
 8002770:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002772:	e03b      	b.n	80027ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	d037      	beq.n	80027ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277c:	f7fe fc4c 	bl	8001018 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	6a3a      	ldr	r2, [r7, #32]
 8002788:	429a      	cmp	r2, r3
 800278a:	d302      	bcc.n	8002792 <UART_WaitOnFlagUntilTimeout+0x30>
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e03a      	b.n	800280c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d023      	beq.n	80027ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b80      	cmp	r3, #128	@ 0x80
 80027a8:	d020      	beq.n	80027ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b40      	cmp	r3, #64	@ 0x40
 80027ae:	d01d      	beq.n	80027ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d116      	bne.n	80027ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f81d 	bl	8002814 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2208      	movs	r2, #8
 80027de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e00f      	b.n	800280c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	4013      	ands	r3, r2
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	bf0c      	ite	eq
 80027fc:	2301      	moveq	r3, #1
 80027fe:	2300      	movne	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	429a      	cmp	r2, r3
 8002808:	d0b4      	beq.n	8002774 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002814:	b480      	push	{r7}
 8002816:	b095      	sub	sp, #84	@ 0x54
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	330c      	adds	r3, #12
 8002822:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002826:	e853 3f00 	ldrex	r3, [r3]
 800282a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800282c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	330c      	adds	r3, #12
 800283a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800283c:	643a      	str	r2, [r7, #64]	@ 0x40
 800283e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002840:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002842:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002844:	e841 2300 	strex	r3, r2, [r1]
 8002848:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800284a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1e5      	bne.n	800281c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3314      	adds	r3, #20
 8002856:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	e853 3f00 	ldrex	r3, [r3]
 800285e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f023 0301 	bic.w	r3, r3, #1
 8002866:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	3314      	adds	r3, #20
 800286e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002870:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002872:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002874:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002878:	e841 2300 	strex	r3, r2, [r1]
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e5      	bne.n	8002850 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002888:	2b01      	cmp	r3, #1
 800288a:	d119      	bne.n	80028c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	330c      	adds	r3, #12
 8002892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	e853 3f00 	ldrex	r3, [r3]
 800289a:	60bb      	str	r3, [r7, #8]
   return(result);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f023 0310 	bic.w	r3, r3, #16
 80028a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	330c      	adds	r3, #12
 80028aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028ac:	61ba      	str	r2, [r7, #24]
 80028ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b0:	6979      	ldr	r1, [r7, #20]
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	e841 2300 	strex	r3, r2, [r1]
 80028b8:	613b      	str	r3, [r7, #16]
   return(result);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1e5      	bne.n	800288c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80028ce:	bf00      	nop
 80028d0:	3754      	adds	r7, #84	@ 0x54
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e0:	b0c0      	sub	sp, #256	@ 0x100
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f8:	68d9      	ldr	r1, [r3, #12]
 80028fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	ea40 0301 	orr.w	r3, r0, r1
 8002904:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	431a      	orrs	r2, r3
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	431a      	orrs	r2, r3
 800291c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002934:	f021 010c 	bic.w	r1, r1, #12
 8002938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002942:	430b      	orrs	r3, r1
 8002944:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002956:	6999      	ldr	r1, [r3, #24]
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	ea40 0301 	orr.w	r3, r0, r1
 8002962:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4b8f      	ldr	r3, [pc, #572]	@ (8002ba8 <UART_SetConfig+0x2cc>)
 800296c:	429a      	cmp	r2, r3
 800296e:	d005      	beq.n	800297c <UART_SetConfig+0xa0>
 8002970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4b8d      	ldr	r3, [pc, #564]	@ (8002bac <UART_SetConfig+0x2d0>)
 8002978:	429a      	cmp	r2, r3
 800297a:	d104      	bne.n	8002986 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800297c:	f7fe feec 	bl	8001758 <HAL_RCC_GetPCLK2Freq>
 8002980:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002984:	e003      	b.n	800298e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002986:	f7fe fed3 	bl	8001730 <HAL_RCC_GetPCLK1Freq>
 800298a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800298e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002998:	f040 810c 	bne.w	8002bb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800299c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029a0:	2200      	movs	r2, #0
 80029a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80029aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80029ae:	4622      	mov	r2, r4
 80029b0:	462b      	mov	r3, r5
 80029b2:	1891      	adds	r1, r2, r2
 80029b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029b6:	415b      	adcs	r3, r3
 80029b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029be:	4621      	mov	r1, r4
 80029c0:	eb12 0801 	adds.w	r8, r2, r1
 80029c4:	4629      	mov	r1, r5
 80029c6:	eb43 0901 	adc.w	r9, r3, r1
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029de:	4690      	mov	r8, r2
 80029e0:	4699      	mov	r9, r3
 80029e2:	4623      	mov	r3, r4
 80029e4:	eb18 0303 	adds.w	r3, r8, r3
 80029e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029ec:	462b      	mov	r3, r5
 80029ee:	eb49 0303 	adc.w	r3, r9, r3
 80029f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	18db      	adds	r3, r3, r3
 8002a0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a10:	4613      	mov	r3, r2
 8002a12:	eb42 0303 	adc.w	r3, r2, r3
 8002a16:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a20:	f7fd fbfe 	bl	8000220 <__aeabi_uldivmod>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4b61      	ldr	r3, [pc, #388]	@ (8002bb0 <UART_SetConfig+0x2d4>)
 8002a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	011c      	lsls	r4, r3, #4
 8002a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a36:	2200      	movs	r2, #0
 8002a38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a44:	4642      	mov	r2, r8
 8002a46:	464b      	mov	r3, r9
 8002a48:	1891      	adds	r1, r2, r2
 8002a4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a4c:	415b      	adcs	r3, r3
 8002a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a54:	4641      	mov	r1, r8
 8002a56:	eb12 0a01 	adds.w	sl, r2, r1
 8002a5a:	4649      	mov	r1, r9
 8002a5c:	eb43 0b01 	adc.w	fp, r3, r1
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a74:	4692      	mov	sl, r2
 8002a76:	469b      	mov	fp, r3
 8002a78:	4643      	mov	r3, r8
 8002a7a:	eb1a 0303 	adds.w	r3, sl, r3
 8002a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a82:	464b      	mov	r3, r9
 8002a84:	eb4b 0303 	adc.w	r3, fp, r3
 8002a88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	18db      	adds	r3, r3, r3
 8002aa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	eb42 0303 	adc.w	r3, r2, r3
 8002aac:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ab2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002ab6:	f7fd fbb3 	bl	8000220 <__aeabi_uldivmod>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb0 <UART_SetConfig+0x2d4>)
 8002ac2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	2264      	movs	r2, #100	@ 0x64
 8002aca:	fb02 f303 	mul.w	r3, r2, r3
 8002ace:	1acb      	subs	r3, r1, r3
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ad6:	4b36      	ldr	r3, [pc, #216]	@ (8002bb0 <UART_SetConfig+0x2d4>)
 8002ad8:	fba3 2302 	umull	r2, r3, r3, r2
 8002adc:	095b      	lsrs	r3, r3, #5
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ae4:	441c      	add	r4, r3
 8002ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aea:	2200      	movs	r2, #0
 8002aec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002af0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002af4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002af8:	4642      	mov	r2, r8
 8002afa:	464b      	mov	r3, r9
 8002afc:	1891      	adds	r1, r2, r2
 8002afe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b00:	415b      	adcs	r3, r3
 8002b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b08:	4641      	mov	r1, r8
 8002b0a:	1851      	adds	r1, r2, r1
 8002b0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b0e:	4649      	mov	r1, r9
 8002b10:	414b      	adcs	r3, r1
 8002b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b20:	4659      	mov	r1, fp
 8002b22:	00cb      	lsls	r3, r1, #3
 8002b24:	4651      	mov	r1, sl
 8002b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b2a:	4651      	mov	r1, sl
 8002b2c:	00ca      	lsls	r2, r1, #3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	4642      	mov	r2, r8
 8002b36:	189b      	adds	r3, r3, r2
 8002b38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b3c:	464b      	mov	r3, r9
 8002b3e:	460a      	mov	r2, r1
 8002b40:	eb42 0303 	adc.w	r3, r2, r3
 8002b44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	18db      	adds	r3, r3, r3
 8002b60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b62:	4613      	mov	r3, r2
 8002b64:	eb42 0303 	adc.w	r3, r2, r3
 8002b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b72:	f7fd fb55 	bl	8000220 <__aeabi_uldivmod>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <UART_SetConfig+0x2d4>)
 8002b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	2164      	movs	r1, #100	@ 0x64
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	3332      	adds	r3, #50	@ 0x32
 8002b8e:	4a08      	ldr	r2, [pc, #32]	@ (8002bb0 <UART_SetConfig+0x2d4>)
 8002b90:	fba2 2303 	umull	r2, r3, r2, r3
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	f003 0207 	and.w	r2, r3, #7
 8002b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4422      	add	r2, r4
 8002ba2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ba4:	e106      	b.n	8002db4 <UART_SetConfig+0x4d8>
 8002ba6:	bf00      	nop
 8002ba8:	40011000 	.word	0x40011000
 8002bac:	40011400 	.word	0x40011400
 8002bb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bbe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002bc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002bc6:	4642      	mov	r2, r8
 8002bc8:	464b      	mov	r3, r9
 8002bca:	1891      	adds	r1, r2, r2
 8002bcc:	6239      	str	r1, [r7, #32]
 8002bce:	415b      	adcs	r3, r3
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bd6:	4641      	mov	r1, r8
 8002bd8:	1854      	adds	r4, r2, r1
 8002bda:	4649      	mov	r1, r9
 8002bdc:	eb43 0501 	adc.w	r5, r3, r1
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	00eb      	lsls	r3, r5, #3
 8002bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bee:	00e2      	lsls	r2, r4, #3
 8002bf0:	4614      	mov	r4, r2
 8002bf2:	461d      	mov	r5, r3
 8002bf4:	4643      	mov	r3, r8
 8002bf6:	18e3      	adds	r3, r4, r3
 8002bf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bfc:	464b      	mov	r3, r9
 8002bfe:	eb45 0303 	adc.w	r3, r5, r3
 8002c02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c22:	4629      	mov	r1, r5
 8002c24:	008b      	lsls	r3, r1, #2
 8002c26:	4621      	mov	r1, r4
 8002c28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	008a      	lsls	r2, r1, #2
 8002c30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c34:	f7fd faf4 	bl	8000220 <__aeabi_uldivmod>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4b60      	ldr	r3, [pc, #384]	@ (8002dc0 <UART_SetConfig+0x4e4>)
 8002c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	011c      	lsls	r4, r3, #4
 8002c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c58:	4642      	mov	r2, r8
 8002c5a:	464b      	mov	r3, r9
 8002c5c:	1891      	adds	r1, r2, r2
 8002c5e:	61b9      	str	r1, [r7, #24]
 8002c60:	415b      	adcs	r3, r3
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c68:	4641      	mov	r1, r8
 8002c6a:	1851      	adds	r1, r2, r1
 8002c6c:	6139      	str	r1, [r7, #16]
 8002c6e:	4649      	mov	r1, r9
 8002c70:	414b      	adcs	r3, r1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c80:	4659      	mov	r1, fp
 8002c82:	00cb      	lsls	r3, r1, #3
 8002c84:	4651      	mov	r1, sl
 8002c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c8a:	4651      	mov	r1, sl
 8002c8c:	00ca      	lsls	r2, r1, #3
 8002c8e:	4610      	mov	r0, r2
 8002c90:	4619      	mov	r1, r3
 8002c92:	4603      	mov	r3, r0
 8002c94:	4642      	mov	r2, r8
 8002c96:	189b      	adds	r3, r3, r2
 8002c98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c9c:	464b      	mov	r3, r9
 8002c9e:	460a      	mov	r2, r1
 8002ca0:	eb42 0303 	adc.w	r3, r2, r3
 8002ca4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cb2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002cc0:	4649      	mov	r1, r9
 8002cc2:	008b      	lsls	r3, r1, #2
 8002cc4:	4641      	mov	r1, r8
 8002cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cca:	4641      	mov	r1, r8
 8002ccc:	008a      	lsls	r2, r1, #2
 8002cce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002cd2:	f7fd faa5 	bl	8000220 <__aeabi_uldivmod>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4b38      	ldr	r3, [pc, #224]	@ (8002dc0 <UART_SetConfig+0x4e4>)
 8002cde:	fba3 2301 	umull	r2, r3, r3, r1
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2264      	movs	r2, #100	@ 0x64
 8002ce6:	fb02 f303 	mul.w	r3, r2, r3
 8002cea:	1acb      	subs	r3, r1, r3
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	3332      	adds	r3, #50	@ 0x32
 8002cf0:	4a33      	ldr	r2, [pc, #204]	@ (8002dc0 <UART_SetConfig+0x4e4>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cfc:	441c      	add	r4, r3
 8002cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d02:	2200      	movs	r2, #0
 8002d04:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d06:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d0c:	4642      	mov	r2, r8
 8002d0e:	464b      	mov	r3, r9
 8002d10:	1891      	adds	r1, r2, r2
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	415b      	adcs	r3, r3
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d1c:	4641      	mov	r1, r8
 8002d1e:	1851      	adds	r1, r2, r1
 8002d20:	6039      	str	r1, [r7, #0]
 8002d22:	4649      	mov	r1, r9
 8002d24:	414b      	adcs	r3, r1
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d34:	4659      	mov	r1, fp
 8002d36:	00cb      	lsls	r3, r1, #3
 8002d38:	4651      	mov	r1, sl
 8002d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d3e:	4651      	mov	r1, sl
 8002d40:	00ca      	lsls	r2, r1, #3
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	4603      	mov	r3, r0
 8002d48:	4642      	mov	r2, r8
 8002d4a:	189b      	adds	r3, r3, r2
 8002d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d4e:	464b      	mov	r3, r9
 8002d50:	460a      	mov	r2, r1
 8002d52:	eb42 0303 	adc.w	r3, r2, r3
 8002d56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d62:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d70:	4649      	mov	r1, r9
 8002d72:	008b      	lsls	r3, r1, #2
 8002d74:	4641      	mov	r1, r8
 8002d76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d7a:	4641      	mov	r1, r8
 8002d7c:	008a      	lsls	r2, r1, #2
 8002d7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d82:	f7fd fa4d 	bl	8000220 <__aeabi_uldivmod>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc0 <UART_SetConfig+0x4e4>)
 8002d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	2164      	movs	r1, #100	@ 0x64
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	3332      	adds	r3, #50	@ 0x32
 8002d9e:	4a08      	ldr	r2, [pc, #32]	@ (8002dc0 <UART_SetConfig+0x4e4>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	f003 020f 	and.w	r2, r3, #15
 8002daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4422      	add	r2, r4
 8002db2:	609a      	str	r2, [r3, #8]
}
 8002db4:	bf00      	nop
 8002db6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dc0:	51eb851f 	.word	0x51eb851f

08002dc4 <__NVIC_SetPriority>:
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	6039      	str	r1, [r7, #0]
 8002dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	db0a      	blt.n	8002dee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	490c      	ldr	r1, [pc, #48]	@ (8002e10 <__NVIC_SetPriority+0x4c>)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	0112      	lsls	r2, r2, #4
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	440b      	add	r3, r1
 8002de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002dec:	e00a      	b.n	8002e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	4908      	ldr	r1, [pc, #32]	@ (8002e14 <__NVIC_SetPriority+0x50>)
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	3b04      	subs	r3, #4
 8002dfc:	0112      	lsls	r2, r2, #4
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	440b      	add	r3, r1
 8002e02:	761a      	strb	r2, [r3, #24]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000e100 	.word	0xe000e100
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002e1c:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <SysTick_Handler+0x1c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002e20:	f002 f9f4 	bl	800520c <xTaskGetSchedulerState>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d001      	beq.n	8002e2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002e2a:	f003 f8ed 	bl	8006008 <xPortSysTickHandler>
  }
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	e000e010 	.word	0xe000e010

08002e38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	f06f 0004 	mvn.w	r0, #4
 8002e42:	f7ff ffbf 	bl	8002dc4 <__NVIC_SetPriority>
#endif
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e52:	f3ef 8305 	mrs	r3, IPSR
 8002e56:	603b      	str	r3, [r7, #0]
  return(result);
 8002e58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002e5e:	f06f 0305 	mvn.w	r3, #5
 8002e62:	607b      	str	r3, [r7, #4]
 8002e64:	e00c      	b.n	8002e80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002e66:	4b0a      	ldr	r3, [pc, #40]	@ (8002e90 <osKernelInitialize+0x44>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d105      	bne.n	8002e7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002e6e:	4b08      	ldr	r3, [pc, #32]	@ (8002e90 <osKernelInitialize+0x44>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	607b      	str	r3, [r7, #4]
 8002e78:	e002      	b.n	8002e80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e80:	687b      	ldr	r3, [r7, #4]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000124 	.word	0x20000124

08002e94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e9a:	f3ef 8305 	mrs	r3, IPSR
 8002e9e:	603b      	str	r3, [r7, #0]
  return(result);
 8002ea0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <osKernelStart+0x1a>
    stat = osErrorISR;
 8002ea6:	f06f 0305 	mvn.w	r3, #5
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	e010      	b.n	8002ed0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002eae:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <osKernelStart+0x48>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d109      	bne.n	8002eca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002eb6:	f7ff ffbf 	bl	8002e38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002eba:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <osKernelStart+0x48>)
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002ec0:	f001 fd40 	bl	8004944 <vTaskStartScheduler>
      stat = osOK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	e002      	b.n	8002ed0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ece:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ed0:	687b      	ldr	r3, [r7, #4]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000124 	.word	0x20000124

08002ee0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08e      	sub	sp, #56	@ 0x38
 8002ee4:	af04      	add	r7, sp, #16
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ef0:	f3ef 8305 	mrs	r3, IPSR
 8002ef4:	617b      	str	r3, [r7, #20]
  return(result);
 8002ef6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d17e      	bne.n	8002ffa <osThreadNew+0x11a>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d07b      	beq.n	8002ffa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002f02:	2380      	movs	r3, #128	@ 0x80
 8002f04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002f06:	2318      	movs	r3, #24
 8002f08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d045      	beq.n	8002fa6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <osThreadNew+0x48>
        name = attr->name;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <osThreadNew+0x6e>
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	2b38      	cmp	r3, #56	@ 0x38
 8002f40:	d805      	bhi.n	8002f4e <osThreadNew+0x6e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <osThreadNew+0x72>
        return (NULL);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e054      	b.n	8002ffc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00e      	beq.n	8002f88 <osThreadNew+0xa8>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2ba7      	cmp	r3, #167	@ 0xa7
 8002f70:	d90a      	bls.n	8002f88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d006      	beq.n	8002f88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <osThreadNew+0xa8>
        mem = 1;
 8002f82:	2301      	movs	r3, #1
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	e010      	b.n	8002faa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10c      	bne.n	8002faa <osThreadNew+0xca>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d108      	bne.n	8002faa <osThreadNew+0xca>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d104      	bne.n	8002faa <osThreadNew+0xca>
          mem = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	61bb      	str	r3, [r7, #24]
 8002fa4:	e001      	b.n	8002faa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d110      	bne.n	8002fd2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fb8:	9202      	str	r2, [sp, #8]
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	6a3a      	ldr	r2, [r7, #32]
 8002fc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f001 fac8 	bl	800455c <xTaskCreateStatic>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	e013      	b.n	8002ffa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d110      	bne.n	8002ffa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	f107 0310 	add.w	r3, r7, #16
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f001 fb16 	bl	800461c <xTaskCreate>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d001      	beq.n	8002ffa <osThreadNew+0x11a>
            hTask = NULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002ffa:	693b      	ldr	r3, [r7, #16]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3728      	adds	r7, #40	@ 0x28
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800300c:	f3ef 8305 	mrs	r3, IPSR
 8003010:	60bb      	str	r3, [r7, #8]
  return(result);
 8003012:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <osDelay+0x1c>
    stat = osErrorISR;
 8003018:	f06f 0305 	mvn.w	r3, #5
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	e007      	b.n	8003030 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <osDelay+0x2c>
      vTaskDelay(ticks);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f001 fc54 	bl	80048d8 <vTaskDelay>
    }
  }

  return (stat);
 8003030:	68fb      	ldr	r3, [r7, #12]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800303a:	b580      	push	{r7, lr}
 800303c:	b08a      	sub	sp, #40	@ 0x28
 800303e:	af02      	add	r7, sp, #8
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800304a:	f3ef 8305 	mrs	r3, IPSR
 800304e:	613b      	str	r3, [r7, #16]
  return(result);
 8003050:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003052:	2b00      	cmp	r3, #0
 8003054:	d175      	bne.n	8003142 <osSemaphoreNew+0x108>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d072      	beq.n	8003142 <osSemaphoreNew+0x108>
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	429a      	cmp	r2, r3
 8003062:	d86e      	bhi.n	8003142 <osSemaphoreNew+0x108>
    mem = -1;
 8003064:	f04f 33ff 	mov.w	r3, #4294967295
 8003068:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d015      	beq.n	800309c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d006      	beq.n	8003086 <osSemaphoreNew+0x4c>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b4f      	cmp	r3, #79	@ 0x4f
 800307e:	d902      	bls.n	8003086 <osSemaphoreNew+0x4c>
        mem = 1;
 8003080:	2301      	movs	r3, #1
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	e00c      	b.n	80030a0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d108      	bne.n	80030a0 <osSemaphoreNew+0x66>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d104      	bne.n	80030a0 <osSemaphoreNew+0x66>
          mem = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	e001      	b.n	80030a0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a6:	d04c      	beq.n	8003142 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d128      	bne.n	8003100 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10a      	bne.n	80030ca <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2203      	movs	r2, #3
 80030ba:	9200      	str	r2, [sp, #0]
 80030bc:	2200      	movs	r2, #0
 80030be:	2100      	movs	r1, #0
 80030c0:	2001      	movs	r0, #1
 80030c2:	f000 fa4b 	bl	800355c <xQueueGenericCreateStatic>
 80030c6:	61f8      	str	r0, [r7, #28]
 80030c8:	e005      	b.n	80030d6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80030ca:	2203      	movs	r2, #3
 80030cc:	2100      	movs	r1, #0
 80030ce:	2001      	movs	r0, #1
 80030d0:	f000 fac1 	bl	8003656 <xQueueGenericCreate>
 80030d4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d022      	beq.n	8003122 <osSemaphoreNew+0xe8>
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01f      	beq.n	8003122 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80030e2:	2300      	movs	r3, #0
 80030e4:	2200      	movs	r2, #0
 80030e6:	2100      	movs	r1, #0
 80030e8:	69f8      	ldr	r0, [r7, #28]
 80030ea:	f000 fb81 	bl	80037f0 <xQueueGenericSend>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d016      	beq.n	8003122 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80030f4:	69f8      	ldr	r0, [r7, #28]
 80030f6:	f001 f85d 	bl	80041b4 <vQueueDelete>
            hSemaphore = NULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e010      	b.n	8003122 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d108      	bne.n	8003118 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	461a      	mov	r2, r3
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 faff 	bl	8003712 <xQueueCreateCountingSemaphoreStatic>
 8003114:	61f8      	str	r0, [r7, #28]
 8003116:	e004      	b.n	8003122 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 fb32 	bl	8003784 <xQueueCreateCountingSemaphore>
 8003120:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00c      	beq.n	8003142 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <osSemaphoreNew+0xfc>
          name = attr->name;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	e001      	b.n	800313a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800313a:	6979      	ldr	r1, [r7, #20]
 800313c:	69f8      	ldr	r0, [r7, #28]
 800313e:	f001 f985 	bl	800444c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003142:	69fb      	ldr	r3, [r7, #28]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3720      	adds	r7, #32
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d103      	bne.n	800316c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003164:	f06f 0303 	mvn.w	r3, #3
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	e039      	b.n	80031e0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800316c:	f3ef 8305 	mrs	r3, IPSR
 8003170:	60fb      	str	r3, [r7, #12]
  return(result);
 8003172:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003174:	2b00      	cmp	r3, #0
 8003176:	d022      	beq.n	80031be <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800317e:	f06f 0303 	mvn.w	r3, #3
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	e02c      	b.n	80031e0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800318a:	f107 0308 	add.w	r3, r7, #8
 800318e:	461a      	mov	r2, r3
 8003190:	2100      	movs	r1, #0
 8003192:	6938      	ldr	r0, [r7, #16]
 8003194:	f000 ff4e 	bl	8004034 <xQueueReceiveFromISR>
 8003198:	4603      	mov	r3, r0
 800319a:	2b01      	cmp	r3, #1
 800319c:	d003      	beq.n	80031a6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800319e:	f06f 0302 	mvn.w	r3, #2
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	e01c      	b.n	80031e0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d019      	beq.n	80031e0 <osSemaphoreAcquire+0x94>
 80031ac:	4b0f      	ldr	r3, [pc, #60]	@ (80031ec <osSemaphoreAcquire+0xa0>)
 80031ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	e010      	b.n	80031e0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80031be:	6839      	ldr	r1, [r7, #0]
 80031c0:	6938      	ldr	r0, [r7, #16]
 80031c2:	f000 fe27 	bl	8003e14 <xQueueSemaphoreTake>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d009      	beq.n	80031e0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80031d2:	f06f 0301 	mvn.w	r3, #1
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	e002      	b.n	80031e0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80031da:	f06f 0302 	mvn.w	r3, #2
 80031de:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80031e0:	697b      	ldr	r3, [r7, #20]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	e000ed04 	.word	0xe000ed04

080031f0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d103      	bne.n	800320e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003206:	f06f 0303 	mvn.w	r3, #3
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	e02c      	b.n	8003268 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800320e:	f3ef 8305 	mrs	r3, IPSR
 8003212:	60fb      	str	r3, [r7, #12]
  return(result);
 8003214:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01a      	beq.n	8003250 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800321e:	f107 0308 	add.w	r3, r7, #8
 8003222:	4619      	mov	r1, r3
 8003224:	6938      	ldr	r0, [r7, #16]
 8003226:	f000 fc83 	bl	8003b30 <xQueueGiveFromISR>
 800322a:	4603      	mov	r3, r0
 800322c:	2b01      	cmp	r3, #1
 800322e:	d003      	beq.n	8003238 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003230:	f06f 0302 	mvn.w	r3, #2
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	e017      	b.n	8003268 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d014      	beq.n	8003268 <osSemaphoreRelease+0x78>
 800323e:	4b0d      	ldr	r3, [pc, #52]	@ (8003274 <osSemaphoreRelease+0x84>)
 8003240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	e00b      	b.n	8003268 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003250:	2300      	movs	r3, #0
 8003252:	2200      	movs	r2, #0
 8003254:	2100      	movs	r1, #0
 8003256:	6938      	ldr	r0, [r7, #16]
 8003258:	f000 faca 	bl	80037f0 <xQueueGenericSend>
 800325c:	4603      	mov	r3, r0
 800325e:	2b01      	cmp	r3, #1
 8003260:	d002      	beq.n	8003268 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003262:	f06f 0302 	mvn.w	r3, #2
 8003266:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003268:	697b      	ldr	r3, [r7, #20]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	e000ed04 	.word	0xe000ed04

08003278 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <osSemaphoreGetCount+0x18>
    count = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	e00e      	b.n	80032ae <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003290:	f3ef 8305 	mrs	r3, IPSR
 8003294:	60fb      	str	r3, [r7, #12]
  return(result);
 8003296:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003298:	2b00      	cmp	r3, #0
 800329a:	d004      	beq.n	80032a6 <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800329c:	6938      	ldr	r0, [r7, #16]
 800329e:	f000 ff6a 	bl	8004176 <uxQueueMessagesWaitingFromISR>
 80032a2:	6178      	str	r0, [r7, #20]
 80032a4:	e003      	b.n	80032ae <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 80032a6:	6938      	ldr	r0, [r7, #16]
 80032a8:	f000 ff46 	bl	8004138 <uxQueueMessagesWaiting>
 80032ac:	6178      	str	r0, [r7, #20]
  }

  return (count);
 80032ae:	697b      	ldr	r3, [r7, #20]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4a07      	ldr	r2, [pc, #28]	@ (80032e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80032c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4a06      	ldr	r2, [pc, #24]	@ (80032e8 <vApplicationGetIdleTaskMemory+0x30>)
 80032ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2280      	movs	r2, #128	@ 0x80
 80032d4:	601a      	str	r2, [r3, #0]
}
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000128 	.word	0x20000128
 80032e8:	200001d0 	.word	0x200001d0

080032ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a07      	ldr	r2, [pc, #28]	@ (8003318 <vApplicationGetTimerTaskMemory+0x2c>)
 80032fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4a06      	ldr	r2, [pc, #24]	@ (800331c <vApplicationGetTimerTaskMemory+0x30>)
 8003302:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800330a:	601a      	str	r2, [r3, #0]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	200003d0 	.word	0x200003d0
 800331c:	20000478 	.word	0x20000478

08003320 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f103 0208 	add.w	r2, r3, #8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f04f 32ff 	mov.w	r2, #4294967295
 8003338:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f103 0208 	add.w	r2, r3, #8
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f103 0208 	add.w	r2, r3, #8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800337a:	b480      	push	{r7}
 800337c:	b085      	sub	sp, #20
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	601a      	str	r2, [r3, #0]
}
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d103      	bne.n	80033e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	e00c      	b.n	80033fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3308      	adds	r3, #8
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	e002      	b.n	80033f0 <vListInsert+0x2e>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d2f6      	bcs.n	80033ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	601a      	str	r2, [r3, #0]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6892      	ldr	r2, [r2, #8]
 800344a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6852      	ldr	r2, [r2, #4]
 8003454:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	d103      	bne.n	8003468 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	1e5a      	subs	r2, r3, #1
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10b      	bne.n	80034b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800349c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034ae:	bf00      	nop
 80034b0:	bf00      	nop
 80034b2:	e7fd      	b.n	80034b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80034b4:	f002 fd18 	bl	8005ee8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c0:	68f9      	ldr	r1, [r7, #12]
 80034c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	441a      	add	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e4:	3b01      	subs	r3, #1
 80034e6:	68f9      	ldr	r1, [r7, #12]
 80034e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	441a      	add	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	22ff      	movs	r2, #255	@ 0xff
 80034f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	22ff      	movs	r2, #255	@ 0xff
 8003500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d114      	bne.n	8003534 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01a      	beq.n	8003548 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	3310      	adds	r3, #16
 8003516:	4618      	mov	r0, r3
 8003518:	f001 fcb2 	bl	8004e80 <xTaskRemoveFromEventList>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d012      	beq.n	8003548 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003522:	4b0d      	ldr	r3, [pc, #52]	@ (8003558 <xQueueGenericReset+0xd0>)
 8003524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	e009      	b.n	8003548 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3310      	adds	r3, #16
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fef1 	bl	8003320 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	3324      	adds	r3, #36	@ 0x24
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff feec 	bl	8003320 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003548:	f002 fd00 	bl	8005f4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800354c:	2301      	movs	r3, #1
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	e000ed04 	.word	0xe000ed04

0800355c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08e      	sub	sp, #56	@ 0x38
 8003560:	af02      	add	r7, sp, #8
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10b      	bne.n	8003588 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003582:	bf00      	nop
 8003584:	bf00      	nop
 8003586:	e7fd      	b.n	8003584 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10b      	bne.n	80035a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800358e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	e7fd      	b.n	80035a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <xQueueGenericCreateStatic+0x56>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <xQueueGenericCreateStatic+0x5a>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <xQueueGenericCreateStatic+0x5c>
 80035b6:	2300      	movs	r3, #0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10b      	bne.n	80035d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	623b      	str	r3, [r7, #32]
}
 80035ce:	bf00      	nop
 80035d0:	bf00      	nop
 80035d2:	e7fd      	b.n	80035d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <xQueueGenericCreateStatic+0x84>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <xQueueGenericCreateStatic+0x88>
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <xQueueGenericCreateStatic+0x8a>
 80035e4:	2300      	movs	r3, #0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10b      	bne.n	8003602 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80035ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	61fb      	str	r3, [r7, #28]
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	e7fd      	b.n	80035fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003602:	2350      	movs	r3, #80	@ 0x50
 8003604:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b50      	cmp	r3, #80	@ 0x50
 800360a:	d00b      	beq.n	8003624 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	61bb      	str	r3, [r7, #24]
}
 800361e:	bf00      	nop
 8003620:	bf00      	nop
 8003622:	e7fd      	b.n	8003620 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003624:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800362a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00d      	beq.n	800364c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003638:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800363c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	4613      	mov	r3, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f840 	bl	80036cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800364c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800364e:	4618      	mov	r0, r3
 8003650:	3730      	adds	r7, #48	@ 0x30
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003656:	b580      	push	{r7, lr}
 8003658:	b08a      	sub	sp, #40	@ 0x28
 800365a:	af02      	add	r7, sp, #8
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	4613      	mov	r3, r2
 8003662:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10b      	bne.n	8003682 <xQueueGenericCreate+0x2c>
	__asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	613b      	str	r3, [r7, #16]
}
 800367c:	bf00      	nop
 800367e:	bf00      	nop
 8003680:	e7fd      	b.n	800367e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	3350      	adds	r3, #80	@ 0x50
 8003690:	4618      	mov	r0, r3
 8003692:	f002 fd4b 	bl	800612c <pvPortMalloc>
 8003696:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d011      	beq.n	80036c2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	3350      	adds	r3, #80	@ 0x50
 80036a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036b0:	79fa      	ldrb	r2, [r7, #7]
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	4613      	mov	r3, r2
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f805 	bl	80036cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036c2:	69bb      	ldr	r3, [r7, #24]
	}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3720      	adds	r7, #32
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d103      	bne.n	80036e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	e002      	b.n	80036ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036fa:	2101      	movs	r1, #1
 80036fc:	69b8      	ldr	r0, [r7, #24]
 80036fe:	f7ff fec3 	bl	8003488 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800370a:	bf00      	nop
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003712:	b580      	push	{r7, lr}
 8003714:	b08a      	sub	sp, #40	@ 0x28
 8003716:	af02      	add	r7, sp, #8
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8003724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	61bb      	str	r3, [r7, #24]
}
 8003736:	bf00      	nop
 8003738:	bf00      	nop
 800373a:	e7fd      	b.n	8003738 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	429a      	cmp	r2, r3
 8003742:	d90b      	bls.n	800375c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8003744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	617b      	str	r3, [r7, #20]
}
 8003756:	bf00      	nop
 8003758:	bf00      	nop
 800375a:	e7fd      	b.n	8003758 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800375c:	2302      	movs	r3, #2
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	2100      	movs	r1, #0
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f7ff fef8 	bl	800355c <xQueueGenericCreateStatic>
 800376c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800377a:	69fb      	ldr	r3, [r7, #28]
	}
 800377c:	4618      	mov	r0, r3
 800377e:	3720      	adds	r7, #32
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10b      	bne.n	80037ac <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8003794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	613b      	str	r3, [r7, #16]
}
 80037a6:	bf00      	nop
 80037a8:	bf00      	nop
 80037aa:	e7fd      	b.n	80037a8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d90b      	bls.n	80037cc <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	60fb      	str	r3, [r7, #12]
}
 80037c6:	bf00      	nop
 80037c8:	bf00      	nop
 80037ca:	e7fd      	b.n	80037c8 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80037cc:	2202      	movs	r2, #2
 80037ce:	2100      	movs	r1, #0
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ff40 	bl	8003656 <xQueueGenericCreate>
 80037d6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80037e4:	697b      	ldr	r3, [r7, #20]
	}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08e      	sub	sp, #56	@ 0x38
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037fe:	2300      	movs	r3, #0
 8003800:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <xQueueGenericSend+0x34>
	__asm volatile
 800380c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800381e:	bf00      	nop
 8003820:	bf00      	nop
 8003822:	e7fd      	b.n	8003820 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d103      	bne.n	8003832 <xQueueGenericSend+0x42>
 800382a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <xQueueGenericSend+0x46>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <xQueueGenericSend+0x48>
 8003836:	2300      	movs	r3, #0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10b      	bne.n	8003854 <xQueueGenericSend+0x64>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800384e:	bf00      	nop
 8003850:	bf00      	nop
 8003852:	e7fd      	b.n	8003850 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d103      	bne.n	8003862 <xQueueGenericSend+0x72>
 800385a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <xQueueGenericSend+0x76>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <xQueueGenericSend+0x78>
 8003866:	2300      	movs	r3, #0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10b      	bne.n	8003884 <xQueueGenericSend+0x94>
	__asm volatile
 800386c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	623b      	str	r3, [r7, #32]
}
 800387e:	bf00      	nop
 8003880:	bf00      	nop
 8003882:	e7fd      	b.n	8003880 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003884:	f001 fcc2 	bl	800520c <xTaskGetSchedulerState>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <xQueueGenericSend+0xa4>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <xQueueGenericSend+0xa8>
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <xQueueGenericSend+0xaa>
 8003898:	2300      	movs	r3, #0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	61fb      	str	r3, [r7, #28]
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	e7fd      	b.n	80038b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038b6:	f002 fb17 	bl	8005ee8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d302      	bcc.n	80038cc <xQueueGenericSend+0xdc>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d129      	bne.n	8003920 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	68b9      	ldr	r1, [r7, #8]
 80038d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038d2:	f000 fcab 	bl	800422c <prvCopyDataToQueue>
 80038d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d010      	beq.n	8003902 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e2:	3324      	adds	r3, #36	@ 0x24
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 facb 	bl	8004e80 <xTaskRemoveFromEventList>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d013      	beq.n	8003918 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038f0:	4b3f      	ldr	r3, [pc, #252]	@ (80039f0 <xQueueGenericSend+0x200>)
 80038f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	e00a      	b.n	8003918 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003908:	4b39      	ldr	r3, [pc, #228]	@ (80039f0 <xQueueGenericSend+0x200>)
 800390a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003918:	f002 fb18 	bl	8005f4c <vPortExitCritical>
				return pdPASS;
 800391c:	2301      	movs	r3, #1
 800391e:	e063      	b.n	80039e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d103      	bne.n	800392e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003926:	f002 fb11 	bl	8005f4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800392a:	2300      	movs	r3, #0
 800392c:	e05c      	b.n	80039e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800392e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003930:	2b00      	cmp	r3, #0
 8003932:	d106      	bne.n	8003942 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003934:	f107 0314 	add.w	r3, r7, #20
 8003938:	4618      	mov	r0, r3
 800393a:	f001 fb05 	bl	8004f48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800393e:	2301      	movs	r3, #1
 8003940:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003942:	f002 fb03 	bl	8005f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003946:	f001 f86d 	bl	8004a24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800394a:	f002 facd 	bl	8005ee8 <vPortEnterCritical>
 800394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003950:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003954:	b25b      	sxtb	r3, r3
 8003956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395a:	d103      	bne.n	8003964 <xQueueGenericSend+0x174>
 800395c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003966:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800396a:	b25b      	sxtb	r3, r3
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d103      	bne.n	800397a <xQueueGenericSend+0x18a>
 8003972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800397a:	f002 fae7 	bl	8005f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800397e:	1d3a      	adds	r2, r7, #4
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f001 faf4 	bl	8004f74 <xTaskCheckForTimeOut>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d124      	bne.n	80039dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003992:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003994:	f000 fd42 	bl	800441c <prvIsQueueFull>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d018      	beq.n	80039d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a0:	3310      	adds	r3, #16
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4611      	mov	r1, r2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 fa18 	bl	8004ddc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80039ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039ae:	f000 fccd 	bl	800434c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80039b2:	f001 f845 	bl	8004a40 <xTaskResumeAll>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f47f af7c 	bne.w	80038b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80039be:	4b0c      	ldr	r3, [pc, #48]	@ (80039f0 <xQueueGenericSend+0x200>)
 80039c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	e772      	b.n	80038b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80039d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039d2:	f000 fcbb 	bl	800434c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039d6:	f001 f833 	bl	8004a40 <xTaskResumeAll>
 80039da:	e76c      	b.n	80038b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039de:	f000 fcb5 	bl	800434c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039e2:	f001 f82d 	bl	8004a40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3738      	adds	r7, #56	@ 0x38
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	e000ed04 	.word	0xe000ed04

080039f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b090      	sub	sp, #64	@ 0x40
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10b      	bne.n	8003a24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a1e:	bf00      	nop
 8003a20:	bf00      	nop
 8003a22:	e7fd      	b.n	8003a20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d103      	bne.n	8003a32 <xQueueGenericSendFromISR+0x3e>
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <xQueueGenericSendFromISR+0x42>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <xQueueGenericSendFromISR+0x44>
 8003a36:	2300      	movs	r3, #0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10b      	bne.n	8003a54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a4e:	bf00      	nop
 8003a50:	bf00      	nop
 8003a52:	e7fd      	b.n	8003a50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d103      	bne.n	8003a62 <xQueueGenericSendFromISR+0x6e>
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <xQueueGenericSendFromISR+0x72>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <xQueueGenericSendFromISR+0x74>
 8003a66:	2300      	movs	r3, #0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10b      	bne.n	8003a84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	623b      	str	r3, [r7, #32]
}
 8003a7e:	bf00      	nop
 8003a80:	bf00      	nop
 8003a82:	e7fd      	b.n	8003a80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a84:	f002 fb10 	bl	80060a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a88:	f3ef 8211 	mrs	r2, BASEPRI
 8003a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	61fa      	str	r2, [r7, #28]
 8003a9e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003aa0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003aa2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d302      	bcc.n	8003ab6 <xQueueGenericSendFromISR+0xc2>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d12f      	bne.n	8003b16 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003abc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	68b9      	ldr	r1, [r7, #8]
 8003aca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003acc:	f000 fbae 	bl	800422c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ad0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d112      	bne.n	8003b00 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d016      	beq.n	8003b10 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae4:	3324      	adds	r3, #36	@ 0x24
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 f9ca 	bl	8004e80 <xTaskRemoveFromEventList>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00e      	beq.n	8003b10 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	e007      	b.n	8003b10 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b04:	3301      	adds	r3, #1
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	b25a      	sxtb	r2, r3
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003b10:	2301      	movs	r3, #1
 8003b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003b14:	e001      	b.n	8003b1a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b1c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3740      	adds	r7, #64	@ 0x40
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08e      	sub	sp, #56	@ 0x38
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10b      	bne.n	8003b5c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	623b      	str	r3, [r7, #32]
}
 8003b56:	bf00      	nop
 8003b58:	bf00      	nop
 8003b5a:	e7fd      	b.n	8003b58 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00b      	beq.n	8003b7c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	61fb      	str	r3, [r7, #28]
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	e7fd      	b.n	8003b78 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d103      	bne.n	8003b8c <xQueueGiveFromISR+0x5c>
 8003b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <xQueueGiveFromISR+0x60>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <xQueueGiveFromISR+0x62>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10b      	bne.n	8003bae <xQueueGiveFromISR+0x7e>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	61bb      	str	r3, [r7, #24]
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	e7fd      	b.n	8003baa <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bae:	f002 fa7b 	bl	80060a8 <vPortValidateInterruptPriority>
	__asm volatile
 8003bb2:	f3ef 8211 	mrs	r2, BASEPRI
 8003bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	617a      	str	r2, [r7, #20]
 8003bc8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003bca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d22b      	bcs.n	8003c36 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003be4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf8:	d112      	bne.n	8003c20 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d016      	beq.n	8003c30 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c04:	3324      	adds	r3, #36	@ 0x24
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 f93a 	bl	8004e80 <xTaskRemoveFromEventList>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00e      	beq.n	8003c30 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00b      	beq.n	8003c30 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e007      	b.n	8003c30 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c24:	3301      	adds	r3, #1
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	b25a      	sxtb	r2, r3
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003c30:	2301      	movs	r3, #1
 8003c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c34:	e001      	b.n	8003c3a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c3c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f383 8811 	msr	BASEPRI, r3
}
 8003c44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3738      	adds	r7, #56	@ 0x38
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08c      	sub	sp, #48	@ 0x30
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10b      	bne.n	8003c82 <xQueueReceive+0x32>
	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	623b      	str	r3, [r7, #32]
}
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	e7fd      	b.n	8003c7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d103      	bne.n	8003c90 <xQueueReceive+0x40>
 8003c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <xQueueReceive+0x44>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <xQueueReceive+0x46>
 8003c94:	2300      	movs	r3, #0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10b      	bne.n	8003cb2 <xQueueReceive+0x62>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	61fb      	str	r3, [r7, #28]
}
 8003cac:	bf00      	nop
 8003cae:	bf00      	nop
 8003cb0:	e7fd      	b.n	8003cae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cb2:	f001 faab 	bl	800520c <xTaskGetSchedulerState>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d102      	bne.n	8003cc2 <xQueueReceive+0x72>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <xQueueReceive+0x76>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <xQueueReceive+0x78>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10b      	bne.n	8003ce4 <xQueueReceive+0x94>
	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	61bb      	str	r3, [r7, #24]
}
 8003cde:	bf00      	nop
 8003ce0:	bf00      	nop
 8003ce2:	e7fd      	b.n	8003ce0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ce4:	f002 f900 	bl	8005ee8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d01f      	beq.n	8003d34 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cf8:	f000 fb02 	bl	8004300 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	1e5a      	subs	r2, r3, #1
 8003d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d02:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00f      	beq.n	8003d2c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0e:	3310      	adds	r3, #16
 8003d10:	4618      	mov	r0, r3
 8003d12:	f001 f8b5 	bl	8004e80 <xTaskRemoveFromEventList>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d007      	beq.n	8003d2c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d1c:	4b3c      	ldr	r3, [pc, #240]	@ (8003e10 <xQueueReceive+0x1c0>)
 8003d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d2c:	f002 f90e 	bl	8005f4c <vPortExitCritical>
				return pdPASS;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e069      	b.n	8003e08 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d3a:	f002 f907 	bl	8005f4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e062      	b.n	8003e08 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d48:	f107 0310 	add.w	r3, r7, #16
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f001 f8fb 	bl	8004f48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d52:	2301      	movs	r3, #1
 8003d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d56:	f002 f8f9 	bl	8005f4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d5a:	f000 fe63 	bl	8004a24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d5e:	f002 f8c3 	bl	8005ee8 <vPortEnterCritical>
 8003d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d68:	b25b      	sxtb	r3, r3
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6e:	d103      	bne.n	8003d78 <xQueueReceive+0x128>
 8003d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d7e:	b25b      	sxtb	r3, r3
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d84:	d103      	bne.n	8003d8e <xQueueReceive+0x13e>
 8003d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d8e:	f002 f8dd 	bl	8005f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d92:	1d3a      	adds	r2, r7, #4
 8003d94:	f107 0310 	add.w	r3, r7, #16
 8003d98:	4611      	mov	r1, r2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f001 f8ea 	bl	8004f74 <xTaskCheckForTimeOut>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d123      	bne.n	8003dee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003da6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003da8:	f000 fb22 	bl	80043f0 <prvIsQueueEmpty>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d017      	beq.n	8003de2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db4:	3324      	adds	r3, #36	@ 0x24
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f001 f80e 	bl	8004ddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003dc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dc2:	f000 fac3 	bl	800434c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003dc6:	f000 fe3b 	bl	8004a40 <xTaskResumeAll>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d189      	bne.n	8003ce4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e10 <xQueueReceive+0x1c0>)
 8003dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	e780      	b.n	8003ce4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003de2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003de4:	f000 fab2 	bl	800434c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003de8:	f000 fe2a 	bl	8004a40 <xTaskResumeAll>
 8003dec:	e77a      	b.n	8003ce4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003dee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003df0:	f000 faac 	bl	800434c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003df4:	f000 fe24 	bl	8004a40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003df8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dfa:	f000 faf9 	bl	80043f0 <prvIsQueueEmpty>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f43f af6f 	beq.w	8003ce4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3730      	adds	r7, #48	@ 0x30
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	e000ed04 	.word	0xe000ed04

08003e14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08e      	sub	sp, #56	@ 0x38
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10b      	bne.n	8003e48 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	623b      	str	r3, [r7, #32]
}
 8003e42:	bf00      	nop
 8003e44:	bf00      	nop
 8003e46:	e7fd      	b.n	8003e44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00b      	beq.n	8003e68 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	61fb      	str	r3, [r7, #28]
}
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e68:	f001 f9d0 	bl	800520c <xTaskGetSchedulerState>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d102      	bne.n	8003e78 <xQueueSemaphoreTake+0x64>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <xQueueSemaphoreTake+0x68>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <xQueueSemaphoreTake+0x6a>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10b      	bne.n	8003e9a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	61bb      	str	r3, [r7, #24]
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop
 8003e98:	e7fd      	b.n	8003e96 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e9a:	f002 f825 	bl	8005ee8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d024      	beq.n	8003ef4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eac:	1e5a      	subs	r2, r3, #1
 8003eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d104      	bne.n	8003ec4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003eba:	f001 fb21 	bl	8005500 <pvTaskIncrementMutexHeldCount>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00f      	beq.n	8003eec <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ece:	3310      	adds	r3, #16
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 ffd5 	bl	8004e80 <xTaskRemoveFromEventList>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003edc:	4b54      	ldr	r3, [pc, #336]	@ (8004030 <xQueueSemaphoreTake+0x21c>)
 8003ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003eec:	f002 f82e 	bl	8005f4c <vPortExitCritical>
				return pdPASS;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e098      	b.n	8004026 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d112      	bne.n	8003f20 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00b      	beq.n	8003f18 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	617b      	str	r3, [r7, #20]
}
 8003f12:	bf00      	nop
 8003f14:	bf00      	nop
 8003f16:	e7fd      	b.n	8003f14 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003f18:	f002 f818 	bl	8005f4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	e082      	b.n	8004026 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f26:	f107 030c 	add.w	r3, r7, #12
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f001 f80c 	bl	8004f48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f30:	2301      	movs	r3, #1
 8003f32:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f34:	f002 f80a 	bl	8005f4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f38:	f000 fd74 	bl	8004a24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f3c:	f001 ffd4 	bl	8005ee8 <vPortEnterCritical>
 8003f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f46:	b25b      	sxtb	r3, r3
 8003f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4c:	d103      	bne.n	8003f56 <xQueueSemaphoreTake+0x142>
 8003f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f5c:	b25b      	sxtb	r3, r3
 8003f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f62:	d103      	bne.n	8003f6c <xQueueSemaphoreTake+0x158>
 8003f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f6c:	f001 ffee 	bl	8005f4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f70:	463a      	mov	r2, r7
 8003f72:	f107 030c 	add.w	r3, r7, #12
 8003f76:	4611      	mov	r1, r2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fffb 	bl	8004f74 <xTaskCheckForTimeOut>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d132      	bne.n	8003fea <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f86:	f000 fa33 	bl	80043f0 <prvIsQueueEmpty>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d026      	beq.n	8003fde <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d109      	bne.n	8003fac <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003f98:	f001 ffa6 	bl	8005ee8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f001 f951 	bl	8005248 <xTaskPriorityInherit>
 8003fa6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003fa8:	f001 ffd0 	bl	8005f4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fae:	3324      	adds	r3, #36	@ 0x24
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 ff11 	bl	8004ddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fbc:	f000 f9c6 	bl	800434c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fc0:	f000 fd3e 	bl	8004a40 <xTaskResumeAll>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f47f af67 	bne.w	8003e9a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003fcc:	4b18      	ldr	r3, [pc, #96]	@ (8004030 <xQueueSemaphoreTake+0x21c>)
 8003fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	e75d      	b.n	8003e9a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003fde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fe0:	f000 f9b4 	bl	800434c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fe4:	f000 fd2c 	bl	8004a40 <xTaskResumeAll>
 8003fe8:	e757      	b.n	8003e9a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003fea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fec:	f000 f9ae 	bl	800434c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ff0:	f000 fd26 	bl	8004a40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ff4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ff6:	f000 f9fb 	bl	80043f0 <prvIsQueueEmpty>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f43f af4c 	beq.w	8003e9a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004008:	f001 ff6e 	bl	8005ee8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800400c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800400e:	f000 f8f5 	bl	80041fc <prvGetDisinheritPriorityAfterTimeout>
 8004012:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800401a:	4618      	mov	r0, r3
 800401c:	f001 f9ec 	bl	80053f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004020:	f001 ff94 	bl	8005f4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004024:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004026:	4618      	mov	r0, r3
 8004028:	3738      	adds	r7, #56	@ 0x38
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	e000ed04 	.word	0xe000ed04

08004034 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08e      	sub	sp, #56	@ 0x38
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10b      	bne.n	8004062 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	623b      	str	r3, [r7, #32]
}
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	e7fd      	b.n	800405e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d103      	bne.n	8004070 <xQueueReceiveFromISR+0x3c>
 8004068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <xQueueReceiveFromISR+0x40>
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <xQueueReceiveFromISR+0x42>
 8004074:	2300      	movs	r3, #0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10b      	bne.n	8004092 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	61fb      	str	r3, [r7, #28]
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	e7fd      	b.n	800408e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004092:	f002 f809 	bl	80060a8 <vPortValidateInterruptPriority>
	__asm volatile
 8004096:	f3ef 8211 	mrs	r2, BASEPRI
 800409a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	61ba      	str	r2, [r7, #24]
 80040ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80040ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d02f      	beq.n	800411e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80040be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040c8:	68b9      	ldr	r1, [r7, #8]
 80040ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040cc:	f000 f918 	bl	8004300 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d2:	1e5a      	subs	r2, r3, #1
 80040d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80040d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d112      	bne.n	8004108 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d016      	beq.n	8004118 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ec:	3310      	adds	r3, #16
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fec6 	bl	8004e80 <xTaskRemoveFromEventList>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00e      	beq.n	8004118 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00b      	beq.n	8004118 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	e007      	b.n	8004118 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800410c:	3301      	adds	r3, #1
 800410e:	b2db      	uxtb	r3, r3
 8004110:	b25a      	sxtb	r2, r3
 8004112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004118:	2301      	movs	r3, #1
 800411a:	637b      	str	r3, [r7, #52]	@ 0x34
 800411c:	e001      	b.n	8004122 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800411e:	2300      	movs	r3, #0
 8004120:	637b      	str	r3, [r7, #52]	@ 0x34
 8004122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004124:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f383 8811 	msr	BASEPRI, r3
}
 800412c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800412e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004130:	4618      	mov	r0, r3
 8004132:	3738      	adds	r7, #56	@ 0x38
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	60bb      	str	r3, [r7, #8]
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800415e:	f001 fec3 	bl	8005ee8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004166:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004168:	f001 fef0 	bl	8005f4c <vPortExitCritical>

	return uxReturn;
 800416c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004176:	b480      	push	{r7}
 8004178:	b087      	sub	sp, #28
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10b      	bne.n	80041a0 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	60fb      	str	r3, [r7, #12]
}
 800419a:	bf00      	nop
 800419c:	bf00      	nop
 800419e:	e7fd      	b.n	800419c <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80041a6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80041a8:	4618      	mov	r0, r3
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10b      	bne.n	80041de <vQueueDelete+0x2a>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	60bb      	str	r3, [r7, #8]
}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	e7fd      	b.n	80041da <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f95e 	bl	80044a0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d102      	bne.n	80041f4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f002 f86a 	bl	80062c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80041f4:	bf00      	nop
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	2b00      	cmp	r3, #0
 800420a:	d006      	beq.n	800421a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	e001      	b.n	800421e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800421e:	68fb      	ldr	r3, [r7, #12]
	}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004240:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10d      	bne.n	8004266 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d14d      	bne.n	80042ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	4618      	mov	r0, r3
 8004258:	f001 f85e 	bl	8005318 <xTaskPriorityDisinherit>
 800425c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	609a      	str	r2, [r3, #8]
 8004264:	e043      	b.n	80042ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d119      	bne.n	80042a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6858      	ldr	r0, [r3, #4]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004274:	461a      	mov	r2, r3
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	f002 f9d2 	bl	8006620 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	441a      	add	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	429a      	cmp	r2, r3
 8004294:	d32b      	bcc.n	80042ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	605a      	str	r2, [r3, #4]
 800429e:	e026      	b.n	80042ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	68d8      	ldr	r0, [r3, #12]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a8:	461a      	mov	r2, r3
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	f002 f9b8 	bl	8006620 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b8:	425b      	negs	r3, r3
 80042ba:	441a      	add	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d207      	bcs.n	80042dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d4:	425b      	negs	r3, r3
 80042d6:	441a      	add	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d105      	bne.n	80042ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80042f6:	697b      	ldr	r3, [r7, #20]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	d018      	beq.n	8004344 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	441a      	add	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	429a      	cmp	r2, r3
 800432a:	d303      	bcc.n	8004334 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68d9      	ldr	r1, [r3, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433c:	461a      	mov	r2, r3
 800433e:	6838      	ldr	r0, [r7, #0]
 8004340:	f002 f96e 	bl	8006620 <memcpy>
	}
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004354:	f001 fdc8 	bl	8005ee8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800435e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004360:	e011      	b.n	8004386 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004366:	2b00      	cmp	r3, #0
 8004368:	d012      	beq.n	8004390 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3324      	adds	r3, #36	@ 0x24
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fd86 	bl	8004e80 <xTaskRemoveFromEventList>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800437a:	f000 fe5f 	bl	800503c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	3b01      	subs	r3, #1
 8004382:	b2db      	uxtb	r3, r3
 8004384:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800438a:	2b00      	cmp	r3, #0
 800438c:	dce9      	bgt.n	8004362 <prvUnlockQueue+0x16>
 800438e:	e000      	b.n	8004392 <prvUnlockQueue+0x46>
					break;
 8004390:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	22ff      	movs	r2, #255	@ 0xff
 8004396:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800439a:	f001 fdd7 	bl	8005f4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800439e:	f001 fda3 	bl	8005ee8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043aa:	e011      	b.n	80043d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d012      	beq.n	80043da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3310      	adds	r3, #16
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fd61 	bl	8004e80 <xTaskRemoveFromEventList>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80043c4:	f000 fe3a 	bl	800503c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80043c8:	7bbb      	ldrb	r3, [r7, #14]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	dce9      	bgt.n	80043ac <prvUnlockQueue+0x60>
 80043d8:	e000      	b.n	80043dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80043da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	22ff      	movs	r2, #255	@ 0xff
 80043e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80043e4:	f001 fdb2 	bl	8005f4c <vPortExitCritical>
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043f8:	f001 fd76 	bl	8005ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004400:	2b00      	cmp	r3, #0
 8004402:	d102      	bne.n	800440a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004404:	2301      	movs	r3, #1
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	e001      	b.n	800440e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800440e:	f001 fd9d 	bl	8005f4c <vPortExitCritical>

	return xReturn;
 8004412:	68fb      	ldr	r3, [r7, #12]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004424:	f001 fd60 	bl	8005ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004430:	429a      	cmp	r2, r3
 8004432:	d102      	bne.n	800443a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004434:	2301      	movs	r3, #1
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	e001      	b.n	800443e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800443e:	f001 fd85 	bl	8005f4c <vPortExitCritical>

	return xReturn;
 8004442:	68fb      	ldr	r3, [r7, #12]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	e014      	b.n	8004486 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800445c:	4a0f      	ldr	r2, [pc, #60]	@ (800449c <vQueueAddToRegistry+0x50>)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10b      	bne.n	8004480 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004468:	490c      	ldr	r1, [pc, #48]	@ (800449c <vQueueAddToRegistry+0x50>)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004472:	4a0a      	ldr	r2, [pc, #40]	@ (800449c <vQueueAddToRegistry+0x50>)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800447e:	e006      	b.n	800448e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	3301      	adds	r3, #1
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b07      	cmp	r3, #7
 800448a:	d9e7      	bls.n	800445c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800448c:	bf00      	nop
 800448e:	bf00      	nop
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000878 	.word	0x20000878

080044a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	e016      	b.n	80044dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80044ae:	4a10      	ldr	r2, [pc, #64]	@ (80044f0 <vQueueUnregisterQueue+0x50>)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d10b      	bne.n	80044d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80044be:	4a0c      	ldr	r2, [pc, #48]	@ (80044f0 <vQueueUnregisterQueue+0x50>)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2100      	movs	r1, #0
 80044c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80044c8:	4a09      	ldr	r2, [pc, #36]	@ (80044f0 <vQueueUnregisterQueue+0x50>)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	4413      	add	r3, r2
 80044d0:	2200      	movs	r2, #0
 80044d2:	605a      	str	r2, [r3, #4]
				break;
 80044d4:	e006      	b.n	80044e4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3301      	adds	r3, #1
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b07      	cmp	r3, #7
 80044e0:	d9e5      	bls.n	80044ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80044e2:	bf00      	nop
 80044e4:	bf00      	nop
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	20000878 	.word	0x20000878

080044f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004504:	f001 fcf0 	bl	8005ee8 <vPortEnterCritical>
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800450e:	b25b      	sxtb	r3, r3
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004514:	d103      	bne.n	800451e <vQueueWaitForMessageRestricted+0x2a>
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004524:	b25b      	sxtb	r3, r3
 8004526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452a:	d103      	bne.n	8004534 <vQueueWaitForMessageRestricted+0x40>
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004534:	f001 fd0a 	bl	8005f4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453c:	2b00      	cmp	r3, #0
 800453e:	d106      	bne.n	800454e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	3324      	adds	r3, #36	@ 0x24
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fc6d 	bl	8004e28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800454e:	6978      	ldr	r0, [r7, #20]
 8004550:	f7ff fefc 	bl	800434c <prvUnlockQueue>
	}
 8004554:	bf00      	nop
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08e      	sub	sp, #56	@ 0x38
 8004560:	af04      	add	r7, sp, #16
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800456a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10b      	bne.n	8004588 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	623b      	str	r3, [r7, #32]
}
 8004582:	bf00      	nop
 8004584:	bf00      	nop
 8004586:	e7fd      	b.n	8004584 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10b      	bne.n	80045a6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	61fb      	str	r3, [r7, #28]
}
 80045a0:	bf00      	nop
 80045a2:	bf00      	nop
 80045a4:	e7fd      	b.n	80045a2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045a6:	23a8      	movs	r3, #168	@ 0xa8
 80045a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2ba8      	cmp	r3, #168	@ 0xa8
 80045ae:	d00b      	beq.n	80045c8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80045b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	61bb      	str	r3, [r7, #24]
}
 80045c2:	bf00      	nop
 80045c4:	bf00      	nop
 80045c6:	e7fd      	b.n	80045c4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80045c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01e      	beq.n	800460e <xTaskCreateStatic+0xb2>
 80045d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01b      	beq.n	800460e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045e8:	2300      	movs	r3, #0
 80045ea:	9303      	str	r3, [sp, #12]
 80045ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ee:	9302      	str	r3, [sp, #8]
 80045f0:	f107 0314 	add.w	r3, r7, #20
 80045f4:	9301      	str	r3, [sp, #4]
 80045f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	68b9      	ldr	r1, [r7, #8]
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f851 	bl	80046a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004606:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004608:	f000 f8f6 	bl	80047f8 <prvAddNewTaskToReadyList>
 800460c:	e001      	b.n	8004612 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004612:	697b      	ldr	r3, [r7, #20]
	}
 8004614:	4618      	mov	r0, r3
 8004616:	3728      	adds	r7, #40	@ 0x28
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08c      	sub	sp, #48	@ 0x30
 8004620:	af04      	add	r7, sp, #16
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	4613      	mov	r3, r2
 800462a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800462c:	88fb      	ldrh	r3, [r7, #6]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4618      	mov	r0, r3
 8004632:	f001 fd7b 	bl	800612c <pvPortMalloc>
 8004636:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00e      	beq.n	800465c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800463e:	20a8      	movs	r0, #168	@ 0xa8
 8004640:	f001 fd74 	bl	800612c <pvPortMalloc>
 8004644:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	631a      	str	r2, [r3, #48]	@ 0x30
 8004652:	e005      	b.n	8004660 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004654:	6978      	ldr	r0, [r7, #20]
 8004656:	f001 fe37 	bl	80062c8 <vPortFree>
 800465a:	e001      	b.n	8004660 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800465c:	2300      	movs	r3, #0
 800465e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d017      	beq.n	8004696 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800466e:	88fa      	ldrh	r2, [r7, #6]
 8004670:	2300      	movs	r3, #0
 8004672:	9303      	str	r3, [sp, #12]
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	9302      	str	r3, [sp, #8]
 8004678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467a:	9301      	str	r3, [sp, #4]
 800467c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f80f 	bl	80046a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800468a:	69f8      	ldr	r0, [r7, #28]
 800468c:	f000 f8b4 	bl	80047f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004690:	2301      	movs	r3, #1
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	e002      	b.n	800469c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004696:	f04f 33ff 	mov.w	r3, #4294967295
 800469a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800469c:	69bb      	ldr	r3, [r7, #24]
	}
 800469e:	4618      	mov	r0, r3
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80046b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	461a      	mov	r2, r3
 80046c0:	21a5      	movs	r1, #165	@ 0xa5
 80046c2:	f001 ff21 	bl	8006508 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80046c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046d0:	3b01      	subs	r3, #1
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	f023 0307 	bic.w	r3, r3, #7
 80046de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00b      	beq.n	8004702 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	617b      	str	r3, [r7, #20]
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	e7fd      	b.n	80046fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01f      	beq.n	8004748 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004708:	2300      	movs	r3, #0
 800470a:	61fb      	str	r3, [r7, #28]
 800470c:	e012      	b.n	8004734 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	4413      	add	r3, r2
 8004714:	7819      	ldrb	r1, [r3, #0]
 8004716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	4413      	add	r3, r2
 800471c:	3334      	adds	r3, #52	@ 0x34
 800471e:	460a      	mov	r2, r1
 8004720:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	4413      	add	r3, r2
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d006      	beq.n	800473c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	3301      	adds	r3, #1
 8004732:	61fb      	str	r3, [r7, #28]
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	2b0f      	cmp	r3, #15
 8004738:	d9e9      	bls.n	800470e <prvInitialiseNewTask+0x66>
 800473a:	e000      	b.n	800473e <prvInitialiseNewTask+0x96>
			{
				break;
 800473c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800473e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004746:	e003      	b.n	8004750 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004752:	2b37      	cmp	r3, #55	@ 0x37
 8004754:	d901      	bls.n	800475a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004756:	2337      	movs	r3, #55	@ 0x37
 8004758:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800475a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800475e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004762:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004764:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004768:	2200      	movs	r2, #0
 800476a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800476c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476e:	3304      	adds	r3, #4
 8004770:	4618      	mov	r0, r3
 8004772:	f7fe fdf5 	bl	8003360 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004778:	3318      	adds	r3, #24
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe fdf0 	bl	8003360 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004784:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004788:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800478c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004794:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004798:	2200      	movs	r2, #0
 800479a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800479e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	3354      	adds	r3, #84	@ 0x54
 80047aa:	224c      	movs	r2, #76	@ 0x4c
 80047ac:	2100      	movs	r1, #0
 80047ae:	4618      	mov	r0, r3
 80047b0:	f001 feaa 	bl	8006508 <memset>
 80047b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b6:	4a0d      	ldr	r2, [pc, #52]	@ (80047ec <prvInitialiseNewTask+0x144>)
 80047b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80047ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047bc:	4a0c      	ldr	r2, [pc, #48]	@ (80047f0 <prvInitialiseNewTask+0x148>)
 80047be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c2:	4a0c      	ldr	r2, [pc, #48]	@ (80047f4 <prvInitialiseNewTask+0x14c>)
 80047c4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	68f9      	ldr	r1, [r7, #12]
 80047ca:	69b8      	ldr	r0, [r7, #24]
 80047cc:	f001 fa5a 	bl	8005c84 <pxPortInitialiseStack>
 80047d0:	4602      	mov	r2, r0
 80047d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047e2:	bf00      	nop
 80047e4:	3720      	adds	r7, #32
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20004b0c 	.word	0x20004b0c
 80047f0:	20004b74 	.word	0x20004b74
 80047f4:	20004bdc 	.word	0x20004bdc

080047f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004800:	f001 fb72 	bl	8005ee8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004804:	4b2d      	ldr	r3, [pc, #180]	@ (80048bc <prvAddNewTaskToReadyList+0xc4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3301      	adds	r3, #1
 800480a:	4a2c      	ldr	r2, [pc, #176]	@ (80048bc <prvAddNewTaskToReadyList+0xc4>)
 800480c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800480e:	4b2c      	ldr	r3, [pc, #176]	@ (80048c0 <prvAddNewTaskToReadyList+0xc8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004816:	4a2a      	ldr	r2, [pc, #168]	@ (80048c0 <prvAddNewTaskToReadyList+0xc8>)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800481c:	4b27      	ldr	r3, [pc, #156]	@ (80048bc <prvAddNewTaskToReadyList+0xc4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d110      	bne.n	8004846 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004824:	f000 fc2e 	bl	8005084 <prvInitialiseTaskLists>
 8004828:	e00d      	b.n	8004846 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800482a:	4b26      	ldr	r3, [pc, #152]	@ (80048c4 <prvAddNewTaskToReadyList+0xcc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004832:	4b23      	ldr	r3, [pc, #140]	@ (80048c0 <prvAddNewTaskToReadyList+0xc8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483c:	429a      	cmp	r2, r3
 800483e:	d802      	bhi.n	8004846 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004840:	4a1f      	ldr	r2, [pc, #124]	@ (80048c0 <prvAddNewTaskToReadyList+0xc8>)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004846:	4b20      	ldr	r3, [pc, #128]	@ (80048c8 <prvAddNewTaskToReadyList+0xd0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3301      	adds	r3, #1
 800484c:	4a1e      	ldr	r2, [pc, #120]	@ (80048c8 <prvAddNewTaskToReadyList+0xd0>)
 800484e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004850:	4b1d      	ldr	r3, [pc, #116]	@ (80048c8 <prvAddNewTaskToReadyList+0xd0>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800485c:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <prvAddNewTaskToReadyList+0xd4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d903      	bls.n	800486c <prvAddNewTaskToReadyList+0x74>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004868:	4a18      	ldr	r2, [pc, #96]	@ (80048cc <prvAddNewTaskToReadyList+0xd4>)
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4a15      	ldr	r2, [pc, #84]	@ (80048d0 <prvAddNewTaskToReadyList+0xd8>)
 800487a:	441a      	add	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3304      	adds	r3, #4
 8004880:	4619      	mov	r1, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f7fe fd79 	bl	800337a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004888:	f001 fb60 	bl	8005f4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800488c:	4b0d      	ldr	r3, [pc, #52]	@ (80048c4 <prvAddNewTaskToReadyList+0xcc>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00e      	beq.n	80048b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004894:	4b0a      	ldr	r3, [pc, #40]	@ (80048c0 <prvAddNewTaskToReadyList+0xc8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489e:	429a      	cmp	r2, r3
 80048a0:	d207      	bcs.n	80048b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048a2:	4b0c      	ldr	r3, [pc, #48]	@ (80048d4 <prvAddNewTaskToReadyList+0xdc>)
 80048a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000d8c 	.word	0x20000d8c
 80048c0:	200008b8 	.word	0x200008b8
 80048c4:	20000d98 	.word	0x20000d98
 80048c8:	20000da8 	.word	0x20000da8
 80048cc:	20000d94 	.word	0x20000d94
 80048d0:	200008bc 	.word	0x200008bc
 80048d4:	e000ed04 	.word	0xe000ed04

080048d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d018      	beq.n	800491c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048ea:	4b14      	ldr	r3, [pc, #80]	@ (800493c <vTaskDelay+0x64>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00b      	beq.n	800490a <vTaskDelay+0x32>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	60bb      	str	r3, [r7, #8]
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	e7fd      	b.n	8004906 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800490a:	f000 f88b 	bl	8004a24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800490e:	2100      	movs	r1, #0
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fe09 	bl	8005528 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004916:	f000 f893 	bl	8004a40 <xTaskResumeAll>
 800491a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d107      	bne.n	8004932 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004922:	4b07      	ldr	r3, [pc, #28]	@ (8004940 <vTaskDelay+0x68>)
 8004924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004932:	bf00      	nop
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20000db4 	.word	0x20000db4
 8004940:	e000ed04 	.word	0xe000ed04

08004944 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	@ 0x28
 8004948:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800494a:	2300      	movs	r3, #0
 800494c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800494e:	2300      	movs	r3, #0
 8004950:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004952:	463a      	mov	r2, r7
 8004954:	1d39      	adds	r1, r7, #4
 8004956:	f107 0308 	add.w	r3, r7, #8
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe fcac 	bl	80032b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	9202      	str	r2, [sp, #8]
 8004968:	9301      	str	r3, [sp, #4]
 800496a:	2300      	movs	r3, #0
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	2300      	movs	r3, #0
 8004970:	460a      	mov	r2, r1
 8004972:	4924      	ldr	r1, [pc, #144]	@ (8004a04 <vTaskStartScheduler+0xc0>)
 8004974:	4824      	ldr	r0, [pc, #144]	@ (8004a08 <vTaskStartScheduler+0xc4>)
 8004976:	f7ff fdf1 	bl	800455c <xTaskCreateStatic>
 800497a:	4603      	mov	r3, r0
 800497c:	4a23      	ldr	r2, [pc, #140]	@ (8004a0c <vTaskStartScheduler+0xc8>)
 800497e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004980:	4b22      	ldr	r3, [pc, #136]	@ (8004a0c <vTaskStartScheduler+0xc8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004988:	2301      	movs	r3, #1
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	e001      	b.n	8004992 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d102      	bne.n	800499e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004998:	f000 fe1a 	bl	80055d0 <xTimerCreateTimerTask>
 800499c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d11b      	bne.n	80049dc <vTaskStartScheduler+0x98>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	613b      	str	r3, [r7, #16]
}
 80049b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80049b8:	4b15      	ldr	r3, [pc, #84]	@ (8004a10 <vTaskStartScheduler+0xcc>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3354      	adds	r3, #84	@ 0x54
 80049be:	4a15      	ldr	r2, [pc, #84]	@ (8004a14 <vTaskStartScheduler+0xd0>)
 80049c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049c2:	4b15      	ldr	r3, [pc, #84]	@ (8004a18 <vTaskStartScheduler+0xd4>)
 80049c4:	f04f 32ff 	mov.w	r2, #4294967295
 80049c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049ca:	4b14      	ldr	r3, [pc, #80]	@ (8004a1c <vTaskStartScheduler+0xd8>)
 80049cc:	2201      	movs	r2, #1
 80049ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049d0:	4b13      	ldr	r3, [pc, #76]	@ (8004a20 <vTaskStartScheduler+0xdc>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049d6:	f001 f9e3 	bl	8005da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049da:	e00f      	b.n	80049fc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e2:	d10b      	bne.n	80049fc <vTaskStartScheduler+0xb8>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	60fb      	str	r3, [r7, #12]
}
 80049f6:	bf00      	nop
 80049f8:	bf00      	nop
 80049fa:	e7fd      	b.n	80049f8 <vTaskStartScheduler+0xb4>
}
 80049fc:	bf00      	nop
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	0800695c 	.word	0x0800695c
 8004a08:	08005055 	.word	0x08005055
 8004a0c:	20000db0 	.word	0x20000db0
 8004a10:	200008b8 	.word	0x200008b8
 8004a14:	20000010 	.word	0x20000010
 8004a18:	20000dac 	.word	0x20000dac
 8004a1c:	20000d98 	.word	0x20000d98
 8004a20:	20000d90 	.word	0x20000d90

08004a24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a28:	4b04      	ldr	r3, [pc, #16]	@ (8004a3c <vTaskSuspendAll+0x18>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	4a03      	ldr	r2, [pc, #12]	@ (8004a3c <vTaskSuspendAll+0x18>)
 8004a30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a32:	bf00      	nop
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	20000db4 	.word	0x20000db4

08004a40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a4e:	4b42      	ldr	r3, [pc, #264]	@ (8004b58 <xTaskResumeAll+0x118>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10b      	bne.n	8004a6e <xTaskResumeAll+0x2e>
	__asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	603b      	str	r3, [r7, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	bf00      	nop
 8004a6c:	e7fd      	b.n	8004a6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a6e:	f001 fa3b 	bl	8005ee8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a72:	4b39      	ldr	r3, [pc, #228]	@ (8004b58 <xTaskResumeAll+0x118>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	4a37      	ldr	r2, [pc, #220]	@ (8004b58 <xTaskResumeAll+0x118>)
 8004a7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a7c:	4b36      	ldr	r3, [pc, #216]	@ (8004b58 <xTaskResumeAll+0x118>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d162      	bne.n	8004b4a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a84:	4b35      	ldr	r3, [pc, #212]	@ (8004b5c <xTaskResumeAll+0x11c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d05e      	beq.n	8004b4a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a8c:	e02f      	b.n	8004aee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a8e:	4b34      	ldr	r3, [pc, #208]	@ (8004b60 <xTaskResumeAll+0x120>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3318      	adds	r3, #24
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fe fcca 	bl	8003434 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fe fcc5 	bl	8003434 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aae:	4b2d      	ldr	r3, [pc, #180]	@ (8004b64 <xTaskResumeAll+0x124>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d903      	bls.n	8004abe <xTaskResumeAll+0x7e>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aba:	4a2a      	ldr	r2, [pc, #168]	@ (8004b64 <xTaskResumeAll+0x124>)
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4a27      	ldr	r2, [pc, #156]	@ (8004b68 <xTaskResumeAll+0x128>)
 8004acc:	441a      	add	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	f7fe fc50 	bl	800337a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ade:	4b23      	ldr	r3, [pc, #140]	@ (8004b6c <xTaskResumeAll+0x12c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d302      	bcc.n	8004aee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004ae8:	4b21      	ldr	r3, [pc, #132]	@ (8004b70 <xTaskResumeAll+0x130>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aee:	4b1c      	ldr	r3, [pc, #112]	@ (8004b60 <xTaskResumeAll+0x120>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1cb      	bne.n	8004a8e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004afc:	f000 fb66 	bl	80051cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b00:	4b1c      	ldr	r3, [pc, #112]	@ (8004b74 <xTaskResumeAll+0x134>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d010      	beq.n	8004b2e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b0c:	f000 f846 	bl	8004b9c <xTaskIncrementTick>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004b16:	4b16      	ldr	r3, [pc, #88]	@ (8004b70 <xTaskResumeAll+0x130>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1f1      	bne.n	8004b0c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004b28:	4b12      	ldr	r3, [pc, #72]	@ (8004b74 <xTaskResumeAll+0x134>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b2e:	4b10      	ldr	r3, [pc, #64]	@ (8004b70 <xTaskResumeAll+0x130>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b36:	2301      	movs	r3, #1
 8004b38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004b78 <xTaskResumeAll+0x138>)
 8004b3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b4a:	f001 f9ff 	bl	8005f4c <vPortExitCritical>

	return xAlreadyYielded;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	20000db4 	.word	0x20000db4
 8004b5c:	20000d8c 	.word	0x20000d8c
 8004b60:	20000d4c 	.word	0x20000d4c
 8004b64:	20000d94 	.word	0x20000d94
 8004b68:	200008bc 	.word	0x200008bc
 8004b6c:	200008b8 	.word	0x200008b8
 8004b70:	20000da0 	.word	0x20000da0
 8004b74:	20000d9c 	.word	0x20000d9c
 8004b78:	e000ed04 	.word	0xe000ed04

08004b7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b82:	4b05      	ldr	r3, [pc, #20]	@ (8004b98 <xTaskGetTickCount+0x1c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b88:	687b      	ldr	r3, [r7, #4]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000d90 	.word	0x20000d90

08004b9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba6:	4b4f      	ldr	r3, [pc, #316]	@ (8004ce4 <xTaskIncrementTick+0x148>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f040 8090 	bne.w	8004cd0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8004ce8 <xTaskIncrementTick+0x14c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bb8:	4a4b      	ldr	r2, [pc, #300]	@ (8004ce8 <xTaskIncrementTick+0x14c>)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d121      	bne.n	8004c08 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bc4:	4b49      	ldr	r3, [pc, #292]	@ (8004cec <xTaskIncrementTick+0x150>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	603b      	str	r3, [r7, #0]
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	e7fd      	b.n	8004be2 <xTaskIncrementTick+0x46>
 8004be6:	4b41      	ldr	r3, [pc, #260]	@ (8004cec <xTaskIncrementTick+0x150>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	4b40      	ldr	r3, [pc, #256]	@ (8004cf0 <xTaskIncrementTick+0x154>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a3e      	ldr	r2, [pc, #248]	@ (8004cec <xTaskIncrementTick+0x150>)
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	4a3e      	ldr	r2, [pc, #248]	@ (8004cf0 <xTaskIncrementTick+0x154>)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf4 <xTaskIncrementTick+0x158>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	4a3c      	ldr	r2, [pc, #240]	@ (8004cf4 <xTaskIncrementTick+0x158>)
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	f000 fae2 	bl	80051cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c08:	4b3b      	ldr	r3, [pc, #236]	@ (8004cf8 <xTaskIncrementTick+0x15c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d349      	bcc.n	8004ca6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c12:	4b36      	ldr	r3, [pc, #216]	@ (8004cec <xTaskIncrementTick+0x150>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d104      	bne.n	8004c26 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1c:	4b36      	ldr	r3, [pc, #216]	@ (8004cf8 <xTaskIncrementTick+0x15c>)
 8004c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c22:	601a      	str	r2, [r3, #0]
					break;
 8004c24:	e03f      	b.n	8004ca6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c26:	4b31      	ldr	r3, [pc, #196]	@ (8004cec <xTaskIncrementTick+0x150>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d203      	bcs.n	8004c46 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c3e:	4a2e      	ldr	r2, [pc, #184]	@ (8004cf8 <xTaskIncrementTick+0x15c>)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c44:	e02f      	b.n	8004ca6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe fbf2 	bl	8003434 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d004      	beq.n	8004c62 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	3318      	adds	r3, #24
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fe fbe9 	bl	8003434 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c66:	4b25      	ldr	r3, [pc, #148]	@ (8004cfc <xTaskIncrementTick+0x160>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d903      	bls.n	8004c76 <xTaskIncrementTick+0xda>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c72:	4a22      	ldr	r2, [pc, #136]	@ (8004cfc <xTaskIncrementTick+0x160>)
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4a1f      	ldr	r2, [pc, #124]	@ (8004d00 <xTaskIncrementTick+0x164>)
 8004c84:	441a      	add	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	f7fe fb74 	bl	800337a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c96:	4b1b      	ldr	r3, [pc, #108]	@ (8004d04 <xTaskIncrementTick+0x168>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d3b8      	bcc.n	8004c12 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ca4:	e7b5      	b.n	8004c12 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ca6:	4b17      	ldr	r3, [pc, #92]	@ (8004d04 <xTaskIncrementTick+0x168>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cac:	4914      	ldr	r1, [pc, #80]	@ (8004d00 <xTaskIncrementTick+0x164>)
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d901      	bls.n	8004cc2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004cc2:	4b11      	ldr	r3, [pc, #68]	@ (8004d08 <xTaskIncrementTick+0x16c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d007      	beq.n	8004cda <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	e004      	b.n	8004cda <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8004d0c <xTaskIncrementTick+0x170>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8004d0c <xTaskIncrementTick+0x170>)
 8004cd8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004cda:	697b      	ldr	r3, [r7, #20]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20000db4 	.word	0x20000db4
 8004ce8:	20000d90 	.word	0x20000d90
 8004cec:	20000d44 	.word	0x20000d44
 8004cf0:	20000d48 	.word	0x20000d48
 8004cf4:	20000da4 	.word	0x20000da4
 8004cf8:	20000dac 	.word	0x20000dac
 8004cfc:	20000d94 	.word	0x20000d94
 8004d00:	200008bc 	.word	0x200008bc
 8004d04:	200008b8 	.word	0x200008b8
 8004d08:	20000da0 	.word	0x20000da0
 8004d0c:	20000d9c 	.word	0x20000d9c

08004d10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d16:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc4 <vTaskSwitchContext+0xb4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc8 <vTaskSwitchContext+0xb8>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d24:	e047      	b.n	8004db6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004d26:	4b28      	ldr	r3, [pc, #160]	@ (8004dc8 <vTaskSwitchContext+0xb8>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d2c:	4b27      	ldr	r3, [pc, #156]	@ (8004dcc <vTaskSwitchContext+0xbc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	e011      	b.n	8004d58 <vTaskSwitchContext+0x48>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10b      	bne.n	8004d52 <vTaskSwitchContext+0x42>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	607b      	str	r3, [r7, #4]
}
 8004d4c:	bf00      	nop
 8004d4e:	bf00      	nop
 8004d50:	e7fd      	b.n	8004d4e <vTaskSwitchContext+0x3e>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	491d      	ldr	r1, [pc, #116]	@ (8004dd0 <vTaskSwitchContext+0xc0>)
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0e3      	beq.n	8004d34 <vTaskSwitchContext+0x24>
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4a16      	ldr	r2, [pc, #88]	@ (8004dd0 <vTaskSwitchContext+0xc0>)
 8004d78:	4413      	add	r3, r2
 8004d7a:	60bb      	str	r3, [r7, #8]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	605a      	str	r2, [r3, #4]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	3308      	adds	r3, #8
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d104      	bne.n	8004d9c <vTaskSwitchContext+0x8c>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	605a      	str	r2, [r3, #4]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd4 <vTaskSwitchContext+0xc4>)
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	4a09      	ldr	r2, [pc, #36]	@ (8004dcc <vTaskSwitchContext+0xbc>)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004dac:	4b09      	ldr	r3, [pc, #36]	@ (8004dd4 <vTaskSwitchContext+0xc4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3354      	adds	r3, #84	@ 0x54
 8004db2:	4a09      	ldr	r2, [pc, #36]	@ (8004dd8 <vTaskSwitchContext+0xc8>)
 8004db4:	6013      	str	r3, [r2, #0]
}
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	20000db4 	.word	0x20000db4
 8004dc8:	20000da0 	.word	0x20000da0
 8004dcc:	20000d94 	.word	0x20000d94
 8004dd0:	200008bc 	.word	0x200008bc
 8004dd4:	200008b8 	.word	0x200008b8
 8004dd8:	20000010 	.word	0x20000010

08004ddc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10b      	bne.n	8004e04 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	60fb      	str	r3, [r7, #12]
}
 8004dfe:	bf00      	nop
 8004e00:	bf00      	nop
 8004e02:	e7fd      	b.n	8004e00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e04:	4b07      	ldr	r3, [pc, #28]	@ (8004e24 <vTaskPlaceOnEventList+0x48>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3318      	adds	r3, #24
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7fe fad8 	bl	80033c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e12:	2101      	movs	r1, #1
 8004e14:	6838      	ldr	r0, [r7, #0]
 8004e16:	f000 fb87 	bl	8005528 <prvAddCurrentTaskToDelayedList>
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	200008b8 	.word	0x200008b8

08004e28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10b      	bne.n	8004e52 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	617b      	str	r3, [r7, #20]
}
 8004e4c:	bf00      	nop
 8004e4e:	bf00      	nop
 8004e50:	e7fd      	b.n	8004e4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e52:	4b0a      	ldr	r3, [pc, #40]	@ (8004e7c <vTaskPlaceOnEventListRestricted+0x54>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3318      	adds	r3, #24
 8004e58:	4619      	mov	r1, r3
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7fe fa8d 	bl	800337a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004e66:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	68b8      	ldr	r0, [r7, #8]
 8004e70:	f000 fb5a 	bl	8005528 <prvAddCurrentTaskToDelayedList>
	}
 8004e74:	bf00      	nop
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	200008b8 	.word	0x200008b8

08004e80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10b      	bne.n	8004eae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	60fb      	str	r3, [r7, #12]
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	e7fd      	b.n	8004eaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	3318      	adds	r3, #24
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe fabe 	bl	8003434 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f30 <xTaskRemoveFromEventList+0xb0>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d11d      	bne.n	8004efc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fe fab5 	bl	8003434 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ece:	4b19      	ldr	r3, [pc, #100]	@ (8004f34 <xTaskRemoveFromEventList+0xb4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d903      	bls.n	8004ede <xTaskRemoveFromEventList+0x5e>
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eda:	4a16      	ldr	r2, [pc, #88]	@ (8004f34 <xTaskRemoveFromEventList+0xb4>)
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4a13      	ldr	r2, [pc, #76]	@ (8004f38 <xTaskRemoveFromEventList+0xb8>)
 8004eec:	441a      	add	r2, r3
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	f7fe fa40 	bl	800337a <vListInsertEnd>
 8004efa:	e005      	b.n	8004f08 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	3318      	adds	r3, #24
 8004f00:	4619      	mov	r1, r3
 8004f02:	480e      	ldr	r0, [pc, #56]	@ (8004f3c <xTaskRemoveFromEventList+0xbc>)
 8004f04:	f7fe fa39 	bl	800337a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f40 <xTaskRemoveFromEventList+0xc0>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d905      	bls.n	8004f22 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f16:	2301      	movs	r3, #1
 8004f18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f44 <xTaskRemoveFromEventList+0xc4>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	e001      	b.n	8004f26 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f26:	697b      	ldr	r3, [r7, #20]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	20000db4 	.word	0x20000db4
 8004f34:	20000d94 	.word	0x20000d94
 8004f38:	200008bc 	.word	0x200008bc
 8004f3c:	20000d4c 	.word	0x20000d4c
 8004f40:	200008b8 	.word	0x200008b8
 8004f44:	20000da0 	.word	0x20000da0

08004f48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f50:	4b06      	ldr	r3, [pc, #24]	@ (8004f6c <vTaskInternalSetTimeOutState+0x24>)
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f58:	4b05      	ldr	r3, [pc, #20]	@ (8004f70 <vTaskInternalSetTimeOutState+0x28>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	605a      	str	r2, [r3, #4]
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	20000da4 	.word	0x20000da4
 8004f70:	20000d90 	.word	0x20000d90

08004f74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b088      	sub	sp, #32
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10b      	bne.n	8004f9c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	613b      	str	r3, [r7, #16]
}
 8004f96:	bf00      	nop
 8004f98:	bf00      	nop
 8004f9a:	e7fd      	b.n	8004f98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10b      	bne.n	8004fba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	60fb      	str	r3, [r7, #12]
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	e7fd      	b.n	8004fb6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004fba:	f000 ff95 	bl	8005ee8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8005034 <xTaskCheckForTimeOut+0xc0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd6:	d102      	bne.n	8004fde <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61fb      	str	r3, [r7, #28]
 8004fdc:	e023      	b.n	8005026 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4b15      	ldr	r3, [pc, #84]	@ (8005038 <xTaskCheckForTimeOut+0xc4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d007      	beq.n	8004ffa <xTaskCheckForTimeOut+0x86>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d302      	bcc.n	8004ffa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	61fb      	str	r3, [r7, #28]
 8004ff8:	e015      	b.n	8005026 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	429a      	cmp	r2, r3
 8005002:	d20b      	bcs.n	800501c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	1ad2      	subs	r2, r2, r3
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff ff99 	bl	8004f48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
 800501a:	e004      	b.n	8005026 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005022:	2301      	movs	r3, #1
 8005024:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005026:	f000 ff91 	bl	8005f4c <vPortExitCritical>

	return xReturn;
 800502a:	69fb      	ldr	r3, [r7, #28]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3720      	adds	r7, #32
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20000d90 	.word	0x20000d90
 8005038:	20000da4 	.word	0x20000da4

0800503c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005040:	4b03      	ldr	r3, [pc, #12]	@ (8005050 <vTaskMissedYield+0x14>)
 8005042:	2201      	movs	r2, #1
 8005044:	601a      	str	r2, [r3, #0]
}
 8005046:	bf00      	nop
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	20000da0 	.word	0x20000da0

08005054 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800505c:	f000 f852 	bl	8005104 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005060:	4b06      	ldr	r3, [pc, #24]	@ (800507c <prvIdleTask+0x28>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d9f9      	bls.n	800505c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005068:	4b05      	ldr	r3, [pc, #20]	@ (8005080 <prvIdleTask+0x2c>)
 800506a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005078:	e7f0      	b.n	800505c <prvIdleTask+0x8>
 800507a:	bf00      	nop
 800507c:	200008bc 	.word	0x200008bc
 8005080:	e000ed04 	.word	0xe000ed04

08005084 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800508a:	2300      	movs	r3, #0
 800508c:	607b      	str	r3, [r7, #4]
 800508e:	e00c      	b.n	80050aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4a12      	ldr	r2, [pc, #72]	@ (80050e4 <prvInitialiseTaskLists+0x60>)
 800509c:	4413      	add	r3, r2
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fe f93e 	bl	8003320 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3301      	adds	r3, #1
 80050a8:	607b      	str	r3, [r7, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b37      	cmp	r3, #55	@ 0x37
 80050ae:	d9ef      	bls.n	8005090 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050b0:	480d      	ldr	r0, [pc, #52]	@ (80050e8 <prvInitialiseTaskLists+0x64>)
 80050b2:	f7fe f935 	bl	8003320 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050b6:	480d      	ldr	r0, [pc, #52]	@ (80050ec <prvInitialiseTaskLists+0x68>)
 80050b8:	f7fe f932 	bl	8003320 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050bc:	480c      	ldr	r0, [pc, #48]	@ (80050f0 <prvInitialiseTaskLists+0x6c>)
 80050be:	f7fe f92f 	bl	8003320 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050c2:	480c      	ldr	r0, [pc, #48]	@ (80050f4 <prvInitialiseTaskLists+0x70>)
 80050c4:	f7fe f92c 	bl	8003320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050c8:	480b      	ldr	r0, [pc, #44]	@ (80050f8 <prvInitialiseTaskLists+0x74>)
 80050ca:	f7fe f929 	bl	8003320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050ce:	4b0b      	ldr	r3, [pc, #44]	@ (80050fc <prvInitialiseTaskLists+0x78>)
 80050d0:	4a05      	ldr	r2, [pc, #20]	@ (80050e8 <prvInitialiseTaskLists+0x64>)
 80050d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005100 <prvInitialiseTaskLists+0x7c>)
 80050d6:	4a05      	ldr	r2, [pc, #20]	@ (80050ec <prvInitialiseTaskLists+0x68>)
 80050d8:	601a      	str	r2, [r3, #0]
}
 80050da:	bf00      	nop
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	200008bc 	.word	0x200008bc
 80050e8:	20000d1c 	.word	0x20000d1c
 80050ec:	20000d30 	.word	0x20000d30
 80050f0:	20000d4c 	.word	0x20000d4c
 80050f4:	20000d60 	.word	0x20000d60
 80050f8:	20000d78 	.word	0x20000d78
 80050fc:	20000d44 	.word	0x20000d44
 8005100:	20000d48 	.word	0x20000d48

08005104 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800510a:	e019      	b.n	8005140 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800510c:	f000 feec 	bl	8005ee8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005110:	4b10      	ldr	r3, [pc, #64]	@ (8005154 <prvCheckTasksWaitingTermination+0x50>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	4618      	mov	r0, r3
 800511e:	f7fe f989 	bl	8003434 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005122:	4b0d      	ldr	r3, [pc, #52]	@ (8005158 <prvCheckTasksWaitingTermination+0x54>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3b01      	subs	r3, #1
 8005128:	4a0b      	ldr	r2, [pc, #44]	@ (8005158 <prvCheckTasksWaitingTermination+0x54>)
 800512a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800512c:	4b0b      	ldr	r3, [pc, #44]	@ (800515c <prvCheckTasksWaitingTermination+0x58>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3b01      	subs	r3, #1
 8005132:	4a0a      	ldr	r2, [pc, #40]	@ (800515c <prvCheckTasksWaitingTermination+0x58>)
 8005134:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005136:	f000 ff09 	bl	8005f4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f810 	bl	8005160 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005140:	4b06      	ldr	r3, [pc, #24]	@ (800515c <prvCheckTasksWaitingTermination+0x58>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e1      	bne.n	800510c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005148:	bf00      	nop
 800514a:	bf00      	nop
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000d60 	.word	0x20000d60
 8005158:	20000d8c 	.word	0x20000d8c
 800515c:	20000d74 	.word	0x20000d74

08005160 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3354      	adds	r3, #84	@ 0x54
 800516c:	4618      	mov	r0, r3
 800516e:	f001 f9d3 	bl	8006518 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005178:	2b00      	cmp	r3, #0
 800517a:	d108      	bne.n	800518e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005180:	4618      	mov	r0, r3
 8005182:	f001 f8a1 	bl	80062c8 <vPortFree>
				vPortFree( pxTCB );
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f001 f89e 	bl	80062c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800518c:	e019      	b.n	80051c2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005194:	2b01      	cmp	r3, #1
 8005196:	d103      	bne.n	80051a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 f895 	bl	80062c8 <vPortFree>
	}
 800519e:	e010      	b.n	80051c2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d00b      	beq.n	80051c2 <prvDeleteTCB+0x62>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	60fb      	str	r3, [r7, #12]
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	e7fd      	b.n	80051be <prvDeleteTCB+0x5e>
	}
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
	...

080051cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005204 <prvResetNextTaskUnblockTime+0x38>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005208 <prvResetNextTaskUnblockTime+0x3c>)
 80051de:	f04f 32ff 	mov.w	r2, #4294967295
 80051e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051e4:	e008      	b.n	80051f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e6:	4b07      	ldr	r3, [pc, #28]	@ (8005204 <prvResetNextTaskUnblockTime+0x38>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	4a04      	ldr	r2, [pc, #16]	@ (8005208 <prvResetNextTaskUnblockTime+0x3c>)
 80051f6:	6013      	str	r3, [r2, #0]
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	20000d44 	.word	0x20000d44
 8005208:	20000dac 	.word	0x20000dac

0800520c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005212:	4b0b      	ldr	r3, [pc, #44]	@ (8005240 <xTaskGetSchedulerState+0x34>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d102      	bne.n	8005220 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800521a:	2301      	movs	r3, #1
 800521c:	607b      	str	r3, [r7, #4]
 800521e:	e008      	b.n	8005232 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005220:	4b08      	ldr	r3, [pc, #32]	@ (8005244 <xTaskGetSchedulerState+0x38>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005228:	2302      	movs	r3, #2
 800522a:	607b      	str	r3, [r7, #4]
 800522c:	e001      	b.n	8005232 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800522e:	2300      	movs	r3, #0
 8005230:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005232:	687b      	ldr	r3, [r7, #4]
	}
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	20000d98 	.word	0x20000d98
 8005244:	20000db4 	.word	0x20000db4

08005248 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d051      	beq.n	8005302 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005262:	4b2a      	ldr	r3, [pc, #168]	@ (800530c <xTaskPriorityInherit+0xc4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005268:	429a      	cmp	r2, r3
 800526a:	d241      	bcs.n	80052f0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	2b00      	cmp	r3, #0
 8005272:	db06      	blt.n	8005282 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005274:	4b25      	ldr	r3, [pc, #148]	@ (800530c <xTaskPriorityInherit+0xc4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	6959      	ldr	r1, [r3, #20]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4a1f      	ldr	r2, [pc, #124]	@ (8005310 <xTaskPriorityInherit+0xc8>)
 8005294:	4413      	add	r3, r2
 8005296:	4299      	cmp	r1, r3
 8005298:	d122      	bne.n	80052e0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	3304      	adds	r3, #4
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fe f8c8 	bl	8003434 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052a4:	4b19      	ldr	r3, [pc, #100]	@ (800530c <xTaskPriorityInherit+0xc4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b2:	4b18      	ldr	r3, [pc, #96]	@ (8005314 <xTaskPriorityInherit+0xcc>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d903      	bls.n	80052c2 <xTaskPriorityInherit+0x7a>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052be:	4a15      	ldr	r2, [pc, #84]	@ (8005314 <xTaskPriorityInherit+0xcc>)
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4a10      	ldr	r2, [pc, #64]	@ (8005310 <xTaskPriorityInherit+0xc8>)
 80052d0:	441a      	add	r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	3304      	adds	r3, #4
 80052d6:	4619      	mov	r1, r3
 80052d8:	4610      	mov	r0, r2
 80052da:	f7fe f84e 	bl	800337a <vListInsertEnd>
 80052de:	e004      	b.n	80052ea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052e0:	4b0a      	ldr	r3, [pc, #40]	@ (800530c <xTaskPriorityInherit+0xc4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80052ea:	2301      	movs	r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	e008      	b.n	8005302 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052f4:	4b05      	ldr	r3, [pc, #20]	@ (800530c <xTaskPriorityInherit+0xc4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d201      	bcs.n	8005302 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80052fe:	2301      	movs	r3, #1
 8005300:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005302:	68fb      	ldr	r3, [r7, #12]
	}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	200008b8 	.word	0x200008b8
 8005310:	200008bc 	.word	0x200008bc
 8005314:	20000d94 	.word	0x20000d94

08005318 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d058      	beq.n	80053e0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800532e:	4b2f      	ldr	r3, [pc, #188]	@ (80053ec <xTaskPriorityDisinherit+0xd4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	429a      	cmp	r2, r3
 8005336:	d00b      	beq.n	8005350 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	60fb      	str	r3, [r7, #12]
}
 800534a:	bf00      	nop
 800534c:	bf00      	nop
 800534e:	e7fd      	b.n	800534c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10b      	bne.n	8005370 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	60bb      	str	r3, [r7, #8]
}
 800536a:	bf00      	nop
 800536c:	bf00      	nop
 800536e:	e7fd      	b.n	800536c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005374:	1e5a      	subs	r2, r3, #1
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005382:	429a      	cmp	r2, r3
 8005384:	d02c      	beq.n	80053e0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800538a:	2b00      	cmp	r3, #0
 800538c:	d128      	bne.n	80053e0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	3304      	adds	r3, #4
 8005392:	4618      	mov	r0, r3
 8005394:	f7fe f84e 	bl	8003434 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b0:	4b0f      	ldr	r3, [pc, #60]	@ (80053f0 <xTaskPriorityDisinherit+0xd8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d903      	bls.n	80053c0 <xTaskPriorityDisinherit+0xa8>
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053bc:	4a0c      	ldr	r2, [pc, #48]	@ (80053f0 <xTaskPriorityDisinherit+0xd8>)
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4a09      	ldr	r2, [pc, #36]	@ (80053f4 <xTaskPriorityDisinherit+0xdc>)
 80053ce:	441a      	add	r2, r3
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	3304      	adds	r3, #4
 80053d4:	4619      	mov	r1, r3
 80053d6:	4610      	mov	r0, r2
 80053d8:	f7fd ffcf 	bl	800337a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80053dc:	2301      	movs	r3, #1
 80053de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053e0:	697b      	ldr	r3, [r7, #20]
	}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	200008b8 	.word	0x200008b8
 80053f0:	20000d94 	.word	0x20000d94
 80053f4:	200008bc 	.word	0x200008bc

080053f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005406:	2301      	movs	r3, #1
 8005408:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d06c      	beq.n	80054ea <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10b      	bne.n	8005430 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	60fb      	str	r3, [r7, #12]
}
 800542a:	bf00      	nop
 800542c:	bf00      	nop
 800542e:	e7fd      	b.n	800542c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d902      	bls.n	8005440 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	e002      	b.n	8005446 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005444:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	429a      	cmp	r2, r3
 800544e:	d04c      	beq.n	80054ea <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	429a      	cmp	r2, r3
 8005458:	d147      	bne.n	80054ea <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800545a:	4b26      	ldr	r3, [pc, #152]	@ (80054f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	429a      	cmp	r2, r3
 8005462:	d10b      	bne.n	800547c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	60bb      	str	r3, [r7, #8]
}
 8005476:	bf00      	nop
 8005478:	bf00      	nop
 800547a:	e7fd      	b.n	8005478 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005480:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	db04      	blt.n	800549a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	6959      	ldr	r1, [r3, #20]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4a13      	ldr	r2, [pc, #76]	@ (80054f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80054aa:	4413      	add	r3, r2
 80054ac:	4299      	cmp	r1, r3
 80054ae:	d11c      	bne.n	80054ea <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fd ffbd 	bl	8003434 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054be:	4b0f      	ldr	r3, [pc, #60]	@ (80054fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d903      	bls.n	80054ce <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ca:	4a0c      	ldr	r2, [pc, #48]	@ (80054fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4a07      	ldr	r2, [pc, #28]	@ (80054f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80054dc:	441a      	add	r2, r3
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	3304      	adds	r3, #4
 80054e2:	4619      	mov	r1, r3
 80054e4:	4610      	mov	r0, r2
 80054e6:	f7fd ff48 	bl	800337a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054ea:	bf00      	nop
 80054ec:	3720      	adds	r7, #32
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	200008b8 	.word	0x200008b8
 80054f8:	200008bc 	.word	0x200008bc
 80054fc:	20000d94 	.word	0x20000d94

08005500 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005504:	4b07      	ldr	r3, [pc, #28]	@ (8005524 <pvTaskIncrementMutexHeldCount+0x24>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d004      	beq.n	8005516 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800550c:	4b05      	ldr	r3, [pc, #20]	@ (8005524 <pvTaskIncrementMutexHeldCount+0x24>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005512:	3201      	adds	r2, #1
 8005514:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005516:	4b03      	ldr	r3, [pc, #12]	@ (8005524 <pvTaskIncrementMutexHeldCount+0x24>)
 8005518:	681b      	ldr	r3, [r3, #0]
	}
 800551a:	4618      	mov	r0, r3
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	200008b8 	.word	0x200008b8

08005528 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005532:	4b21      	ldr	r3, [pc, #132]	@ (80055b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005538:	4b20      	ldr	r3, [pc, #128]	@ (80055bc <prvAddCurrentTaskToDelayedList+0x94>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3304      	adds	r3, #4
 800553e:	4618      	mov	r0, r3
 8005540:	f7fd ff78 	bl	8003434 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554a:	d10a      	bne.n	8005562 <prvAddCurrentTaskToDelayedList+0x3a>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d007      	beq.n	8005562 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005552:	4b1a      	ldr	r3, [pc, #104]	@ (80055bc <prvAddCurrentTaskToDelayedList+0x94>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3304      	adds	r3, #4
 8005558:	4619      	mov	r1, r3
 800555a:	4819      	ldr	r0, [pc, #100]	@ (80055c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800555c:	f7fd ff0d 	bl	800337a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005560:	e026      	b.n	80055b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4413      	add	r3, r2
 8005568:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800556a:	4b14      	ldr	r3, [pc, #80]	@ (80055bc <prvAddCurrentTaskToDelayedList+0x94>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	429a      	cmp	r2, r3
 8005578:	d209      	bcs.n	800558e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800557a:	4b12      	ldr	r3, [pc, #72]	@ (80055c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4b0f      	ldr	r3, [pc, #60]	@ (80055bc <prvAddCurrentTaskToDelayedList+0x94>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3304      	adds	r3, #4
 8005584:	4619      	mov	r1, r3
 8005586:	4610      	mov	r0, r2
 8005588:	f7fd ff1b 	bl	80033c2 <vListInsert>
}
 800558c:	e010      	b.n	80055b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800558e:	4b0e      	ldr	r3, [pc, #56]	@ (80055c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4b0a      	ldr	r3, [pc, #40]	@ (80055bc <prvAddCurrentTaskToDelayedList+0x94>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3304      	adds	r3, #4
 8005598:	4619      	mov	r1, r3
 800559a:	4610      	mov	r0, r2
 800559c:	f7fd ff11 	bl	80033c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055a0:	4b0a      	ldr	r3, [pc, #40]	@ (80055cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d202      	bcs.n	80055b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80055aa:	4a08      	ldr	r2, [pc, #32]	@ (80055cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	6013      	str	r3, [r2, #0]
}
 80055b0:	bf00      	nop
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20000d90 	.word	0x20000d90
 80055bc:	200008b8 	.word	0x200008b8
 80055c0:	20000d78 	.word	0x20000d78
 80055c4:	20000d48 	.word	0x20000d48
 80055c8:	20000d44 	.word	0x20000d44
 80055cc:	20000dac 	.word	0x20000dac

080055d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08a      	sub	sp, #40	@ 0x28
 80055d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80055da:	f000 fb13 	bl	8005c04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80055de:	4b1d      	ldr	r3, [pc, #116]	@ (8005654 <xTimerCreateTimerTask+0x84>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d021      	beq.n	800562a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80055ee:	1d3a      	adds	r2, r7, #4
 80055f0:	f107 0108 	add.w	r1, r7, #8
 80055f4:	f107 030c 	add.w	r3, r7, #12
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fd fe77 	bl	80032ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	9202      	str	r2, [sp, #8]
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	2302      	movs	r3, #2
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	2300      	movs	r3, #0
 800560e:	460a      	mov	r2, r1
 8005610:	4911      	ldr	r1, [pc, #68]	@ (8005658 <xTimerCreateTimerTask+0x88>)
 8005612:	4812      	ldr	r0, [pc, #72]	@ (800565c <xTimerCreateTimerTask+0x8c>)
 8005614:	f7fe ffa2 	bl	800455c <xTaskCreateStatic>
 8005618:	4603      	mov	r3, r0
 800561a:	4a11      	ldr	r2, [pc, #68]	@ (8005660 <xTimerCreateTimerTask+0x90>)
 800561c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800561e:	4b10      	ldr	r3, [pc, #64]	@ (8005660 <xTimerCreateTimerTask+0x90>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005626:	2301      	movs	r3, #1
 8005628:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10b      	bne.n	8005648 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	613b      	str	r3, [r7, #16]
}
 8005642:	bf00      	nop
 8005644:	bf00      	nop
 8005646:	e7fd      	b.n	8005644 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005648:	697b      	ldr	r3, [r7, #20]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000de8 	.word	0x20000de8
 8005658:	08006964 	.word	0x08006964
 800565c:	0800579d 	.word	0x0800579d
 8005660:	20000dec 	.word	0x20000dec

08005664 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08a      	sub	sp, #40	@ 0x28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005672:	2300      	movs	r3, #0
 8005674:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10b      	bne.n	8005694 <xTimerGenericCommand+0x30>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	623b      	str	r3, [r7, #32]
}
 800568e:	bf00      	nop
 8005690:	bf00      	nop
 8005692:	e7fd      	b.n	8005690 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005694:	4b19      	ldr	r3, [pc, #100]	@ (80056fc <xTimerGenericCommand+0x98>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d02a      	beq.n	80056f2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2b05      	cmp	r3, #5
 80056ac:	dc18      	bgt.n	80056e0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80056ae:	f7ff fdad 	bl	800520c <xTaskGetSchedulerState>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d109      	bne.n	80056cc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80056b8:	4b10      	ldr	r3, [pc, #64]	@ (80056fc <xTimerGenericCommand+0x98>)
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	f107 0110 	add.w	r1, r7, #16
 80056c0:	2300      	movs	r3, #0
 80056c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056c4:	f7fe f894 	bl	80037f0 <xQueueGenericSend>
 80056c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80056ca:	e012      	b.n	80056f2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80056cc:	4b0b      	ldr	r3, [pc, #44]	@ (80056fc <xTimerGenericCommand+0x98>)
 80056ce:	6818      	ldr	r0, [r3, #0]
 80056d0:	f107 0110 	add.w	r1, r7, #16
 80056d4:	2300      	movs	r3, #0
 80056d6:	2200      	movs	r2, #0
 80056d8:	f7fe f88a 	bl	80037f0 <xQueueGenericSend>
 80056dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80056de:	e008      	b.n	80056f2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80056e0:	4b06      	ldr	r3, [pc, #24]	@ (80056fc <xTimerGenericCommand+0x98>)
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	f107 0110 	add.w	r1, r7, #16
 80056e8:	2300      	movs	r3, #0
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	f7fe f982 	bl	80039f4 <xQueueGenericSendFromISR>
 80056f0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3728      	adds	r7, #40	@ 0x28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20000de8 	.word	0x20000de8

08005700 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af02      	add	r7, sp, #8
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800570a:	4b23      	ldr	r3, [pc, #140]	@ (8005798 <prvProcessExpiredTimer+0x98>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	3304      	adds	r3, #4
 8005718:	4618      	mov	r0, r3
 800571a:	f7fd fe8b 	bl	8003434 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	d023      	beq.n	8005774 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	699a      	ldr	r2, [r3, #24]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	18d1      	adds	r1, r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	6978      	ldr	r0, [r7, #20]
 800573a:	f000 f8d5 	bl	80058e8 <prvInsertTimerInActiveList>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d020      	beq.n	8005786 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005744:	2300      	movs	r3, #0
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	2300      	movs	r3, #0
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	2100      	movs	r1, #0
 800574e:	6978      	ldr	r0, [r7, #20]
 8005750:	f7ff ff88 	bl	8005664 <xTimerGenericCommand>
 8005754:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d114      	bne.n	8005786 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	60fb      	str	r3, [r7, #12]
}
 800576e:	bf00      	nop
 8005770:	bf00      	nop
 8005772:	e7fd      	b.n	8005770 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800577a:	f023 0301 	bic.w	r3, r3, #1
 800577e:	b2da      	uxtb	r2, r3
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	6978      	ldr	r0, [r7, #20]
 800578c:	4798      	blx	r3
}
 800578e:	bf00      	nop
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20000de0 	.word	0x20000de0

0800579c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057a4:	f107 0308 	add.w	r3, r7, #8
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 f859 	bl	8005860 <prvGetNextExpireTime>
 80057ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4619      	mov	r1, r3
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f805 	bl	80057c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80057ba:	f000 f8d7 	bl	800596c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057be:	bf00      	nop
 80057c0:	e7f0      	b.n	80057a4 <prvTimerTask+0x8>
	...

080057c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80057ce:	f7ff f929 	bl	8004a24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057d2:	f107 0308 	add.w	r3, r7, #8
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 f866 	bl	80058a8 <prvSampleTimeNow>
 80057dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d130      	bne.n	8005846 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10a      	bne.n	8005800 <prvProcessTimerOrBlockTask+0x3c>
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d806      	bhi.n	8005800 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80057f2:	f7ff f925 	bl	8004a40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80057f6:	68f9      	ldr	r1, [r7, #12]
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff ff81 	bl	8005700 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80057fe:	e024      	b.n	800584a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d008      	beq.n	8005818 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005806:	4b13      	ldr	r3, [pc, #76]	@ (8005854 <prvProcessTimerOrBlockTask+0x90>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <prvProcessTimerOrBlockTask+0x50>
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <prvProcessTimerOrBlockTask+0x52>
 8005814:	2300      	movs	r3, #0
 8005816:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005818:	4b0f      	ldr	r3, [pc, #60]	@ (8005858 <prvProcessTimerOrBlockTask+0x94>)
 800581a:	6818      	ldr	r0, [r3, #0]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	4619      	mov	r1, r3
 8005826:	f7fe fe65 	bl	80044f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800582a:	f7ff f909 	bl	8004a40 <xTaskResumeAll>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005834:	4b09      	ldr	r3, [pc, #36]	@ (800585c <prvProcessTimerOrBlockTask+0x98>)
 8005836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	f3bf 8f6f 	isb	sy
}
 8005844:	e001      	b.n	800584a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005846:	f7ff f8fb 	bl	8004a40 <xTaskResumeAll>
}
 800584a:	bf00      	nop
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20000de4 	.word	0x20000de4
 8005858:	20000de8 	.word	0x20000de8
 800585c:	e000ed04 	.word	0xe000ed04

08005860 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005868:	4b0e      	ldr	r3, [pc, #56]	@ (80058a4 <prvGetNextExpireTime+0x44>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <prvGetNextExpireTime+0x16>
 8005872:	2201      	movs	r2, #1
 8005874:	e000      	b.n	8005878 <prvGetNextExpireTime+0x18>
 8005876:	2200      	movs	r2, #0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d105      	bne.n	8005890 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005884:	4b07      	ldr	r3, [pc, #28]	@ (80058a4 <prvGetNextExpireTime+0x44>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	e001      	b.n	8005894 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005894:	68fb      	ldr	r3, [r7, #12]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	20000de0 	.word	0x20000de0

080058a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80058b0:	f7ff f964 	bl	8004b7c <xTaskGetTickCount>
 80058b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80058b6:	4b0b      	ldr	r3, [pc, #44]	@ (80058e4 <prvSampleTimeNow+0x3c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d205      	bcs.n	80058cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80058c0:	f000 f93a 	bl	8005b38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	e002      	b.n	80058d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80058d2:	4a04      	ldr	r2, [pc, #16]	@ (80058e4 <prvSampleTimeNow+0x3c>)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80058d8:	68fb      	ldr	r3, [r7, #12]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20000df0 	.word	0x20000df0

080058e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80058f6:	2300      	movs	r3, #0
 80058f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	429a      	cmp	r2, r3
 800590c:	d812      	bhi.n	8005934 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	1ad2      	subs	r2, r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	429a      	cmp	r2, r3
 800591a:	d302      	bcc.n	8005922 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800591c:	2301      	movs	r3, #1
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	e01b      	b.n	800595a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005922:	4b10      	ldr	r3, [pc, #64]	@ (8005964 <prvInsertTimerInActiveList+0x7c>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3304      	adds	r3, #4
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f7fd fd48 	bl	80033c2 <vListInsert>
 8005932:	e012      	b.n	800595a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d206      	bcs.n	800594a <prvInsertTimerInActiveList+0x62>
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d302      	bcc.n	800594a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005944:	2301      	movs	r3, #1
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	e007      	b.n	800595a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800594a:	4b07      	ldr	r3, [pc, #28]	@ (8005968 <prvInsertTimerInActiveList+0x80>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3304      	adds	r3, #4
 8005952:	4619      	mov	r1, r3
 8005954:	4610      	mov	r0, r2
 8005956:	f7fd fd34 	bl	80033c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800595a:	697b      	ldr	r3, [r7, #20]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20000de4 	.word	0x20000de4
 8005968:	20000de0 	.word	0x20000de0

0800596c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08e      	sub	sp, #56	@ 0x38
 8005970:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005972:	e0ce      	b.n	8005b12 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	da19      	bge.n	80059ae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800597a:	1d3b      	adds	r3, r7, #4
 800597c:	3304      	adds	r3, #4
 800597e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10b      	bne.n	800599e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	61fb      	str	r3, [r7, #28]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800599e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059a4:	6850      	ldr	r0, [r2, #4]
 80059a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059a8:	6892      	ldr	r2, [r2, #8]
 80059aa:	4611      	mov	r1, r2
 80059ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f2c0 80ae 	blt.w	8005b12 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80059ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d004      	beq.n	80059cc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c4:	3304      	adds	r3, #4
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fd fd34 	bl	8003434 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059cc:	463b      	mov	r3, r7
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7ff ff6a 	bl	80058a8 <prvSampleTimeNow>
 80059d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b09      	cmp	r3, #9
 80059da:	f200 8097 	bhi.w	8005b0c <prvProcessReceivedCommands+0x1a0>
 80059de:	a201      	add	r2, pc, #4	@ (adr r2, 80059e4 <prvProcessReceivedCommands+0x78>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	08005a0d 	.word	0x08005a0d
 80059e8:	08005a0d 	.word	0x08005a0d
 80059ec:	08005a0d 	.word	0x08005a0d
 80059f0:	08005a83 	.word	0x08005a83
 80059f4:	08005a97 	.word	0x08005a97
 80059f8:	08005ae3 	.word	0x08005ae3
 80059fc:	08005a0d 	.word	0x08005a0d
 8005a00:	08005a0d 	.word	0x08005a0d
 8005a04:	08005a83 	.word	0x08005a83
 8005a08:	08005a97 	.word	0x08005a97
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a12:	f043 0301 	orr.w	r3, r3, #1
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	18d1      	adds	r1, r2, r3
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a2c:	f7ff ff5c 	bl	80058e8 <prvInsertTimerInActiveList>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d06c      	beq.n	8005b10 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d061      	beq.n	8005b10 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	441a      	add	r2, r3
 8005a54:	2300      	movs	r3, #0
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a5e:	f7ff fe01 	bl	8005664 <xTimerGenericCommand>
 8005a62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d152      	bne.n	8005b10 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	61bb      	str	r3, [r7, #24]
}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	e7fd      	b.n	8005a7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a88:	f023 0301 	bic.w	r3, r3, #1
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005a94:	e03d      	b.n	8005b12 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a9c:	f043 0301 	orr.w	r3, r3, #1
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10b      	bne.n	8005ace <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	617b      	str	r3, [r7, #20]
}
 8005ac8:	bf00      	nop
 8005aca:	bf00      	nop
 8005acc:	e7fd      	b.n	8005aca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad4:	18d1      	adds	r1, r2, r3
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ada:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005adc:	f7ff ff04 	bl	80058e8 <prvInsertTimerInActiveList>
					break;
 8005ae0:	e017      	b.n	8005b12 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d103      	bne.n	8005af8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005af0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005af2:	f000 fbe9 	bl	80062c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005af6:	e00c      	b.n	8005b12 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005afe:	f023 0301 	bic.w	r3, r3, #1
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005b0a:	e002      	b.n	8005b12 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005b0c:	bf00      	nop
 8005b0e:	e000      	b.n	8005b12 <prvProcessReceivedCommands+0x1a6>
					break;
 8005b10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b12:	4b08      	ldr	r3, [pc, #32]	@ (8005b34 <prvProcessReceivedCommands+0x1c8>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	1d39      	adds	r1, r7, #4
 8005b18:	2200      	movs	r2, #0
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fe f898 	bl	8003c50 <xQueueReceive>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f47f af26 	bne.w	8005974 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005b28:	bf00      	nop
 8005b2a:	bf00      	nop
 8005b2c:	3730      	adds	r7, #48	@ 0x30
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	20000de8 	.word	0x20000de8

08005b38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b3e:	e049      	b.n	8005bd4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b40:	4b2e      	ldr	r3, [pc, #184]	@ (8005bfc <prvSwitchTimerLists+0xc4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8005bfc <prvSwitchTimerLists+0xc4>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fd fc6b 	bl	8003434 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d02f      	beq.n	8005bd4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d90e      	bls.n	8005ba4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b92:	4b1a      	ldr	r3, [pc, #104]	@ (8005bfc <prvSwitchTimerLists+0xc4>)
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3304      	adds	r3, #4
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	f7fd fc10 	bl	80033c2 <vListInsert>
 8005ba2:	e017      	b.n	8005bd4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	2100      	movs	r1, #0
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff fd58 	bl	8005664 <xTimerGenericCommand>
 8005bb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10b      	bne.n	8005bd4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	603b      	str	r3, [r7, #0]
}
 8005bce:	bf00      	nop
 8005bd0:	bf00      	nop
 8005bd2:	e7fd      	b.n	8005bd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bd4:	4b09      	ldr	r3, [pc, #36]	@ (8005bfc <prvSwitchTimerLists+0xc4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1b0      	bne.n	8005b40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005bde:	4b07      	ldr	r3, [pc, #28]	@ (8005bfc <prvSwitchTimerLists+0xc4>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005be4:	4b06      	ldr	r3, [pc, #24]	@ (8005c00 <prvSwitchTimerLists+0xc8>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a04      	ldr	r2, [pc, #16]	@ (8005bfc <prvSwitchTimerLists+0xc4>)
 8005bea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005bec:	4a04      	ldr	r2, [pc, #16]	@ (8005c00 <prvSwitchTimerLists+0xc8>)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	6013      	str	r3, [r2, #0]
}
 8005bf2:	bf00      	nop
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000de0 	.word	0x20000de0
 8005c00:	20000de4 	.word	0x20000de4

08005c04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c0a:	f000 f96d 	bl	8005ee8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c0e:	4b15      	ldr	r3, [pc, #84]	@ (8005c64 <prvCheckForValidListAndQueue+0x60>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d120      	bne.n	8005c58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c16:	4814      	ldr	r0, [pc, #80]	@ (8005c68 <prvCheckForValidListAndQueue+0x64>)
 8005c18:	f7fd fb82 	bl	8003320 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c1c:	4813      	ldr	r0, [pc, #76]	@ (8005c6c <prvCheckForValidListAndQueue+0x68>)
 8005c1e:	f7fd fb7f 	bl	8003320 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c22:	4b13      	ldr	r3, [pc, #76]	@ (8005c70 <prvCheckForValidListAndQueue+0x6c>)
 8005c24:	4a10      	ldr	r2, [pc, #64]	@ (8005c68 <prvCheckForValidListAndQueue+0x64>)
 8005c26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c28:	4b12      	ldr	r3, [pc, #72]	@ (8005c74 <prvCheckForValidListAndQueue+0x70>)
 8005c2a:	4a10      	ldr	r2, [pc, #64]	@ (8005c6c <prvCheckForValidListAndQueue+0x68>)
 8005c2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c2e:	2300      	movs	r3, #0
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	4b11      	ldr	r3, [pc, #68]	@ (8005c78 <prvCheckForValidListAndQueue+0x74>)
 8005c34:	4a11      	ldr	r2, [pc, #68]	@ (8005c7c <prvCheckForValidListAndQueue+0x78>)
 8005c36:	2110      	movs	r1, #16
 8005c38:	200a      	movs	r0, #10
 8005c3a:	f7fd fc8f 	bl	800355c <xQueueGenericCreateStatic>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	4a08      	ldr	r2, [pc, #32]	@ (8005c64 <prvCheckForValidListAndQueue+0x60>)
 8005c42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c44:	4b07      	ldr	r3, [pc, #28]	@ (8005c64 <prvCheckForValidListAndQueue+0x60>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c4c:	4b05      	ldr	r3, [pc, #20]	@ (8005c64 <prvCheckForValidListAndQueue+0x60>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	490b      	ldr	r1, [pc, #44]	@ (8005c80 <prvCheckForValidListAndQueue+0x7c>)
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fe fbfa 	bl	800444c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c58:	f000 f978 	bl	8005f4c <vPortExitCritical>
}
 8005c5c:	bf00      	nop
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20000de8 	.word	0x20000de8
 8005c68:	20000db8 	.word	0x20000db8
 8005c6c:	20000dcc 	.word	0x20000dcc
 8005c70:	20000de0 	.word	0x20000de0
 8005c74:	20000de4 	.word	0x20000de4
 8005c78:	20000e94 	.word	0x20000e94
 8005c7c:	20000df4 	.word	0x20000df4
 8005c80:	0800696c 	.word	0x0800696c

08005c84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3b04      	subs	r3, #4
 8005c94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3b04      	subs	r3, #4
 8005ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f023 0201 	bic.w	r2, r3, #1
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3b04      	subs	r3, #4
 8005cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8005ce8 <pxPortInitialiseStack+0x64>)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3b14      	subs	r3, #20
 8005cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3b04      	subs	r3, #4
 8005cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f06f 0202 	mvn.w	r2, #2
 8005cd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3b20      	subs	r3, #32
 8005cd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005cda:	68fb      	ldr	r3, [r7, #12]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	08005ced 	.word	0x08005ced

08005cec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005cf6:	4b13      	ldr	r3, [pc, #76]	@ (8005d44 <prvTaskExitError+0x58>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfe:	d00b      	beq.n	8005d18 <prvTaskExitError+0x2c>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	60fb      	str	r3, [r7, #12]
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	e7fd      	b.n	8005d14 <prvTaskExitError+0x28>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	60bb      	str	r3, [r7, #8]
}
 8005d2a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d2c:	bf00      	nop
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0fc      	beq.n	8005d2e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	2000000c 	.word	0x2000000c
	...

08005d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d50:	4b07      	ldr	r3, [pc, #28]	@ (8005d70 <pxCurrentTCBConst2>)
 8005d52:	6819      	ldr	r1, [r3, #0]
 8005d54:	6808      	ldr	r0, [r1, #0]
 8005d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5a:	f380 8809 	msr	PSP, r0
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f04f 0000 	mov.w	r0, #0
 8005d66:	f380 8811 	msr	BASEPRI, r0
 8005d6a:	4770      	bx	lr
 8005d6c:	f3af 8000 	nop.w

08005d70 <pxCurrentTCBConst2>:
 8005d70:	200008b8 	.word	0x200008b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop

08005d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d78:	4808      	ldr	r0, [pc, #32]	@ (8005d9c <prvPortStartFirstTask+0x24>)
 8005d7a:	6800      	ldr	r0, [r0, #0]
 8005d7c:	6800      	ldr	r0, [r0, #0]
 8005d7e:	f380 8808 	msr	MSP, r0
 8005d82:	f04f 0000 	mov.w	r0, #0
 8005d86:	f380 8814 	msr	CONTROL, r0
 8005d8a:	b662      	cpsie	i
 8005d8c:	b661      	cpsie	f
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	df00      	svc	0
 8005d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d9a:	bf00      	nop
 8005d9c:	e000ed08 	.word	0xe000ed08

08005da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005da6:	4b47      	ldr	r3, [pc, #284]	@ (8005ec4 <xPortStartScheduler+0x124>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a47      	ldr	r2, [pc, #284]	@ (8005ec8 <xPortStartScheduler+0x128>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d10b      	bne.n	8005dc8 <xPortStartScheduler+0x28>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	60fb      	str	r3, [r7, #12]
}
 8005dc2:	bf00      	nop
 8005dc4:	bf00      	nop
 8005dc6:	e7fd      	b.n	8005dc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005dc8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ec4 <xPortStartScheduler+0x124>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a3f      	ldr	r2, [pc, #252]	@ (8005ecc <xPortStartScheduler+0x12c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d10b      	bne.n	8005dea <xPortStartScheduler+0x4a>
	__asm volatile
 8005dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	613b      	str	r3, [r7, #16]
}
 8005de4:	bf00      	nop
 8005de6:	bf00      	nop
 8005de8:	e7fd      	b.n	8005de6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005dea:	4b39      	ldr	r3, [pc, #228]	@ (8005ed0 <xPortStartScheduler+0x130>)
 8005dec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	22ff      	movs	r2, #255	@ 0xff
 8005dfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	4b31      	ldr	r3, [pc, #196]	@ (8005ed4 <xPortStartScheduler+0x134>)
 8005e10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e12:	4b31      	ldr	r3, [pc, #196]	@ (8005ed8 <xPortStartScheduler+0x138>)
 8005e14:	2207      	movs	r2, #7
 8005e16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e18:	e009      	b.n	8005e2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8005ed8 <xPortStartScheduler+0x138>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	4a2d      	ldr	r2, [pc, #180]	@ (8005ed8 <xPortStartScheduler+0x138>)
 8005e22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e36:	2b80      	cmp	r3, #128	@ 0x80
 8005e38:	d0ef      	beq.n	8005e1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e3a:	4b27      	ldr	r3, [pc, #156]	@ (8005ed8 <xPortStartScheduler+0x138>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f1c3 0307 	rsb	r3, r3, #7
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d00b      	beq.n	8005e5e <xPortStartScheduler+0xbe>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	60bb      	str	r3, [r7, #8]
}
 8005e58:	bf00      	nop
 8005e5a:	bf00      	nop
 8005e5c:	e7fd      	b.n	8005e5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ed8 <xPortStartScheduler+0x138>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed8 <xPortStartScheduler+0x138>)
 8005e66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e68:	4b1b      	ldr	r3, [pc, #108]	@ (8005ed8 <xPortStartScheduler+0x138>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e70:	4a19      	ldr	r2, [pc, #100]	@ (8005ed8 <xPortStartScheduler+0x138>)
 8005e72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e7c:	4b17      	ldr	r3, [pc, #92]	@ (8005edc <xPortStartScheduler+0x13c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a16      	ldr	r2, [pc, #88]	@ (8005edc <xPortStartScheduler+0x13c>)
 8005e82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e88:	4b14      	ldr	r3, [pc, #80]	@ (8005edc <xPortStartScheduler+0x13c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a13      	ldr	r2, [pc, #76]	@ (8005edc <xPortStartScheduler+0x13c>)
 8005e8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005e92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e94:	f000 f8da 	bl	800604c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e98:	4b11      	ldr	r3, [pc, #68]	@ (8005ee0 <xPortStartScheduler+0x140>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e9e:	f000 f8f9 	bl	8006094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ea2:	4b10      	ldr	r3, [pc, #64]	@ (8005ee4 <xPortStartScheduler+0x144>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8005ee4 <xPortStartScheduler+0x144>)
 8005ea8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005eac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005eae:	f7ff ff63 	bl	8005d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005eb2:	f7fe ff2d 	bl	8004d10 <vTaskSwitchContext>
	prvTaskExitError();
 8005eb6:	f7ff ff19 	bl	8005cec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	e000ed00 	.word	0xe000ed00
 8005ec8:	410fc271 	.word	0x410fc271
 8005ecc:	410fc270 	.word	0x410fc270
 8005ed0:	e000e400 	.word	0xe000e400
 8005ed4:	20000ee4 	.word	0x20000ee4
 8005ed8:	20000ee8 	.word	0x20000ee8
 8005edc:	e000ed20 	.word	0xe000ed20
 8005ee0:	2000000c 	.word	0x2000000c
 8005ee4:	e000ef34 	.word	0xe000ef34

08005ee8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	607b      	str	r3, [r7, #4]
}
 8005f00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f02:	4b10      	ldr	r3, [pc, #64]	@ (8005f44 <vPortEnterCritical+0x5c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3301      	adds	r3, #1
 8005f08:	4a0e      	ldr	r2, [pc, #56]	@ (8005f44 <vPortEnterCritical+0x5c>)
 8005f0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f44 <vPortEnterCritical+0x5c>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d110      	bne.n	8005f36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f14:	4b0c      	ldr	r3, [pc, #48]	@ (8005f48 <vPortEnterCritical+0x60>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00b      	beq.n	8005f36 <vPortEnterCritical+0x4e>
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	603b      	str	r3, [r7, #0]
}
 8005f30:	bf00      	nop
 8005f32:	bf00      	nop
 8005f34:	e7fd      	b.n	8005f32 <vPortEnterCritical+0x4a>
	}
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	2000000c 	.word	0x2000000c
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f52:	4b12      	ldr	r3, [pc, #72]	@ (8005f9c <vPortExitCritical+0x50>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10b      	bne.n	8005f72 <vPortExitCritical+0x26>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	607b      	str	r3, [r7, #4]
}
 8005f6c:	bf00      	nop
 8005f6e:	bf00      	nop
 8005f70:	e7fd      	b.n	8005f6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f72:	4b0a      	ldr	r3, [pc, #40]	@ (8005f9c <vPortExitCritical+0x50>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	4a08      	ldr	r2, [pc, #32]	@ (8005f9c <vPortExitCritical+0x50>)
 8005f7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f7c:	4b07      	ldr	r3, [pc, #28]	@ (8005f9c <vPortExitCritical+0x50>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d105      	bne.n	8005f90 <vPortExitCritical+0x44>
 8005f84:	2300      	movs	r3, #0
 8005f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	f383 8811 	msr	BASEPRI, r3
}
 8005f8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	2000000c 	.word	0x2000000c

08005fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fa0:	f3ef 8009 	mrs	r0, PSP
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	4b15      	ldr	r3, [pc, #84]	@ (8006000 <pxCurrentTCBConst>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	f01e 0f10 	tst.w	lr, #16
 8005fb0:	bf08      	it	eq
 8005fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fba:	6010      	str	r0, [r2, #0]
 8005fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005fc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005fc4:	f380 8811 	msr	BASEPRI, r0
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f7fe fe9e 	bl	8004d10 <vTaskSwitchContext>
 8005fd4:	f04f 0000 	mov.w	r0, #0
 8005fd8:	f380 8811 	msr	BASEPRI, r0
 8005fdc:	bc09      	pop	{r0, r3}
 8005fde:	6819      	ldr	r1, [r3, #0]
 8005fe0:	6808      	ldr	r0, [r1, #0]
 8005fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe6:	f01e 0f10 	tst.w	lr, #16
 8005fea:	bf08      	it	eq
 8005fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ff0:	f380 8809 	msr	PSP, r0
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	f3af 8000 	nop.w

08006000 <pxCurrentTCBConst>:
 8006000:	200008b8 	.word	0x200008b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop

08006008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	607b      	str	r3, [r7, #4]
}
 8006020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006022:	f7fe fdbb 	bl	8004b9c <xTaskIncrementTick>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800602c:	4b06      	ldr	r3, [pc, #24]	@ (8006048 <xPortSysTickHandler+0x40>)
 800602e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	2300      	movs	r3, #0
 8006036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	f383 8811 	msr	BASEPRI, r3
}
 800603e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	e000ed04 	.word	0xe000ed04

0800604c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006050:	4b0b      	ldr	r3, [pc, #44]	@ (8006080 <vPortSetupTimerInterrupt+0x34>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006056:	4b0b      	ldr	r3, [pc, #44]	@ (8006084 <vPortSetupTimerInterrupt+0x38>)
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800605c:	4b0a      	ldr	r3, [pc, #40]	@ (8006088 <vPortSetupTimerInterrupt+0x3c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a0a      	ldr	r2, [pc, #40]	@ (800608c <vPortSetupTimerInterrupt+0x40>)
 8006062:	fba2 2303 	umull	r2, r3, r2, r3
 8006066:	099b      	lsrs	r3, r3, #6
 8006068:	4a09      	ldr	r2, [pc, #36]	@ (8006090 <vPortSetupTimerInterrupt+0x44>)
 800606a:	3b01      	subs	r3, #1
 800606c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800606e:	4b04      	ldr	r3, [pc, #16]	@ (8006080 <vPortSetupTimerInterrupt+0x34>)
 8006070:	2207      	movs	r2, #7
 8006072:	601a      	str	r2, [r3, #0]
}
 8006074:	bf00      	nop
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	e000e010 	.word	0xe000e010
 8006084:	e000e018 	.word	0xe000e018
 8006088:	20000000 	.word	0x20000000
 800608c:	10624dd3 	.word	0x10624dd3
 8006090:	e000e014 	.word	0xe000e014

08006094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006094:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80060a4 <vPortEnableVFP+0x10>
 8006098:	6801      	ldr	r1, [r0, #0]
 800609a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800609e:	6001      	str	r1, [r0, #0]
 80060a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060a2:	bf00      	nop
 80060a4:	e000ed88 	.word	0xe000ed88

080060a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060ae:	f3ef 8305 	mrs	r3, IPSR
 80060b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b0f      	cmp	r3, #15
 80060b8:	d915      	bls.n	80060e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060ba:	4a18      	ldr	r2, [pc, #96]	@ (800611c <vPortValidateInterruptPriority+0x74>)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4413      	add	r3, r2
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80060c4:	4b16      	ldr	r3, [pc, #88]	@ (8006120 <vPortValidateInterruptPriority+0x78>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	7afa      	ldrb	r2, [r7, #11]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d20b      	bcs.n	80060e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	607b      	str	r3, [r7, #4]
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	e7fd      	b.n	80060e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80060e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006124 <vPortValidateInterruptPriority+0x7c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80060ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006128 <vPortValidateInterruptPriority+0x80>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d90b      	bls.n	800610e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	603b      	str	r3, [r7, #0]
}
 8006108:	bf00      	nop
 800610a:	bf00      	nop
 800610c:	e7fd      	b.n	800610a <vPortValidateInterruptPriority+0x62>
	}
 800610e:	bf00      	nop
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	e000e3f0 	.word	0xe000e3f0
 8006120:	20000ee4 	.word	0x20000ee4
 8006124:	e000ed0c 	.word	0xe000ed0c
 8006128:	20000ee8 	.word	0x20000ee8

0800612c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08a      	sub	sp, #40	@ 0x28
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006134:	2300      	movs	r3, #0
 8006136:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006138:	f7fe fc74 	bl	8004a24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800613c:	4b5c      	ldr	r3, [pc, #368]	@ (80062b0 <pvPortMalloc+0x184>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006144:	f000 f924 	bl	8006390 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006148:	4b5a      	ldr	r3, [pc, #360]	@ (80062b4 <pvPortMalloc+0x188>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4013      	ands	r3, r2
 8006150:	2b00      	cmp	r3, #0
 8006152:	f040 8095 	bne.w	8006280 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01e      	beq.n	800619a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800615c:	2208      	movs	r2, #8
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4413      	add	r3, r2
 8006162:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	2b00      	cmp	r3, #0
 800616c:	d015      	beq.n	800619a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f023 0307 	bic.w	r3, r3, #7
 8006174:	3308      	adds	r3, #8
 8006176:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00b      	beq.n	800619a <pvPortMalloc+0x6e>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	617b      	str	r3, [r7, #20]
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop
 8006198:	e7fd      	b.n	8006196 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d06f      	beq.n	8006280 <pvPortMalloc+0x154>
 80061a0:	4b45      	ldr	r3, [pc, #276]	@ (80062b8 <pvPortMalloc+0x18c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d86a      	bhi.n	8006280 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061aa:	4b44      	ldr	r3, [pc, #272]	@ (80062bc <pvPortMalloc+0x190>)
 80061ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061ae:	4b43      	ldr	r3, [pc, #268]	@ (80062bc <pvPortMalloc+0x190>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061b4:	e004      	b.n	80061c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80061b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d903      	bls.n	80061d2 <pvPortMalloc+0xa6>
 80061ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f1      	bne.n	80061b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061d2:	4b37      	ldr	r3, [pc, #220]	@ (80062b0 <pvPortMalloc+0x184>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061d8:	429a      	cmp	r2, r3
 80061da:	d051      	beq.n	8006280 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2208      	movs	r2, #8
 80061e2:	4413      	add	r3, r2
 80061e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	1ad2      	subs	r2, r2, r3
 80061f6:	2308      	movs	r3, #8
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d920      	bls.n	8006240 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4413      	add	r3, r2
 8006204:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00b      	beq.n	8006228 <pvPortMalloc+0xfc>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	613b      	str	r3, [r7, #16]
}
 8006222:	bf00      	nop
 8006224:	bf00      	nop
 8006226:	e7fd      	b.n	8006224 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	1ad2      	subs	r2, r2, r3
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800623a:	69b8      	ldr	r0, [r7, #24]
 800623c:	f000 f90a 	bl	8006454 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006240:	4b1d      	ldr	r3, [pc, #116]	@ (80062b8 <pvPortMalloc+0x18c>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	4a1b      	ldr	r2, [pc, #108]	@ (80062b8 <pvPortMalloc+0x18c>)
 800624c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800624e:	4b1a      	ldr	r3, [pc, #104]	@ (80062b8 <pvPortMalloc+0x18c>)
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4b1b      	ldr	r3, [pc, #108]	@ (80062c0 <pvPortMalloc+0x194>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d203      	bcs.n	8006262 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800625a:	4b17      	ldr	r3, [pc, #92]	@ (80062b8 <pvPortMalloc+0x18c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a18      	ldr	r2, [pc, #96]	@ (80062c0 <pvPortMalloc+0x194>)
 8006260:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	4b13      	ldr	r3, [pc, #76]	@ (80062b4 <pvPortMalloc+0x188>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	431a      	orrs	r2, r3
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006276:	4b13      	ldr	r3, [pc, #76]	@ (80062c4 <pvPortMalloc+0x198>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3301      	adds	r3, #1
 800627c:	4a11      	ldr	r2, [pc, #68]	@ (80062c4 <pvPortMalloc+0x198>)
 800627e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006280:	f7fe fbde 	bl	8004a40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00b      	beq.n	80062a6 <pvPortMalloc+0x17a>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	60fb      	str	r3, [r7, #12]
}
 80062a0:	bf00      	nop
 80062a2:	bf00      	nop
 80062a4:	e7fd      	b.n	80062a2 <pvPortMalloc+0x176>
	return pvReturn;
 80062a6:	69fb      	ldr	r3, [r7, #28]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3728      	adds	r7, #40	@ 0x28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	20004af4 	.word	0x20004af4
 80062b4:	20004b08 	.word	0x20004b08
 80062b8:	20004af8 	.word	0x20004af8
 80062bc:	20004aec 	.word	0x20004aec
 80062c0:	20004afc 	.word	0x20004afc
 80062c4:	20004b00 	.word	0x20004b00

080062c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d04f      	beq.n	800637a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80062da:	2308      	movs	r3, #8
 80062dc:	425b      	negs	r3, r3
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4413      	add	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	4b25      	ldr	r3, [pc, #148]	@ (8006384 <vPortFree+0xbc>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4013      	ands	r3, r2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10b      	bne.n	800630e <vPortFree+0x46>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	60fb      	str	r3, [r7, #12]
}
 8006308:	bf00      	nop
 800630a:	bf00      	nop
 800630c:	e7fd      	b.n	800630a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00b      	beq.n	800632e <vPortFree+0x66>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	60bb      	str	r3, [r7, #8]
}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	e7fd      	b.n	800632a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	4b14      	ldr	r3, [pc, #80]	@ (8006384 <vPortFree+0xbc>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4013      	ands	r3, r2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d01e      	beq.n	800637a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d11a      	bne.n	800637a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	4b0e      	ldr	r3, [pc, #56]	@ (8006384 <vPortFree+0xbc>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	43db      	mvns	r3, r3
 800634e:	401a      	ands	r2, r3
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006354:	f7fe fb66 	bl	8004a24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	4b0a      	ldr	r3, [pc, #40]	@ (8006388 <vPortFree+0xc0>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4413      	add	r3, r2
 8006362:	4a09      	ldr	r2, [pc, #36]	@ (8006388 <vPortFree+0xc0>)
 8006364:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006366:	6938      	ldr	r0, [r7, #16]
 8006368:	f000 f874 	bl	8006454 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800636c:	4b07      	ldr	r3, [pc, #28]	@ (800638c <vPortFree+0xc4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3301      	adds	r3, #1
 8006372:	4a06      	ldr	r2, [pc, #24]	@ (800638c <vPortFree+0xc4>)
 8006374:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006376:	f7fe fb63 	bl	8004a40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800637a:	bf00      	nop
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20004b08 	.word	0x20004b08
 8006388:	20004af8 	.word	0x20004af8
 800638c:	20004b04 	.word	0x20004b04

08006390 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006396:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800639a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800639c:	4b27      	ldr	r3, [pc, #156]	@ (800643c <prvHeapInit+0xac>)
 800639e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00c      	beq.n	80063c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3307      	adds	r3, #7
 80063ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0307 	bic.w	r3, r3, #7
 80063b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	4a1f      	ldr	r2, [pc, #124]	@ (800643c <prvHeapInit+0xac>)
 80063c0:	4413      	add	r3, r2
 80063c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006440 <prvHeapInit+0xb0>)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006440 <prvHeapInit+0xb0>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	4413      	add	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063dc:	2208      	movs	r2, #8
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	1a9b      	subs	r3, r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0307 	bic.w	r3, r3, #7
 80063ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4a15      	ldr	r2, [pc, #84]	@ (8006444 <prvHeapInit+0xb4>)
 80063f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063f2:	4b14      	ldr	r3, [pc, #80]	@ (8006444 <prvHeapInit+0xb4>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2200      	movs	r2, #0
 80063f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063fa:	4b12      	ldr	r3, [pc, #72]	@ (8006444 <prvHeapInit+0xb4>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	1ad2      	subs	r2, r2, r3
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006410:	4b0c      	ldr	r3, [pc, #48]	@ (8006444 <prvHeapInit+0xb4>)
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	4a0a      	ldr	r2, [pc, #40]	@ (8006448 <prvHeapInit+0xb8>)
 800641e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	4a09      	ldr	r2, [pc, #36]	@ (800644c <prvHeapInit+0xbc>)
 8006426:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006428:	4b09      	ldr	r3, [pc, #36]	@ (8006450 <prvHeapInit+0xc0>)
 800642a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800642e:	601a      	str	r2, [r3, #0]
}
 8006430:	bf00      	nop
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	20000eec 	.word	0x20000eec
 8006440:	20004aec 	.word	0x20004aec
 8006444:	20004af4 	.word	0x20004af4
 8006448:	20004afc 	.word	0x20004afc
 800644c:	20004af8 	.word	0x20004af8
 8006450:	20004b08 	.word	0x20004b08

08006454 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800645c:	4b28      	ldr	r3, [pc, #160]	@ (8006500 <prvInsertBlockIntoFreeList+0xac>)
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	e002      	b.n	8006468 <prvInsertBlockIntoFreeList+0x14>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	429a      	cmp	r2, r3
 8006470:	d8f7      	bhi.n	8006462 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	4413      	add	r3, r2
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	429a      	cmp	r2, r3
 8006482:	d108      	bne.n	8006496 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	441a      	add	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	441a      	add	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d118      	bne.n	80064dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	4b15      	ldr	r3, [pc, #84]	@ (8006504 <prvInsertBlockIntoFreeList+0xb0>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d00d      	beq.n	80064d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	441a      	add	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	e008      	b.n	80064e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006504 <prvInsertBlockIntoFreeList+0xb0>)
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	e003      	b.n	80064e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d002      	beq.n	80064f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064f2:	bf00      	nop
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	20004aec 	.word	0x20004aec
 8006504:	20004af4 	.word	0x20004af4

08006508 <memset>:
 8006508:	4402      	add	r2, r0
 800650a:	4603      	mov	r3, r0
 800650c:	4293      	cmp	r3, r2
 800650e:	d100      	bne.n	8006512 <memset+0xa>
 8006510:	4770      	bx	lr
 8006512:	f803 1b01 	strb.w	r1, [r3], #1
 8006516:	e7f9      	b.n	800650c <memset+0x4>

08006518 <_reclaim_reent>:
 8006518:	4b2d      	ldr	r3, [pc, #180]	@ (80065d0 <_reclaim_reent+0xb8>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4283      	cmp	r3, r0
 800651e:	b570      	push	{r4, r5, r6, lr}
 8006520:	4604      	mov	r4, r0
 8006522:	d053      	beq.n	80065cc <_reclaim_reent+0xb4>
 8006524:	69c3      	ldr	r3, [r0, #28]
 8006526:	b31b      	cbz	r3, 8006570 <_reclaim_reent+0x58>
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	b163      	cbz	r3, 8006546 <_reclaim_reent+0x2e>
 800652c:	2500      	movs	r5, #0
 800652e:	69e3      	ldr	r3, [r4, #28]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	5959      	ldr	r1, [r3, r5]
 8006534:	b9b1      	cbnz	r1, 8006564 <_reclaim_reent+0x4c>
 8006536:	3504      	adds	r5, #4
 8006538:	2d80      	cmp	r5, #128	@ 0x80
 800653a:	d1f8      	bne.n	800652e <_reclaim_reent+0x16>
 800653c:	69e3      	ldr	r3, [r4, #28]
 800653e:	4620      	mov	r0, r4
 8006540:	68d9      	ldr	r1, [r3, #12]
 8006542:	f000 f87b 	bl	800663c <_free_r>
 8006546:	69e3      	ldr	r3, [r4, #28]
 8006548:	6819      	ldr	r1, [r3, #0]
 800654a:	b111      	cbz	r1, 8006552 <_reclaim_reent+0x3a>
 800654c:	4620      	mov	r0, r4
 800654e:	f000 f875 	bl	800663c <_free_r>
 8006552:	69e3      	ldr	r3, [r4, #28]
 8006554:	689d      	ldr	r5, [r3, #8]
 8006556:	b15d      	cbz	r5, 8006570 <_reclaim_reent+0x58>
 8006558:	4629      	mov	r1, r5
 800655a:	4620      	mov	r0, r4
 800655c:	682d      	ldr	r5, [r5, #0]
 800655e:	f000 f86d 	bl	800663c <_free_r>
 8006562:	e7f8      	b.n	8006556 <_reclaim_reent+0x3e>
 8006564:	680e      	ldr	r6, [r1, #0]
 8006566:	4620      	mov	r0, r4
 8006568:	f000 f868 	bl	800663c <_free_r>
 800656c:	4631      	mov	r1, r6
 800656e:	e7e1      	b.n	8006534 <_reclaim_reent+0x1c>
 8006570:	6961      	ldr	r1, [r4, #20]
 8006572:	b111      	cbz	r1, 800657a <_reclaim_reent+0x62>
 8006574:	4620      	mov	r0, r4
 8006576:	f000 f861 	bl	800663c <_free_r>
 800657a:	69e1      	ldr	r1, [r4, #28]
 800657c:	b111      	cbz	r1, 8006584 <_reclaim_reent+0x6c>
 800657e:	4620      	mov	r0, r4
 8006580:	f000 f85c 	bl	800663c <_free_r>
 8006584:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006586:	b111      	cbz	r1, 800658e <_reclaim_reent+0x76>
 8006588:	4620      	mov	r0, r4
 800658a:	f000 f857 	bl	800663c <_free_r>
 800658e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006590:	b111      	cbz	r1, 8006598 <_reclaim_reent+0x80>
 8006592:	4620      	mov	r0, r4
 8006594:	f000 f852 	bl	800663c <_free_r>
 8006598:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800659a:	b111      	cbz	r1, 80065a2 <_reclaim_reent+0x8a>
 800659c:	4620      	mov	r0, r4
 800659e:	f000 f84d 	bl	800663c <_free_r>
 80065a2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80065a4:	b111      	cbz	r1, 80065ac <_reclaim_reent+0x94>
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 f848 	bl	800663c <_free_r>
 80065ac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80065ae:	b111      	cbz	r1, 80065b6 <_reclaim_reent+0x9e>
 80065b0:	4620      	mov	r0, r4
 80065b2:	f000 f843 	bl	800663c <_free_r>
 80065b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80065b8:	b111      	cbz	r1, 80065c0 <_reclaim_reent+0xa8>
 80065ba:	4620      	mov	r0, r4
 80065bc:	f000 f83e 	bl	800663c <_free_r>
 80065c0:	6a23      	ldr	r3, [r4, #32]
 80065c2:	b11b      	cbz	r3, 80065cc <_reclaim_reent+0xb4>
 80065c4:	4620      	mov	r0, r4
 80065c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065ca:	4718      	bx	r3
 80065cc:	bd70      	pop	{r4, r5, r6, pc}
 80065ce:	bf00      	nop
 80065d0:	20000010 	.word	0x20000010

080065d4 <__libc_init_array>:
 80065d4:	b570      	push	{r4, r5, r6, lr}
 80065d6:	4d0d      	ldr	r5, [pc, #52]	@ (800660c <__libc_init_array+0x38>)
 80065d8:	4c0d      	ldr	r4, [pc, #52]	@ (8006610 <__libc_init_array+0x3c>)
 80065da:	1b64      	subs	r4, r4, r5
 80065dc:	10a4      	asrs	r4, r4, #2
 80065de:	2600      	movs	r6, #0
 80065e0:	42a6      	cmp	r6, r4
 80065e2:	d109      	bne.n	80065f8 <__libc_init_array+0x24>
 80065e4:	4d0b      	ldr	r5, [pc, #44]	@ (8006614 <__libc_init_array+0x40>)
 80065e6:	4c0c      	ldr	r4, [pc, #48]	@ (8006618 <__libc_init_array+0x44>)
 80065e8:	f000 f87e 	bl	80066e8 <_init>
 80065ec:	1b64      	subs	r4, r4, r5
 80065ee:	10a4      	asrs	r4, r4, #2
 80065f0:	2600      	movs	r6, #0
 80065f2:	42a6      	cmp	r6, r4
 80065f4:	d105      	bne.n	8006602 <__libc_init_array+0x2e>
 80065f6:	bd70      	pop	{r4, r5, r6, pc}
 80065f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fc:	4798      	blx	r3
 80065fe:	3601      	adds	r6, #1
 8006600:	e7ee      	b.n	80065e0 <__libc_init_array+0xc>
 8006602:	f855 3b04 	ldr.w	r3, [r5], #4
 8006606:	4798      	blx	r3
 8006608:	3601      	adds	r6, #1
 800660a:	e7f2      	b.n	80065f2 <__libc_init_array+0x1e>
 800660c:	08006a34 	.word	0x08006a34
 8006610:	08006a34 	.word	0x08006a34
 8006614:	08006a34 	.word	0x08006a34
 8006618:	08006a38 	.word	0x08006a38

0800661c <__retarget_lock_acquire_recursive>:
 800661c:	4770      	bx	lr

0800661e <__retarget_lock_release_recursive>:
 800661e:	4770      	bx	lr

08006620 <memcpy>:
 8006620:	440a      	add	r2, r1
 8006622:	4291      	cmp	r1, r2
 8006624:	f100 33ff 	add.w	r3, r0, #4294967295
 8006628:	d100      	bne.n	800662c <memcpy+0xc>
 800662a:	4770      	bx	lr
 800662c:	b510      	push	{r4, lr}
 800662e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006632:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006636:	4291      	cmp	r1, r2
 8006638:	d1f9      	bne.n	800662e <memcpy+0xe>
 800663a:	bd10      	pop	{r4, pc}

0800663c <_free_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	4605      	mov	r5, r0
 8006640:	2900      	cmp	r1, #0
 8006642:	d041      	beq.n	80066c8 <_free_r+0x8c>
 8006644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006648:	1f0c      	subs	r4, r1, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	bfb8      	it	lt
 800664e:	18e4      	addlt	r4, r4, r3
 8006650:	f000 f83e 	bl	80066d0 <__malloc_lock>
 8006654:	4a1d      	ldr	r2, [pc, #116]	@ (80066cc <_free_r+0x90>)
 8006656:	6813      	ldr	r3, [r2, #0]
 8006658:	b933      	cbnz	r3, 8006668 <_free_r+0x2c>
 800665a:	6063      	str	r3, [r4, #4]
 800665c:	6014      	str	r4, [r2, #0]
 800665e:	4628      	mov	r0, r5
 8006660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006664:	f000 b83a 	b.w	80066dc <__malloc_unlock>
 8006668:	42a3      	cmp	r3, r4
 800666a:	d908      	bls.n	800667e <_free_r+0x42>
 800666c:	6820      	ldr	r0, [r4, #0]
 800666e:	1821      	adds	r1, r4, r0
 8006670:	428b      	cmp	r3, r1
 8006672:	bf01      	itttt	eq
 8006674:	6819      	ldreq	r1, [r3, #0]
 8006676:	685b      	ldreq	r3, [r3, #4]
 8006678:	1809      	addeq	r1, r1, r0
 800667a:	6021      	streq	r1, [r4, #0]
 800667c:	e7ed      	b.n	800665a <_free_r+0x1e>
 800667e:	461a      	mov	r2, r3
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	b10b      	cbz	r3, 8006688 <_free_r+0x4c>
 8006684:	42a3      	cmp	r3, r4
 8006686:	d9fa      	bls.n	800667e <_free_r+0x42>
 8006688:	6811      	ldr	r1, [r2, #0]
 800668a:	1850      	adds	r0, r2, r1
 800668c:	42a0      	cmp	r0, r4
 800668e:	d10b      	bne.n	80066a8 <_free_r+0x6c>
 8006690:	6820      	ldr	r0, [r4, #0]
 8006692:	4401      	add	r1, r0
 8006694:	1850      	adds	r0, r2, r1
 8006696:	4283      	cmp	r3, r0
 8006698:	6011      	str	r1, [r2, #0]
 800669a:	d1e0      	bne.n	800665e <_free_r+0x22>
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	6053      	str	r3, [r2, #4]
 80066a2:	4408      	add	r0, r1
 80066a4:	6010      	str	r0, [r2, #0]
 80066a6:	e7da      	b.n	800665e <_free_r+0x22>
 80066a8:	d902      	bls.n	80066b0 <_free_r+0x74>
 80066aa:	230c      	movs	r3, #12
 80066ac:	602b      	str	r3, [r5, #0]
 80066ae:	e7d6      	b.n	800665e <_free_r+0x22>
 80066b0:	6820      	ldr	r0, [r4, #0]
 80066b2:	1821      	adds	r1, r4, r0
 80066b4:	428b      	cmp	r3, r1
 80066b6:	bf04      	itt	eq
 80066b8:	6819      	ldreq	r1, [r3, #0]
 80066ba:	685b      	ldreq	r3, [r3, #4]
 80066bc:	6063      	str	r3, [r4, #4]
 80066be:	bf04      	itt	eq
 80066c0:	1809      	addeq	r1, r1, r0
 80066c2:	6021      	streq	r1, [r4, #0]
 80066c4:	6054      	str	r4, [r2, #4]
 80066c6:	e7ca      	b.n	800665e <_free_r+0x22>
 80066c8:	bd38      	pop	{r3, r4, r5, pc}
 80066ca:	bf00      	nop
 80066cc:	20004c48 	.word	0x20004c48

080066d0 <__malloc_lock>:
 80066d0:	4801      	ldr	r0, [pc, #4]	@ (80066d8 <__malloc_lock+0x8>)
 80066d2:	f7ff bfa3 	b.w	800661c <__retarget_lock_acquire_recursive>
 80066d6:	bf00      	nop
 80066d8:	20004c44 	.word	0x20004c44

080066dc <__malloc_unlock>:
 80066dc:	4801      	ldr	r0, [pc, #4]	@ (80066e4 <__malloc_unlock+0x8>)
 80066de:	f7ff bf9e 	b.w	800661e <__retarget_lock_release_recursive>
 80066e2:	bf00      	nop
 80066e4:	20004c44 	.word	0x20004c44

080066e8 <_init>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	bf00      	nop
 80066ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ee:	bc08      	pop	{r3}
 80066f0:	469e      	mov	lr, r3
 80066f2:	4770      	bx	lr

080066f4 <_fini>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	bf00      	nop
 80066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fa:	bc08      	pop	{r3}
 80066fc:	469e      	mov	lr, r3
 80066fe:	4770      	bx	lr
